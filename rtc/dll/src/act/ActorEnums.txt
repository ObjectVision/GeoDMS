
//----------------------------------------------------------------------
// enums ProgressState
//----------------------------------------------------------------------

// an actor can be in any of the following Transient States
// 0: none
// 1: Constructing the IntegrityCheck Calculator
// 2: Determining Last Time stamp (redone when LastChecked < System::LastTS) which includes Visist to all Suppliers which includes constructing the calculator and GetReferredItem
//      This Transient state can be completed with DoInvalidate which clear all data and failure info related to levels higher that StateReady
// 3: Set Interest Count on suppliers for data processing. Only suppliers who's processing can be suspended count.
// 4: Update MetaInfo resulting in knowing the set of all sub-items and properties except Data and Integrity but including projection and/or metric of units
// 5: Preparing the availability of the Primary Data (DataItem) or Range and Tile Info (Unit).
// 6: Committing Data
// 7: Validation: application 
// while being in any of these states, an item is not allowed to enter into a higher state, but is allowed to go into a lower state

// an actor can become
// State Ready, indicated by lastCheckTS == UpdateMarker::GetLastTS() -> m_Calculator has been determined
// MetaData ready, indicated by PS_MetaInfo
// dataInMem|dataAllocated, which implies PS_MetaInfo
// Validated or checked
// Committed, which implies successfull validation

// Meta Info  -> Succeeded or Failed (error in calculation rule or unit spec or error in getting supplier to the required process level).
// Data Ready -> Succeeded or Failed
// Validated  -> Succeeded or Failed
// Committed only if both DataReady and Validated are not failed.

// InterestCount must be set on all items that will be suspendible calculated or that are on the path to that. This includes items that will be committed or validated
// issue 157: View first updates to PS_DataReady (which processes whole tree) and the commit so this would maintain most intermediates.
// solution: never ask DataReady and then Validate and then Commit, but go immediately to the desired level
// this implies continuation of processing after failures of validation and/or commit in order to continue to process data for diagnostic purposes.

// ===== Interest Counting
// Given some items on which iterest is casted, then interest is also administered on suppliers insofar they are required to generate the primary data, 
// thus not if that data is already available in Memory or CalcCache and only the suppliers that are needed for suspendible processsing
// once Data is Allocated, SupplInterest is dropped.
//
// Validation:
// All suppliers (visited by DetermineState) with IntegrityChecks have Interest casted on the Validation Expressions until it is determined.
// After determination of the validation state and absorbing it into the actor state, the interest cast is removed.
//
// Committing data to an export:
// IF an export definition with (some) suppliers of an item that needs to be updated need to be executed
// 
// Thus: An item's interest 
// - can be owned by a Gui element (more specifically, by an InterestPtr)
// - can be owned by a consumer with interest but no DataAllocated, indicated by AF_SupplInterest
// - can be owned by a validator, even if it is for an item that is only formally a supplier (such as on already processed input data). 
// - can be owned by a Commit action that is part of th(when issue 157 is resolved) indicated by XXX


// Thread safety
// When setting 
