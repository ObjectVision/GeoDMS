Multi Threading and Exceptions:
- each MT2 thread has a ResultHolder
- exceptions should be progressed to consumers of a thread's result.
	- each MT2 thread's exception should caught and registered as failreason of resultHolder->m_Data before releasing its ItemWriteLock.
	- a thread is consuming an item if it (tries to) set an ItemReadLock on that item.
	- ItemReadLock should throw ant FR_Data fail-reason.

Zero consumers / interest-lock decreas (due to stack unwinding and/or user interaction such as CloseWindow)
- Cancel when detected
- 

change plan:
- remove editable configdata
- ItemWriteLock: task
- ItemReadLock := task.when_all
- DataWriteLock: promise<X> with  x = vector<future<tile>>
- DataReadLock:  future<X>
- tile_read_lcok, 


Issue 
1 - exception forwarding across thread continuations
2 - calcellation of threads when all consumers terminate
3 - meta info etc, asked from Calc task in Poly2Grid, Overlay, DiscrAlloc, Raster_Merge are not allowed in WorkingThreads
4 - in cs_lock_map:ReadLock() should call PrepareReadAccess() only when m_Count == 0 and then hold until lock is given or refused. Count 0->1->0 with related parent stuff should be an atomic operation.
5 - Deadlock on DataStorerManager::OpenData() -> GetNrTiles() -> ItemReadLock() vs ItemWriteLock() -> Unit::SetRange() -> DSM::GetUnitDCPairPtr due to too wide critical_section on DSM.
6 - DataReadLock -> OpenData must be synchronized.
7 - DataReadLocks are normally only set within the context of Interest. Interest is a synchronized resource. 
    At its termination TryCleanupMem is called (synchronized by Interest). 
    When Interest disappears due to an exception while a worker thread holds or is about to set a DataReadLock, TryReadLock should be postponed until DataReadLock terminates, while keeping in sync with the interestcount adm.
8 - ItemReadLocks within the context of ItemWriteLocks should be avoided (as is done for DataReadLocks within DataWriteLocks).
    When such a collision is detected, either a wait (when concurrent) or throw (when in context) should follow.

Solutions 
+ ad 1: catch any forwardable exception in the operator's task and  fail the resultsHolder's new Item on which a ItemWriteLock was set
- ad 2: throw cancel when ItemReadLock gets a FR_Data failure.

- ad 3: CalcResult closure of WorkTask from MainThread
  default: [&]() { oper->CreateResult(resultHolder, argcCopyPtr->m_Args, true);
+ ad 6: OpenData is now done by DataReadLockAtom when m_DataLockCount synchroneously goes from 0->1.

- make ItemWriteLock movable and create from MainThread
  ! Werkt niet want unlock moet vanuit locking context worden aangeroepen.
  
  
DataStoreManager issues
phases in CalcResult
1. parse exprStr -> LispRef
2. rewrite(LispRef, call-args) -> decontextualized LispRef
3. arg.phase(5) -> determine arg item types
4. find operator
5. (dynamic_result_tye) ? operator.CalcMetaInfo : operator.GetResultType -> ResultType
6. operator.CalcMetaInfo -> Resulting CacheTree + optional CalcState
7. suspendible operator.CalcResult -> CalcResult + optional CalcState


Phases and Characteristics in OpenData
DataObj::OpenData->

DataWriteLock
<->ADI::CreateMemoryStorage
<->DAB::DoCreateMemoryStorage
->DSM::CreateFileData
->DSM::OpenFileData
	->DAB::DoCreateMappedFiles
		->DAB::DoCreateMappedFile
	->DAB->OpenData
	->SO->Open(m_Seqs[t], TileSize, rwMode, isTmp sfwa)
	->mappable_sequence::Open(seq, nrElem, rmMode, 


DRL
->DSM::OpenFileData