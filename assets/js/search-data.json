{"0": {
    "doc": "(registry)-settings",
    "title": "registry path",
    "content": "The path for most of the settings in the registry is: . Computer\\HKEY_CURRENT_USER\\Software\\ObjectVision\\%ComputerName%\\GeoDMS. This means the settings are user and machine specific. Only the set of recent files is located in: . Computer\\HKEY_CURRENT_USER\\Software\\ObjectVision\\DMS\\RecentFiles . In earlier versions settings were also stored in Computer\\HKEY_CURRENT_USER\\Software\\ObjectVision\\DMS. You might find some settings here, but new GeoDMS versions do not use these anymore. ",
    "url": "/docs/(registry)-settings.html#registry-path",
    
    "relUrl": "/docs/(registry)-settings.html#registry-path"
  },"1": {
    "doc": "(registry)-settings",
    "title": "settings",
    "content": ". | DmsEditor: path to the configuration-file-editor. This path can be set/edited with the geodms-gui, Tools &gt; Options &gt; General Settings &gt; External programs &gt; DMS editor. | ErrBoxHeight: the height of the last size of the error box. The size of the Error dialog can be changed from the control in the the right corner, this size is stored. | ErrBoxWidth: the width of the last size of the error box. The size of the Error dialog can be changed from the control in the the right corner, this size is stored. | FuncList: an url referring to where the list of operators and functions can be found (default: https://www.geodms.nl/operators-a-functions). The url is activated with the geodms-gui, Help &gt; Index menu. | GeneralUrl: an url referring to root file of the GeoDMS documentation (default: https://www.geodms.nl), currently not in use. | HelpFileUrl: an url referring to the root file for the help documentation (default: https://www.geodms.nl). The url is activated with the geodms-gui, Help &gt; Online menu. | LastConfigFile: the path to the last opened configuration, a new GeoDMS applicatiion starts with this last opened configuration. Open another configuration with the geodms-gui, File &gt; Open configuration dialog to open a new configuration. | LocalDataDir: the path to the localdatadir, where temporary results are stored. This path can be set/edited with the geodms-gui, Tools &gt; Options &gt; General Settings &gt; LocalDataDir. | MemoryFlushThreshold: a percentage used to indicate the size of the internal ram memory that might be used before data is flushed to disk.The percentage can be set/edited with the geodms-gui, Tools &gt; Options &gt; Current configuration &gt; Treshold for Memory Flushing wait procedure. It is advised to keep this setting to it’s default value. | SourceDataDir: the path to the sourcedatadir, where source data for one or more projects are stored. This path can be set/edited with the geodms-gui, Tools &gt; Options &gt; General Settings &gt; SourceDataDir. | SatusFlags: a value indicating multiple status flags (e.g. if parallel processing is in use). These settings can be set/edited with the geodms-gui, Tools &gt; Options &gt; General Settings &gt; User modes. | SwapfileMinSize: before GeoDMS 8, data items were stored in the CalcCache if they apply to certain conditions. One of the conditions was the minimum data size, which can be set/edited with the geodms-gui, Tools &gt; Options &gt; Current configuration &gt; Minimum size for DataItem specific swapfiles in CalcCache. This setting is not in use for the GeoDMS 8 serie. | RecentFiles: the set of recently opened configuration files. | . Multiple other entries might be stored in the registry. These are configuration settings from a specific configuration that can be used in other projects as well. Use the following syntax to configure such settings: . container ConfigSettings  {    container Overridable     {       parameter&lt;string&gt; CBSDir: ['%sourceDataDir%/CBS'];    } } . The values for these settings can be edited with the geodms-gui, Tools &gt; Options &gt; Tab: Configuration . ",
    "url": "/docs/(registry)-settings.html#settings",
    
    "relUrl": "/docs/(registry)-settings.html#settings"
  },"2": {
    "doc": "(registry)-settings",
    "title": "(registry)-settings",
    "content": "The GeoDMS stores settings, in use for multiple projects, in the Window Registry. In earlier versions of the GeoDMS these settings were also partly stored in a config.ini file. The settings are in use for all projects and installed GeoDMS versions on your local machine. ",
    "url": "/docs/(registry)-settings.html",
    
    "relUrl": "/docs/(registry)-settings.html"
  },"3": {
    "doc": "1---n-timestamps-with-internal-damage-region-list",
    "title": "Description",
    "content": "The major difference between this design and the current design is that instead of using a globally managed timestamp, multiple indepdendent timestamps are used. Each operation manages its own timestamp. Because the timestamps of multiple operations are no longer in sync, consumers must use a different tracking timestamp for each source: 1 (operation) + n (one for each source) timestamps per operation. The primary data sources still use one centrally managed timestamp in the same way as is done in the current model. To be able to implement incremental updating, postponing of updates and minimizing recalculation, each operation keeps an internal list with damage regions describing what parts must be recalculated. This list is updated with the unprocessed damage regions of all the sources during the update process. Note that the text below assumes complex operations. Simpler operations will be treated the same but generic values for damage regions (completely changed) and areas of interest (everything) will be used instead. ",
    "url": "/docs/1---n-timestamps-with-internal-damage-region-list.html#description",
    
    "relUrl": "/docs/1---n-timestamps-with-internal-damage-region-list.html#description"
  },"4": {
    "doc": "1---n-timestamps-with-internal-damage-region-list",
    "title": "Global algorithm for operations",
    "content": "When an operation is asked to update itself the following procedure is used: . | Retrieve the unprocessed damage regions from the sources. The tracking timestamp for each source is used to determine what the unprocessed damage regions are. After retrieving the damage regions the tracking timestamp is set to the current timestamp of the source. | Merge the retrieved damage regions with the internal list of damage regions. If needed the damage regions of the sources are translated to the damage regions of the operation. During the merge the damage regions are coalesced to prevent overlapping regions (and subsequent redundant recalculation). | Retrieve the damage regions matching the area of interest from the list and process them. | When finished (continue flag returns ‘false’, area of interest recalculated, or damage region list emtpy) generate damage regions for each of the outputs based on the progress that has been made. Assign the output damage regions the current timestamp of the operation. Also any unprocessed parts of the last damage region are readded to the damage region list so they will be processed during the next update. | Increase the timestamp of the operation. | . The order in which the actions of the procedure above are performed may be significantly different in the actual implementation. ",
    "url": "/docs/1---n-timestamps-with-internal-damage-region-list.html#global-algorithm-for-operations",
    
    "relUrl": "/docs/1---n-timestamps-with-internal-damage-region-list.html#global-algorithm-for-operations"
  },"5": {
    "doc": "1---n-timestamps-with-internal-damage-region-list",
    "title": "Global algorithm for update driver",
    "content": "Update drivers use the following procedure to update the operations: . | If the operation is in the set of up-to-date operations, return immediatly. | Ask the operation for its sources and corresponding areas of interest based on the area of interest. | Run this procedure for each source. | Tell the operation to update the area of interest. | If the operation indicates that it is fully up-to-date, add it to the set of up-to-date operations. | . ",
    "url": "/docs/1---n-timestamps-with-internal-damage-region-list.html#global-algorithm-for-update-driver",
    
    "relUrl": "/docs/1---n-timestamps-with-internal-damage-region-list.html#global-algorithm-for-update-driver"
  },"6": {
    "doc": "1---n-timestamps-with-internal-damage-region-list",
    "title": "Postponing expensive operations",
    "content": "If a fast update of some outputs is needed, and showing the current data is not necessary, the calculation of expensive operations can be postponed. Postponing is very simple. The set of operations not to be recalculated is passed to the update driver. The update driver will simply add the operations to the set of up-to-date operations, preventing these operations from recalculating their outputs. Note that any output damage regions of postponed operations that were generated during previous update runs will be processed by consumers of the operation. ",
    "url": "/docs/1---n-timestamps-with-internal-damage-region-list.html#postponing-expensive-operations",
    
    "relUrl": "/docs/1---n-timestamps-with-internal-damage-region-list.html#postponing-expensive-operations"
  },"7": {
    "doc": "1---n-timestamps-with-internal-damage-region-list",
    "title": "Area of interest",
    "content": "To be able to only update the visible region of views before other regions, views must be able to determine their area of interest, and views and operations must be able to specify which regions of their sources they need so they can update the requested area of interest. The update driver, views and operations needs to change to make it possible to limit recalculation to the areas of interest of the views. The update driver algorithm has to be changed to the following: . | If the operation is in the set of up-to-date operations, return immediately. | Ask the operation for the sources that are needed by the operation to translate the requested area of interest to areas of interests for the sources of the operation. | Run this procedure for each sources using the generic area of interest ‘everything’. | Ask the operation for its sources and the corresponding areas of interest based on the area of interest. | Run this procedure for each source. | Tell the operation to update the area of interest. | If the operation indicates that it is fully up-to-date, add it to the set of up-to-date operations. | . Note that the update path for sources needed by views and operations to determine the area of interest, must contain only cheap operations to ensure the calculation of the areas of interest won’t delay updates to the views. ",
    "url": "/docs/1---n-timestamps-with-internal-damage-region-list.html#area-of-interest",
    
    "relUrl": "/docs/1---n-timestamps-with-internal-damage-region-list.html#area-of-interest"
  },"8": {
    "doc": "1---n-timestamps-with-internal-damage-region-list",
    "title": "Incremental updates of views",
    "content": "Adding incremental updates to views is easy because the algorithm already supports areas of interest. The only thing that needs to be changed is that the update driver asks for a list of areas of interest from the views. The view can then decide how many areas of interest to return. For example: one if zoomed in on a small area, or many if zoomed out to view lots of data. The update driver will then process the returned areas of interest one by one, resulting in an incrementally updated view. ",
    "url": "/docs/1---n-timestamps-with-internal-damage-region-list.html#incremental-updates-of-views",
    
    "relUrl": "/docs/1---n-timestamps-with-internal-damage-region-list.html#incremental-updates-of-views"
  },"9": {
    "doc": "1---n-timestamps-with-internal-damage-region-list",
    "title": "TODO",
    "content": ". | Determining if data is stale | Scenario’s | . ",
    "url": "/docs/1---n-timestamps-with-internal-damage-region-list.html#todo",
    
    "relUrl": "/docs/1---n-timestamps-with-internal-damage-region-list.html#todo"
  },"10": {
    "doc": "1---n-timestamps-with-internal-damage-region-list",
    "title": "1---n-timestamps-with-internal-damage-region-list",
    "content": " ",
    "url": "/docs/1---n-timestamps-with-internal-damage-region-list.html",
    
    "relUrl": "/docs/1---n-timestamps-with-internal-damage-region-list.html"
  },"11": {
    "doc": "8-serie-issues",
    "title": "FIXED in 8.007: crash RSLight2021_ontwikkel_2",
    "content": "GeoDMS version: 8.006 . configuration: %RegressionTestsSourceDataDir%\\prj_snapshots\\RSLight2021_ontwikkel_2\\Runs\\PrepareData.dms . a.k.a. D:\\SourceData\\RegressionTests\\prj_snapshots\\RSLight2021_ontwikkel_2\\Runs\\PrepareData.dms openklappen item: MaakOntkoppeldeBronData resulted in crash daarna: /MaakOntkoppeldeBronData/Generate_Run0 openenen . openklappen item: MaakOntkoppeldeBronData results in crash . MT settings 0 &amp; 2 enabled, 1 &amp; 3 disabled . ",
    "url": "/docs/8-serie-issues.html#fixed-in-8007-crash-rslight2021_ontwikkel_2",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-8007-crash-rslight2021_ontwikkel_2"
  },"12": {
    "doc": "8-serie-issues",
    "title": "NAD, BREAKING CHANGE: select_orgrel and arrow operator",
    "content": "GeoDMS version: 8.006 . Part of the unit test . ",
    "url": "/docs/8-serie-issues.html#nad-breaking-change-select_orgrel-and-arrow-operator",
    
    "relUrl": "/docs/8-serie-issues.html#nad-breaking-change-select_orgrel-and-arrow-operator"
  },"13": {
    "doc": "8-serie-issues",
    "title": "PARTALLY FIXED in 8.008: writing indirect data targets",
    "content": "GeoDMS version: 8.006 . Part of the unit test, but indirect targets now cause longer calculation times and larger memory usage, compare performance of 8.008 with 8.007 . ",
    "url": "/docs/8-serie-issues.html#partally-fixed-in-8008-writing-indirect-data-targets",
    
    "relUrl": "/docs/8-serie-issues.html#partally-fixed-in-8008-writing-indirect-data-targets"
  },"14": {
    "doc": "8-serie-issues",
    "title": "value info",
    "content": " ",
    "url": "/docs/8-serie-issues.html#value-info",
    
    "relUrl": "/docs/8-serie-issues.html#value-info"
  },"15": {
    "doc": "8-serie-issues",
    "title": "FIXED in 8.007: crash in value info",
    "content": "GeoDMS version: 8.006 . configuration: %RegressionTestsSourceDataDir%\\prj_snapshots\\lus_demo_2022\\cfg\\demo.dms a.k.a D:\\SourceData\\RegressionTests\\prj_snapshots\\lus_demo_2022\\cfg\\demo.dms . request item : t611_lus_demo_2022_results_test/A1_GE_Discr_calculated in Map View . Double Click on any cell to get value info . Double Click in Detail Page Value Info on value below LUClasses . Double Click Again in Detail Page Value Info on value below LUClasses . MT settings 0 &amp; 2 enabled, 1 &amp; 3 disabled . ",
    "url": "/docs/8-serie-issues.html#fixed-in-8007-crash-in-value-info",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-8007-crash-in-value-info"
  },"16": {
    "doc": "8-serie-issues",
    "title": "value info for union_unit results",
    "content": "descr: explain value did show the source item and source row number. reproduction: xxx, . ",
    "url": "/docs/8-serie-issues.html#value-info-for-union_unit-results",
    
    "relUrl": "/docs/8-serie-issues.html#value-info-for-union_unit-results"
  },"17": {
    "doc": "8-serie-issues",
    "title": "FIXED in 8.015: application hangs",
    "content": "configuration: %TstDir%\\Regression\\cfg\\stam.dms a.k.a. C:\\dev\\tst\\Regression\\cfg\\stam.dms . request item: /BAG_MakeSnapshot/snapshot_20170701/vbo/src/polygon/vbo_id in table . MT settings 0 &amp; 2 enabled, 1 &amp; 3 disabled . ",
    "url": "/docs/8-serie-issues.html#fixed-in-8015-application-hangs",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-8015-application-hangs"
  },"18": {
    "doc": "8-serie-issues",
    "title": "FIXED in 8.011: reading fss with TiledUnit results in ReadSequence Error: stream size 1310720 conflicts with internal size 1048576",
    "content": "configuration: %RSLight_2021Path%\\Runs\\PrepareData.dms request item: /PrivData/VU/RegionalAvgCharacteristics/vrijstaand_size in table . ",
    "url": "/docs/8-serie-issues.html#fixed-in-8011-reading-fss-with-tiledunit-results-in-readsequence-error-stream-size-1310720-conflicts-with-internal-size-1048576",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-8011-reading-fss-with-tiledunit-results-in-readsequence-error-stream-size-1310720-conflicts-with-internal-size-1048576"
  },"19": {
    "doc": "8-serie-issues",
    "title": "FIXED in 8.011: Request value info results in error Access violation in ‘Shv.dll’.",
    "content": "configuration: D:\\SourceData\\RegressionTests\\prj_snapshots\\lus_demo_2022\\cfg\\demo.dms request item: /Simulations/A1_GE/CaseData/Compacted/SuitabilityMaps/residential in Map view and click on a cell . ",
    "url": "/docs/8-serie-issues.html#fixed-in-8011-request-value-info-results-in-error-access-violation-in-shvdll",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-8011-request-value-info-results-in-error-access-violation-in-shvdll"
  },"20": {
    "doc": "8-serie-issues",
    "title": "FIXED in 8.010: selection in table results in error: DataArrayBase Error: Index 1 out of array-range (array.size",
    "content": "0 ) = . configuration: D:\\SourceData\\RegressionTests\\prj_snapshots\\lus_demo_2022\\cfg\\demo.dms request item: /Simulations/A1_GE/CaseData/Compacted/SuitabilityMaps/residential in table view, select first cell with selection tool, scroll in table, error occurs . ",
    "url": "/docs/8-serie-issues.html#fixed-in-8010-selection-in-table-results-in-error-dataarraybase-error-index-1-out-of-array-range-arraysize",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-8010-selection-in-table-results-in-error-dataarraybase-error-index-1-out-of-array-range-arraysize"
  },"21": {
    "doc": "8-serie-issues",
    "title": "FIXED in RSL 3 config, count over vbo_rel gives domain unification error",
    "content": ". | branch: https://pbl.sliksvn.com/ruimtescanner/PBL/ProjDir/branches/RSLight2021_ontwikkel_3/ | revision: 8842, dd 06-07-2022 | configuration: \\RSLight2021_ontwikkel_3\\Runs\\casus.dms na batch/RunAll.cmd | request item: /BaseData/Verdeling_VSSH/panden_ParticuliereHuurKoop/aantal_woningen | . Fout treedt op bij 8.015 maar niet bij 7.412 . Note that: values unit of index arg of lookup is: “/SourceData/Vastgoed/BAG/PerJaar/Y2022/Panden/pand” and domain of value-array is “/BaseData/Verdeling_VSSH/panden_ParticuliereHuurKoop” arg1A = “/nr_ORgEntity” . ",
    "url": "/docs/8-serie-issues.html#fixed-in-rsl-3-config-count-over-vbo_rel-gives-domain-unification-error",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-rsl-3-config-count-over-vbo_rel-gives-domain-unification-error"
  },"22": {
    "doc": "8-serie-issues",
    "title": "FIXED in 8.011: pcount error in last tile",
    "content": "configuration: %TstDir%\\Regression\\cfg\\stam.dms a.k.a. C:\\dev\\tst\\Regression\\cfg\\stam.dms request item: BAG_MakeSnapshot/snapshot_20170701/pand/Results/unique/vbo_count in tableview, look at values for id &gt;= 10.485.760 . ",
    "url": "/docs/8-serie-issues.html#fixed-in-8011-pcount-error-in-last-tile",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-8011-pcount-error-in-last-tile"
  },"23": {
    "doc": "8-serie-issues",
    "title": "NAD: Point_in_polygon results differ from 7 series when polygon array contains overlap and is segmented differently",
    "content": "Cause: a spatial index is made per segment and different segmentation may result in a different order of considering intersection. As this order is now unspecified, it is unspecified which polygon is found when a point is inside multiple polygons. Unspecified behaviour is only guaranteed to be reproducible within the same version of the GeoDms, and in casu with the same segmentation of polygons. Possible adaptations: . | check that polygons don’t overlap | use overlay_polygon on little triangles of the points or (NYI) point_x_polygon | (done) Polygon index is now made for all polygons, not tile-by-tile | (NYI) new functions: . | point_in_polygons variant that delivers cross-table, | point_in_unique_polygon that returns data failure when multiple polygons are found, | point_in_polygon_or_null | count_in_polygon | . | . ",
    "url": "/docs/8-serie-issues.html#nad-point_in_polygon-results-differ-from-7-series-when-polygon-array-contains-overlap-and-is-segmented-differently",
    
    "relUrl": "/docs/8-serie-issues.html#nad-point_in_polygon-results-differ-from-7-series-when-polygon-array-contains-overlap-and-is-segmented-differently"
  },"24": {
    "doc": "8-serie-issues",
    "title": "FIXED in 8.014, Group By in table results in Error: DisplayValue called prematurely",
    "content": "configuration: %TstDir%\\Regression\\cfg\\stam.dms a.k.a. C:\\dev\\tst\\Regression\\cfg\\stam.dms . request item : /brondata/bodemgebruik/Hoofdgroep in table, select column, click Group By tool, error occurs . ",
    "url": "/docs/8-serie-issues.html#fixed-in-8014-group-by-in-table-results-in-error-displayvalue-called-prematurely",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-8014-group-by-in-table-results-in-error-displayvalue-called-prematurely"
  },"25": {
    "doc": "8-serie-issues",
    "title": "FIXED in 8.015: Error in 8.014, Check Failed Error: sm || this-&gt;IsPassor()",
    "content": "configuration: %prj_snapshotsDir%\\lus_demo_2022\\cfg\\demo.dms a.k.a. D:\\SourceData\\RegressionTests\\prj_snapshots\\lus_demo_2022\\cfg\\demo.dms . select item : Geography/rdc_base, Open Detail Pages, Properties, error is shown . ",
    "url": "/docs/8-serie-issues.html#fixed-in-8015-error-in-8014-check-failed-error-sm--this-ispassor",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-8015-error-in-8014-check-failed-error-sm--this-ispassor"
  },"26": {
    "doc": "8-serie-issues",
    "title": "FIXED in 8.024, Error in 8.015, WMTS layer is not shown",
    "content": "configuration: %prj_snapshotsDir%\\lus_demo_2022\\cfg\\demo.dms a.k.a. D:\\SourceData\\RegressionTests\\prj_snapshots\\lus_demo_2022\\cfg\\demo.dms . select item : Current_Situation/Current_landuse in MapView, no WMTS layer is presented . ",
    "url": "/docs/8-serie-issues.html#fixed-in-8024-error-in-8015-wmts-layer-is-not-shown",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-8024-error-in-8015-wmts-layer-is-not-shown"
  },"27": {
    "doc": "8-serie-issues",
    "title": "FIXED in 8.024, Point_In_Polygon crash in 8.019",
    "content": "configuration: %TstDir%\\Regression\\cfg\\stam.dms a.k.a. C:\\dev\\tst\\Regression\\cfg\\stam.dms . request item : /BAG_MakeSnapshot/snapshot_20170701/vbo/results/unique/pand_rel in table, application crashes . ",
    "url": "/docs/8-serie-issues.html#fixed-in-8024-point_in_polygon-crash-in-8019",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-8024-point_in_polygon-crash-in-8019"
  },"28": {
    "doc": "8-serie-issues",
    "title": "FIXED in 8.027, Error in 8.024, Map View &amp; Layer control not updated after changing colors",
    "content": "configuration: %TstDir%\\Operator\\cfg\\microtst.dms a.k.a. C:\\dev\\tst\\operator\\cfg\\microtst.dms . select item : BackGroundLayer/district/hoek in Map View, edit the color for the first class. Map View and Legend are not updated. Panning does not update the colors in the map, zooming does. For the Layer control the palette need to be hided and shown to update the color . ",
    "url": "/docs/8-serie-issues.html#fixed-in-8027-error-in-8024-map-view--layer-control-not-updated-after-changing-colors",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-8027-error-in-8024-map-view--layer-control-not-updated-after-changing-colors"
  },"29": {
    "doc": "8-serie-issues",
    "title": "FIXED in 8.026, Error in 8.024, Changing the Classification in Map View",
    "content": "configuration: %TstDir%\\Operator\\cfg\\microtst.dms a.k.a. C:\\dev\\tst\\operator\\cfg\\microtst.dms . select item : BackGroundLayer/district/hoek in Map View, activate the edit palette option, change the #Classes to 3 and choose equal counts, error: ValidateCount (3) failed becasue this unit has count 7. After clicking OK, the Map view is updated, but the count column is empty. ",
    "url": "/docs/8-serie-issues.html#fixed-in-8026-error-in-8024-changing-the-classification-in-map-view",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-8026-error-in-8024-changing-the-classification-in-map-view"
  },"30": {
    "doc": "8-serie-issues",
    "title": "FIXED in 8.027, Error in 8.024, Table View not updated after selecting items",
    "content": "configuration: %TstDir%\\Operator\\cfg\\microtst.dms a.k.a. C:\\dev\\tst\\operator\\cfg\\microtst.dms . select item : BackGroundLayer/district/hoek in TableView, select an entry with the select objects tool, table is not updated (blue color is not shown). After activating another cell, table is updated . ",
    "url": "/docs/8-serie-issues.html#fixed-in-8027-error-in-8024-table-view-not-updated-after-selecting-items",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-8027-error-in-8024-table-view-not-updated-after-selecting-items"
  },"31": {
    "doc": "8-serie-issues",
    "title": "FIXED in 8.027, Error in 8.024, Table View ony one selection action possible",
    "content": "configuration: %TstDir%\\Operator\\cfg\\microtst.dms a.k.a. C:\\dev\\tst\\operator\\cfg\\microtst.dms . select item : BackGroundLayer/district/hoek in TableView, select first one item and then select all, even after activating another cell table is not updated. After the table is requested again, application crashes. ",
    "url": "/docs/8-serie-issues.html#fixed-in-8027-error-in-8024-table-view-ony-one-selection-action-possible",
    
    "relUrl": "/docs/8-serie-issues.html#fixed-in-8027-error-in-8024-table-view-ony-one-selection-action-possible"
  },"32": {
    "doc": "8-serie-issues",
    "title": "8-serie-issues",
    "content": " ",
    "url": "/docs/8-serie-issues.html",
    
    "relUrl": "/docs/8-serie-issues.html"
  },"33": {
    "doc": "abs",
    "title": "syntax",
    "content": ". | abs(a) | . ",
    "url": "/docs/abs.html#syntax",
    
    "relUrl": "/docs/abs.html#syntax"
  },"34": {
    "doc": "abs",
    "title": "definition",
    "content": "abs(a) results in the absolute values (|a|) of data-item a, meaning a if a &gt;= 0 and -a if a &lt; 0. ",
    "url": "/docs/abs.html#definition",
    
    "relUrl": "/docs/abs.html#definition"
  },"35": {
    "doc": "abs",
    "title": "applies to",
    "content": "Data item with int8, int16, int32, float32 or float64 value-type . ",
    "url": "/docs/abs.html#applies-to",
    
    "relUrl": "/docs/abs.html#applies-to"
  },"36": {
    "doc": "abs",
    "title": "example",
    "content": "attribute&lt;float32&gt; absA (ADomain) := abs(A); . | A | absA | . | 0 | 0 | . | 1 | 1 | . | -2 | 2 | . | 3.6 | 3.6 | . | 999 | 999 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/abs.html#example",
    
    "relUrl": "/docs/abs.html#example"
  },"37": {
    "doc": "abs",
    "title": "abs",
    "content": "| *arithmetic-functions absolute ( |   | )* | . ",
    "url": "/docs/abs.html",
    
    "relUrl": "/docs/abs.html"
  },"38": {
    "doc": "add-(union)",
    "title": "syntax",
    "content": ". | add(polygon_data_itemA, polygon_data_itemB) | polygon_data_itemA + polygon_data_itemB | . ",
    "url": "/docs/add-(union).html#syntax",
    
    "relUrl": "/docs/add-(union).html#syntax"
  },"39": {
    "doc": "add-(union)",
    "title": "description",
    "content": "add(polygon_data_itemA, polygon_data_itemB) or polygon_data_itemA + polygon_data_itemB results in a new multi polygon data-item with the union of the two polygon_data_itemA and polygon_data_itemA data items. ",
    "url": "/docs/add-(union).html#description",
    
    "relUrl": "/docs/add-(union).html#description"
  },"40": {
    "doc": "add-(union)",
    "title": "applies to",
    "content": "data items polygon_data_itemA and polygon_data_itemA with an ipoint or spoint value-type. ",
    "url": "/docs/add-(union).html#applies-to",
    
    "relUrl": "/docs/add-(union).html#applies-to"
  },"41": {
    "doc": "add-(union)",
    "title": "conditions",
    "content": ". | The composition of the argument needs to be polygon. | The domain-unit of the arguments must match of be void. | . ",
    "url": "/docs/add-(union).html#conditions",
    
    "relUrl": "/docs/add-(union).html#conditions"
  },"42": {
    "doc": "add-(union)",
    "title": "since version",
    "content": "7.112 . ",
    "url": "/docs/add-(union).html#since-version",
    
    "relUrl": "/docs/add-(union).html#since-version"
  },"43": {
    "doc": "add-(union)",
    "title": "example",
    "content": "parameter&lt;ipoint&gt; NorthHolland (poly) := Land/geometry + Texel/geometry; . ",
    "url": "/docs/add-(union).html#example",
    
    "relUrl": "/docs/add-(union).html#example"
  },"44": {
    "doc": "add-(union)",
    "title": "see also",
    "content": ". | union_polygon-(dissolve) | add | . ",
    "url": "/docs/add-(union).html#see-also",
    
    "relUrl": "/docs/add-(union).html#see-also"
  },"45": {
    "doc": "add-(union)",
    "title": "add-(union)",
    "content": "geometric-functions add (union) . ",
    "url": "/docs/add-(union).html",
    
    "relUrl": "/docs/add-(union).html"
  },"46": {
    "doc": "add",
    "title": "syntax",
    "content": ". | add(a, b, …) or add_list(a, b, …) | a + b + … | . ",
    "url": "/docs/add.html#syntax",
    
    "relUrl": "/docs/add.html#syntax"
  },"47": {
    "doc": "add",
    "title": "definition",
    "content": "add(a, b, …) or a + b + … results in the element-by-element addition of corresponding values of the data-item: a, b, … .. add_list is a synonym for add . If the result of the addition exceeds the MinValue or MaxValue of the value-type, an error is generated. Use the add_or_null function if a null value is requested in these cases. ",
    "url": "/docs/add.html#definition",
    
    "relUrl": "/docs/add.html#definition"
  },"48": {
    "doc": "add",
    "title": "applies to",
    "content": "Data items with Numeric, Point, or String value-type. ",
    "url": "/docs/add.html#applies-to",
    
    "relUrl": "/docs/add.html#applies-to"
  },"49": {
    "doc": "add",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void, (literals or parameter can be added to data items of any domain). | Arguments must have matching: . | value type | metric | . | . ",
    "url": "/docs/add.html#conditions",
    
    "relUrl": "/docs/add.html#conditions"
  },"50": {
    "doc": "add",
    "title": "example",
    "content": "1. attribute&lt;float32&gt; addABC (ADomain) := add(A, B, C); 2. attribute&lt;float32&gt; addABC (ADomain) := A + B + C; . | A | B | C | addABC | . | 0 | 1 | 0 | 1 | . | 1 | -1 | 1 | 1 | . | -2 | 2 | 4 | 4 | . | 3.6 | 1.44 | 7 | 12.04 | . | 999 | 111 | -5 | 1105 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/add.html#example",
    
    "relUrl": "/docs/add.html#example"
  },"51": {
    "doc": "add",
    "title": "see also",
    "content": ". | add_or_null | concatenation_(+) | add-(union) | . ",
    "url": "/docs/add.html#see-also",
    
    "relUrl": "/docs/add.html#see-also"
  },"52": {
    "doc": "add",
    "title": "add",
    "content": "arithmetic-functions addition (+) . ",
    "url": "/docs/add.html",
    
    "relUrl": "/docs/add.html"
  },"53": {
    "doc": "add_or_null",
    "title": "syntax",
    "content": ". | add_or_null(a, b) | . ",
    "url": "/docs/add_or_null.html#syntax",
    
    "relUrl": "/docs/add_or_null.html#syntax"
  },"54": {
    "doc": "add_or_null",
    "title": "definition",
    "content": "add_or_null(a, b) results in the element-by-element addition of corresponding values of the data-item: a and b. If the result of the addition exceeds the MinValue or MaxValue of the value-type, the add_or_null function results in the value null. ",
    "url": "/docs/add_or_null.html#definition",
    
    "relUrl": "/docs/add_or_null.html#definition"
  },"55": {
    "doc": "add_or_null",
    "title": "applies to",
    "content": "Data items with Numeric, Point, or String value-type. ",
    "url": "/docs/add_or_null.html#applies-to",
    
    "relUrl": "/docs/add_or_null.html#applies-to"
  },"56": {
    "doc": "add_or_null",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void, (literals or parameter can be added to data items of any domain). | Arguments must have matching: . | value type | metric | . | . ",
    "url": "/docs/add_or_null.html#conditions",
    
    "relUrl": "/docs/add_or_null.html#conditions"
  },"57": {
    "doc": "add_or_null",
    "title": "example",
    "content": "1. attribute&lt;uint8&gt; add_or_null_AB (ADomain) := add_or_null(A, B); . | A | B | add_or_null_AB | . | 0 | 1 | 1 | . | 1 | null | null | . | 200 | 54 | 254 | . | 50 | 100 | 150 | . | 222 | 111 | null | . ADomain, nr of rows = 5 . ",
    "url": "/docs/add_or_null.html#example",
    
    "relUrl": "/docs/add_or_null.html#example"
  },"58": {
    "doc": "add_or_null",
    "title": "see also",
    "content": ". | add | . ",
    "url": "/docs/add_or_null.html#see-also",
    
    "relUrl": "/docs/add_or_null.html#see-also"
  },"59": {
    "doc": "add_or_null",
    "title": "add_or_null",
    "content": "arithmetic-functions add_or_null . ",
    "url": "/docs/add_or_null.html",
    
    "relUrl": "/docs/add_or_null.html"
  },"60": {
    "doc": "advanced-update-model",
    "title": "application types",
    "content": "Here is a list of applications where an improved update model can be used: . | GIS models and GUIs | CRUD GUIs: updating of error indicators, enabling and disabling controls depending on input, synchronizing multiple representations of the same value | Advanced image manipulation (Photoshop-like applications). These are similar to GIS in that they handle large arrays of 2D data on which operations are performed | Software build systems | . ",
    "url": "/docs/advanced-update-model.html#application-types",
    
    "relUrl": "/docs/advanced-update-model.html#application-types"
  },"61": {
    "doc": "advanced-update-model",
    "title": "existing models",
    "content": "reasons not to select . A lot of existing models exist to update data. Why can’t these be used and is this update model needed? The other models have other goals and/or have drawbacks, that make them unsuitable for the application types above: . | Use of events: the biggest drawback of events is that when an event is fired everything has to be updated before the next event can be handled. If multiple changes are made to the primary sources, all outputs have to be recalculated multiple times. This it too inefficient when large data sets are used. | Data packet streams: some systems process (in most cases intermittent) streams of new data packets. They cannot handle forwarding changes from primary data to outputs. | Streaming/real-time: these systems are used for continuous streams of values (instead of complex data packets). In most cases the values must be transformed in real-time. | . list . Here is an incomplete list of other model implementations: . | JavaFBP: streams of data packets. | Ptolemy: streams of data packets (Java). | . ",
    "url": "/docs/advanced-update-model.html#existing-models",
    
    "relUrl": "/docs/advanced-update-model.html#existing-models"
  },"62": {
    "doc": "advanced-update-model",
    "title": "requirements",
    "content": "must have . | The developer can explicitly specify which views have to be updated in which order. Some views are more important than others. The most important views have to be updated first because the user is most likely to interact with these views. | It must be possible to postpone recalculation of expensive operations, so the initial GUI update can be performed quickly. Initially it is more important to update all GUI components than to have the correct data shown. Up-to-date GUI components ensure the user can initiate new actions quickly and ensure users cannot invoke actions that are not applicable anymore. The data in the views can be updated in the background. | A view must be able to split its content in multiple update regions, and the recalculations must be limited to the minimum set of data needed to update the current region. This way views showing lots of data can be updated incrementally. The user does not have to wait for everything to be recalculated before an update is visible. Instead the user sees many smaller updates, each after a short time, which gives him a feeling that progress is being made. It is also clear how far the update process is. | No redundant recalculation of (subsets of) derived data. If data is needed but recalculation of an operation has been postponed, derived operations must not recalculate their results using the stale data of the postponed operation. It would be a waste of time as the derived operations would need to be recalculated again when the postponed operation has been recalculated. | . tentative . | If stale data is used (because of postponed recalculation of expensive operations), it must be possible to detect this. The view can then use this information to indicate to the user that the data is not up-to-date. There are two options for the indication: a boolean or a set of regions. The latter is better because it can be used to show users exactly what data has not been updated yet. With a boolean indication the user has to make an educated guess about what data is and what data is not up-to-date. | . ",
    "url": "/docs/advanced-update-model.html#requirements",
    
    "relUrl": "/docs/advanced-update-model.html#requirements"
  },"63": {
    "doc": "advanced-update-model",
    "title": "proposals",
    "content": ". | 1—n-timestamps-with-internal-damage-region-list | . ",
    "url": "/docs/advanced-update-model.html#proposals",
    
    "relUrl": "/docs/advanced-update-model.html#proposals"
  },"64": {
    "doc": "advanced-update-model",
    "title": "notes",
    "content": "tiling of data and operations . The tiling of data and operations is independent of the splitting of views in update regions (which usually means tiling). Tiling of data and operations is used so huge data sets can be paged, and operations can be split in multiple parts for parallel recalculation. It is probably wise to make the tiles of the views align with the tiles of the underlying operations and data, but this should probably be for the developer to decide instead of views asking their underlying sources for tiling information. ",
    "url": "/docs/advanced-update-model.html#notes",
    
    "relUrl": "/docs/advanced-update-model.html#notes"
  },"65": {
    "doc": "advanced-update-model",
    "title": "advanced-update-model",
    "content": "The current update model is limited in its support for GUIs. For example, it does not support postponing updates of operations to ensure quick redrawing of all GUI components, and it does not support incremental updates (e.g. tiling) for a view. As a result feedback to the user is less than optimal, and may lead to the user thinking that his actions have no effect. To improve the support of GUIs the current update model has to be changed, or a new one has to be designed. The requirements for the new version are listed below. Below the requirements are links to pages with design proposals with their pros and cons. ",
    "url": "/docs/advanced-update-model.html",
    
    "relUrl": "/docs/advanced-update-model.html"
  },"66": {
    "doc": "aggregation-example",
    "title": "domain units and relation",
    "content": "An aggregation in GeoDMS terms means data is aggregated from a source domain-unit to a target domain unit (usually with less entries). To make the aggregation, a relation is needed that relates the source domain unit to the target domain unit. Example . container aggregation {    container units    {       unit&lt;uint32&gt;  nr_inh := BaseUnit('inhabitant', uint32);       unit&lt;float32&gt; ratio  := float32(nr_inh) / float32(nr_inh);       unit&lt;float32&gt; perc   := 100f * ratio;    }    unit&lt;uint32&gt; neighborhood    : StorageName = \"%SourceDataDir%/CBS/2017/neighborhood\"    , StorageType = \"gdal.vect\"   {      attribute&lt;string&gt;       code;      attribute&lt;units/nr_inh&gt; nr_inhabitants      attribute&lt;units/perc&gt;   perc_0_14_yr;       // defined(_def) variants used to set missing values to zero      attribute&lt;units/nr_inh&gt; nr_inhabitants_def :=  nr_inhabitants &gt;= 0i ? nr_inhabitants[units/nr_inh] : 0[units/nr_inh] / 0;      attribute&lt;units/perc&gt;   perc_0_14_yr_def   :=  (perc_0_14_yr &gt;= 0i &amp;&amp; perc_0_14_yr &lt;= 100i)             ? perc_0_14_yr[units/perc]             : 0[units/perc] / 0f;      attribute&lt;string&gt;       municipality_code := substr(neighborhood/code,0,5);      attribute&lt;municipality&gt; municipality_rel  := rlookup(municipality_code, municipality/values);   }   unit&lt;uint32&gt; municipality := unique(neighborhood/municipality_code)   {      attribute&lt;units/nr_inh&gt; sum_nr_inhabitants         :=  sum(neighborhood/nr_inhabitants_def , neighborhood/municipality_rel);      attribute&lt;units/perc&gt;   mean_perc_0_14_yr          :=  mean(neighborhood/P_00_14_JR_DEF, neighborhood/municipality_rel);      attribute&lt;units/perc&gt;   mean_weighted_perc_0_14_yr :=          sum(neighborhood/P_00_14_JR_DEF * float32(buurt/AANT_INW_DEF) , neighborhood/municipality_rel)  / sum(float32(buurt/AANT_INW_DEF), neighborhood/municipality_rel);   } } . ",
    "url": "/docs/aggregation-example.html#domain-units-and-relation",
    
    "relUrl": "/docs/aggregation-example.html#domain-units-and-relation"
  },"67": {
    "doc": "aggregation-example",
    "title": "explanation",
    "content": ". | The attribute nr_inhabitants and perc_0_14_yr are aggregated from the neighborhood towards the municipality domain. | For that reason a municipality_rel relation is configured with as domain unit : neighborhood and as values-unit : municipality. The data is calculated with the rlookup function. | For the nr_inhabitants attribute the actual aggregation is configured with the sum function, resulting in the sum_nr_inhabitants attribute. | For the perc_0_14_yr attribute two aggregations are configured: | . | mean_perc_0_14_yr : the aggregation is configured with the mean function, resulting in the mean perc_0_14_yr attribute of all neighborhoods in a municipality. | mean_weighted_perc_0_14_yr: the aggregation is configured with two sum functions, resulting in the weighted mean perc_0_14_yr attribute of all neighborhoods in a municipality. The nr_inhabitants is used as weight. | . ",
    "url": "/docs/aggregation-example.html#explanation",
    
    "relUrl": "/docs/aggregation-example.html#explanation"
  },"68": {
    "doc": "aggregation-example",
    "title": "see also",
    "content": "In relational databases, SQL Group By statements are often used for aggregations. See the example select-…-from-…-group-by-… for more information. ",
    "url": "/docs/aggregation-example.html#see-also",
    
    "relUrl": "/docs/aggregation-example.html#see-also"
  },"69": {
    "doc": "aggregation-example",
    "title": "aggregation-example",
    "content": "configuration-examples Aggregation . In modelling, data often need to be aggregated. This example presents how to aggregate data with the GeoDMS from the CBS neighborhood level towards the municipality level. ",
    "url": "/docs/aggregation-example.html",
    
    "relUrl": "/docs/aggregation-example.html"
  },"70": {
    "doc": "aggregation-functions",
    "title": "aggregation-functions",
    "content": "Aggregation operators-and-functions are used to aggregate data-item between different domain-unit . | count | sum | mean | min | max | first | last | modus | modus_weighted | . | nth_element - nth element of an ascending sorted attribute | nth_element_weighted - rank value based on the ascended weighted attribute | rth_element - the r * (n-1)th elements of the ascending sorted attribute | . | standard-deviance(sd) | variance | correlation | covariance | . | all | any | . | pcount - count the number of entries of a relation in the related domain | pcount_uint8 - is the pcount variant resulting in uint8 data item | pcount_uint16 - is the pcount variant resulting in uint16 data item | pcount_uint32 - is the pcount variant resulting in uint32 data item | mapping_count - count the number of cells of a grid unit in another grid unit | reg_count - count the non null values of an attribute towards a regional level | . | min_index - index number of the minimum value of the non values | max_index - index number of the maximum value of the non values | . ",
    "url": "/docs/aggregation-functions.html",
    
    "relUrl": "/docs/aggregation-functions.html"
  },"71": {
    "doc": "ahn",
    "title": "inhoud",
    "content": "Het Actueel Hoogtebestand Nederland (AHN) is de digitale hoogtekaart voor heel Nederland. Het bevat gedetailleerde en precieze hoogtegegevens. Sinds maart 2014 is het AHN beschikbaar als Open Data. ",
    "url": "/docs/ahn.html#inhoud",
    
    "relUrl": "/docs/ahn.html#inhoud"
  },"72": {
    "doc": "ahn",
    "title": "download",
    "content": ". | https://www.pdok.nl/nl/producten/pdok-downloads/atomfeeds | https://www.pdok.nl/nl/ahn3-downloads | . De AHN2/3 griddata worden beschikbaar gesteld in een zip formaat met daarin ongecomprimeerde tiffs in een 4 bytes precisie. Wij hebben de data omgezet naar tiff data met compressie in een cm precisie (2 bytes). Daarmee gaat geen informatie verloren maar wordt de omvang van de tiffs wel een factor 5 kleiner. Hiermee kunnen veel toepassingen substantieel sneller uitgevoerd worden. Neem gerust contact met ons op voor het gebruik van deze data. ",
    "url": "/docs/ahn.html#download",
    
    "relUrl": "/docs/ahn.html#download"
  },"73": {
    "doc": "ahn",
    "title": "toepassingen",
    "content": "De AHN data wordt gebruiken we om: . | pandhoogtes te bepalen van BAG panden en daarmee het aantal verdiepingen te schatten. | de steilheid van wegen te bepalen, zie voorbeeld in Gronsveld. Voor doelgroepen met mobiliteitsbeperkingen kunnen wegsegmenten met meer dan 3% stijging al barrieres vormen. | Het maken van reliëfkaarten zowel op gebied als op straatniveau. | . ",
    "url": "/docs/ahn.html#toepassingen",
    
    "relUrl": "/docs/ahn.html#toepassingen"
  },"74": {
    "doc": "ahn",
    "title": "ahn",
    "content": "Open Data AHN . [ brt bag small.png](File:Ahn_brt_bag_small.png \"wikilink\") . AHN reliëf gecombineerd met met BAG en BRT . ",
    "url": "/docs/ahn.html",
    
    "relUrl": "/docs/ahn.html"
  },"75": {
    "doc": "aka",
    "title": "aka",
    "content": "Aka is a common acronym for Also Known As. The usage of various sources, conceptual frameworks and the evolution of time resulted in many pseudonyms, acronyms and symbols. I’ll try to collect them on this page with possibly some indication of preferred usage . | probabilistic allocation is a specialization of Continuous Allocation where all land units have measure 1. | C aka lambda aka splitter aks shadow price aka suitability augmentation | discrete allocation without sub-regions aka Semi Assignment Problem aka lambda assignment aka simple b-matching? (A. Schrijver) | raster cell aka Land Unit | land use class aka Land Use Type Land Use Type | landuse aka land-use aka Land Use | Land Use Scanner aka Ruimtescanner (in Dutch) | float32 aka float | float64 aka double | . ",
    "url": "/docs/aka.html",
    
    "relUrl": "/docs/aka.html"
  },"76": {
    "doc": "algorithmic-techniques",
    "title": "algorithmic techniques",
    "content": ". | Sampling and Scaling: used to speed-up discrete-allocation | Convolution by Fast Fourier Transformation (FFT) for potential calculations. | A convolution performance comparison between ESRI’s ArcGIS (focal sum, 26 hrs) and the GeoDMS (potential, 2 minutes) is done for the GIS performance contest of the Spatial Analysis dept of the Vrije Universiteit of Amsterdam. The contest provided a 1 km world wide grid and a 50 km kernel. | . | Use of spatial indices : . | QuadTrees in geometric algoritmes and | TileGrids visualisation. | . | Development of faster algorithms for specific operations: fisher’s-natural-breaks-classification-complexity-proof, discrete-allocation | . ",
    "url": "/docs/algorithmic-techniques.html#algorithmic-techniques",
    
    "relUrl": "/docs/algorithmic-techniques.html#algorithmic-techniques"
  },"77": {
    "doc": "algorithmic-techniques",
    "title": "algorithmic-techniques",
    "content": "expression fast calculations: Algorithmic techniques . ",
    "url": "/docs/algorithmic-techniques.html",
    
    "relUrl": "/docs/algorithmic-techniques.html"
  },"78": {
    "doc": "all",
    "title": "syntax",
    "content": ". | all(a) | all(a, relation) | . ",
    "url": "/docs/all.html#syntax",
    
    "relUrl": "/docs/all.html#syntax"
  },"79": {
    "doc": "all",
    "title": "definition",
    "content": ". | all(a) results in a boolean parameter, with the value True if all values of boolean data-item a are True and the value False in all other cases. | all(a, relation) results in a boolean attribute, with the values True if all values of boolean data item a are True and the values False in all other cases, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | . ",
    "url": "/docs/all.html#definition",
    
    "relUrl": "/docs/all.html#definition"
  },"80": {
    "doc": "all",
    "title": "applies to",
    "content": ". | attribute a with bool value-type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/all.html#applies-to",
    
    "relUrl": "/docs/all.html#applies-to"
  },"81": {
    "doc": "all",
    "title": "conditions",
    "content": "The domain unit of argument a and relation must match. ",
    "url": "/docs/all.html#conditions",
    
    "relUrl": "/docs/all.html#conditions"
  },"82": {
    "doc": "all",
    "title": "example",
    "content": "parameter&lt;bool&gt; allA := all(A); result = True parameter&lt;bool&gt; allB := all(B); result = False parameter&lt;bool&gt; allC := all(C); result = False . | A | B | C | . | True | True | False | . | True | False | False | . | True | True | False | . | True | False | False | . | True | True | False | . ADomain, nr of rows = 5 . ",
    "url": "/docs/all.html#example",
    
    "relUrl": "/docs/all.html#example"
  },"83": {
    "doc": "all",
    "title": "see also",
    "content": ". | any | . ",
    "url": "/docs/all.html#see-also",
    
    "relUrl": "/docs/all.html#see-also"
  },"84": {
    "doc": "all",
    "title": "all",
    "content": "aggregation-functions all . ",
    "url": "/docs/all.html",
    
    "relUrl": "/docs/all.html"
  },"85": {
    "doc": "allocation-functions",
    "title": "syntax",
    "content": ". | discrete_alloc(TypeNames, LandUnitDomain, SuitabilityMaps, PartioningAttribute, PartioningName, AtomicRegions, AtomicRegionMap, MinClaims, MaxClaims, Threshold, FeasibleSolution) | . ",
    "url": "/docs/allocation-functions.html#syntax",
    
    "relUrl": "/docs/allocation-functions.html#syntax"
  },"86": {
    "doc": "allocation-functions",
    "title": "definition",
    "content": "The function-discrete-alloc function is used to find the discrete allocation of land use to land units that maximizes total suitability under the constrains of minimum and maximum claims. ",
    "url": "/docs/allocation-functions.html#definition",
    
    "relUrl": "/docs/allocation-functions.html#definition"
  },"87": {
    "doc": "allocation-functions",
    "title": "arguments",
    "content": "The discrete_alloc function has 11 argument: . | typenames: an attribute with the name of each land use type, value-type: string; | landunitdomain: the domain-unit for which the allocation is calculated, value type: uint32; | suitabilitymaps: a container with a suitability map for each land use type, value type: int32; | partioningattribute: an attribute that maps each land use type to a relation id (a set of attributes with uint8 value type); | partioningname: an attribute that maps each partitioning to a partitioning name such as “province” or “municipality”, value type: string; | atomicregions: the domain unit defining the set of atomic regions, value type: uint16; | atomicregionmap: an attribute defining to which atomic region each land unit belongs, value type: uint16; | minclaims: a container with for each land use type an attribute that defines for each region of the partitioning that belongs to that land use type, the minimum number of land units that should be allocated to that land use type within the region, value type: uint32; | maxclaims: a container with for each land use type an attribute that defines for each region of the partitioning that belongs to that land use type, the maximum number of land units that should be allocated to that land use type within the region, value type: uint32. Make sure that the total claims are larger or equal to the number of cells in the analysis; | threshold: a parameter defining the minimum suitability value that a land use type should have to get allocated, value type: int32; | feasiblesolution: arbitrary container for possible future use (empty container). | . ",
    "url": "/docs/allocation-functions.html#arguments",
    
    "relUrl": "/docs/allocation-functions.html#arguments"
  },"88": {
    "doc": "allocation-functions",
    "title": "results",
    "content": "The function results in the following set of subitems: . | landuse: the attribute containing the allocated land use types for the land units. The values unit of this attribute is set of land use types, the domain unit is the LandUnitDomain. If the LandUnitDomain is configured as subset of an original land use grid domain, a lookup function can be used to relate the allocated results to the original land use grid (see the example). | status: a string parameter describing if the function resulted in an optimal solution or in not. In the latter case the reason why an optimal solution could not be reached is indicated. | statusflag: a boolean parameter with the value True if the function resulted in an optimal solution and False in all other cases. | shadow_prices: a container with subitem for each land use type. These subitems are attributes containing the shadow_prices for each land use type. The value type of these prices is int32. The domain units are the domain units of the claims for these land use types. | total_allocated: a container with subitems for each land use type. These subitems are attributes containing the number of allocated land units for each land use type. The value type of these numbers is uint32. The domain units are the domain units of the claims for these land use types. | bid_price: an attribute containing the resulting bid prices of the allocation process. The values unit of this attribute is the same as the values unit of the suitability maps, the domain unit is the LandUnitDomain. | . ",
    "url": "/docs/allocation-functions.html#results",
    
    "relUrl": "/docs/allocation-functions.html#results"
  },"89": {
    "doc": "allocation-functions",
    "title": "description",
    "content": "When applied iteratively and by incorporation of dynamic neighbourhood enrichment, one can simulate land use change caused by natural processes. When applied iteratively with a feedback from future (neigbourhood dependend) yields on the current suitability, one can model a time consistent market equilibrium. More information on the discrete allocation function can alse be found at our wiki. ",
    "url": "/docs/allocation-functions.html#description",
    
    "relUrl": "/docs/allocation-functions.html#description"
  },"90": {
    "doc": "allocation-functions",
    "title": "example",
    "content": "container allocate_discrete :=     discrete_alloc(        lu_type/name       ,Compacted/ADomain       ,Compacted/SuitabilityMaps       ,lu_type/partioning       ,lu_type/PartioningName       ,AtomicRegions       ,Compacted/AtomicRegionsMap       ,claims_min       ,claims_max       ,threshold       ,FeasibleSolution    )  {     attribute&lt;lu_type&gt; alloc (GridDomain) := landuse[Compacted/BaseGrid];  } . ",
    "url": "/docs/allocation-functions.html#example",
    
    "relUrl": "/docs/allocation-functions.html#example"
  },"91": {
    "doc": "allocation-functions",
    "title": "full script",
    "content": ". | full-discrete-alloc-script | . ",
    "url": "/docs/allocation-functions.html#full-script",
    
    "relUrl": "/docs/allocation-functions.html#full-script"
  },"92": {
    "doc": "allocation-functions",
    "title": "allocation-functions",
    "content": "Allocation operators-and-functions discrete_alloc . Land Use Allocation is the process of the assignment of land resources to various usage purposes. It is used to find the allocation of land use to land units that maximizes total suitability, given a set of claims, when endogenous interactions are disregarded. The following two allocation processes are dinstinguished: . | continuous: each unit of land is allocated to a percentage, indicating the expected value of each land use type for this land unit. The continuous allocation (aka probabilistic allocation) can be configured with the loop operator, see for an example the Land Use Scanner Student Edition configuration. | discrete: each unit of land is allocated to one out of a limited set of land use types. Use the discrete_alloc function, described in this page, for this allocation process. | . ",
    "url": "/docs/allocation-functions.html",
    
    "relUrl": "/docs/allocation-functions.html"
  },"93": {
    "doc": "and",
    "title": "syntax",
    "content": ". | and(condition1 ,.., conditionn) | condition1 &amp;&amp; condition2 | . ",
    "url": "/docs/and.html#syntax",
    
    "relUrl": "/docs/and.html#syntax"
  },"94": {
    "doc": "and",
    "title": "definition",
    "content": "and(condition1 ,.., conditionn) or condition1 &amp;&amp; condition2 combines two or more conditions and results in true values if all conditions are true and in false values if any condition is false. ",
    "url": "/docs/and.html#definition",
    
    "relUrl": "/docs/and.html#definition"
  },"95": {
    "doc": "and",
    "title": "applies to",
    "content": ". | condition1 .. conditionn data-item with bool value-type | . ",
    "url": "/docs/and.html#applies-to",
    
    "relUrl": "/docs/and.html#applies-to"
  },"96": {
    "doc": "and",
    "title": "conditions",
    "content": "The conditions need to match with regard to their domain-unit or be void (literals or parameter can be combined with data itemsof any domain-unit). ",
    "url": "/docs/and.html#conditions",
    
    "relUrl": "/docs/and.html#conditions"
  },"97": {
    "doc": "and",
    "title": "example",
    "content": "1. attribute&lt;bool&gt; condA_and_condB (LDomain) := and(condA, condB); 2. attribute&lt;bool&gt; condA_and_condB (LDomain) := condA &amp;&amp; condB; . | condA | condB | condA_and_condB | . | False | False | False | . | False | True | False | . | True | False | False | . | True | True | True | . LDomain, nr of rows = 4 . ",
    "url": "/docs/and.html#example",
    
    "relUrl": "/docs/and.html#example"
  },"98": {
    "doc": "and",
    "title": "see also",
    "content": ". | or ( |   | ) | . | not (!) | . ",
    "url": "/docs/and.html#see-also",
    
    "relUrl": "/docs/and.html#see-also"
  },"99": {
    "doc": "and",
    "title": "and",
    "content": "logical-functions and (&amp;&amp;) . ",
    "url": "/docs/and.html",
    
    "relUrl": "/docs/and.html"
  },"100": {
    "doc": "any",
    "title": "syntax",
    "content": ". | any(a) | any(a, relation) | . ",
    "url": "/docs/any.html#syntax",
    
    "relUrl": "/docs/any.html#syntax"
  },"101": {
    "doc": "any",
    "title": "definition",
    "content": ". | any(a) results in a boolean parameter, with the value True if any value of boolean attribute a is True and the value False in all other cases. | any(a, relation) results in a boolean attribute, with the values True if any value of boolean attribute a is True and as values False in all other cases, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | . ",
    "url": "/docs/any.html#definition",
    
    "relUrl": "/docs/any.html#definition"
  },"102": {
    "doc": "any",
    "title": "applies to",
    "content": ". | attribute a with bool value-type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/any.html#applies-to",
    
    "relUrl": "/docs/any.html#applies-to"
  },"103": {
    "doc": "any",
    "title": "conditions",
    "content": "The domain of argument a and relation must match. ",
    "url": "/docs/any.html#conditions",
    
    "relUrl": "/docs/any.html#conditions"
  },"104": {
    "doc": "any",
    "title": "example",
    "content": "parameter&lt;bool&gt; anyA := any(A); result = True parameter&lt;bool&gt; anyB := any(B); result = True parameter&lt;bool&gt; anyC := any(C); result = False . | A | B | C | . | True | True | False | . | True | False | False | . | True | True | False | . | True | False | False | . | True | True | False | . ADomain, nr of rows = 5 . ",
    "url": "/docs/any.html#example",
    
    "relUrl": "/docs/any.html#example"
  },"105": {
    "doc": "any",
    "title": "see also",
    "content": ". | all | . ",
    "url": "/docs/any.html#see-also",
    
    "relUrl": "/docs/any.html#see-also"
  },"106": {
    "doc": "any",
    "title": "any",
    "content": "aggregation-functions any . ",
    "url": "/docs/any.html",
    
    "relUrl": "/docs/any.html"
  },"107": {
    "doc": "api-ms-win-crt-runtime-i1-1-0.dll-is-missing",
    "title": "solution",
    "content": "See https://docs.microsoft.com/en-US/cpp/windows/latest-supported-vc-redist?view=msvc-160 for more info and redistributables for CRT x64. ",
    "url": "/docs/api-ms-win-crt-runtime-i1-1-0.dll-is-missing.html#solution",
    
    "relUrl": "/docs/api-ms-win-crt-runtime-i1-1-0.dll-is-missing.html#solution"
  },"108": {
    "doc": "api-ms-win-crt-runtime-i1-1-0.dll-is-missing",
    "title": "api-ms-win-crt-runtime-i1-1-0.dll-is-missing",
    "content": "After installing and starting the GeoDMS, the following error may occur: . Cause: GeoDms uses an older version of GDAL, which uses Visual C Runtime version 1.0, which may not be installed on newer versions of Windows especially when few other programs are installed. ",
    "url": "/docs/api-ms-win-crt-runtime-i1-1-0.dll-is-missing.html",
    
    "relUrl": "/docs/api-ms-win-crt-runtime-i1-1-0.dll-is-missing.html"
  },"109": {
    "doc": "arc-info-binary-grid",
    "title": "example",
    "content": "unit&lt;wpoint&gt; aig : StorageName = \"%sourcedatadir%/aigrid_test\" , StorageType = \"gdal.grid\" , DialogData = \"Geography/WorldBaseUnit\" { unit&lt;wpoint&gt; World1kmGrid := TiledUnit(          point(uint16(1024), uint16(1024), aig)       );    attribute&lt;uint8&gt; ReadData (World1kmGrid); } . The StorageName property refers to the folder with the grid data. The projection information is also read from this folder. The dialogdata property needs to refer to the base unit for the coordinate system to inform the GeoDMS on how to relate the projection information from the grid file to the how-to-configure-a-coordinate-system, in this case WorldBaseUnit. The configured World1kmGrid is a tiledunit. This unit is used to read the data from the binary grid file in tile of 1024 * 1024 grid cells. ",
    "url": "/docs/arc-info-binary-grid.html#example",
    
    "relUrl": "/docs/arc-info-binary-grid.html#example"
  },"110": {
    "doc": "arc-info-binary-grid",
    "title": "arc-info-binary-grid",
    "content": "Arc Info Binary Grid Files can be read with gdal.grid. ",
    "url": "/docs/arc-info-binary-grid.html",
    
    "relUrl": "/docs/arc-info-binary-grid.html"
  },"111": {
    "doc": "arc-visualisation",
    "title": "description",
    "content": ". | PenColor: a data item with value-type uint32 and as expression a (set) of rgb values. | PenWidth: a data item with value type int16 and as expression a (set) of values indicating the width of the arc. | PenWorldWidth: a data item with the same values unit as the values unit of the unit for the how-to-configure-a-coordinate-system. The PenWorldWidth specifies a size in e.g. meters, which is dependent on the zoom level in the map view. With this property a zoom dependent width can be configured. | PenStyle: a data item with value type int16 and as expression values between 0 and 5, indicating the line style. The following examples show the different penstyles: | . Style 5 does not show the arc at all (which can be useful in a classification scheme where some arcs need to be hidden). ",
    "url": "/docs/arc-visualisation.html#description",
    
    "relUrl": "/docs/arc-visualisation.html#description"
  },"112": {
    "doc": "arc-visualisation",
    "title": "arc-visualisation",
    "content": "Available visualisation-style subitem for arc data: . parameter&lt;uint32&gt; PenColor      := rgb(255,0,0), DialogType = \"PenColor\"; parameter&lt;int16&gt;  PenWidth      := 2s          , DialogType = \"PenWidth\"; parameter&lt;meter&gt;  PenWorldWidth := 5[meter]    , DialogType = \"PenWorldWidth\"; parameter&lt;int16&gt;  PenStyle      := 0s          , DialogType = \"PenStyle\"; . ",
    "url": "/docs/arc-visualisation.html",
    
    "relUrl": "/docs/arc-visualisation.html"
  },"113": {
    "doc": "arc",
    "title": "example",
    "content": "The following example shows the configuration of a domain-unit road, in which each road is represented by one arc. The data is read from an esri-shapefile with gdal.vect. unit&lt;uint32&gt; road :  StorageName = \"%SourceDataDir%/OSM/road.shp\" , StorageType = \"gdal.vect\" { attribute&lt;point_rd&gt; geometry (arc); attribute&lt;string&gt;   name; } . ",
    "url": "/docs/arc.html#example",
    
    "relUrl": "/docs/arc.html#example"
  },"114": {
    "doc": "arc",
    "title": "see also",
    "content": ". | point | polygon | vector-data | grid-data | . ",
    "url": "/docs/arc.html#see-also",
    
    "relUrl": "/docs/arc.html#see-also"
  },"115": {
    "doc": "arc",
    "title": "arc",
    "content": ". Arc feature-attribute are attribute with a two-dimensional value-type (PointGroup) and at least two coordinates for each entry in the domain-unit. Arc attributes are used as feature attribute for vector data. The points in the correct sequence define an arc, a line between a start point, zero or more intermediates and an end point. Arc attributes are often used for geography coordinates of roads, railways, rivers etc. To make the GeoDMS aware that a sequence of coordinates need to be interpreted as an arc, this is done by configuring the composition to arc. ",
    "url": "/docs/arc.html",
    
    "relUrl": "/docs/arc.html"
  },"116": {
    "doc": "arc2segm",
    "title": "syntax",
    "content": ". | arc2segm(arc_polygon_dataitem) | . ",
    "url": "/docs/arc2segm.html#syntax",
    
    "relUrl": "/docs/arc2segm.html#syntax"
  },"117": {
    "doc": "arc2segm",
    "title": "definition",
    "content": "arc2segm(arc_polygon_dataitem) divides an arc or polygon data-item arc_polygon_dataitem into segment. The function results in a new domain-unit with two subitem: . | point: a point data item with the first point of each segment; | nextpoint: a point data item with the last point of each segment. | . ",
    "url": "/docs/arc2segm.html#definition",
    
    "relUrl": "/docs/arc2segm.html#definition"
  },"118": {
    "doc": "arc2segm",
    "title": "description",
    "content": "The arc2segm function is used to split up an arc geometry from which intermediates need to become nodes in a network. ",
    "url": "/docs/arc2segm.html#description",
    
    "relUrl": "/docs/arc2segm.html#description"
  },"119": {
    "doc": "arc2segm",
    "title": "applies to",
    "content": "data item arc_polygon_dataitem with fpoint or dpoint value-type and composition arc or polygon. ",
    "url": "/docs/arc2segm.html#applies-to",
    
    "relUrl": "/docs/arc2segm.html#applies-to"
  },"120": {
    "doc": "arc2segm",
    "title": "example",
    "content": "unit&lt;uint32&gt; segments := arc2segm(road/geometry); . | road/geometry | . | {2 {399246, 112631}{398599, 111866}} | . | {3 {398599, 111866}{399495, 111924} {401801, 111524}} | . | {2 {401529, 114921}{398584, 114823}} | . domain Road, nr of rows = 3 . | point | nextpoint | . | {399246, 112631} | {398599, 111866} | . | {398599, 111866} | {399495, 111924} | . | {399495, 111924} | {401801, 111524} | . | {401529, 114921} | {398584, 114823} | . domain segments, nr of rows = 4 . ",
    "url": "/docs/arc2segm.html#example",
    
    "relUrl": "/docs/arc2segm.html#example"
  },"121": {
    "doc": "arc2segm",
    "title": "arc2segm",
    "content": "geometric-functions arc2segm(ent) . ",
    "url": "/docs/arc2segm.html",
    
    "relUrl": "/docs/arc2segm.html"
  },"122": {
    "doc": "arc_length",
    "title": "syntax",
    "content": ". | arc_length(arc_poly_dataitem, valuesunit of coordinate system) | . ",
    "url": "/docs/arc_length.html#syntax",
    
    "relUrl": "/docs/arc_length.html#syntax"
  },"123": {
    "doc": "arc_length",
    "title": "definition",
    "content": "arc_length(arc_poly_dataitem, valuesunit) calculates the length of an arc or the outline of a polygon data-item arc_poly_dataitem. The resulting values-unit is configured as second argument. This gives an interpretation to the resulting values. It does not convert them. For example, if the coordinate system is in meters, then the resulting output are meter, but you should also configure it to be interpreted as meters. If you want kilometers as output, you’ll have to manually convert it to km. ",
    "url": "/docs/arc_length.html#definition",
    
    "relUrl": "/docs/arc_length.html#definition"
  },"124": {
    "doc": "arc_length",
    "title": "description",
    "content": "The definition of the outline of a polygon is only equal to the perimeter if the polygon has no islands and lakes. In case a polygon consits of multiple rings, the outline also contains the artificial lines needed to relate the rings, see polygon data model. If you want to calculate the perimeter, use a split_polygon function first to make different polygons for all exterior rings (the outline of the lakes are still a part of the calculated arc_length). ",
    "url": "/docs/arc_length.html#description",
    
    "relUrl": "/docs/arc_length.html#description"
  },"125": {
    "doc": "arc_length",
    "title": "applies to",
    "content": ". | arc or polygon data item arc_poly_dataitem with fpoint or dpoint value-type and composition arc or polygon. | . ",
    "url": "/docs/arc_length.html#applies-to",
    
    "relUrl": "/docs/arc_length.html#applies-to"
  },"126": {
    "doc": "arc_length",
    "title": "example",
    "content": "attribute&lt;meter&gt; road_length (Road) := arc_length(road/geometry, meter); . | road/geometry | road_length | . | {2 {399246, 112631}{398599, 111866}} | 1001.92 | . | {3 {398599, 111866}{399495, 111924} {401801,111524}} | 3238.31 | . | {2 {401529, 114921}{398584, 114823} | 2946.63 | . domain Road, nr of rows = 3 . ",
    "url": "/docs/arc_length.html#example",
    
    "relUrl": "/docs/arc_length.html#example"
  },"127": {
    "doc": "arc_length",
    "title": "arc_length",
    "content": "geometric-functions arc_length . ",
    "url": "/docs/arc_length.html",
    
    "relUrl": "/docs/arc_length.html"
  },"128": {
    "doc": "area",
    "title": "syntax",
    "content": ". | area(polygon_data_item, valuesunit) | . ",
    "url": "/docs/area.html#syntax",
    
    "relUrl": "/docs/area.html#syntax"
  },"129": {
    "doc": "area",
    "title": "definition",
    "content": "area(polygon_data_item, valuesunit) calculates the surface of the polygon_data_item argument, in the image the green hedged area. The resulting values-unit is configured as second argument. ",
    "url": "/docs/area.html#definition",
    
    "relUrl": "/docs/area.html#definition"
  },"130": {
    "doc": "area",
    "title": "description",
    "content": "The resulting area values need to be positive, if the values are negative it means the order of points in the polygon geometry is not according to the following rules: . The order of points in a sequence needs to be clockwise for exterior bounds and counter clockwise for holes in polygons (right-hand-rule) . ",
    "url": "/docs/area.html#description",
    
    "relUrl": "/docs/area.html#description"
  },"131": {
    "doc": "area",
    "title": "applies to",
    "content": ". | data-item polygon_data_item with fpoint or dpoint value-type and composition polygon. | . ",
    "url": "/docs/area.html#applies-to",
    
    "relUrl": "/docs/area.html#applies-to"
  },"132": {
    "doc": "area",
    "title": "conditions",
    "content": "The metric of the values-unit argument must match with the square of the metric of the coordinates in the coordinate system. ",
    "url": "/docs/area.html#conditions",
    
    "relUrl": "/docs/area.html#conditions"
  },"133": {
    "doc": "area",
    "title": "example",
    "content": "attribute&lt;m2&gt; surface (district) := area(district/geometry, m2); . | district/geometry | surface | . | {21 {403025, 113810}{4 | 1003100 | . | {17 {400990, 113269}{4 | 474460 | . | {19 {401238, 115099}{4} | 1246460 | . domain district, nr of rows = 3 . ",
    "url": "/docs/area.html#example",
    
    "relUrl": "/docs/area.html#example"
  },"134": {
    "doc": "area",
    "title": "area",
    "content": "geometric-functions area . ",
    "url": "/docs/area.html",
    
    "relUrl": "/docs/area.html"
  },"135": {
    "doc": "argmax",
    "title": "syntax",
    "content": ". | argmax(a, b, .. , n) | . ",
    "url": "/docs/argmax.html#syntax",
    
    "relUrl": "/docs/argmax.html#syntax"
  },"136": {
    "doc": "argmax",
    "title": "definition",
    "content": "argmax(a, b, .. , n) results in a uint32 data-item with the order number of the argument with the highest value for the element-by-element comparison. The domain-unit of the resulting item is the same as the domain units of all arguments of the function. The values-unit of the resulting item is value-type of the domain unit of all arguments of the function. But is by default a uint32. For other value types use for example argmax_uint8(a, b, .. , n). If the highest value occurs more than once, the function results the first order number. null is considered lower than any other value. ",
    "url": "/docs/argmax.html#definition",
    
    "relUrl": "/docs/argmax.html#definition"
  },"137": {
    "doc": "argmax",
    "title": "applies to",
    "content": "Data items with Numeric or string value type . ",
    "url": "/docs/argmax.html#applies-to",
    
    "relUrl": "/docs/argmax.html#applies-to"
  },"138": {
    "doc": "argmax",
    "title": "conditions",
    "content": ". | Domain of the arguments must match or be void. | Arguments must have matching: . | value-type | metric | . | . ",
    "url": "/docs/argmax.html#conditions",
    
    "relUrl": "/docs/argmax.html#conditions"
  },"139": {
    "doc": "argmax",
    "title": "example",
    "content": "attribute&lt;uint32&gt; argmaxABC (DomDomain) := argmax(A, B, C); . | A(int32),sequencenr: 0 | B(int32),sequencenr: 1 | C(int32),sequencenr: 2 | argmaxABC | . | 0 | 1 | 2 | 2 | . | 1 | -1 | 4 | 2 | . | -2 | 2 | 2 | 1 | . | 4 | 0 | 7 | 2 | . | 999 | 111 | -5 | 0 | . | 2 | null | 1 | 0 | . | 0 | 1 | null | 1 | . | null | 1 | 2 | 2 | . | null | null | null | 0 | . | 1 | 1 | 1 | 0 | . DomDomain, nr of rows = 10 . In earlier versions (before 7.202) a null value in one of the arguments could result in a null value of the resulting data item. ",
    "url": "/docs/argmax.html#example",
    
    "relUrl": "/docs/argmax.html#example"
  },"140": {
    "doc": "argmax",
    "title": "see also",
    "content": ". | argmax_uint16, a version of the argmax function resulting in a uint16 data item | argmax_uint8, a version of the argmax function resulting in a uint8 data item | argmax_alldefined | argmax_ifdefined | argmin | max_elem | . ",
    "url": "/docs/argmax.html#see-also",
    
    "relUrl": "/docs/argmax.html#see-also"
  },"141": {
    "doc": "argmax",
    "title": "argmax",
    "content": "ordering-functions argmax . ",
    "url": "/docs/argmax.html",
    
    "relUrl": "/docs/argmax.html"
  },"142": {
    "doc": "argmax_alldefined",
    "title": "syntax",
    "content": ". | argmax_alldefined(a, b, .. , n) | . ",
    "url": "/docs/argmax_alldefined.html#syntax",
    
    "relUrl": "/docs/argmax_alldefined.html#syntax"
  },"143": {
    "doc": "argmax_alldefined",
    "title": "definition",
    "content": "argmax_alldefined(a, b, .. , n) is a variant of the argmax function resulting in defined values if all values of the argument for an entry in the domain-unit are defined. If any argument contains null values, the resulting value for that entry will be null. ",
    "url": "/docs/argmax_alldefined.html#definition",
    
    "relUrl": "/docs/argmax_alldefined.html#definition"
  },"144": {
    "doc": "argmax_alldefined",
    "title": "since version",
    "content": "8.6.5 . ",
    "url": "/docs/argmax_alldefined.html#since-version",
    
    "relUrl": "/docs/argmax_alldefined.html#since-version"
  },"145": {
    "doc": "argmax_alldefined",
    "title": "example",
    "content": "attribute&lt;uint32&gt; argmax_alldefinedABC (DomDomain) := argmax_alldefined(A, B, C); . | A(int32),sequencenr: 0 | B(int32),sequencenr: 1 | C(int32),sequencenr: 2 | argmax_alldefinedABC | . | 0 | 1 | 2 | 2 | . | 1 | -1 | 4 | 2 | . | -2 | 2 | 2 | 1 | . | 4 | 0 | 7 | 2 | . | 999 | 111 | -5 | 0 | . | 2 | null | 1 | null | . | 0 | 1 | null | null | . | null | 1 | 2 | null | . | null | null | null | null | . | 1 | 1 | 1 | 0 | . DomDomain, nr of rows = 10 . ",
    "url": "/docs/argmax_alldefined.html#example",
    
    "relUrl": "/docs/argmax_alldefined.html#example"
  },"146": {
    "doc": "argmax_alldefined",
    "title": "see also",
    "content": ". | argmax_alldefined_uint16, a version of the argmax_alldefined function resulting in a uint16 data item | argmax_alldefined_uint8, a version of the argmax_alldefined function resulting in a uint8 data item | argmax_ifdefined | argmax | . ",
    "url": "/docs/argmax_alldefined.html#see-also",
    
    "relUrl": "/docs/argmax_alldefined.html#see-also"
  },"147": {
    "doc": "argmax_alldefined",
    "title": "argmax_alldefined",
    "content": "ordering-functions argmax alldefined . ",
    "url": "/docs/argmax_alldefined.html",
    
    "relUrl": "/docs/argmax_alldefined.html"
  },"148": {
    "doc": "argmax_ifdefined",
    "title": "syntax",
    "content": ". | argmax_ifdefined(a, b, .. , n) | . ",
    "url": "/docs/argmax_ifdefined.html#syntax",
    
    "relUrl": "/docs/argmax_ifdefined.html#syntax"
  },"149": {
    "doc": "argmax_ifdefined",
    "title": "definition",
    "content": "argmax_ifdefined(a, b, .. , n) is a variant of the argmax function resulting in defined values if any value of the argument for an entry in the domain-unit is defined. If all arguments contain null values, the resulting value for that entry will be null. If all arguments contain the same value, e.g. A=0, B=0, C=0, then the result will be the first argument. ",
    "url": "/docs/argmax_ifdefined.html#definition",
    
    "relUrl": "/docs/argmax_ifdefined.html#definition"
  },"150": {
    "doc": "argmax_ifdefined",
    "title": "since version",
    "content": "8.6.5 . ",
    "url": "/docs/argmax_ifdefined.html#since-version",
    
    "relUrl": "/docs/argmax_ifdefined.html#since-version"
  },"151": {
    "doc": "argmax_ifdefined",
    "title": "example",
    "content": "attribute&lt;uint32&gt; argmax_ifdefinedABC (DomDomain) := argmax_ifdefined(A, B, C); . | A(int32),sequencenr: 0 | B(int32),sequencenr: 1 | C(int32),sequencenr: 2 | argmax_ifdefinedABC | . | 0 | 1 | 2 | 2 | . | 1 | -1 | 4 | 2 | . | -2 | 2 | 2 | 1 | . | 4 | 0 | 7 | 2 | . | 999 | 111 | -5 | 0 | . | 2 | null | 1 | 0 | . | 0 | 1 | null | 1 | . | null | 1 | 2 | 2 | . | null | null | null | null | . | 1 | 1 | 1 | 0 | . DomDomain, nr of rows = 10 . ",
    "url": "/docs/argmax_ifdefined.html#example",
    
    "relUrl": "/docs/argmax_ifdefined.html#example"
  },"152": {
    "doc": "argmax_ifdefined",
    "title": "see also",
    "content": ". | argmax_ifdefined_uint16, a version of the argmax_ifdefined function resulting in a uint16 data item | argmax_ifdefined_uint8, a version of the argmax_ifdefined function resulting in a uint8 data item | argmax_alldefined | argmax | . ",
    "url": "/docs/argmax_ifdefined.html#see-also",
    
    "relUrl": "/docs/argmax_ifdefined.html#see-also"
  },"153": {
    "doc": "argmax_ifdefined",
    "title": "argmax_ifdefined",
    "content": "ordering-functions argmax ifdefined . ",
    "url": "/docs/argmax_ifdefined.html",
    
    "relUrl": "/docs/argmax_ifdefined.html"
  },"154": {
    "doc": "argmin",
    "title": "syntax",
    "content": ". | argmin(a, b, .. , n) | . ",
    "url": "/docs/argmin.html#syntax",
    
    "relUrl": "/docs/argmin.html#syntax"
  },"155": {
    "doc": "argmin",
    "title": "definition",
    "content": "argmin(a, b, .. , n) results in a uint32 data-item with the order number of the argument with the lowest value for the element-by-element comparison. The domain-unit of the resulting item is the same as the domain units of all arguments of the function. The values-unit of the resulting item is value-type of the domain unit of of all arguments of the function. If the lowest value occurs more than once, the function results the first order number. null is considered higher than any other value. ",
    "url": "/docs/argmin.html#definition",
    
    "relUrl": "/docs/argmin.html#definition"
  },"156": {
    "doc": "argmin",
    "title": "applies to",
    "content": "Data items with Numeric or string value type . ",
    "url": "/docs/argmin.html#applies-to",
    
    "relUrl": "/docs/argmin.html#applies-to"
  },"157": {
    "doc": "argmin",
    "title": "conditions",
    "content": ". | Domain of the arguments must match or be void. | Arguments must have matching: . | value-type | metric | . | . ",
    "url": "/docs/argmin.html#conditions",
    
    "relUrl": "/docs/argmin.html#conditions"
  },"158": {
    "doc": "argmin",
    "title": "example",
    "content": "attribute&lt;uint32&gt; argminABC (DomDomain) := argmin(A, B, C); . | A(int32),sequencenr: 0 | B(int32),sequencenr: 1 | C(int32),sequencenr: 2 | argminABC | . | 0 | 1 | 2 | 0 | . | 1 | -1 | 4 | 1 | . | -2 | 2 | 2 | 0 | . | 4 | 0 | 7 | 1 | . | 999 | 111 | -5 | 2 | . | 2 | null | 1 | 2 | . | 0 | 1 | null | 0 | . | null | 1 | 2 | 1 | . | null | null | null | 0 | . | 1 | 1 1 | 0 |   | . DomDomain, nr of rows = 10 . In earlier versions (before 7.202) a null value in one of the arguments could result in a null value of the resulting data item . ",
    "url": "/docs/argmin.html#example",
    
    "relUrl": "/docs/argmin.html#example"
  },"159": {
    "doc": "argmin",
    "title": "see also",
    "content": ". | argmin_uint16, a version of the argmin function resulting in a uint16 data item | argmin_uint8, a version of the argmin function resulting in a uint8 data item | argmin_alldefined | argmin_ifdefined | argmax | min_elem | . ",
    "url": "/docs/argmin.html#see-also",
    
    "relUrl": "/docs/argmin.html#see-also"
  },"160": {
    "doc": "argmin",
    "title": "argmin",
    "content": "ordering-functions argmin . ",
    "url": "/docs/argmin.html",
    
    "relUrl": "/docs/argmin.html"
  },"161": {
    "doc": "argmin_alldefined",
    "title": "syntax",
    "content": ". | argmin_alldefined(a, b, .. , n) | . ",
    "url": "/docs/argmin_alldefined.html#syntax",
    
    "relUrl": "/docs/argmin_alldefined.html#syntax"
  },"162": {
    "doc": "argmin_alldefined",
    "title": "definition",
    "content": "argmin_alldefined(a, b, .. , n) is a variant of the argmin function resulting in defined values if all values of the argument for an entry in the domain-unit are defined. If any argument contains null values, the resulting value for that entry will be null. ",
    "url": "/docs/argmin_alldefined.html#definition",
    
    "relUrl": "/docs/argmin_alldefined.html#definition"
  },"163": {
    "doc": "argmin_alldefined",
    "title": "since version",
    "content": "8.6.5 . ",
    "url": "/docs/argmin_alldefined.html#since-version",
    
    "relUrl": "/docs/argmin_alldefined.html#since-version"
  },"164": {
    "doc": "argmin_alldefined",
    "title": "example",
    "content": "attribute&lt;uint32&gt; argmin_alldefinedABC (DomDomain) := argmin_alldefined(A, B, C); . | A(int32),sequencenr: 0 | B(int32),sequencenr: 1 | C(int32),sequencenr: 2 | argmin_alldefinedABC | . | 0 | 1 | 2 | 0 | . | 1 | -1 | 4 | 1 | . | -2 | 2 | 2 | 0 | . | 4 | 0 | 7 | 1 | . | 999 | 111 | -5 | 2 | . | 2 | null | 1 | null | . | 0 | 1 | null | null | . | null | 1 | 2 | null | . | null | null | null | null | . | 1 | 1 | 1 | 0 | . DomDomain, nr of rows = 10 . ",
    "url": "/docs/argmin_alldefined.html#example",
    
    "relUrl": "/docs/argmin_alldefined.html#example"
  },"165": {
    "doc": "argmin_alldefined",
    "title": "see also",
    "content": ". | argmin_alldefined_uint16, a version of the argmin_alldefined function resulting in a uint16 data item | argmin_alldefined_uint8, a version of the argmin_alldefined function resulting in a uint8 data item | argmin_ifdefined | argmin | . ",
    "url": "/docs/argmin_alldefined.html#see-also",
    
    "relUrl": "/docs/argmin_alldefined.html#see-also"
  },"166": {
    "doc": "argmin_alldefined",
    "title": "argmin_alldefined",
    "content": "ordering-functions argmin alldefined . ",
    "url": "/docs/argmin_alldefined.html",
    
    "relUrl": "/docs/argmin_alldefined.html"
  },"167": {
    "doc": "argmin_ifdefined",
    "title": "syntax",
    "content": ". | argmin_ifdefined(a, b, .. , n) | . ",
    "url": "/docs/argmin_ifdefined.html#syntax",
    
    "relUrl": "/docs/argmin_ifdefined.html#syntax"
  },"168": {
    "doc": "argmin_ifdefined",
    "title": "definition",
    "content": "argmin_ifdefined(a, b, .. , n) is a variant of the argmin function resulting in defined values if any value of the argument for an entry in the domain-unit is defined. If all arguments contain null values, the resulting value for that entry will be null. ",
    "url": "/docs/argmin_ifdefined.html#definition",
    
    "relUrl": "/docs/argmin_ifdefined.html#definition"
  },"169": {
    "doc": "argmin_ifdefined",
    "title": "since version",
    "content": "8.6.5 . ",
    "url": "/docs/argmin_ifdefined.html#since-version",
    
    "relUrl": "/docs/argmin_ifdefined.html#since-version"
  },"170": {
    "doc": "argmin_ifdefined",
    "title": "example",
    "content": "attribute&lt;uint32&gt; argmin_ifdefinedABC (DomDomain) := argmin_ifdefined(A, B, C); . | A(int32),sequencenr: 0 | B(int32),sequencenr: 1 | C(int32),sequencenr: 2 | argmin_ifdefinedABC | . | 0 | 1 | 2 | 0 | . | 1 | -1 | 4 | 1 | . | -2 | 2 | 2 | 0 | . | 4 | 0 | 7 | 1 | . | 999 | 111 | -5 | 2 | . | 2 | null | 1 | 2 | . | 0 | 1 | null | 0 | . | null | 1 | 2 | 1 | . | null | null | null | null | . | 1 | 1 | 1 | 0 | . DomDomain, nr of rows = 10 . ",
    "url": "/docs/argmin_ifdefined.html#example",
    
    "relUrl": "/docs/argmin_ifdefined.html#example"
  },"171": {
    "doc": "argmin_ifdefined",
    "title": "see also",
    "content": ". | argmin_ifdefined_uint16, a version of the argmin_ifdefined function resulting in a uint16 data item | argmin_ifdefined_uint8, a version of the argmin_ifdefined function resulting in a uint8 data item | argmin_alldefined | argmin | . ",
    "url": "/docs/argmin_ifdefined.html#see-also",
    
    "relUrl": "/docs/argmin_ifdefined.html#see-also"
  },"172": {
    "doc": "argmin_ifdefined",
    "title": "argmin_ifdefined",
    "content": "ordering-functions argmin ifdefined . ",
    "url": "/docs/argmin_ifdefined.html",
    
    "relUrl": "/docs/argmin_ifdefined.html"
  },"173": {
    "doc": "argument",
    "title": "argument",
    "content": "An argument is a value or set of values that can be passed to a function. ",
    "url": "/docs/argument.html",
    
    "relUrl": "/docs/argument.html"
  },"174": {
    "doc": "arithmetic-functions",
    "title": "arithmetic-functions",
    "content": "Arithmetic operators-and-functions are basic mathematical functions: . | add (+) | add_or_null | sub (-) | sub_or_null | mul (*) | mul_or_null | div (/) | . | mod (%) | pow (^) | neg (-) | abs (|) | . | sqr (a2) | sqrt (√a) | . | cumulate | . ",
    "url": "/docs/arithmetic-functions.html",
    
    "relUrl": "/docs/arithmetic-functions.html"
  },"175": {
    "doc": "ascii-files",
    "title": "ascii-files",
    "content": "ASCII files are often used as (exchange) formats for tabular data. The GeoDMS uses the gdal.vect storagemanager to read and some GeoDMS StorageManagers to read and write ASCII files. ASCII files are interpreted as UTF8 encoded, functions to translate UTF8 to other code tables are being developed. The following types of ASCII files are supported: . | csv: (comma-separated values file) | xml: these files can be read with the str-storagemanager and converted to meaningful arrays with the parse_xml function. | . ",
    "url": "/docs/ascii-files.html",
    
    "relUrl": "/docs/ascii-files.html"
  },"176": {
    "doc": "ascii-grid",
    "title": "configuration",
    "content": "The number of rows and columns, the projection information and the no data value of an ASCII grid can be read from the header of the file. Example, projection information derived from header: . unit&lt;uint32&gt; GridDomain: StorageName = \"%projdir%/data/testgrid.asc\" {    attribute&lt;uint32&gt; GridData; } . The subitem GridData is the attribute with the data from the ASCII grid file. The grid-domain can also be explicitly configured. Configuration with an explicitly configured GridDomain, the configuration of the ASCII grid file would be: . attribute&lt;uint32&gt; GridData (GridDomain): StorageName = \"%projdir%/data/testgrid.asc\"; . ",
    "url": "/docs/ascii-grid.html#configuration",
    
    "relUrl": "/docs/ascii-grid.html#configuration"
  },"177": {
    "doc": "ascii-grid",
    "title": "ascii-grid",
    "content": "With the ASCII grid storage manager the GeoDMS can read data from and write data to the ASCII grid format. Especially for larger grids it is not an advised format as reading and writing ASCII data is slow (we advice to use the geotiff format). ",
    "url": "/docs/ascii-grid.html",
    
    "relUrl": "/docs/ascii-grid.html"
  },"178": {
    "doc": "asdatastring",
    "title": "syntax",
    "content": ". | AsDataString(string_dataitem) | . ",
    "url": "/docs/asdatastring.html#syntax",
    
    "relUrl": "/docs/asdatastring.html#syntax"
  },"179": {
    "doc": "asdatastring",
    "title": "definition",
    "content": ". | AsDataString(string_dataitem) results in a string parameter with all values of string_dataitem, comma delimited and single quoted. | . ",
    "url": "/docs/asdatastring.html#definition",
    
    "relUrl": "/docs/asdatastring.html#definition"
  },"180": {
    "doc": "asdatastring",
    "title": "applies to",
    "content": ". | data-item string_dataitem with string value-type | . ",
    "url": "/docs/asdatastring.html#applies-to",
    
    "relUrl": "/docs/asdatastring.html#applies-to"
  },"181": {
    "doc": "asdatastring",
    "title": "example",
    "content": "parameter&lt;string&gt; CityListParam := AsDataString(City/Name);   result = 'Groningen,Delfzijl,Winschoten,Leeuwarden,Dokkum,Bolsward,Emmen,Assen,Hoogeveen' . | City/Name | . | ‘Groningen’ | . | ‘Delfzijl’ | . | ‘Winschoten’ | . | ‘Leeuwarden’ | . | ‘Dokkum’ | . | ‘Bolsward’ | . | ‘Emmen’ | . | ‘Assen’ | . | ‘Hoogeveen’ | . domain City, nr of rows = 9 . ",
    "url": "/docs/asdatastring.html#example",
    
    "relUrl": "/docs/asdatastring.html#example"
  },"182": {
    "doc": "asdatastring",
    "title": "see also",
    "content": ". | aslist | asexprlist | asitemlist | . ",
    "url": "/docs/asdatastring.html#see-also",
    
    "relUrl": "/docs/asdatastring.html#see-also"
  },"183": {
    "doc": "asdatastring",
    "title": "asdatastring",
    "content": "string-functions AsDataString . ",
    "url": "/docs/asdatastring.html",
    
    "relUrl": "/docs/asdatastring.html"
  },"184": {
    "doc": "asexprlist",
    "title": "syntax",
    "content": ". | AsExprList(string_dataitem) | AsExprList(string_dataitem, relation) | . ",
    "url": "/docs/asexprlist.html#syntax",
    
    "relUrl": "/docs/asexprlist.html#syntax"
  },"185": {
    "doc": "asexprlist",
    "title": "definition",
    "content": ". | AsExprList(string_dataitem, separator) results in a string parameter with all values of string_dataitem, semicolon delimited and single quoted. | AsExprList(string_dataitem, separator, relation) results in a string attribute with all values of string_dataitem, semicolon delimited and single quoted, grouped by the relation argument. The domain-unit of the resulting attribute is the values-unit of the relation. | . ",
    "url": "/docs/asexprlist.html#definition",
    
    "relUrl": "/docs/asexprlist.html#definition"
  },"186": {
    "doc": "asexprlist",
    "title": "applies to",
    "content": ". | data-item string_dataitem with string value-type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/asexprlist.html#applies-to",
    
    "relUrl": "/docs/asexprlist.html#applies-to"
  },"187": {
    "doc": "asexprlist",
    "title": "conditions",
    "content": "The domain units of arguments string_dataitem and relation must match. ",
    "url": "/docs/asexprlist.html#conditions",
    
    "relUrl": "/docs/asexprlist.html#conditions"
  },"188": {
    "doc": "asexprlist",
    "title": "example",
    "content": "1. parameter&lt;string&gt; CityListParam := AsExprList(City/Name); result = 'Groningen';'Delfzijl';'Winschoten';'Leeuwarden';'Dokkum';'Bolsward';'Emmen';'Assen';'Hoogeveen' 2. attribute&lt;string&gt; CityList (Region) := AsExprList(City/Name, City/Region_rel); . | City/Name | City/Region_rel | . | ‘Groningen’ | 0 | . | ‘Delfzijl’ | 0 | . | ‘Winschoten’ | 0 | . | ‘Leeuwarden’ | 1 | . | ‘Dokkum’ | 1 | . | ‘Bolsward’ | 1 | . | ‘Emmen’ | 2 | . | ‘Assen’ | 2 | . | ‘Hoogeveen’ | 2 | . domain City, nr of rows = 9 . | CityList | . | ‘Groningen’;‘Delfzijl’;‘Winschoten’ | . | ‘Leeuwarden’;‘Dokkum’;‘Bolsward’ | . | ‘Emmen’;‘Assen’;‘Hoogeveen’ | . domain Region nr of rows = 3 . ",
    "url": "/docs/asexprlist.html#example",
    
    "relUrl": "/docs/asexprlist.html#example"
  },"189": {
    "doc": "asexprlist",
    "title": "see also",
    "content": ". | aslist | asitemlist | asdatastring | . ",
    "url": "/docs/asexprlist.html#see-also",
    
    "relUrl": "/docs/asexprlist.html#see-also"
  },"190": {
    "doc": "asexprlist",
    "title": "asexprlist",
    "content": "string-functions AsExpr(ession)List . ",
    "url": "/docs/asexprlist.html",
    
    "relUrl": "/docs/asexprlist.html"
  },"191": {
    "doc": "ashex",
    "title": "syntax",
    "content": ". | AsHex(a) | . ",
    "url": "/docs/ashex.html#syntax",
    
    "relUrl": "/docs/ashex.html#syntax"
  },"192": {
    "doc": "ashex",
    "title": "definition",
    "content": "AsHex(a) results in a string data-item with the hexadecimal representation of data item a. ",
    "url": "/docs/ashex.html#definition",
    
    "relUrl": "/docs/ashex.html#definition"
  },"193": {
    "doc": "ashex",
    "title": "applies to",
    "content": ". | since version 7.408: data item with uint4, uint8, uint16, uint32, uint64, or string value-type . | for integers, the resulting strings always have a size based on the number of bits in the argument divided by 4 | for strings, the resulting string size is always the input size in bytes times 2. | . | since version 5.40: data item with uint32 or string value type | . ",
    "url": "/docs/ashex.html#applies-to",
    
    "relUrl": "/docs/ashex.html#applies-to"
  },"194": {
    "doc": "ashex",
    "title": "example",
    "content": "attribute&lt;uint8&gt; A8 (ADomain) : [ 0, 1, 11, 100, 255]; attribute&lt;uint32&gt; A32 (ADomain) := uint32(A8); attribute&lt;string&gt; AsHexA (ADomain) := asHex(A32); attribute&lt;string&gt; AsHexB (ADomain) := asHex(A8); . | A8 | AsHexA (prior to 7.408) | AsHexA (since 7.408) | AsHexB (since 7.408) | . | 0 | ‘0’ | ‘00000000’ | ‘00’ | . | 1 | ‘1’ | ‘00000001’ | ‘01’ | . | 11 | ‘B’ | ‘0000000B’ | ‘0B’ | . | 100 | ‘64’ | ‘00000064’ | ‘64’ | . | 255 | ‘FFFFFFFF’ | ‘FFFFFFFF’ | ‘FF’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/ashex.html#example",
    
    "relUrl": "/docs/ashex.html#example"
  },"195": {
    "doc": "ashex",
    "title": "ashex",
    "content": "conversion-functions AsHex . ",
    "url": "/docs/ashex.html",
    
    "relUrl": "/docs/ashex.html"
  },"196": {
    "doc": "asitemlist",
    "title": "syntax",
    "content": ". | AsItemList(string_dataitem) | AsItemList(string_dataitem, relation) | . ",
    "url": "/docs/asitemlist.html#syntax",
    
    "relUrl": "/docs/asitemlist.html#syntax"
  },"197": {
    "doc": "asitemlist",
    "title": "definition",
    "content": ". | AsItemList(string_dataitem) results in a string parameter with all values of string_dataitem, comma delimited. | AsItemList(string_dataitem, relation) results in a string attribute with all values of string_dataitem, , comma delimited, grouped by the relation data-item. The domain-unit of the resulting attribute is the values-unit of the relation argument. | . ",
    "url": "/docs/asitemlist.html#definition",
    
    "relUrl": "/docs/asitemlist.html#definition"
  },"198": {
    "doc": "asitemlist",
    "title": "applies to",
    "content": ". | data items string_dataitem with string value-type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/asitemlist.html#applies-to",
    
    "relUrl": "/docs/asitemlist.html#applies-to"
  },"199": {
    "doc": "asitemlist",
    "title": "conditions",
    "content": "The domain units of the arguments string_dataitem and relation must match. ",
    "url": "/docs/asitemlist.html#conditions",
    
    "relUrl": "/docs/asitemlist.html#conditions"
  },"200": {
    "doc": "asitemlist",
    "title": "example",
    "content": "1. parameter&lt;string&gt; CityListParam := AsItemList(City/Name);  result = 'Groningen,Delfzijl,Winschoten,Leeuwarden,Dokkum,Bolsward,Emmen,Assen,Hoogeveen' 2. attribute&lt;string&gt; CityList (Region) := AsItemList(City/Name, City/Region_rel); . | City/Name | City/Region_rel | . | ‘Groningen’ | 0 | . | ‘Delfzijl’ | 0 | . | ‘Winschoten’ | 0 | . | ‘Leeuwarden’ | 1 | . | ‘Dokkum’ | 1 | . | ‘Bolsward’ | 1 | . | ‘Emmen’ | 2 | . | ‘Assen’ | 2 | . | ‘Hoogeveen’ | 2 | . domain City, nr of rows = 9 . | CityList | . | ‘Groningen,Delfzijl,Winschoten’ | . | ‘Leeuwarden,Dokkum,Bolsward’ | . | ‘Emmen,Assen,Hoogeveen’ | . domain Region, nr of rows = 3 . ",
    "url": "/docs/asitemlist.html#example",
    
    "relUrl": "/docs/asitemlist.html#example"
  },"201": {
    "doc": "asitemlist",
    "title": "see also",
    "content": ". | aslist | asexprlist | asdatastring | . ",
    "url": "/docs/asitemlist.html#see-also",
    
    "relUrl": "/docs/asitemlist.html#see-also"
  },"202": {
    "doc": "asitemlist",
    "title": "asitemlist",
    "content": "string-functions AsItemList . ",
    "url": "/docs/asitemlist.html",
    
    "relUrl": "/docs/asitemlist.html"
  },"203": {
    "doc": "asitemname",
    "title": "syntax",
    "content": ". | AsItemName(string_dataitem) | . ",
    "url": "/docs/asitemname.html#syntax",
    
    "relUrl": "/docs/asitemname.html#syntax"
  },"204": {
    "doc": "asitemname",
    "title": "definition",
    "content": "AsItemName(string_dataitem) results in the conversion from string argument string_dataitem to a valid tree-item-name. Invalid characters (including spaces) are replaced by underscores. Multiple underscores behind each other are replaced by one underscore. If the string starts with a numeric character, an underscore is used as first character. ",
    "url": "/docs/asitemname.html#definition",
    
    "relUrl": "/docs/asitemname.html#definition"
  },"205": {
    "doc": "asitemname",
    "title": "applies to",
    "content": "data-item with string value-type . ",
    "url": "/docs/asitemname.html#applies-to",
    
    "relUrl": "/docs/asitemname.html#applies-to"
  },"206": {
    "doc": "asitemname",
    "title": "conditions",
    "content": "argument string_dataitem must be utf8 encoded (default). ",
    "url": "/docs/asitemname.html#conditions",
    
    "relUrl": "/docs/asitemname.html#conditions"
  },"207": {
    "doc": "asitemname",
    "title": "since version",
    "content": "7.412 . ",
    "url": "/docs/asitemname.html#since-version",
    
    "relUrl": "/docs/asitemname.html#since-version"
  },"208": {
    "doc": "asitemname",
    "title": "example",
    "content": "parameter&lt;string&gt; ValidItemName := AsItemName(a); . | a | ValidItemName | . | ‘12&amp;e €b naam’ | ‘12_e€b_naam’ | . ",
    "url": "/docs/asitemname.html#example",
    
    "relUrl": "/docs/asitemname.html#example"
  },"209": {
    "doc": "asitemname",
    "title": "asitemname",
    "content": "string-functions AsItemName . ",
    "url": "/docs/asitemname.html",
    
    "relUrl": "/docs/asitemname.html"
  },"210": {
    "doc": "aslist",
    "title": "syntax",
    "content": ". | asList(string_dataitem, separator) | asList(string_dataitem, separator, relation) | . ",
    "url": "/docs/aslist.html#syntax",
    
    "relUrl": "/docs/aslist.html#syntax"
  },"211": {
    "doc": "aslist",
    "title": "definition",
    "content": ". | asList(string_dataitem, separator) results in a string parameter with all values of string_dataitem, separated by the separator argument. | asList(string_dataitem, separator, relation) results in a string attribute with all values of string_dataitem, separated by the separator argument, grouped by the relation argument. The domain-unit of the resulting attribute is the values-unit of the relation. | . ",
    "url": "/docs/aslist.html#definition",
    
    "relUrl": "/docs/aslist.html#definition"
  },"212": {
    "doc": "aslist",
    "title": "applies to",
    "content": ". | data-item string_dataitem and separator with string value-type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/aslist.html#applies-to",
    
    "relUrl": "/docs/aslist.html#applies-to"
  },"213": {
    "doc": "aslist",
    "title": "conditions",
    "content": "The domain units of arguments string_dataitem and relation must match. ",
    "url": "/docs/aslist.html#conditions",
    
    "relUrl": "/docs/aslist.html#conditions"
  },"214": {
    "doc": "aslist",
    "title": "example",
    "content": "1. parameter&lt;string&gt; CityListParam := AsList(City/Name, ';');   result = 'Groningen;Delfzijl;Winschoten;Leeuwarden;Dokkum;Bolsward;Emmen;Assen;Hoogeveen' 2. attribute&lt;string&gt; CityList (Region) := AsList(City/Name, ';', City/Region_rel); . | City/Name | City/Region_rel | . | ‘Groningen’ | 0 | . | ‘Delfzijl’ | 0 | . | ‘Winschoten’ | 0 | . | ‘Leeuwarden’ | 1 | . | ‘Dokkum’ | 1 | . | ‘Bolsward’ | 1 | . | ‘Emmen’ | 2 | . | ‘Assen’ | 2 | . | ‘Hoogeveen’ | 2 | . domain City, nr of rows = 9 . | CityList | . | ‘Groningen;Delfzijl;Winschoten’ | . | ‘Leeuwarden;Dokkum;Bolsward’ | . | ‘Emmen;Assen;Hoogeveen’ | . domain Region, nr of rows = 3 . ",
    "url": "/docs/aslist.html#example",
    
    "relUrl": "/docs/aslist.html#example"
  },"215": {
    "doc": "aslist",
    "title": "see also",
    "content": ". | asexprlist | asitemlist | asdatastring | . ",
    "url": "/docs/aslist.html#see-also",
    
    "relUrl": "/docs/aslist.html#see-also"
  },"216": {
    "doc": "aslist",
    "title": "aslist",
    "content": "string-functions AsList . ",
    "url": "/docs/aslist.html",
    
    "relUrl": "/docs/aslist.html"
  },"217": {
    "doc": "atan",
    "title": "syntax",
    "content": ". | atan(a) | . ",
    "url": "/docs/atan.html#syntax",
    
    "relUrl": "/docs/atan.html#syntax"
  },"218": {
    "doc": "atan",
    "title": "definition",
    "content": "atan(a) results in the arc tangent of data-item a. ",
    "url": "/docs/atan.html#definition",
    
    "relUrl": "/docs/atan.html#definition"
  },"219": {
    "doc": "atan",
    "title": "applies to",
    "content": "data item a with float32 or float64 value-type . ",
    "url": "/docs/atan.html#applies-to",
    
    "relUrl": "/docs/atan.html#applies-to"
  },"220": {
    "doc": "atan",
    "title": "since version",
    "content": "5.18 . ",
    "url": "/docs/atan.html#since-version",
    
    "relUrl": "/docs/atan.html#since-version"
  },"221": {
    "doc": "atan",
    "title": "example",
    "content": "attribute&lt;float64&gt; atanAngle_rad (ADomain) := atan(tanAngle_rad); . | Angle(°) | Angle_rad(rad) | tanAngle_radA | atanAngle_rad | . | 0 | 0 | 1 | 0 | . | 30 | 0.52 | 0.58 | 0.52 | . | 45 | 0.79 | 1 | 0.79 | . | 420 | 7.33 | 1.73 | 1.05 | . | null | null | null | null | . ADomain, nr of rows = 5 . ",
    "url": "/docs/atan.html#example",
    
    "relUrl": "/docs/atan.html#example"
  },"222": {
    "doc": "atan",
    "title": "see also",
    "content": ". | tan | . ",
    "url": "/docs/atan.html#see-also",
    
    "relUrl": "/docs/atan.html#see-also"
  },"223": {
    "doc": "atan",
    "title": "atan",
    "content": "trigonometric-functions a(rc)tan(gent) . ",
    "url": "/docs/atan.html",
    
    "relUrl": "/docs/atan.html"
  },"224": {
    "doc": "atomicregionmap",
    "title": "definition",
    "content": "AtomicRegionMap is the seventh argument of the discrete_alloc function. AtomicRegionMap is an attribute that defines to which atomic region each land unit belongs. The values-unit of this attribute must be the AtomicRegions unit, the domain-unit the LandUnitDomain unit. ",
    "url": "/docs/atomicregionmap.html#definition",
    
    "relUrl": "/docs/atomicregionmap.html#definition"
  },"225": {
    "doc": "atomicregionmap",
    "title": "description",
    "content": "If the overlay function is used to derive a AtomicRegions unit, the resulting UnionData subitem of this function can be used as a base for an AtomicRegionMap, see the example. The lookup operator is needed to relate the UnionData subitem to the LandUnitDomain for which the actual allocation is performed. ",
    "url": "/docs/atomicregionmap.html#description",
    
    "relUrl": "/docs/atomicregionmap.html#description"
  },"226": {
    "doc": "atomicregionmap",
    "title": "applies to",
    "content": "attribute AtomicRegionMap with value-type: . | uint8 or | uint16 | . ",
    "url": "/docs/atomicregionmap.html#applies-to",
    
    "relUrl": "/docs/atomicregionmap.html#applies-to"
  },"227": {
    "doc": "atomicregionmap",
    "title": "example",
    "content": "unit&lt;uint8&gt; lu_type: nrofrows = 3 {  attribute&lt;string&gt; PartioningName: ['Living','Working','Nature']; } container regionSets {    attribute&lt;regMaps/p1&gt; Nature  (DomainGrid) := regMaps/p1Map;    attribute&lt;regMaps/p1&gt; Living  (DomainGrid) := regMaps/p1Map;    attribute&lt;regMaps/p2&gt; Working (DomainGrid) := regMaps/p2Map; } unit&lt;uint16&gt;             AtomicRegions             := overlay(lu_type/PartioningName, DomainGrid, regionSets); attribute&lt;AtomicRegions&gt; AtomicRegionMap (ADomain) := AtomicRegions/UnionData[ADomain/nr_orgEntity]; . ",
    "url": "/docs/atomicregionmap.html#example",
    
    "relUrl": "/docs/atomicregionmap.html#example"
  },"228": {
    "doc": "atomicregionmap",
    "title": "atomicregionmap",
    "content": "allocation-functions, argument 7: AtomicRegionMap . ",
    "url": "/docs/atomicregionmap.html",
    
    "relUrl": "/docs/atomicregionmap.html"
  },"229": {
    "doc": "atomicregions",
    "title": "definition",
    "content": "AtomicRegions is the sixth argument of the discrete_alloc function. AtomicRegions is a domain-unit defining the set of atomic regions. It contains attribute for each partioningattribute that define to which region each atomic region belongs for that PartioningAttribute. ",
    "url": "/docs/atomicregions.html#definition",
    
    "relUrl": "/docs/atomicregions.html#definition"
  },"230": {
    "doc": "atomicregions",
    "title": "description",
    "content": "The overlay function is used to derive a AtomicRegions unit with the set of relevant subitem for the discrete_alloc function, see the example. ",
    "url": "/docs/atomicregions.html#description",
    
    "relUrl": "/docs/atomicregions.html#description"
  },"231": {
    "doc": "atomicregions",
    "title": "applies to",
    "content": "unit AtomicRegions with value-type: . | uint8 or | uint16 | . ",
    "url": "/docs/atomicregions.html#applies-to",
    
    "relUrl": "/docs/atomicregions.html#applies-to"
  },"232": {
    "doc": "atomicregions",
    "title": "applies to",
    "content": "The names of the regions (subitem of the third argument of the overlay function need to match with the values of the partioningname argument. ",
    "url": "/docs/atomicregions.html#applies-to-1",
    
    "relUrl": "/docs/atomicregions.html#applies-to-1"
  },"233": {
    "doc": "atomicregions",
    "title": "example",
    "content": "unit&lt;uint8&gt; lu_type: nrofrows = 3 {     attribute&lt;string&gt; PartioningName: ['Living','Working','Nature']; } container regionSets {    attribute&lt;regMaps/p1&gt; Nature  (DomainGrid) := regMaps/p1Map;    attribute&lt;regMaps/p1&gt; Living  (DomainGrid) := regMaps/p1Map;    attribute&lt;regMaps/p2&gt; Working (DomainGrid) := regMaps/p2Map; } unit&lt;uint16&gt; AtomicRegions := overlay(lu_type/PartioningName, DomainGrid, regionSets); . ",
    "url": "/docs/atomicregions.html#example",
    
    "relUrl": "/docs/atomicregions.html#example"
  },"234": {
    "doc": "atomicregions",
    "title": "atomicregions",
    "content": "allocation-functions, argument 6: AtomicRegions . ",
    "url": "/docs/atomicregions.html",
    
    "relUrl": "/docs/atomicregions.html"
  },"235": {
    "doc": "attribute",
    "title": "syntax",
    "content": ". | Start with the keyword: attribute | Configure between the less than (&lt;) and greater than (&gt;) characters it’s values-unit. | Next configure the tree-item-name of the parameter. | Configure between normal brackets it’s domain unit. | For attributes often configured expression are configured but also other property can be configured. | To finalize the definition of an item, configure a semicolon (;) character. | . ",
    "url": "/docs/attribute.html#syntax",
    
    "relUrl": "/docs/attribute.html#syntax"
  },"236": {
    "doc": "attribute",
    "title": "example",
    "content": "attribute&lt;hectare&gt; building (grid_500m) := residential + utility; . The example configures an attribute called building. The values are expressed in hectares, so hectare is configured as values unit. The domain unit for this attribute is grid_500m, defining a grid with cells of 500 * 500 meter. The attribute results are calculated with an expression, buildings is defined as the sum of residential and utility. ",
    "url": "/docs/attribute.html#example",
    
    "relUrl": "/docs/attribute.html#example"
  },"237": {
    "doc": "attribute",
    "title": "attribute",
    "content": "Attributes are data items|data_item]] referring to arrays of data values. Conceptually attributes are characteristics of an entity, think about a column in a table. In the GeoDMS this means that each attribute belongs to such a table, the so-called domain-unit. ",
    "url": "/docs/attribute.html",
    
    "relUrl": "/docs/attribute.html"
  },"238": {
    "doc": "background-layer",
    "title": "WMTS",
    "content": "Since version 7.163 the GeoDMS supports web mapping services (WMTS) as a background layer. See wmts-background-layer for examples on how to configure such a WMS webservice. Using a WMTS background layer is advised for most projects, as it is a scale dependent and limits the amount of data that need to be shipped for a project. ",
    "url": "/docs/background-layer.html#wmts",
    
    "relUrl": "/docs/background-layer.html#wmts"
  },"239": {
    "doc": "background-layer",
    "title": "data items",
    "content": "If a coordinate system is used without WMTS services, it is also possible to configure data-item as background layer. The background layer usually consists of a (set of) reference layers, they can be scale dependent. In the legend of the map view they are combined to one entry called Background. The background layerset is configured with the dialogdata property for the how-to-configure-a-coordinate-system. Example: . unit&lt;fpoint&gt; point_rd := baseunit('m', fpoint) ,  DialogData = \"SourceData/reference/level_III/Amsterdam/map_bw;SourceData/reference/level_III/Utrecht/map_bw\"; . In the example two data-item are configured as Background Layer, of which ten are scale dependent. A semicolon(;) character is used as delimiter between the item names. ",
    "url": "/docs/background-layer.html#data-items",
    
    "relUrl": "/docs/background-layer.html#data-items"
  },"240": {
    "doc": "background-layer",
    "title": "background-layer",
    "content": " ",
    "url": "/docs/background-layer.html",
    
    "relUrl": "/docs/background-layer.html"
  },"241": {
    "doc": "bag-relate-attributes-and-make-grids-example",
    "title": "contents",
    "content": "The example has two sections: . 1) in the container: RelateerAttributen, you will find examples of how attributes are related to the vbo and pand domain-unit. The configuration contains: . | simple examples, like how to relate the building years from panden to the vbo’s related to these panden | more complex examples like how to relate adres ranges to panden. | . 2) In the container: AttributenNaarGrid, you will find examples on how to visualise numerical (vbo surfaces) or categorical data (building year classes) in grids of 250, 100 and 25 meter. It also includes focal statistics (potential) calculations) with kernels of 33, 55 and 25*25 cells. ",
    "url": "/docs/bag-relate-attributes-and-make-grids-example.html#contents",
    
    "relUrl": "/docs/bag-relate-attributes-and-make-grids-example.html#contents"
  },"242": {
    "doc": "bag-relate-attributes-and-make-grids-example",
    "title": "download",
    "content": ". | configuration/data | . ",
    "url": "/docs/bag-relate-attributes-and-make-grids-example.html#download",
    
    "relUrl": "/docs/bag-relate-attributes-and-make-grids-example.html#download"
  },"243": {
    "doc": "bag-relate-attributes-and-make-grids-example",
    "title": "concepts",
    "content": ". | BAG | grid/raster analysis | . ",
    "url": "/docs/bag-relate-attributes-and-make-grids-example.html#concepts",
    
    "relUrl": "/docs/bag-relate-attributes-and-make-grids-example.html#concepts"
  },"244": {
    "doc": "bag-relate-attributes-and-make-grids-example",
    "title": "functions",
    "content": ". | poly2grid | potential | point_in_polygon | rlookup | invert | gridset | dist2 | centroid | for_each | sum, min, max, first, modus, pcount | aslist | . ",
    "url": "/docs/bag-relate-attributes-and-make-grids-example.html#functions",
    
    "relUrl": "/docs/bag-relate-attributes-and-make-grids-example.html#functions"
  },"245": {
    "doc": "bag-relate-attributes-and-make-grids-example",
    "title": "bag-relate-attributes-and-make-grids-example",
    "content": "configuration-examples BAG relate attributes and make grids . This script uses a BAG snapshot, made with the BAG Toolkit and presents examples on . | how to relate attributes between different BAG objects | how to make grid maps with potential calculations. | . In the download you will find a configuration and an example BAG snapshot data set for the municipality of Nieuwegein. Disclaimer: This dataset is only to be used for example purposes. Change the SnapshotBaseDir parameter (in the root file of the configuration) to refer to another (national) shapshot. ",
    "url": "/docs/bag-relate-attributes-and-make-grids-example.html",
    
    "relUrl": "/docs/bag-relate-attributes-and-make-grids-example.html"
  },"246": {
    "doc": "base-grid",
    "title": "example",
    "content": "attribute&lt;bool&gt; IsAllocatable (GridDomain) := LandUseType == luEndogenous unit&lt;uint32&gt; FreeLandCells := select_with_org_rel(IsAllocatable) {    attribute&lt;FreeLandCells&gt; permutation                  := rnd_permutation(0, rnd_FreeLandCells);    attribute&lt;GridDomain&gt;    org_rel2 (FreeLandCells) := org_rel[permutation];    attribute&lt;FreeLandCells&gt; BaseGrid     (GridDomain)    := invert(org_rel2); } attribute&lt;dollar_ha&gt; Residential  (FreeLandCells)  := SuitabilityMap/Residential[FreeLandCells/nr_OrgEntity2]; attribute&lt;Classifications/LU/Endogenous&gt; landuse_grid (GridDomain)     := landuse[Compact/FreeLandCells/BaseGrid]; . | The IsAllocatable attribute is a boolean attribute defining the condition for the selection of allocatable cells. | The FreeLandCells unit is the domain unit of the allocatable cells. A random permutation is used in this domain to process all grid cells in a random order. This is usefull if the suitability maps are not distinctive enough, resulting in multiple cells with the same suitability. The random order prevents in this situation an allocation mainly derived from the grid cell coordinate. | The BaseGrid attribute defines the relation from the GridDomain domain unit towards the FreeLandCells domain. | The Residential attribute presents an example of how to relate an attribute (in this case the suitability map for Residential) from the GridDomain towards the FreeLandCells domain. | The landuse_grid attribute presents an example of how to to relate the results of the allocation at the FreeLandCells domain backwards to the GridDomain. | . ",
    "url": "/docs/base-grid.html#example",
    
    "relUrl": "/docs/base-grid.html#example"
  },"247": {
    "doc": "base-grid",
    "title": "base-grid",
    "content": "A grid defines a two-dimensional structure in which each cell has a value. But for some operators-and-functions many cells might be irrelevant. Think for example of a Allocation function that does not allocate sea cells. If the number of irrelevant cells is substantial, it is more efficient to apply operators and functions on a subset of the grid cells. This subset only contains the cells that are relevant. A Base Grid attribute is configured as the relation for the grid domain unit towards the one-dimensional subset domain (usually a uint32 domain-unit). This basegrid is used to convert the results at the subset domain back to the original grid domain. This is necessary for the visualisation in a Map View. ",
    "url": "/docs/base-grid.html",
    
    "relUrl": "/docs/base-grid.html"
  },"248": {
    "doc": "base-unit",
    "title": "example",
    "content": "unit&lt;float32&gt; meter  := BaseUnit('meter','float64'); unit&lt;float64&gt; second := BaseUnit('seconde','float64'); . In the examples two values-unit are configured as base units. The value-type of the first unit is float32, of the second float64. ",
    "url": "/docs/base-unit.html#example",
    
    "relUrl": "/docs/base-unit.html#example"
  },"249": {
    "doc": "base-unit",
    "title": "be aware",
    "content": "The evaluation of a base unit is executed when the meta/scheme information is generated in the geodms-gui. If for this evaluation (large) primary files are read, this becomes times consuming. Expanding tree items in the treeview becomes slow. Therefor we advice to use the contents of large primary data file (or complex calculations) as little as possible in configuring base units. ",
    "url": "/docs/base-unit.html#be-aware",
    
    "relUrl": "/docs/base-unit.html#be-aware"
  },"250": {
    "doc": "base-unit",
    "title": "base-unit",
    "content": "Base units are root unit from which other units can be derived. In Physics usually SI units are used as base units. The GeoDMS is also used in other research areas, so also other base units can be configured, like monetary units (Euro, Dollar). The following rules apply to the definition of base units: . | If possible, use SI units as base units, | See naming-conventions for advised names. | Use other base units like monetary units, nrInhabitants, nrHouses etc. if it is relevant within your model to distinguish their quantities. | . BaseUnits are configured with the baseunit function. ",
    "url": "/docs/base-unit.html",
    
    "relUrl": "/docs/base-unit.html"
  },"251": {
    "doc": "baseunit",
    "title": "concept",
    "content": ". | BaseUnit is a type of values-unit, for which the metric and value-type are explicitly configured. | BaseUnit() is a function to configure a values unit as base unit. | . This page describe the BaseUnit() function. ",
    "url": "/docs/baseunit.html#concept",
    
    "relUrl": "/docs/baseunit.html#concept"
  },"252": {
    "doc": "baseunit",
    "title": "syntax",
    "content": ". | BaseUnit(metric, valuetype) | . ",
    "url": "/docs/baseunit.html#syntax",
    
    "relUrl": "/docs/baseunit.html#syntax"
  },"253": {
    "doc": "baseunit",
    "title": "definition",
    "content": "BaseUnit(metric, valuetype) configures values units as base-unit, e.g. meter or second. The metric of the new unit is configured as first argument. The value type of the new unit is configured as second argument. ",
    "url": "/docs/baseunit.html#definition",
    
    "relUrl": "/docs/baseunit.html#definition"
  },"254": {
    "doc": "baseunit",
    "title": "applies to",
    "content": ". | literal metric as string value | valuetype with any value type, although usually only value types of the NumericGroup are used in base units. | . ",
    "url": "/docs/baseunit.html#applies-to",
    
    "relUrl": "/docs/baseunit.html#applies-to"
  },"255": {
    "doc": "baseunit",
    "title": "example",
    "content": "container units {    unit&lt;float32&gt; m  := BaseUnit('meter', float32);    unit&lt;float32&gt; m2 := m * m; } . result: configured base unit m and used in a derived unit m2. ",
    "url": "/docs/baseunit.html#example",
    
    "relUrl": "/docs/baseunit.html#example"
  },"256": {
    "doc": "baseunit",
    "title": "baseunit",
    "content": "unit-functions BaseUnit . ",
    "url": "/docs/baseunit.html",
    
    "relUrl": "/docs/baseunit.html"
  },"257": {
    "doc": "bg_buffer_linestring",
    "title": "syntax",
    "content": ". | bg_buffer_linestring(arc_data_item, size, nr_angles) | . ",
    "url": "/docs/bg_buffer_linestring.html#syntax",
    
    "relUrl": "/docs/bg_buffer_linestring.html#syntax"
  },"258": {
    "doc": "bg_buffer_linestring",
    "title": "definition",
    "content": "bg_buffer_linestring(point_data_item, size, nr_angles) results in a polygon data-item with buffer polygons around each arc in the arc_data_item. The resulting data item has the same domain-unit as the arc_data_item, with composition type poly. The size argument indicates the buffer size. The nr_angles argument indicates how many angles are used to make the buffer angles. More angles results in smoother circles but also in more data. The bg_ prefix of the function name indicates that the implementation of operator uses boost geometry library, more specifically, the buffer function. ",
    "url": "/docs/bg_buffer_linestring.html#definition",
    
    "relUrl": "/docs/bg_buffer_linestring.html#definition"
  },"259": {
    "doc": "bg_buffer_linestring",
    "title": "applies to",
    "content": ". | attribute arc_data_item with a point value-type and a composition type arc. Composition type polygon might also work but is not yet tested. | parameter size with a float64 value type | parameter nr_angles with a uint8 value type | . ",
    "url": "/docs/bg_buffer_linestring.html#applies-to",
    
    "relUrl": "/docs/bg_buffer_linestring.html#applies-to"
  },"260": {
    "doc": "bg_buffer_linestring",
    "title": "since version",
    "content": "8.031 . ",
    "url": "/docs/bg_buffer_linestring.html#since-version",
    
    "relUrl": "/docs/bg_buffer_linestring.html#since-version"
  },"261": {
    "doc": "bg_buffer_linestring",
    "title": "example",
    "content": "attribute&lt;fpoint&gt; arc_buffer (poly, arcset) := bg_buffer_linestring(arcset/geometry, 10.0, 16b); . more examples of buffer functions can be found here: buffer-processing-example . ",
    "url": "/docs/bg_buffer_linestring.html#example",
    
    "relUrl": "/docs/bg_buffer_linestring.html#example"
  },"262": {
    "doc": "bg_buffer_linestring",
    "title": "see also",
    "content": ". | bg_buffer_point | bg_buffer_multi_polygon | bg_buffer_multi_point | . ",
    "url": "/docs/bg_buffer_linestring.html#see-also",
    
    "relUrl": "/docs/bg_buffer_linestring.html#see-also"
  },"263": {
    "doc": "bg_buffer_linestring",
    "title": "bg_buffer_linestring",
    "content": "geometric-functions bg_buffer_linestring . ",
    "url": "/docs/bg_buffer_linestring.html",
    
    "relUrl": "/docs/bg_buffer_linestring.html"
  },"264": {
    "doc": "bg_buffer_multi_point",
    "title": "syntax",
    "content": ". | bg_buffer_multi_point(arc/polygon_data_item, size, nr_angles) | . ",
    "url": "/docs/bg_buffer_multi_point.html#syntax",
    
    "relUrl": "/docs/bg_buffer_multi_point.html#syntax"
  },"265": {
    "doc": "bg_buffer_multi_point",
    "title": "definition",
    "content": "bg_buffer_multi_point(arc/polygon_data_item, size, nr_angles) results in a multi polygon data-item with buffer circles around each coordinate in the arc/polygon_data_item. The resulting data item has the same domain-unit as the arc/polygon_data_item. The size arguments indicates the buffer circle size. The nr_angles arguments indicates how many angles are used to make the buffer circles. More angles results in smoother circles but also in more data. The bg_ prefix of the function name indicates that the implementation of operator uses boost geometry library, more specifically, the buffer function. ",
    "url": "/docs/bg_buffer_multi_point.html#definition",
    
    "relUrl": "/docs/bg_buffer_multi_point.html#definition"
  },"266": {
    "doc": "bg_buffer_multi_point",
    "title": "applies to",
    "content": ". | attribute arc/polygon_data_item with a point value-type and [composition arc or polygon | parameter size with a float64 value type | parameter nr_angles with a uint8 value type | . ",
    "url": "/docs/bg_buffer_multi_point.html#applies-to",
    
    "relUrl": "/docs/bg_buffer_multi_point.html#applies-to"
  },"267": {
    "doc": "bg_buffer_multi_point",
    "title": "since version",
    "content": "7.413 . ",
    "url": "/docs/bg_buffer_multi_point.html#since-version",
    
    "relUrl": "/docs/bg_buffer_multi_point.html#since-version"
  },"268": {
    "doc": "bg_buffer_multi_point",
    "title": "example",
    "content": "attribute&lt;fpoint&gt; buffer_circles (polygon, district) := bg_buffer_multi_point(district/geometry, 10.0, 16b); . more examples of buffer functions can be found here: buffer-processing-example . ",
    "url": "/docs/bg_buffer_multi_point.html#example",
    
    "relUrl": "/docs/bg_buffer_multi_point.html#example"
  },"269": {
    "doc": "bg_buffer_multi_point",
    "title": "see also",
    "content": ". | bg_buffer_point | bg_buffer_linestring | bg_buffer_multi_polygon | . ",
    "url": "/docs/bg_buffer_multi_point.html#see-also",
    
    "relUrl": "/docs/bg_buffer_multi_point.html#see-also"
  },"270": {
    "doc": "bg_buffer_multi_point",
    "title": "bg_buffer_multi_point",
    "content": "geometric-functions bg_buffer_multi_point . ",
    "url": "/docs/bg_buffer_multi_point.html",
    
    "relUrl": "/docs/bg_buffer_multi_point.html"
  },"271": {
    "doc": "bg_buffer_multi_polygon",
    "title": "syntax",
    "content": ". | bg_buffer_multi_polygon(polygon_data_item, size, nr_angles) | . ",
    "url": "/docs/bg_buffer_multi_polygon.html#syntax",
    
    "relUrl": "/docs/bg_buffer_multi_polygon.html#syntax"
  },"272": {
    "doc": "bg_buffer_multi_polygon",
    "title": "definition",
    "content": "bg_buffer_multi_polygon(point_data_item, size, nr_angles) results in a polygon data-item with buffer polygons around each polygon in the polygon_data_item. The resulting data item has the same domain-unit as the polygon_data_item. The size arguments indicates the buffer size. The nr_angles arguments indicates how many angles are used to make the buffer angles. More angles results in smoother circles but also in more data. The bg_ prefix of the function name indicates that the implementation of operator uses boost geometry library, more specifically, the buffer function. ",
    "url": "/docs/bg_buffer_multi_polygon.html#definition",
    
    "relUrl": "/docs/bg_buffer_multi_polygon.html#definition"
  },"273": {
    "doc": "bg_buffer_multi_polygon",
    "title": "description",
    "content": "The bg_buffer_multi_polygon function can be used as alternative for the polygon-inflated and polygon-deflated functions. The bg_buffer_multi_polygon is much faster, but for complex polygons it might be less accurate. | Use a positive size argument to increase polygons (outer rings including islands are increased, inner rings (lakes) are decreased). | Use a negative size argument to decrease polygons (outer rings including islands are decreased, inner rings (lakes) are increased). | . If only the buffer polygon without the orginal polygon is needed, use the sub-(difference) function the cut out the original polygon from the result of the bg_buffer_multi_polygon function. The bg_buffer_multi_polygon does not always work correctly with holes and lakes if polygon geometries are not valid. If self-interactions occur in polygons we noticed unexpected results. We advice to use e.g. QGis to check the validity of your polygons before applying the bg_buffer_multi_polygon function. Within the GeoDMS you can use the mul-(overlap) function (first and second argument are the same) to clean your polygon topology. If that does not solve the issue, we advice to first use the split_polygon function to make a set with single polygons first and perform the bg_buffer_multi_polygon function on the single polygons. ",
    "url": "/docs/bg_buffer_multi_polygon.html#description",
    
    "relUrl": "/docs/bg_buffer_multi_polygon.html#description"
  },"274": {
    "doc": "bg_buffer_multi_polygon",
    "title": "applies to",
    "content": ". | attribute polygon_data_item with a point value-type and a composition polygon. | parameter size with a float64 value type | parameter nr_angles with a uint8 value type | . ",
    "url": "/docs/bg_buffer_multi_polygon.html#applies-to",
    
    "relUrl": "/docs/bg_buffer_multi_polygon.html#applies-to"
  },"275": {
    "doc": "bg_buffer_multi_polygon",
    "title": "since version",
    "content": "8.031 . ",
    "url": "/docs/bg_buffer_multi_polygon.html#since-version",
    
    "relUrl": "/docs/bg_buffer_multi_polygon.html#since-version"
  },"276": {
    "doc": "bg_buffer_multi_polygon",
    "title": "example",
    "content": "attribute&lt;fpoint&gt; polygon_buffer (polygon, district) := bg_buffer_multi_polygon(polyset/geometry, 10.0, 16b); . more examples of buffer functions can be found here: buffer-processing-example . ",
    "url": "/docs/bg_buffer_multi_polygon.html#example",
    
    "relUrl": "/docs/bg_buffer_multi_polygon.html#example"
  },"277": {
    "doc": "bg_buffer_multi_polygon",
    "title": "see also",
    "content": ". | bg_buffer_point | bg_buffer_linestring | bg_buffer_multi_point | . ",
    "url": "/docs/bg_buffer_multi_polygon.html#see-also",
    
    "relUrl": "/docs/bg_buffer_multi_polygon.html#see-also"
  },"278": {
    "doc": "bg_buffer_multi_polygon",
    "title": "bg_buffer_multi_polygon",
    "content": "geometric-functions bg_buffer_multi_polygon . ",
    "url": "/docs/bg_buffer_multi_polygon.html",
    
    "relUrl": "/docs/bg_buffer_multi_polygon.html"
  },"279": {
    "doc": "bg_buffer_point",
    "title": "syntax",
    "content": ". | bg_buffer_point(point_data_item, size, nr_angles) | . ",
    "url": "/docs/bg_buffer_point.html#syntax",
    
    "relUrl": "/docs/bg_buffer_point.html#syntax"
  },"280": {
    "doc": "bg_buffer_point",
    "title": "definition",
    "content": "bg_buffer_point(point_data_item, size, nr_angles) results in a polygon data-item with buffer circles around each point in the point_data_item. The resulting data item has the same domain-unit as the point_data_item. The size argument indicates the buffer circle size. The nr_angles argument indicates how many angles are used to make the buffer circles. More angles results in smoother circles but also in more data. The bg_ prefix of the function name indicates that the implementation of operator uses boost geometry library, more specifically, the buffer function. ",
    "url": "/docs/bg_buffer_point.html#definition",
    
    "relUrl": "/docs/bg_buffer_point.html#definition"
  },"281": {
    "doc": "bg_buffer_point",
    "title": "applies to",
    "content": ". | data-item point_data_item with a point value-type | parameter size with a float64 value type | parameter nr_angles with a uint8 value type | . ",
    "url": "/docs/bg_buffer_point.html#applies-to",
    
    "relUrl": "/docs/bg_buffer_point.html#applies-to"
  },"282": {
    "doc": "bg_buffer_point",
    "title": "since version",
    "content": "8.031 . ",
    "url": "/docs/bg_buffer_point.html#since-version",
    
    "relUrl": "/docs/bg_buffer_point.html#since-version"
  },"283": {
    "doc": "bg_buffer_point",
    "title": "example",
    "content": "attribute&lt;fpoint&gt; point_buffer_circles (pointset) := bg_buffer_point(pointset/geometry, 10.0, 16b); . more examples of buffer functions can be found here: buffer-processing-example . ",
    "url": "/docs/bg_buffer_point.html#example",
    
    "relUrl": "/docs/bg_buffer_point.html#example"
  },"284": {
    "doc": "bg_buffer_point",
    "title": "see also",
    "content": ". | bg_buffer_linestring | bg_buffer_multi_polygon | bg_buffer_multi_point | . ",
    "url": "/docs/bg_buffer_point.html#see-also",
    
    "relUrl": "/docs/bg_buffer_point.html#see-also"
  },"285": {
    "doc": "bg_buffer_point",
    "title": "bg_buffer_point",
    "content": "geometric-functions bg_buffer_point . ",
    "url": "/docs/bg_buffer_point.html",
    
    "relUrl": "/docs/bg_buffer_point.html"
  },"286": {
    "doc": "bg_simplify_linestring",
    "title": "syntax",
    "content": ". | bg_simplify_linestring(arc_data_item, simplifyfactor) | . ",
    "url": "/docs/bg_simplify_linestring.html#syntax",
    
    "relUrl": "/docs/bg_simplify_linestring.html#syntax"
  },"287": {
    "doc": "bg_simplify_linestring",
    "title": "description",
    "content": "bg_simplify_linestring(arc_data_item, simplifyfactor) results in a data item with the geometry of the arc_data_item, in which the geometric structure is simplified. Near points are combined to a single point. What is near is configured with the simplifyfactor, a parameter indicating for which distance points are combined. No metric needs to be configured for the simplifyfactor, it is using the metric of the coordinate-system. The bg_ prefix of the function name indicates that the implementation of operator uses boost geometry library, more specifically, the simplify function. ",
    "url": "/docs/bg_simplify_linestring.html#description",
    
    "relUrl": "/docs/bg_simplify_linestring.html#description"
  },"288": {
    "doc": "bg_simplify_linestring",
    "title": "applies to",
    "content": ". | attribute arc_data_item with an point value-type | parameter simplifyfactor with a float64 value type | . ",
    "url": "/docs/bg_simplify_linestring.html#applies-to",
    
    "relUrl": "/docs/bg_simplify_linestring.html#applies-to"
  },"289": {
    "doc": "bg_simplify_linestring",
    "title": "conditions",
    "content": ". | The composition type of the arc_data_item item needs to be arc. | The order of points in the arc_data_item needs to be clockwise for exterior bounds and counter clockwise for holes in polygons (right-hand-rule). | . ",
    "url": "/docs/bg_simplify_linestring.html#conditions",
    
    "relUrl": "/docs/bg_simplify_linestring.html#conditions"
  },"290": {
    "doc": "bg_simplify_linestring",
    "title": "since version",
    "content": "8.031 . ",
    "url": "/docs/bg_simplify_linestring.html#since-version",
    
    "relUrl": "/docs/bg_simplify_linestring.html#since-version"
  },"291": {
    "doc": "bg_simplify_linestring",
    "title": "example",
    "content": "attribute&lt;fpoint&gt; geometry_simplified (polygon, district) := bg_simplify_linestring(road/geometry, 10.0); . ",
    "url": "/docs/bg_simplify_linestring.html#example",
    
    "relUrl": "/docs/bg_simplify_linestring.html#example"
  },"292": {
    "doc": "bg_simplify_linestring",
    "title": "see also:",
    "content": ". | bg_simplify_polygon | bg_simplify_multi_polygon | . ",
    "url": "/docs/bg_simplify_linestring.html#see-also",
    
    "relUrl": "/docs/bg_simplify_linestring.html#see-also"
  },"293": {
    "doc": "bg_simplify_linestring",
    "title": "bg_simplify_linestring",
    "content": "geometric-functions bg_simplify_linestring . ",
    "url": "/docs/bg_simplify_linestring.html",
    
    "relUrl": "/docs/bg_simplify_linestring.html"
  },"294": {
    "doc": "bg_simplify_multi_polygon",
    "title": "syntax",
    "content": ". | bg_simplify_multi_polygon(multi_polygon_data_item, simplifyfactor) | . ",
    "url": "/docs/bg_simplify_multi_polygon.html#syntax",
    
    "relUrl": "/docs/bg_simplify_multi_polygon.html#syntax"
  },"295": {
    "doc": "bg_simplify_multi_polygon",
    "title": "description",
    "content": "bg_simplify_multi_polygon(multi_polygon_data_item, simplifyfactor) results in a data-item with the geometry of the multi_polygon_data_item, in which the geometric structure is simplified. Near points are combined to a single point. What is near is configured with the simplifyfactor, a parameter indicating for which distance points are combined. No metric needs to be configured for the simplifyfactor, it is using the metric of the coordinate-system. The bg_ prefix of the function name indicates that the implementation of operator uses boost geometry library, more specifically, the simplify function. ",
    "url": "/docs/bg_simplify_multi_polygon.html#description",
    
    "relUrl": "/docs/bg_simplify_multi_polygon.html#description"
  },"296": {
    "doc": "bg_simplify_multi_polygon",
    "title": "applies to",
    "content": ". | attribute multi_polygon_data_item with an point value-type | parameter simplifyfactor with a float64 value type | . ",
    "url": "/docs/bg_simplify_multi_polygon.html#applies-to",
    
    "relUrl": "/docs/bg_simplify_multi_polygon.html#applies-to"
  },"297": {
    "doc": "bg_simplify_multi_polygon",
    "title": "conditions",
    "content": ". | The composition type of the multi_polygon_data_item item needs to be polygon. | The order of points in the multi_polygon_data_item needs to be clockwise for exterior bounds and counter clockwise for holes in polygons (right-hand-rule). | . This function may result in losing the adjacency of polygons and in overlapping polygons, as shown in the figure above. We advice to be careful with functions like point_in_polygon on the resulting geometries. ",
    "url": "/docs/bg_simplify_multi_polygon.html#conditions",
    
    "relUrl": "/docs/bg_simplify_multi_polygon.html#conditions"
  },"298": {
    "doc": "bg_simplify_multi_polygon",
    "title": "since version",
    "content": "7.409 . ",
    "url": "/docs/bg_simplify_multi_polygon.html#since-version",
    
    "relUrl": "/docs/bg_simplify_multi_polygon.html#since-version"
  },"299": {
    "doc": "bg_simplify_multi_polygon",
    "title": "example",
    "content": "attribute&lt;fpoint&gt; geometry_simplified (polygon, city) := bg_simplify_multi_polygon(city/geometry, 10.0); . ",
    "url": "/docs/bg_simplify_multi_polygon.html#example",
    
    "relUrl": "/docs/bg_simplify_multi_polygon.html#example"
  },"300": {
    "doc": "bg_simplify_multi_polygon",
    "title": "see also:",
    "content": ". | bg_simplify_polygon | bg_simplify_linestring | . ",
    "url": "/docs/bg_simplify_multi_polygon.html#see-also",
    
    "relUrl": "/docs/bg_simplify_multi_polygon.html#see-also"
  },"301": {
    "doc": "bg_simplify_multi_polygon",
    "title": "bg_simplify_multi_polygon",
    "content": "geometric-functions bg_simplify_multi_polygon . ",
    "url": "/docs/bg_simplify_multi_polygon.html",
    
    "relUrl": "/docs/bg_simplify_multi_polygon.html"
  },"302": {
    "doc": "bg_simplify_polygon",
    "title": "syntax",
    "content": ". | bg_simplify_polygon(polygon_data_item, simplifyfactor) | . ",
    "url": "/docs/bg_simplify_polygon.html#syntax",
    
    "relUrl": "/docs/bg_simplify_polygon.html#syntax"
  },"303": {
    "doc": "bg_simplify_polygon",
    "title": "description",
    "content": "bg_simplify_polygon(polygon_data_item, simplifyfactor) results in a data-item with the geometry of the polygon_data_item, in which the geometric structure is simplified. Near points are combined to a single point. What is near is configured with the simplifyfactor, a parameter indicating for which distance points are combined. No metric needs to be configured for the simplifyfactor, it is using the metric of the coordinate-system. The bg_ prefix of the function name indicates that the implementation of operator uses boost geometry library, more specifically, the simplify function. ",
    "url": "/docs/bg_simplify_polygon.html#description",
    
    "relUrl": "/docs/bg_simplify_polygon.html#description"
  },"304": {
    "doc": "bg_simplify_polygon",
    "title": "applies to",
    "content": ". | attribute polygon_data_item with an point value-type | parameter simplifyfactor with a float64 value type | . ",
    "url": "/docs/bg_simplify_polygon.html#applies-to",
    
    "relUrl": "/docs/bg_simplify_polygon.html#applies-to"
  },"305": {
    "doc": "bg_simplify_polygon",
    "title": "conditions",
    "content": ". | The composition type of the polygon_data_item item needs to be polygon. | The order of points in the polygon_data_item needs to be clockwise for exterior bounds and counter clockwise for holes in polygons (right-hand-rule). | . This function may result in losing the adjacency of polygons and in overlapping polygons, as shown in the figure above. We advice to be careful with functions like point_in_polygon on the resulting geometries. ",
    "url": "/docs/bg_simplify_polygon.html#conditions",
    
    "relUrl": "/docs/bg_simplify_polygon.html#conditions"
  },"306": {
    "doc": "bg_simplify_polygon",
    "title": "since version",
    "content": "7.409 . ",
    "url": "/docs/bg_simplify_polygon.html#since-version",
    
    "relUrl": "/docs/bg_simplify_polygon.html#since-version"
  },"307": {
    "doc": "bg_simplify_polygon",
    "title": "example",
    "content": "attribute&lt;fpoint&gt; geometry_simplified (polygon, city) := bg_simplify_polygon(city/geometry, 10.0); . ",
    "url": "/docs/bg_simplify_polygon.html#example",
    
    "relUrl": "/docs/bg_simplify_polygon.html#example"
  },"308": {
    "doc": "bg_simplify_polygon",
    "title": "see also:",
    "content": ". | bg_simplify_multi_polygon | bg_simplify_linestring | . ",
    "url": "/docs/bg_simplify_polygon.html#see-also",
    
    "relUrl": "/docs/bg_simplify_polygon.html#see-also"
  },"309": {
    "doc": "bg_simplify_polygon",
    "title": "bg_simplify_polygon",
    "content": "geometric-functions bg_simplify_polygon . ",
    "url": "/docs/bg_simplify_polygon.html",
    
    "relUrl": "/docs/bg_simplify_polygon.html"
  },"310": {
    "doc": "bitand",
    "title": "syntax",
    "content": ". | bitand(a,b) | . ",
    "url": "/docs/bitand.html#syntax",
    
    "relUrl": "/docs/bitand.html#syntax"
  },"311": {
    "doc": "bitand",
    "title": "definition",
    "content": "bitand(a,b) results in the logical and of two boolean or integer data-item a and b. In this bitwise comparison, a true or 1 value is returned if both argument have a true or 1 value at the bit position compared and a false or 0 value if not. The values-unit of the resulting data item is the values unit of data item a. ",
    "url": "/docs/bitand.html#definition",
    
    "relUrl": "/docs/bitand.html#definition"
  },"312": {
    "doc": "bitand",
    "title": "description",
    "content": "bitand is a bitwise operation. ",
    "url": "/docs/bitand.html#description",
    
    "relUrl": "/docs/bitand.html#description"
  },"313": {
    "doc": "bitand",
    "title": "applies to",
    "content": ". | data items with bool, (u)int8, (u)int16, (u)int32 or (u)int64 value-type | . ",
    "url": "/docs/bitand.html#applies-to",
    
    "relUrl": "/docs/bitand.html#applies-to"
  },"314": {
    "doc": "bitand",
    "title": "conditions",
    "content": "The domain-unit and values unit of arguments a and b must match. ",
    "url": "/docs/bitand.html#conditions",
    
    "relUrl": "/docs/bitand.html#conditions"
  },"315": {
    "doc": "bitand",
    "title": "example",
    "content": "attribute&lt;uint8&gt; bitandAB (ADomain) := bitand(A, B); . | A | B | bitandAB | . | 0 | 2 | 0 | . | 1 | 2 | 0 | . | 2 | 2 | 2 | . | 3 | 2 | 2 | . | null | 2 | null | . ADomain, nr of rows = 5 . ",
    "url": "/docs/bitand.html#example",
    
    "relUrl": "/docs/bitand.html#example"
  },"316": {
    "doc": "bitand",
    "title": "see also",
    "content": ". | bitor | complement | and (&amp;&amp;) | . ",
    "url": "/docs/bitand.html#see-also",
    
    "relUrl": "/docs/bitand.html#see-also"
  },"317": {
    "doc": "bitand",
    "title": "bitand",
    "content": "logical-functions bitand . ",
    "url": "/docs/bitand.html",
    
    "relUrl": "/docs/bitand.html"
  },"318": {
    "doc": "bitor",
    "title": "syntax",
    "content": ". | bitor(a,b) | . ",
    "url": "/docs/bitor.html#syntax",
    
    "relUrl": "/docs/bitor.html#syntax"
  },"319": {
    "doc": "bitor",
    "title": "definition",
    "content": "bitor(a,b) results in the logical or of two boolean or integer data-item a and b. In this bitwise comparison, a true or 1 value is returned if any argument has a true or 1 value at the bit position compared and a false or 0 value if not. The values-unit of the resulting data item is the values unit of data item a. ",
    "url": "/docs/bitor.html#definition",
    
    "relUrl": "/docs/bitor.html#definition"
  },"320": {
    "doc": "bitor",
    "title": "description",
    "content": "bitor is a bitwise operation. ",
    "url": "/docs/bitor.html#description",
    
    "relUrl": "/docs/bitor.html#description"
  },"321": {
    "doc": "bitor",
    "title": "applies to",
    "content": ". | data items with bool, (u)int8, (u)int16, (u)int32 or (u)int64 value type | . ",
    "url": "/docs/bitor.html#applies-to",
    
    "relUrl": "/docs/bitor.html#applies-to"
  },"322": {
    "doc": "bitor",
    "title": "conditions",
    "content": "The domain-unit and values unit of arguments a and b must match. ",
    "url": "/docs/bitor.html#conditions",
    
    "relUrl": "/docs/bitor.html#conditions"
  },"323": {
    "doc": "bitor",
    "title": "example",
    "content": "attribute&lt;uint8&gt; bitorAB (ADomain) := bitor(A, B); . | A | B | bitorAB | . | 0 | 2 | 2 | . | 1 | 2 | 3 | . | 2 | 2 | 2 | . | 3 | 2 | 3 | . | null | 2 | null | . ADomain, nr of rows = 5 . ",
    "url": "/docs/bitor.html#example",
    
    "relUrl": "/docs/bitor.html#example"
  },"324": {
    "doc": "bitor",
    "title": "see also",
    "content": ". | bitand | complement | | or ( |   | ) | . | . ",
    "url": "/docs/bitor.html#see-also",
    
    "relUrl": "/docs/bitor.html#see-also"
  },"325": {
    "doc": "bitor",
    "title": "bitor",
    "content": "logical-functions bitor . ",
    "url": "/docs/bitor.html",
    
    "relUrl": "/docs/bitor.html"
  },"326": {
    "doc": "bool",
    "title": "concept",
    "content": ". | bool is a 1 bits sub-byte-element, with as possible values: True and False. | bool() is a function converting data-item or unit of other value types to the bool value type. | . This page describes the bool() function. ",
    "url": "/docs/bool.html#concept",
    
    "relUrl": "/docs/bool.html#concept"
  },"327": {
    "doc": "bool",
    "title": "syntax",
    "content": ". | bool(a) | . ",
    "url": "/docs/bool.html#syntax",
    
    "relUrl": "/docs/bool.html#syntax"
  },"328": {
    "doc": "bool",
    "title": "definition",
    "content": "bool(a) results in a boolean (True or False) tree-item converted from item a. The function results for: . | numeric data items in True for non zero values and False for zero values of data-item a; | string data items in True for all values starting with the character “T” and False for other values of data item a. | units, a boolean (1 bit) unit of the converted unit. | . ",
    "url": "/docs/bool.html#definition",
    
    "relUrl": "/docs/bool.html#definition"
  },"329": {
    "doc": "bool",
    "title": "applies to",
    "content": ". | data item or unit with Numeric, uint2, uint4 or string value type | . ",
    "url": "/docs/bool.html#applies-to",
    
    "relUrl": "/docs/bool.html#applies-to"
  },"330": {
    "doc": "bool",
    "title": "example",
    "content": "1. attribute&lt;bool&gt; boolA (ADomain) := bool(A); 2. attribute&lt;bool&gt; boolB (ADomain) := bool(B); . | A(float32) | B(string) | boolA | boolB | . | 0 | ‘Hello’ | False | False | . | 1 | ‘Test’ | True | True | . | 1000000 | null | True | False | . | -2.5 | ‘Two words’ | True | True | . | 99.9 | ‘88a’ | True | False | . ADomain, nr of rows = 5 . ",
    "url": "/docs/bool.html#example",
    
    "relUrl": "/docs/bool.html#example"
  },"331": {
    "doc": "bool",
    "title": "bool",
    "content": "conversion-functions bool . ",
    "url": "/docs/bool.html",
    
    "relUrl": "/docs/bool.html"
  },"332": {
    "doc": "boundcenter",
    "title": "syntax",
    "content": ". | boundcenter(unit) | . ",
    "url": "/docs/boundcenter.html#syntax",
    
    "relUrl": "/docs/boundcenter.html#syntax"
  },"333": {
    "doc": "boundcenter",
    "title": "definition",
    "content": "boundcenter(unit) results in the mean value for the unit argument. If a range is configured for a unit, the boundcenter function results in the minimum value of this range. If not, the boundcenter results in the default minimum value for the value-type of the unit. ",
    "url": "/docs/boundcenter.html#definition",
    
    "relUrl": "/docs/boundcenter.html#definition"
  },"334": {
    "doc": "boundcenter",
    "title": "applies to",
    "content": ". | unit unit with Numeric or Point value type | . ",
    "url": "/docs/boundcenter.html#applies-to",
    
    "relUrl": "/docs/boundcenter.html#applies-to"
  },"335": {
    "doc": "boundcenter",
    "title": "example",
    "content": "unit&lt;float32&gt; unit_defined             := range(float32, 2.0, 7.5); unit&lt;float32&gt; boundcenter_unit_defined := boundcenter(unit_defined); . result boundcenter_unit_defined = 2.0 . ",
    "url": "/docs/boundcenter.html#example",
    
    "relUrl": "/docs/boundcenter.html#example"
  },"336": {
    "doc": "boundcenter",
    "title": "see also",
    "content": ". | upperbound | lowerbound | boundrange | . ",
    "url": "/docs/boundcenter.html#see-also",
    
    "relUrl": "/docs/boundcenter.html#see-also"
  },"337": {
    "doc": "boundcenter",
    "title": "boundcenter",
    "content": "unit-functions boundcenter . ",
    "url": "/docs/boundcenter.html",
    
    "relUrl": "/docs/boundcenter.html"
  },"338": {
    "doc": "boundrange",
    "title": "syntax",
    "content": ". | boundrange(unit) | . ",
    "url": "/docs/boundrange.html#syntax",
    
    "relUrl": "/docs/boundrange.html#syntax"
  },"339": {
    "doc": "boundrange",
    "title": "definition",
    "content": "boundrange(unit) results in parameter with the size of the range of the unit argument. The values-unit of the resulting parameter is the unit argument . ",
    "url": "/docs/boundrange.html#definition",
    
    "relUrl": "/docs/boundrange.html#definition"
  },"340": {
    "doc": "boundrange",
    "title": "applies to",
    "content": ". | unit unit with Numeric or Point value type | . ",
    "url": "/docs/boundrange.html#applies-to",
    
    "relUrl": "/docs/boundrange.html#applies-to"
  },"341": {
    "doc": "boundrange",
    "title": "example",
    "content": "unit&lt;float32&gt;      domainB: nrofrows = 6; parameter&lt;domainB&gt; boundrange_domainB := boundrange(domainB); . result boundrange_domainB = 6 . ",
    "url": "/docs/boundrange.html#example",
    
    "relUrl": "/docs/boundrange.html#example"
  },"342": {
    "doc": "boundrange",
    "title": "see also",
    "content": ". | upperbound | lowerbound | boundcenter | . ",
    "url": "/docs/boundrange.html#see-also",
    
    "relUrl": "/docs/boundrange.html#see-also"
  },"343": {
    "doc": "boundrange",
    "title": "boundrange",
    "content": "unit-functions boundrange . ",
    "url": "/docs/boundrange.html",
    
    "relUrl": "/docs/boundrange.html"
  },"344": {
    "doc": "brk-extract",
    "title": "introduction",
    "content": "The BRK extract is used to convert the downloaded .gml files from PDOK to for GeoDMS useable .fss files. ",
    "url": "/docs/brk-extract.html#introduction",
    
    "relUrl": "/docs/brk-extract.html#introduction"
  },"345": {
    "doc": "brk-extract",
    "title": "components",
    "content": "The BRK extract consists of simply one tool: . | Gml2FSS -&gt; To make the BRK available in a format suitable for modelling. | . ",
    "url": "/docs/brk-extract.html#components",
    
    "relUrl": "/docs/brk-extract.html#components"
  },"346": {
    "doc": "brk-extract",
    "title": "requirements",
    "content": ". | GeoDMS version 7.130 or later, see Setup | Internal ram: 16 Gb or more (as the BRK is a very large dataset) | Hard disk space: 70 Gbyte or more | Access rights to your LocalDataDir (C:\\LocalData) and SourceDataDir (default C:\\SourceData). If not, adjust these placeholders within the GeoDMS GUI &gt; Tools &gt; Options. | . ",
    "url": "/docs/brk-extract.html#requirements",
    
    "relUrl": "/docs/brk-extract.html#requirements"
  },"347": {
    "doc": "brk-extract",
    "title": "how to use this script",
    "content": "1. Download the BRK file from PDOK . 2. Extract the .gml files from the .zip file to a local folder, with naming convention: %SourceDataDir%/BRK/date: . | The %SourceDataDir% is a placeholder for the SourceData folder on your local disk. By default the path: C:/SourceData is used. You can choose another path for your SourceData, but then you have to configure this new path in the GeoDMSGUI &gt; Tools &gt; Options &gt; SourceDataDir control. | Use for the date placeholder the date of your download with as format: yyyymmdd. | . 3.Open the Gml2FSS.dms file from the script (in the cfg subfolder of your chosen project folder) in a text editor, configure the date of your download (see 2) in line 68 for the parameter date (yyyymmdd) and save your file. Now open Gml2FSS.dms using GeoDMS and navigate to /Brondata/BRK/import/perceel_fss/src/AKRKADASTRALEGEMEENTECODE and double click on it (this might take a while to calculate!). This is necessary to generate the perceel.gfs file, this file contains the geometry of the dataset. 4.Open the newly-generated perceel.gfs file in a text editor. You’ll find this file in %SourceDataDir%/BRK/date and edit the following lines. at the top: .  ` 1 `  . into: . &lt;!-- &lt;GeometryType&gt; 1 &lt;/GeometryType&gt; --&gt; . and change nearly at the bottom: .      &lt;/PropertyDefn&gt;   &lt;/GMLFeatureClass&gt;  &lt;/GMLFeatureClassList&gt; . into: . &lt;/PropertyDefn&gt;        `         ``begrenzing ` `         ``begrenzingPerceel ` `         ``Polygon ` `      `    &lt;/GMLFeatureClass&gt;  &lt;/GMLFeatureClassList&gt; . 6. Make sure that in the %SourceDataDir%/CBS/2018/ the file gem_2018.shp is present. This file contains the municipal borders and a .dbf file with a field called GM_CODE. This file can be downloaded here. | Now open Gml2FSS.dms using GeoDMS again and double click on MaakPerceelFSSBestand, this will generate the perceel data in a fss storage including CBS municipal codes. Located in: SourceDataDir/BRK/date/perceel_new.fss. This process will take quite some time. 8.Using the read_target item you can view the results, if all went correct, rename perceel_new.fss into perceel.fss. | . ",
    "url": "/docs/brk-extract.html#how-to-use-this-script",
    
    "relUrl": "/docs/brk-extract.html#how-to-use-this-script"
  },"348": {
    "doc": "brk-extract",
    "title": "licensing",
    "content": "The BRK extract is available under GNU-GPL version 3 license . ",
    "url": "/docs/brk-extract.html#licensing",
    
    "relUrl": "/docs/brk-extract.html#licensing"
  },"349": {
    "doc": "brk-extract",
    "title": "download",
    "content": "The BRK extract scripts can be downloaded here. Extract the files from the zip file in your GeoDMS project folder. ",
    "url": "/docs/brk-extract.html#download",
    
    "relUrl": "/docs/brk-extract.html#download"
  },"350": {
    "doc": "brk-extract",
    "title": "brk-extract",
    "content": "Tools/Downloads BRK Extract . ",
    "url": "/docs/brk-extract.html",
    
    "relUrl": "/docs/brk-extract.html"
  },"351": {
    "doc": "brk",
    "title": "inhoud",
    "content": "De Basisregistratie Kadaster (BRK) bestaat uit de kadastrale kaart met de perceelgrenzen (zie afbeelding) en de kadastrale registratie van onroerende zaken en zakelijke rechten. Vanaf 1 januari 2016 is de digitale kadastrale kaart als open data beschikbaar. ",
    "url": "/docs/brk.html#inhoud",
    
    "relUrl": "/docs/brk.html#inhoud"
  },"352": {
    "doc": "brk",
    "title": "beschikbaar",
    "content": "De data is te downloaden via: app.pdok.nl/kadaster/kadastralekaart/download-viewer . De data is beschikbaar in gml formaat, voor Nederland of een selectie daarvan. De geometrie bevat zowel vlakken als punten. ",
    "url": "/docs/brk.html#beschikbaar",
    
    "relUrl": "/docs/brk.html#beschikbaar"
  },"353": {
    "doc": "brk",
    "title": "toepassingen",
    "content": "Wij gebruiken de BRK voor o.a. het leggen van een relatie tussen BAG panden. In de BAG is een losse schuur/stal niet verbonden met het pand waar via het VBO het adres aan is verbonden. Door de BAG te relateren aan de BRK kan via het perceel worden bepaald welke panden op een zelfde perceel gelegen zijn en dus waarschijnlijk bij hetzelfde adres ‘horen’. ",
    "url": "/docs/brk.html#toepassingen",
    
    "relUrl": "/docs/brk.html#toepassingen"
  },"354": {
    "doc": "brk",
    "title": "brk",
    "content": "Open Data BRK . [](File:BRK.png \"wikilink\") . ",
    "url": "/docs/brk.html",
    
    "relUrl": "/docs/brk.html"
  },"355": {
    "doc": "brt",
    "title": "introductie",
    "content": "De BRT registratie bestaat uit digitale topografische bestanden, te gebruiken op verschillende schaalniveaus. Het meest gedetailleerde niveau is de 1 op 10.000 registratie, de Top10NL. De Top10NL is ontstaan vanuit luchtfoto’s, veldopnamen en reeds bestaande bestanden. De BRT wordt bijgehouden door interpretatie van digitaal beeldmateriaal en gegevens uit externe bronnen. ",
    "url": "/docs/brt.html#introductie",
    
    "relUrl": "/docs/brt.html#introductie"
  },"356": {
    "doc": "brt",
    "title": "inhoud",
    "content": "De Top10NL kent een set van polygoon lagen die gezamenlijk landsdekkend zijn. Daarnaast kent de Top10NL ook een aantal lijnen en punten lagen. ",
    "url": "/docs/brt.html#inhoud",
    
    "relUrl": "/docs/brt.html#inhoud"
  },"357": {
    "doc": "brt",
    "title": "meer informatie",
    "content": ". | https://www.kadaster.nl/zakelijk/registraties/basisregistraties/brt | . ",
    "url": "/docs/brt.html#meer-informatie",
    
    "relUrl": "/docs/brt.html#meer-informatie"
  },"358": {
    "doc": "brt",
    "title": "brt",
    "content": "Open Data BRT . [ Adam.png](File:BRT_Adam.png \"wikilink\") . ",
    "url": "/docs/brt.html",
    
    "relUrl": "/docs/brt.html"
  },"359": {
    "doc": "buffer-processing-example",
    "title": "download",
    "content": ". | configuration/data | . ",
    "url": "/docs/buffer-processing-example.html#download",
    
    "relUrl": "/docs/buffer-processing-example.html#download"
  },"360": {
    "doc": "buffer-processing-example",
    "title": "concepts",
    "content": ". | buffering | . ",
    "url": "/docs/buffer-processing-example.html#concepts",
    
    "relUrl": "/docs/buffer-processing-example.html#concepts"
  },"361": {
    "doc": "buffer-processing-example",
    "title": "functions",
    "content": ". | bg_buffer_point | bg_buffer_multi_point | bg_buffer_linestring | bg_buffer_multi_polygon | ipolygon | sub-(difference) | poly2grid | proximity | . ",
    "url": "/docs/buffer-processing-example.html#functions",
    
    "relUrl": "/docs/buffer-processing-example.html#functions"
  },"362": {
    "doc": "buffer-processing-example",
    "title": "buffer-processing-example",
    "content": "configuration-examples Buffer processing . The available script show examples on how to buffer: . | vector data: points, multi points, arcs and polygons | grid data | . ",
    "url": "/docs/buffer-processing-example.html",
    
    "relUrl": "/docs/buffer-processing-example.html"
  },"363": {
    "doc": "bugs-and-features",
    "title": "reporting issues",
    "content": "Before reporting an issue we ask you to check if the same or a similar issue is not already reported. New bugs and feature requests can be added by activating the New Issue button. A page appears in which the characteristics of the issue need to be specified. The characteristics presented with a * are obligatory. ",
    "url": "/docs/bugs-and-features.html#reporting-issues",
    
    "relUrl": "/docs/bugs-and-features.html#reporting-issues"
  },"364": {
    "doc": "bugs-and-features",
    "title": "getting remote support",
    "content": "If your organisation has a support contract, we can help you with configuration issues. We can assist you from our office by phone and a remote connection with e.g. Teams. ",
    "url": "/docs/bugs-and-features.html#getting-remote-support",
    
    "relUrl": "/docs/bugs-and-features.html#getting-remote-support"
  },"365": {
    "doc": "bugs-and-features",
    "title": "bugs-and-features",
    "content": "We welcome (regular) users of the GeoDMS to help us improving the software. Bug reports and feature requests can be reported to here. Contact us if you are interested. ",
    "url": "/docs/bugs-and-features.html",
    
    "relUrl": "/docs/bugs-and-features.html"
  },"366": {
    "doc": "cached-results",
    "title": "storing calculation results",
    "content": "Calculated results are stored persistently in the CalcCache, if the following conditions are met: . | The results relate to the calculation rule of a named tree item. Results of sub-expression might be stored in the transient cache (only available within session) but not stored persistently. | The data size of the results exceeds a specified threshold (small results are by default not stored, see StoreData property). The threshold has a default value of 4.000 bytes. This value can be changed in the GeoDMS GUI with the Tools &gt; Options menu. Open the Current Configuration tab and edit the Minimum size for DataItem specific swapfiles in the CalcCache option. It is advised to keep this value limited. | The value of the FreeData property is False. | For the derivation of the results, no session-specific function was used. | The calculation result is not a data item that results directly from a composite function (both root result and subitem) or a direct reference thereto. Results derived indirectly from a composite function, will be stored persistently if they meet all other conditions. | . Calculation Results from MetaScript functions are new tree items, for which resulting data can be stored in the CalcCache, if they meet the above conditions. ",
    "url": "/docs/cached-results.html#storing-calculation-results",
    
    "relUrl": "/docs/cached-results.html#storing-calculation-results"
  },"367": {
    "doc": "cached-results",
    "title": "transient CalcCache",
    "content": "The CalcCache contains a transient part, with calculation results that might be re-usable during a session, but that are deleted when the application is closed. This transient part of the CalcCache is stored in the .tmp subfolder of the CalcCache root folder. This part functions as an extension of the page file mechanism, useful to the relieve the use internal memory and to cope with the 1 gigabyte limit in the 32 bits environment. == StoreData Property (default value = “False”) == If the property StoreData = “True” is configured, condition two (data size) does not longer apply. Use the StoreData property to store results that have a data size less than the threshold, but are time consuming to recalculate. If the StoreData property is not configured (or explicitly configured as “False”), only data items with a data size above the threshold are stored. == FreeData property (default value = “True” since version 7.122) == The property FreeData = “False” need to be configured for a data item to store the calculation results of the item and it’s subitems in the CalcCache. We advice to configure FreeData = “False” only for those items or containers that require substantial calculation time, have steady definitions and are used more often than they need to be recalculated. This will limit the CalcCache size and the disk I/O. Never configure FreeData = “False” for results of the id, const and similar functions as they are faster to recalculate as reading them from a disk. == KeepData property (default value = “False”) == The KeepData property has no effect on the CalcCache. If the KeepData is configured to True, the results of the item is kept in memory even if there is no interest from any view. Configuring the KeepData property becomes more relevant when less items are Cached. Configure this property to True on items that are relevant for interactive working. We advice to configure this especially for items used in for_each functions, which also results in configurations that will expand faster. ",
    "url": "/docs/cached-results.html#transient-calccache",
    
    "relUrl": "/docs/cached-results.html#transient-calccache"
  },"368": {
    "doc": "cached-results",
    "title": "cached-results",
    "content": "CalcCache Cached Results . ",
    "url": "/docs/cached-results.html",
    
    "relUrl": "/docs/cached-results.html"
  },"369": {
    "doc": "calccache-folder-and-filenames",
    "title": "introduction",
    "content": "Each version, configuration and environment (32 or 64 bits) uses it’s own CalcCache. CalcCache results are stored in a folder structure, based on the hierarchy of a configuration. Containers in the configuration become subfolders, cached calculations results become files, with names derived from their related tree item names. The following picture shows the root folder of the 64 bits CalcCache of a Vesta configuration. [](File:CCfolder.png \"wikilink\") . example of the CalcCache folder in the Windows Explorer . ",
    "url": "/docs/calccache-folder-and-filenames.html#introduction",
    
    "relUrl": "/docs/calccache-folder-and-filenames.html#introduction"
  },"370": {
    "doc": "calccache-folder-and-filenames",
    "title": "naming",
    "content": "The root folder contains the file: CacheInfo.dmsdata. This file contains meta information on the stored files, including time stamps used to find out if these files are still valid. Small data itemss and the cardinality of some units are also stored in this file. The names of the subfolders in the root folder are based on the parent names of the tree item for which the calculation results are stored. Each cached file in a subfolder has a name according to the following convention: . tree item name_unique serial number.dmsdata. For tiled data items a subfolder is made with the name convention: name_unique serial number. Within this subfolder each tile is stored as a separate file, with the name convention: unique_tilenumber.dmsdata. ",
    "url": "/docs/calccache-folder-and-filenames.html#naming",
    
    "relUrl": "/docs/calccache-folder-and-filenames.html#naming"
  },"371": {
    "doc": "calccache-folder-and-filenames",
    "title": "calccache-folder-and-filenames",
    "content": "CalcCache Folder and Filenames . ",
    "url": "/docs/calccache-folder-and-filenames.html",
    
    "relUrl": "/docs/calccache-folder-and-filenames.html"
  },"372": {
    "doc": "calccache-managing-files",
    "title": "introduction",
    "content": "The CalcCache stores (intermediate results) of your project, also of expressions that do not occur anymore in your current configuration. The CalcCache therefore has a tendency to grow, especially when multiple modifications are made to your configuration and the results of these modified items are requested at least once.To keep the size of your CalcCache limited (as an indicator if a CalcCache becomes larger than 10 GB, disk I/O becomes slow), we advice to: . | Compress Files | Delete CalcCaches that are not recently used | Use FreeData property to keep your CalcCache size limited | Use mutiple CalcCaches within a project | . ",
    "url": "/docs/calccache-managing-files.html#introduction",
    
    "relUrl": "/docs/calccache-managing-files.html#introduction"
  },"373": {
    "doc": "calccache-managing-files",
    "title": "calccache-managing-files",
    "content": "CalcCache Managing Files . ",
    "url": "/docs/calccache-managing-files.html",
    
    "relUrl": "/docs/calccache-managing-files.html"
  },"374": {
    "doc": "calccache-purpose",
    "title": "performance",
    "content": "Although the GeoDMS is designed to calculate fast with large datasets (see Expression, Fast Calculations), calculating some results, for instance a 100-meter grid allocation for large countries in Europe, can take some time. The CalcCache can store (part of) these results on disk. This allows the GeoDMS to re-use these results after being calculated once, provided they are still valid (no input data or expression of any supplier is changed). The results can be made available in the session with which the results are calculated, but also after restarting the application in a new session. ",
    "url": "/docs/calccache-purpose.html#performance",
    
    "relUrl": "/docs/calccache-purpose.html#performance"
  },"375": {
    "doc": "calccache-purpose",
    "title": "calculating with large datasets",
    "content": "The limit of around 1 gigabyte internal memory that can be addressed by any process in a 32 bits Windows environment became a problem in for instance the allocation model of the Netherlands at a 100-meter grid level. The total amount of data needed to calculate all steps in this model exceeds this limit of 1 gigabyte. The solution is to store interim results of the calculation process on disk. The CalcCache provides the GeoDMS the opportunity to calculate models with large datasets also in a 32 bits environment, where the total amount of data used exceeds the 1 gigabyte internal memory limit. In a 64 bits environment, this limit of 1 gigabyte is not an issue, but still the physical amount of the internal memory is limited. So also in 64 bits environments the CalcCache is useful for this purpose. ",
    "url": "/docs/calccache-purpose.html#calculating-with-large-datasets",
    
    "relUrl": "/docs/calccache-purpose.html#calculating-with-large-datasets"
  },"376": {
    "doc": "calccache-purpose",
    "title": "calccache-purpose",
    "content": "CalcCache Purpose . The GeoDMS CalcCache is in use for two purposes: . ",
    "url": "/docs/calccache-purpose.html",
    
    "relUrl": "/docs/calccache-purpose.html"
  },"377": {
    "doc": "calccache",
    "title": "introduction",
    "content": "!!! Since the GeoDMS 8 series, the CalcCache is no longer in use. The current computers with more RAM memory and the improvements in the 8 series make the CalcCache less needed. Still we are studying alternatives for the CalcCache at the moment, to make interim model results more persistent and improve the performance. The documentation on this CalcCache is still available, for GeoDMS 7 series users. The GeoDMS uses a CalcCache to store calculation results on disk. The CalcCache consists of a set of calculated (interim) results, stored as files in the %CalcCache% folder. The default value of the %CalcCache% folder is %LocalDataDir%/%ProjDir%/CalcCachex%env%.v%version% (see Folders and Placeholders). The CalcCache should be considered as an extension of the internal memory, therefore configuring a network drive for the CalcCache is discouraged. It will slow down the application and burdens the network. The CalcCache folder and it’s subfolders are automatically created by the GeoDMS when the results need to be stored. ",
    "url": "/docs/calccache.html#introduction",
    
    "relUrl": "/docs/calccache.html#introduction"
  },"378": {
    "doc": "calccache",
    "title": "topics",
    "content": ". | Folder and Filenames | Purpose | Update Mechanism | Cached Results | Session Specific | Managing Files | . ",
    "url": "/docs/calccache.html#topics",
    
    "relUrl": "/docs/calccache.html#topics"
  },"379": {
    "doc": "calccache",
    "title": "calccache",
    "content": " ",
    "url": "/docs/calccache.html",
    
    "relUrl": "/docs/calccache.html"
  },"380": {
    "doc": "calcnaturalbreaks",
    "title": "code",
    "content": "#include &lt;assert.h&gt; #include &lt;vector&gt; #include &lt;algorithm&gt; typedef std::size_t SizeT; typedef SizeT CountType; typedef std::pair&lt;double, CountType&gt; ValueCountPair; typedef std::vector&lt;double&gt; LimitsContainer; typedef std::vector&lt;ValueCountPair&gt; ValueCountPairContainer; // helper funcs template &lt;typename T&gt; T Min(T a, T b) { return (a&lt;b) ? a : b; } SizeT GetTotalCount(const ValueCountPairContainer&amp; vcpc) { SizeT sum = 0; ValueCountPairContainer::const_iterator i = vcpc.begin(), e = vcpc.end(); for(sum = 0; i!=e; ++i) sum += (*i).second; return sum; } // helper struct JenksFisher struct JenksFisher // captures the intermediate data and methods for the calculation of Natural Class Breaks. { JenksFisher(const ValueCountPairContainer&amp; vcpc, SizeT k) : m_M(vcpc.size()) , m_K(k) , m_BufSize(vcpc.size()-(k-1)) , m_PrevSSM(m_BufSize) , m_CurrSSM(m_BufSize) , m_CB(m_BufSize * (m_K-1)) , m_CBPtr() { m_CumulValues.reserve(vcpc.size()); double cwv=0; CountType cw = 0, w; for(SizeT i=0; i!=m_M; ++i) { assert(!i || vcpc[i].first &gt; vcpc[i-1].first); // PRECONDITION: the value sequence must be strictly increasing w = vcpc[i].second; assert(w &gt; 0); // PRECONDITION: all weights must be positive cw += w; assert(cw &gt; w || !i); // No overflow? No loss of precision? cwv += w * vcpc[i].first; m_CumulValues.push_back(ValueCountPair(cwv, cw)); if (i &lt; m_BufSize) m_PrevSSM[i] = cwv * cwv / cw; // prepare SSM for first class. Last (k-1) values are omitted } } double GetW(SizeT b, SizeT e) // Gets sum of weighs for elements b..e. { assert(b); // First element always belongs to class 0, thus queries should never include it. assert(b&lt;=e); assert(e&lt;m_M); double res = m_CumulValues[e].second; res -= m_CumulValues[b-1].second; return res; } double GetWV(SizeT b, SizeT e) // Gets sum of weighed values for elements b..e { assert(b); assert(b&lt;=e); assert(e&lt;m_M); double res = m_CumulValues[e].first; res -= m_CumulValues[b-1].first; return res; } double GetSSM(SizeT b, SizeT e) // Gets the Squared Mean for elements b..e, multiplied by weight. // Note that n*mean^2 = sum^2/n when mean := sum/n { double res = GetWV(b,e); return res * res / GetW(b,e); } SizeT FindMaxBreakIndex(SizeT i, SizeT bp, SizeT ep) // finds CB[i+m_NrCompletedRows] given that // the result is at least bp+(m_NrCompletedRows-1) // and less than ep+(m_NrCompletedRows-1) // Complexity: O(ep-bp) &lt;= O(m) { assert(bp &lt; ep); assert(bp &lt;= i); assert(ep &lt;= i+1); assert(i &lt; m_BufSize); assert(ep &lt;= m_BufSize); double minSSM = m_PrevSSM[bp] + GetSSM(bp+m_NrCompletedRows, i+m_NrCompletedRows); SizeT foundP = bp; while (++bp &lt; ep) { double currSSM = m_PrevSSM[bp] + GetSSM(bp+m_NrCompletedRows, i+m_NrCompletedRows); if (currSSM &gt; minSSM) { minSSM = currSSM; foundP = bp; } } m_CurrSSM[i] = minSSM; return foundP; } void CalcRange(SizeT bi, SizeT ei, SizeT bp, SizeT ep) // find CB[i+m_NrCompletedRows] // for all i&gt;=bi and i&lt;ei given that // the results are at least bp+(m_NrCompletedRows-1) // and less than ep+(m_NrCompletedRows-1) // Complexity: O(log(ei-bi)*Max((ei-bi),(ep-bp))) &lt;= O(m*log(m)) { assert(bi &lt;= ei); assert(ep &lt;= ei); assert(bp &lt;= bi); if (bi == ei) return; assert(bp &lt; ep); SizeT mi = (bi + ei)/2; SizeT mp = FindMaxBreakIndex(mi, bp, Min&lt;SizeT&gt;(ep, mi+1)); assert(bp &lt;= mp); assert(mp &lt; ep); assert(mp &lt;= mi); // solve first half of the sub-problems with lower 'half' of possible outcomes CalcRange(bi, mi, bp, Min&lt;SizeT&gt;(mi, mp+1)); m_CBPtr[ mi ] = mp; // store result for the middle element. // solve second half of the sub-problems with upper 'half' of possible outcomes CalcRange(mi+1, ei, mp, ep); } void CalcAll() // complexity: O(m*log(m)*k) { if (m_K&gt;=2) { m_CBPtr = m_CB.begin(); for (m_NrCompletedRows=1; m_NrCompletedRows&lt;m_K-1; ++m_NrCompletedRows) { CalcRange(0, m_BufSize, 0, m_BufSize); // complexity: O(m*log(m)) m_PrevSSM.swap(m_CurrSSM); m_CBPtr += m_BufSize; } } } SizeT m_M, m_K, m_BufSize; ValueCountPairContainer m_CumulValues; std::vector&lt;double&gt; m_PrevSSM; std::vector&lt;double&gt; m_CurrSSM; std::vector&lt;SizeT&gt; m_CB; std::vector&lt;SizeT&gt;::iterator m_CBPtr; SizeT m_NrCompletedRows; }; // GetValueCountPairs // // GetValueCountPairs sorts chunks of values and then merges them in order to minimize extra memory and work when many values are equal. // This is done recursively while retaining used intermediary buffers in order to minimize heap allocations. const SizeT BUFFER_SIZE = 1024; void GetCountsDirect(ValueCountPairContainer&amp; vcpc, const double* values, SizeT size) { assert(size &lt;= BUFFER_SIZE); assert(size &gt; 0); assert(vcpc.empty()); double buffer[BUFFER_SIZE]; std::copy(values, values+size, buffer); std::sort(buffer, buffer+size); double currValue = buffer[0]; SizeT currCount = 1; for (SizeT index = 1; index != size; ++index) { if (currValue &lt; buffer[index]) { vcpc.push_back(ValueCountPair(currValue, currCount)); currValue = buffer[index]; currCount = 1; } else ++currCount; } vcpc.push_back(ValueCountPair(currValue, currCount)); } struct CompareFirst { bool operator () (const ValueCountPair&amp; lhs, const ValueCountPair&amp; rhs) { return lhs.first &lt; rhs.first; } }; void MergeToLeft(ValueCountPairContainer&amp; vcpcLeft, const ValueCountPairContainer&amp; vcpcRight, ValueCountPairContainer&amp; vcpcDummy) { assert(vcpcDummy.empty()); vcpcDummy.swap(vcpcLeft); vcpcLeft.resize(vcpcRight.size() + vcpcDummy.size()); std::merge(vcpcRight.begin(), vcpcRight.end(), vcpcDummy.begin(), vcpcDummy.end(), vcpcLeft.begin(), CompareFirst()); ValueCountPairContainer::iterator currPair = vcpcLeft.begin(), lastPair = vcpcLeft.end(); ValueCountPairContainer::iterator index = currPair+1; while (index != lastPair &amp;&amp; currPair-&gt;first &lt; index-&gt;first) { currPair = index; ++index; } double currValue = currPair-&gt;first; SizeT currCount = currPair-&gt;second; for (; index != lastPair;++index) { if (currValue &lt; index-&gt;first) { *currPair++ = ValueCountPair(currValue, currCount); currValue = index-&gt;first; currCount = index-&gt;second; } else currCount += index-&gt;second; } *currPair++ = ValueCountPair(currValue, currCount); vcpcLeft.erase(currPair, lastPair); vcpcDummy.clear(); } struct ValueCountPairContainerArray : std::vector&lt;ValueCountPairContainer&gt; { void resize(SizeT k) { assert(capacity() &gt;= k); while (size() &lt; k) { push_back(ValueCountPairContainer()); back().reserve(BUFFER_SIZE); } } void GetValueCountPairs(ValueCountPairContainer&amp; vcpc, const double* values, SizeT size, unsigned int nrUsedContainers) { assert(vcpc.empty()); if (size &lt;= BUFFER_SIZE) GetCountsDirect(vcpc, values, size); else { resize(nrUsedContainers+2); unsigned int m = size/2; GetValueCountPairs(vcpc, values, m, nrUsedContainers); GetValueCountPairs(begin()[nrUsedContainers], values + m, size - m, nrUsedContainers+1); MergeToLeft(vcpc, begin()[nrUsedContainers], begin()[nrUsedContainers+1]); begin()[nrUsedContainers].clear(); } assert(GetTotalCount(vcpc) == size); } }; void GetValueCountPairs(ValueCountPairContainer&amp; vcpc, const double* values, SizeT n) { vcpc.clear(); if(n) { ValueCountPairContainerArray vcpca; // max nr halving is log2(max cardinality / BUFFER_SIZE); max cardinality is SizeT(-1) vcpca.reserve(3+8*sizeof(SizeT)-10); vcpca.GetValueCountPairs(vcpc, values, n, 0); assert(vcpc.size()); } } void ClassifyJenksFisherFromValueCountPairs(LimitsContainer&amp; breaksArray, SizeT k, const ValueCountPairContainer&amp; vcpc) { breaksArray.resize(k); SizeT m = vcpc.size(); assert(k &lt;= m); // PRECONDITION if (!k) return; JenksFisher jf(vcpc, k); if (k &gt; 1) { jf.CalcAll(); SizeT lastClassBreakIndex = jf.FindMaxBreakIndex(jf.m_BufSize-1, 0, jf.m_BufSize); while (--k) { breaksArray[k] = vcpc[lastClassBreakIndex+k].first; assert(lastClassBreakIndex &lt; jf.m_BufSize); if (k &gt; 1) { jf.m_CBPtr -= jf.m_BufSize; lastClassBreakIndex = jf.m_CBPtr[lastClassBreakIndex]; } } assert(jf.m_CBPtr == jf.m_CB.begin()); } assert( k == 0 ); breaksArray[0] = vcpc[0].first; // break for the first class is the minimum of the dataset. } // test code #include \"boost/random.hpp\" int main(int c, char** argv) { const double rangeMin = 0.0; const double rangeMax = 10.0; typedef boost::uniform_real&lt;double&gt; NumberDistribution; typedef boost::mt19937 RandomNumberGenerator; typedef boost::variate_generator&lt;RandomNumberGenerator&amp;, NumberDistribution&gt; Generator; NumberDistribution distribution(rangeMin, rangeMax); RandomNumberGenerator generator; generator.seed(0); // seed with the current time Generator numberGenerator(generator, distribution); const int n = 1000000; const int k = 10; std::cout &lt;&lt; \"Generating random numbers...\" &lt;&lt; std::endl; std::vector&lt;double&gt; values; values.reserve(n); for (int i=0; i!=n; ++i) { double v = numberGenerator(); values.push_back(v*v); //populate a distribuiton slightly more interesting than uniform, with a lower density at higher values. } assert(values.size() == n); std::cout &lt;&lt; \"Generating sortedUniqueValueCounts ...\" &lt;&lt; std::endl; ValueCountPairContainer sortedUniqueValueCounts; GetValueCountPairs(sortedUniqueValueCounts, &amp;values[0], n); std::cout &lt;&lt; \"Finding Jenks ClassBreaks...\" &lt;&lt; std::endl; LimitsContainer resultingbreaksArray; ClassifyJenksFisherFromValueCountPairs(resultingbreaksArray, k, sortedUniqueValueCounts); std::cout &lt;&lt; \"Reporting results...\" &lt;&lt; std::endl; for (double breakValue: resultingbreaksArray) std::cout &lt;&lt; breakValue &lt;&lt; std::endl &lt;&lt; std::endl; std::cout &lt;&lt; \"Press a char and &lt;enter&gt; to terminate\" &lt;&lt; std::endl; char ch; std::cin &gt;&gt; ch; // wait for user to enter a key } // main . ",
    "url": "/docs/calcnaturalbreaks.html#code",
    
    "relUrl": "/docs/calcnaturalbreaks.html#code"
  },"381": {
    "doc": "calcnaturalbreaks",
    "title": "calcnaturalbreaks",
    "content": "This page contains C++ code of a O(k×n×log(n)) method for the classification of an array of numeric values such that the variance per class is minimal, known as a fisher’s-natural-breaks-classification-complexity-proof. This algorithm is an improvement of Jenks’ Natural Breaks Optimization method, which is an O(k×n2) algorithm. This code is derived from clc/dll/src1/CalcClassBreaks.cpp in our GeoDMS Repository, which implements the classifyjenksfisher operation in the GeoDms. It is independently compilable and runnable and finds the JenksFisher class-breaks for an array of random numbers and made that available here. This code is written by Maarten Hilferink, © Object Vision BV, and is provided under GNU GPL v3.0 license . ",
    "url": "/docs/calcnaturalbreaks.html",
    
    "relUrl": "/docs/calcnaturalbreaks.html"
  },"382": {
    "doc": "calculation-management",
    "title": "calculation management",
    "content": ". | Calculation rules are symbolically rewrittten to remove redundant calculation steps. | Optimize the path of calculation steps (for example in the trade off between calculating each country per year or each year per country). | Split up pre and post processing steps from the core calculations. | . ",
    "url": "/docs/calculation-management.html#calculation-management",
    
    "relUrl": "/docs/calculation-management.html#calculation-management"
  },"383": {
    "doc": "calculation-management",
    "title": "calculation-management",
    "content": "expression fast calculations: Calculation Management . ",
    "url": "/docs/calculation-management.html",
    
    "relUrl": "/docs/calculation-management.html"
  },"384": {
    "doc": "capacitated_connect",
    "title": "syntax",
    "content": ". | capacitated_connect(point_dataitem_dest, capacity_dest, point_dataitem_org, value_org) | . ",
    "url": "/docs/capacitated_connect.html#syntax",
    
    "relUrl": "/docs/capacitated_connect.html#syntax"
  },"385": {
    "doc": "capacitated_connect",
    "title": "definition",
    "content": "The capacitated_connect function works in a similar way as the first variant of the connect function, only with the extra condition that the nearest point is found in which the value of the value_org argument of the origin domain-unit is less than or equal to the capacity_dest argument of the destination domain unit. The result is a data-item for the domain unit of the point_dataitem_org with as values-unit the domain unit of the point_dataitem_org data item. ",
    "url": "/docs/capacitated_connect.html#definition",
    
    "relUrl": "/docs/capacitated_connect.html#definition"
  },"386": {
    "doc": "capacitated_connect",
    "title": "description",
    "content": "The point_dataitem_dest argument should contain unique geometries. Use the unique function to make a domain unit with unique geometries. ",
    "url": "/docs/capacitated_connect.html#description",
    
    "relUrl": "/docs/capacitated_connect.html#description"
  },"387": {
    "doc": "capacitated_connect",
    "title": "applies to",
    "content": ". | data items point_dataitem_dest and point_dataitem_org with fpoint or dpoint value-type | data items capacity_dest and value_org with float64 value type | . ",
    "url": "/docs/capacitated_connect.html#applies-to",
    
    "relUrl": "/docs/capacitated_connect.html#applies-to"
  },"388": {
    "doc": "capacitated_connect",
    "title": "conditions",
    "content": ". | The value type of all arguments must match. | The domain unit of arguments point_dataitem_dest and capacity_dest must match. | The domain unit of arguments point_dataitem_org and value_org must match. | . ",
    "url": "/docs/capacitated_connect.html#conditions",
    
    "relUrl": "/docs/capacitated_connect.html#conditions"
  },"389": {
    "doc": "capacitated_connect",
    "title": "since version",
    "content": "7.159 . ",
    "url": "/docs/capacitated_connect.html#since-version",
    
    "relUrl": "/docs/capacitated_connect.html#since-version"
  },"390": {
    "doc": "capacitated_connect",
    "title": "example",
    "content": "attribute&lt;dest&gt; dest_rel (org) := capacitated_connect(dest/geometry, dest/capacity, org/geometry, org/temp); . | org/geometry | org/temp | dest_rel | . | {401331, 115135} | 60° | 2 | . | {399476, 111803} | 60° | 1 | . | {399289, 114903} | 60° | 2 | . | {401729, 111353} | 60° | 1 | . | {398696, 111741} | 60° | 1 | . domain org, nr of rows = 5 . | dest/geometry | dest/capacity | . | {401331, 115131} | 40° | . | {399138, 112601} | 90° | . | {398600, 114903} | 60° | . | {401729, 112156} | 40° | . domain dest, nr of rows = 4 . ",
    "url": "/docs/capacitated_connect.html#example",
    
    "relUrl": "/docs/capacitated_connect.html#example"
  },"391": {
    "doc": "capacitated_connect",
    "title": "capacitated_connect",
    "content": "network-functions capacitated_connect . ",
    "url": "/docs/capacitated_connect.html",
    
    "relUrl": "/docs/capacitated_connect.html"
  },"392": {
    "doc": "cardinality",
    "title": "cardinality",
    "content": "the cardinality of a domain-unit is defined as: . | the number of rows (elements) for one-dimensional-domain (table) | the number or rows and columns (elements) for two-dimensional-domain (grid-domain) | . The cardinality can be: . | configured explicitly with the nrofrows property or range function | derived from an expression | read from a storagemanager | . ",
    "url": "/docs/cardinality.html",
    
    "relUrl": "/docs/cardinality.html"
  },"393": {
    "doc": "case-instantiation",
    "title": "configuration",
    "content": "Example: . container Cases { container FarestDistSuper_PT := CombineDistWithANDcond(DistSupermarket/dist, DistPublicTransport/dist); } . A case instantiation is configured with an expression configured to a container. In this expression the template name is used and the values for each case parameter are set between brackets. Each case_parameter is separated by a comma. ",
    "url": "/docs/case-instantiation.html#configuration",
    
    "relUrl": "/docs/case-instantiation.html#configuration"
  },"394": {
    "doc": "case-instantiation",
    "title": "case-instantiation",
    "content": "A case or template instantion is defined as using a template in an expression and setting the values for all case-parameter. ",
    "url": "/docs/case-instantiation.html",
    
    "relUrl": "/docs/case-instantiation.html"
  },"395": {
    "doc": "case-parameter",
    "title": "default values",
    "content": "An expression or configuration-file can be configured for a case parameter. The default values are then used if in the case instantiation no values are set for the case parameter. If case parameters are set in the case instantiation, they will overrule the default values. ",
    "url": "/docs/case-parameter.html#default-values",
    
    "relUrl": "/docs/case-parameter.html#default-values"
  },"396": {
    "doc": "case-parameter",
    "title": "case-parameter",
    "content": "Each template has at least one case parameter. Case parameters are the argument of a template. Case parameters are configured as the first set of subitem of the template. Case parameters in the GeoDMS can be any tree-item (not only parameter). They are not explicitly marked in the GeoDMS syntax. Therefore it is a good habit to mark the begin and the end of the case parameters with comments, as in this example. Template CombineDistWithANDcond { // begin case parameters attribute&lt;meter&gt; dist1 (bag/vbo); attribute&lt;meter&gt; dist2 (bag/vbo); // end case parameters attribute&gt;meter&gt; farest_dist (bag/vbo) := max_elem(dist1, dist1); container aggregations := Aggtemplate(farest_dist); } . In this example dist1 and dist2 are the case parameters: . To actually use this template to calculate the CombineDistWithANDcond, values need to be set for the dist1 and dist2 attributes. With a case-instantiation, values are set for each case variable and the template is used in a expression. ",
    "url": "/docs/case-parameter.html",
    
    "relUrl": "/docs/case-parameter.html"
  },"397": {
    "doc": "cat_range",
    "title": "syntax",
    "content": ". | cat_range(valuetype, startvalue, endvalue) | . ",
    "url": "/docs/cat_range.html#syntax",
    
    "relUrl": "/docs/cat_range.html#syntax"
  },"398": {
    "doc": "cat_range",
    "title": "definition",
    "content": "range(valuetype, startvalue, endvalue) sets the range for a categorical-unit with argument: . | valuetype, the value-type for the configured unit | startvalue, the lowest value of the allowed range | endvalue, the highest value of the allowed range | . The cat_range function configures a half open range. This means the value of argument: startvalue is the first value that is part of the range. Argument endvalue is the first value that falls outside the given range. ",
    "url": "/docs/cat_range.html#definition",
    
    "relUrl": "/docs/cat_range.html#definition"
  },"399": {
    "doc": "cat_range",
    "title": "description",
    "content": ". | It can also be used for two-dimensional domain units, grid-domain, with a value-type of the pointGroup; | all arguments can be configured explicitly, but can also be the results of calculations. | the startvalue argument can be different than the default value of 0. | . ",
    "url": "/docs/cat_range.html#description",
    
    "relUrl": "/docs/cat_range.html#description"
  },"400": {
    "doc": "cat_range",
    "title": "applies to",
    "content": ". | literal or parameter valuetype can be any value type. | literals or parameters startvalue and endvalue of the configured valuetype argument | . ",
    "url": "/docs/cat_range.html#applies-to",
    
    "relUrl": "/docs/cat_range.html#applies-to"
  },"401": {
    "doc": "cat_range",
    "title": "example",
    "content": ". | uint32 domain unit | . unit&lt;uint32&gt; Province := cat_range(uint32, 1, 13) { attribute&lt;.&gt; id := id(.); } . | Province/id | . | 1 | . | 2 | . | 3 | . | 4 | . | 5 | . | 6 | . | 7 | . | 8 | . | 9 | . | 10 | . | 11 | . | 12 | . domain Province, nr of rows = 12 . | spoint domain unit | . unit&lt;spoint&gt; GridDomain := cat_range(spoint, point(10s, 14s), point(15s, 19s)) {  attribute&lt;.&gt; id := id(.);  } . GridDomain/id . |   |   |   |   |   | . | (10,14) | (10,15) | (10,16) | (10,17) | (10,18) | . | (11,14) | (11,15) | (11,16) | (11,17) | (11,18) | . | (12,14) | (12,15) | (12,16) | (12,17) | (12,18) | . | (13,14) | (13,15) | (13,16) | (13,17) | (13,18) | . | (14,14) | (14,15) | (14,16) | (14,17) | (14,18) | . GridDomain, nr of rows = 6, nr of cols = 5 . ",
    "url": "/docs/cat_range.html#example",
    
    "relUrl": "/docs/cat_range.html#example"
  },"402": {
    "doc": "cat_range",
    "title": "see also",
    "content": ". | range | . ",
    "url": "/docs/cat_range.html#see-also",
    
    "relUrl": "/docs/cat_range.html#see-also"
  },"403": {
    "doc": "cat_range",
    "title": "cat_range",
    "content": "unit-functions cat_range . ",
    "url": "/docs/cat_range.html",
    
    "relUrl": "/docs/cat_range.html"
  },"404": {
    "doc": "categorical-unit",
    "title": "categorical-unit",
    "content": "a categorical unit is used for categorical data. The GeoDMS checks on the categorical consistency in calculations, if the unit is configured with the cat_range function. ",
    "url": "/docs/categorical-unit.html",
    
    "relUrl": "/docs/categorical-unit.html"
  },"405": {
    "doc": "categorical",
    "title": "categorical",
    "content": "Categorical data represent characteristics such as a person’s gender, municipality or political party. Often numeric values are used to represent categories (such as 1 for male 2 for female). Categorical data in the GeoDMS is represented by values-unit with the following characteristics: . | value type used for categorical data. If the number of categories exceeds 256, a uint16/32 value type can be used. The value type uint4/uint2 can also be used for categories with maximum 16 or 4 options, but not all functions in the GeoDMS work on data items with these value types. | metric: Categorical data items in the GeoDMS are usually configured without metric. | . Two types of categorical data are distinguished: . ordinal . Ordinal data is categorial data for which the values have a meaningful ordering. Think e.g. of the scores of a test, which are often categorized between 1 and 10. Some mathematical/statistical operations can be applied logically on this type of data (sum, min, max, mean etc.) . non-ordinal . Non-ordinal categorial data use numeric data values without logical order. Representation gender information with a 1 for male and 2 for female is an example of this type of data. Be cautions with mathematical/statistical operations on this type of data. ",
    "url": "/docs/categorical.html",
    
    "relUrl": "/docs/categorical.html"
  },"406": {
    "doc": "cbs-gemeente-wijk-buurt-kaart",
    "title": "example 1: Shapefiles",
    "content": "unit&lt;float32&gt; m := baseunit('meter', float32); unit&lt;fpoint&gt; point_rd_base : Format = \"EPSG:28992\"; unit&lt;fpoint&gt; point_rd := range(point_rd_base, point(300000[m], 0[m]), point(625000[m], 280000[m])); container SourceData { container CBS_2022 { unit&lt;uint32&gt; gemeenten: StorageName = \"%SourceDataDir%/CBS/2022/gemeente_2022_v1.shp\" , StorageType = \"gdal.vect\" , StorageReadOnly = \"True\" { attribute&lt;point_rd&gt; geometry (polygon); } unit&lt;uint32&gt; wijk: StorageName = \"%SourceDataDir%/CBS/2022/wijk_2022_v1.shp\" , StorageType = \"gdal.vect\" , StorageReadOnly = \"True\" { attribute&lt;point_rd&gt; geometry (polygon); } unit&lt;uint32&gt; buurt: StorageName = \"%SourceDataDir%/CBS/2022/buurt_2022_v1.shp\" , StorageType = \"gdal.vect\" , StorageReadOnly = \"True\" { attribute&lt;point_rd&gt; geometry (polygon); } } } . ",
    "url": "/docs/cbs-gemeente-wijk-buurt-kaart.html#example-1-shapefiles",
    
    "relUrl": "/docs/cbs-gemeente-wijk-buurt-kaart.html#example-1-shapefiles"
  },"407": {
    "doc": "cbs-gemeente-wijk-buurt-kaart",
    "title": "example 2: GeoPackage",
    "content": "container CBS_2022_gpkg: StorageName = \"%SourceDataDir%/CBS/2022/wijkenbuurten_2022_v1.gpkg\" , StorageType = \"gdal.vect\" , StorageReadOnly = \"True\" , SyncMode = \"AllTables\" , DialogData = \"point_rd\"; . In this GeoPackage, the gemeente, wijk &amp; buurt data is available. Use the SyncMode = “AllTables” configuration to read all items from the geopackage. The dialogdata property is used to inform the GeoDMS that all geographic coordinates of the polygons have as values-unit point_rd (rijksdriehoekmeting). Note that the naming in the gpkg differs from the names of the shape files: In this GeoPackage, the plural names are used: gemeenten, wijken &amp; buurten, and other descriptive field names are used, e.g. Gemeentenaam instead of GM_NAAM. ",
    "url": "/docs/cbs-gemeente-wijk-buurt-kaart.html#example-2-geopackage",
    
    "relUrl": "/docs/cbs-gemeente-wijk-buurt-kaart.html#example-2-geopackage"
  },"408": {
    "doc": "cbs-gemeente-wijk-buurt-kaart",
    "title": "cbs-gemeente-wijk-buurt-kaart",
    "content": "configuration-examples CBS gemeente/wijk/buurt kaart . In many applications the CBS gemeente/wijk/buurt maps are used to visualise data at the municipality, quarter or neighborhood level or to use data available at these levels. The data can de downloaded from the CBS website, e.g. for the year 2022 from the downloads paragraph of: https://www.cbs.nl/nl-nl/dossier/nederland-regionaal/geografische-data/wijk-en-buurtkaart-2022 . After downloading, unzip the files to a folder, e.g. %SourceDataDir%/CBS/2022. The data is available in esri-shapefile (example 1) and in geopackage format (example 2). ",
    "url": "/docs/cbs-gemeente-wijk-buurt-kaart.html",
    
    "relUrl": "/docs/cbs-gemeente-wijk-buurt-kaart.html"
  },"409": {
    "doc": "cdf",
    "title": "description",
    "content": "A cdf property is used to configure a classification for a values-unit or data-item. cdf properties can be configured to both values units and data items: . | If configured to a values unit, all data items with this values unit will use the classification (by default) in map and graph views. | If a cdf property is configured to a data item, it is used in a graph or map view of this data item and overrules a cdf property configured to the values unit of the data item. | . The cdf property always needs to refer to the ClassBreaks item of a Classification scheme. ",
    "url": "/docs/cdf.html#description",
    
    "relUrl": "/docs/cdf.html#description"
  },"410": {
    "doc": "cdf",
    "title": "example",
    "content": "unit&lt;float32&gt; s := baseunit('s', float32) , label = \"second\", cdf = \"seconden/ClassBreaks\"; unit&lt;uint8&gt; seconden : nrofrows = 3 { attribute&lt;string&gt; Label : ['treated', 'control', 'other']; attribute&lt;uint32&gt; PenColor := Brushcolor, DialogType = \"PenColor\"; attribute&lt;uint32&gt; BrushColor : [rgb(200,0,0),rgb(0,200,0), rgb(128,128,128)], DialogType = \"BrushColor\"; attribute&lt;s&gt; ClassBreaks : [0,1080,3600], DialogType = \"Classification\"; } . ",
    "url": "/docs/cdf.html#example",
    
    "relUrl": "/docs/cdf.html#example"
  },"411": {
    "doc": "cdf",
    "title": "cdf",
    "content": " ",
    "url": "/docs/cdf.html",
    
    "relUrl": "/docs/cdf.html"
  },"412": {
    "doc": "center_bound",
    "title": "syntax",
    "content": ". | center_bound(polygon_data_item) | . ",
    "url": "/docs/center_bound.html#syntax",
    
    "relUrl": "/docs/center_bound.html#syntax"
  },"413": {
    "doc": "center_bound",
    "title": "definition",
    "content": "center_bound(polygon_data_item) results in a point data-item with the center of the bounding box of the polygon_data_item. ",
    "url": "/docs/center_bound.html#definition",
    
    "relUrl": "/docs/center_bound.html#definition"
  },"414": {
    "doc": "center_bound",
    "title": "applies to",
    "content": "data item polygon_data_item with fpoint or dpoint value-type and composition polygon . ",
    "url": "/docs/center_bound.html#applies-to",
    
    "relUrl": "/docs/center_bound.html#applies-to"
  },"415": {
    "doc": "center_bound",
    "title": "example",
    "content": "attribute&lt;point_rd&gt; cb (district) := center_bound(district/geometry); . | district/geometry | cb | . | {21 {403025, 113810}{4 | {402990, 113061} | . | {17 {400990, 113269}{4 | {401207, 112734} | . | {19 {401238, 115099}{4 | {401265, 114026} | . domain district, nr of rows = 3 . ",
    "url": "/docs/center_bound.html#example",
    
    "relUrl": "/docs/center_bound.html#example"
  },"416": {
    "doc": "center_bound",
    "title": "see also",
    "content": ". | lower_bound | upper_bound | . ",
    "url": "/docs/center_bound.html#see-also",
    
    "relUrl": "/docs/center_bound.html#see-also"
  },"417": {
    "doc": "center_bound",
    "title": "center_bound",
    "content": "geometric-functions center_bound . ",
    "url": "/docs/center_bound.html",
    
    "relUrl": "/docs/center_bound.html"
  },"418": {
    "doc": "centroid",
    "title": "syntax",
    "content": ". | centroid(polygon_data_item) | . ",
    "url": "/docs/centroid.html#syntax",
    
    "relUrl": "/docs/centroid.html#syntax"
  },"419": {
    "doc": "centroid",
    "title": "definition",
    "content": "centroid(polygon_data_item) results in a point data-item with the centroid of the polygon_data_item argument. ",
    "url": "/docs/centroid.html#definition",
    
    "relUrl": "/docs/centroid.html#definition"
  },"420": {
    "doc": "centroid",
    "title": "description",
    "content": "The centroid of a polygon does not have to be located within the polygon. Use the centroid_or_mid function to find a point always located within or at the border of that polygon such that point_in_polygon would return true; . ",
    "url": "/docs/centroid.html#description",
    
    "relUrl": "/docs/centroid.html#description"
  },"421": {
    "doc": "centroid",
    "title": "applies to",
    "content": ". | data-item polygon_data_item with fpoint or dpoint value-type and composition polygon | . ",
    "url": "/docs/centroid.html#applies-to",
    
    "relUrl": "/docs/centroid.html#applies-to"
  },"422": {
    "doc": "centroid",
    "title": "example",
    "content": "attribute&lt;point_rd&gt; centroid (district) := centroid(district/geometry); . | district/geometry | centroid | . | {21 {403025, 113810}{4 | {402955, 113049} | . | {17 {400990, 113269}{4 | {401159, 112704} | . | {19 {401238, 115099}{4 | {401268, 114017} | . domain district, nr of rows = 3 . ",
    "url": "/docs/centroid.html#example",
    
    "relUrl": "/docs/centroid.html#example"
  },"423": {
    "doc": "centroid",
    "title": "implementation details",
    "content": "see code from: https://github.com/ObjectVision/GeoDMS/blob/v13/rtc/dll/src/geo/Centroid.h . ",
    "url": "/docs/centroid.html#implementation-details",
    
    "relUrl": "/docs/centroid.html#implementation-details"
  },"424": {
    "doc": "centroid",
    "title": "see also",
    "content": ". | centroid_or_mid | . ",
    "url": "/docs/centroid.html#see-also",
    
    "relUrl": "/docs/centroid.html#see-also"
  },"425": {
    "doc": "centroid",
    "title": "centroid",
    "content": "geometric-functions centroid . ",
    "url": "/docs/centroid.html",
    
    "relUrl": "/docs/centroid.html"
  },"426": {
    "doc": "centroid_or_mid",
    "title": "syntax",
    "content": ". | centroid_or_mid(polygon_data_item) | . ",
    "url": "/docs/centroid_or_mid.html#syntax",
    
    "relUrl": "/docs/centroid_or_mid.html#syntax"
  },"427": {
    "doc": "centroid_or_mid",
    "title": "definition",
    "content": "centroid_or_mid(polygon_data_item) results in a point data-item with . | the centroid if it is located in the polygon | or else the mid of the polygon_dataitem argument. The mid of a polygon is calculated as the middle point of the coordinates of the polygon in such a way it is always located within the polygon. See here for a description. | . ",
    "url": "/docs/centroid_or_mid.html#definition",
    
    "relUrl": "/docs/centroid_or_mid.html#definition"
  },"428": {
    "doc": "centroid_or_mid",
    "title": "description",
    "content": "The centroid_or_mid function results in the centroid if it is located within the polygon or else in the mid of the polygon. This means the result of the centroid_or_mid is always located within the polygon, or at its border such that point_in_polygon would return true. In the image above the centroid is not located within the polygon. The centroid_or_mid function will still result in a point within the polygon. ",
    "url": "/docs/centroid_or_mid.html#description",
    
    "relUrl": "/docs/centroid_or_mid.html#description"
  },"429": {
    "doc": "centroid_or_mid",
    "title": "applies to",
    "content": "data item polygon_dataitem with fpoint or dpoint value-type and composition polygon. ",
    "url": "/docs/centroid_or_mid.html#applies-to",
    
    "relUrl": "/docs/centroid_or_mid.html#applies-to"
  },"430": {
    "doc": "centroid_or_mid",
    "title": "example",
    "content": "attribute&lt;point_rd&gt; centroid_or_mid (district) := centroid_or_mid(district/geometry); . | district/geometry | centroid_or_mid | . | {21 {403025, 113810}{4 | {402955, 113049} | . | {17 {400990, 113269}{4 | {401159, 112704} | . | {19 {401238, 115099}{4 | {401268, 114017} | . domain district, nr of rows = 3 . ",
    "url": "/docs/centroid_or_mid.html#example",
    
    "relUrl": "/docs/centroid_or_mid.html#example"
  },"431": {
    "doc": "centroid_or_mid",
    "title": "see also",
    "content": ". | centroid | mid | . ",
    "url": "/docs/centroid_or_mid.html#see-also",
    
    "relUrl": "/docs/centroid_or_mid.html#see-also"
  },"432": {
    "doc": "centroid_or_mid",
    "title": "centroid_or_mid",
    "content": "geometric-functions centroid_or_mid . ",
    "url": "/docs/centroid_or_mid.html",
    
    "relUrl": "/docs/centroid_or_mid.html"
  },"433": {
    "doc": "certificate",
    "title": "certificate",
    "content": "recent-developments: Certificate . Virus Scanners become more and more strict on downloading/installing software over the net. Therefore we certificated the GeoDMS software. This makes is more likely we will be able to keep distributing our software in the current manner. ",
    "url": "/docs/certificate.html",
    
    "relUrl": "/docs/certificate.html"
  },"434": {
    "doc": "checking-consistency-of-values-and-domains",
    "title": "Issue",
    "content": "Data items with calculation rules that result in ordinal relation to other domains or nominal values can now be configured with a different values-unit as the values unit of the resulting relation, without an error. The following example illustrates this: . unit&lt;uint8&gt; EnergyRegion: NrofRows = 30; unit&lt;uint8&gt; Province:     NrofRows = 12; attribute&lt;EnergyRegion&gt; EnergyRegion_rel (city) := modus(neighboorhoud/EnergyRegion_rel, neighboorhoud/city_rel); attribute&lt;EnergyRegion&gt; province_rel     (city) := modus(neighboorhoud/province_rel, neighboorhoud/city_rel); . The first data-item has an expression resulting in an attribute with as domain-unit city and as values-unit EnergyRegion. This is correctly configured. The second data item has an expression resulting in an attribute with as domain unit city and as values unit Province. Although EnergyRegion is configured as values unit of this second attribute, no error is generated, as the unit Province has the same metric (none) as the unit EnergyRegion. ",
    "url": "/docs/checking-consistency-of-values-and-domains.html#issue",
    
    "relUrl": "/docs/checking-consistency-of-values-and-domains.html#issue"
  },"435": {
    "doc": "checking-consistency-of-values-and-domains",
    "title": "Domain unit metric?",
    "content": "The reason why no error is generated in the second attribute is that for both domain units EnergyRegion and Province, no metric is configured. A check on metric consistency does not result in an error. It is technically possible to configure also metric for domain units, with the baseunit. If the unit EnergyRegion and City were configured as base units, the second attribute would result in an error. Although this would solve this issue, configuring a metric for domain units has multiple other issues and is not advised. It comes down to that quantities of specified units should not be confused with nominal or ordinal numbers. ",
    "url": "/docs/checking-consistency-of-values-and-domains.html#domain-unit-metric",
    
    "relUrl": "/docs/checking-consistency-of-values-and-domains.html#domain-unit-metric"
  },"436": {
    "doc": "checking-consistency-of-values-and-domains",
    "title": "How to proceceed",
    "content": "In the GeoDMS, metric is used for consistency checks on quantities, cardinal numbers of units of a metric system. Furthermore, coordinate projections are used to assess the consistency combining locational values. A relation is a data item with an ordinal values unit, which is or can be the domain of other data items, for which other types of checks are useful. And then there are nominals, which can be used in unique, rlookup and operations that can deal with all (2nd argument of lookup). To improve checks on ordinals and nominals, we first need to label units as such and work out consequences for operator argument consistency checks and calculation ruel consistency checks. Related issue is the confusion between Population and population density in rasters with cells of equal area. ",
    "url": "/docs/checking-consistency-of-values-and-domains.html#how-to-proceceed",
    
    "relUrl": "/docs/checking-consistency-of-values-and-domains.html#how-to-proceceed"
  },"437": {
    "doc": "checking-consistency-of-values-and-domains",
    "title": "checking-consistency-of-values-and-domains",
    "content": "The GeoDMS calculates with data items, which are arrays of values that map ordinals of a specific domain to values that are mostly assumed to be quantities or measures with a specific unit of a metric system. When applying operations, the arguments are mostly checked for domain-consistency and consistency of the metric specification of the values, such as with the addition operator; also for some operations, the values unit of one argument is checked on domain-consistency with another argument, such as with the lookup operator. Furthermore, for an attribute x(domain) with a calculation rule, the domain of the result of the calculation rule is checked on domain-consistency with the formal domain and the values unit of that result is checked on metric consistency with the formal resulting unit. Domain consistency mainly implies that the calculation rule and range are equivalent and therefore implies metric consistency, but not vice versa. This model implicitly assumes that values of attributes are quantities or measures of a cardinal number of a specified metric unit. However, aside from such cardinal numbers, numeric values can also be ordinal numbers and nominal numbers, which are usually without specified metric. See also https://www.mathsisfun.com/numbers/cardinal-ordinal-nominal.html . Sets of ordinal number and sets of nominal numbers are also considered as units in the GeoDMS, whereas ordinal numbers can be the domain of other data items and a data item of nominal numbers can be used to define a new ordinal set with the unique operator. ",
    "url": "/docs/checking-consistency-of-values-and-domains.html",
    
    "relUrl": "/docs/checking-consistency-of-values-and-domains.html"
  },"438": {
    "doc": "classification-and-palette-editor",
    "title": "edit classes and or colors",
    "content": ". The (number of) classes, the type of classification and the colors used for each class can be edited with the classification and palette editor. Edits made with this editor are only is use for the current session. If you want to save the edits, you need to add or edit the relevant configuration-file, see the section classification. The editor is activated from the map-view-legend, with the pop-up menu option: Edit Palette on a layer with a classification. ",
    "url": "/docs/classification-and-palette-editor.html#edit-classes-and-or-colors",
    
    "relUrl": "/docs/classification-and-palette-editor.html#edit-classes-and-or-colors"
  },"439": {
    "doc": "classification-and-palette-editor",
    "title": "columns",
    "content": ". | BrushColor: a column showing the colors used as polygon-visualisation. Individual colors can be edited by double-clicking on a specific color cell. A Windows color dialogue appears. The pop-up menu option for this column contains (additional to the generic applicable table-view column menu options) the following options: . | Remove BrushColor: remove the column from the view. | ramp Colors: ramp the colors between the start and and color or between the start and an intermediate color and between an intermediate color and the end color. To set an intermediate color, select a cell in the column, choose a color and keep the cell highlighted. | Change Brush/Pen Color: select a color from a palette editor or set the color to fully transparent for the brush or the pen. | Classify data item: classify the original data item, see the class’s column. | Classes : split and merge to split the current class or merge two or more existing classes. | . | LabelText: individual labels can be edited by activating the cell and typing a new label or by pressing the F2 function key and editing the current label. The pop-up menu option for this column contains (additional to the generic applicable table-view column menu options) the following options: . | Remove LabelText: remove the column from the view. | Classify data item: classify the original data item, see the class’s column. | Classes : split and merge to split the current class or merge two or more existing classes. | ReLabel: relabel the contents of the label column with derived labels from the class boundaries | . | classBreaks: individual classes can be edited by activating the cell and typing a new class value or by pressing the F2 function key and editing the current class value. The pop-\u0002up menu option for this column contains (additional to the generic applicable table-view column menu options) the following options: . | Remove ClassBreaks: remove the column from the view | Classify data item. reclassify the original data item. First, specify the number of requested classes in the class’s text box. Next, select one of the types of classifications that are available: . | Unique values (available for all data-item with a number of unique occurrences that fits in the range of the domain-unit): a class is added for each value that occurs in the data item. The number of classes is based on the number of unique occurrences. The maximum number of classes is dependent on the domain unit of the class unit. | Equal counts non-zero (available for all data items): see Equal count with as difference that the value 0 is treated separately. | Equal counts (available for all data items): the occurring data items are split up into classes with, as far as possible, an equal count of occurrences in each class. The class breaks are first set to the number of sorted data elements (excluding the no data values) divided by the number of requested classes. Each class break is checked to determine whether the next data element has the same value as the data element at the break. If this is the case, the class break is increased to the next data element, until a data element is found with a new value. If this data element is not found before the next class break, the last class break is removed and the number of classes is decreased by one class. | Equal intervals non-zero (available for all data items): see Equal intervals with as difference that the value 0 is treated separately. | Equal intervals (available for all data items): the range of the data in a data item, or the specified range of a values unit, is split up in intervals of the same size. If no range is specified the default range for the value type of the unit is used. | JenksFisher non-zero: see JenksFisher with as difference that the value 0 is treated separately. | JenksFisher : applies the fisher’s-natural-breaks-classification-complexity-proof to minimize the variance within each class. | Logarithmic intervals (available for all items with a minimum value of zero): the range of the data in a data item or the specified range of values unit is split up in intervals of the same size using a logarithmic distribution. If no range is specified the default range for the value type of the unit is used. | . | Classes : split and merge to split the current class or merge two or more existing classes. | . | Count: a dervied column, showing the number of elements in each class. The values can not be edited. The pop-up menu option for this column contains (additional to the generic applicable table-view column menu options) the following options: . | Remove count: remove the column from the view. | Ramp values: option is disabled. | Classify data item: classify the original data item, see the class’s column. | Classes : split and merge to split the current class or merge two or more existing classes. | . | . ",
    "url": "/docs/classification-and-palette-editor.html#columns",
    
    "relUrl": "/docs/classification-and-palette-editor.html#columns"
  },"440": {
    "doc": "classification-and-palette-editor",
    "title": "classification-and-palette-editor",
    "content": "user-guide-geodms-gui - classification and palette editor . ",
    "url": "/docs/classification-and-palette-editor.html",
    
    "relUrl": "/docs/classification-and-palette-editor.html"
  },"441": {
    "doc": "classification",
    "title": "classification schemes",
    "content": "The following examples show the configuration of Classification Schemes for Numerical (1.1 and 1.2) and Categorical (2) data: . example 1.1: Numerical data, explicitly defined colors . unit&lt;float32&gt; meter := baseunit('m', float32) ,   cdf = \"Classifications/m_4K/ClassBreaks\"; unit&lt;uint8&gt; m_4K: NrofRows = 4 { attribute&lt;meter&gt; ClassBreaks: DialogType = \"Classification\",       [0, 200, 400, 800]; attribute&lt;uint32&gt; SymbolColor: DialogType = \"SymbolColor\",       [rgb(128,255,0), rgb(0,128,0), rgb(0,64,128), rgb(255,0,0)]; attribute&lt;string&gt; Labels: DialogType = \"LabelText\",       ['0 - 200 meter','200 - 400 meter','400 - 800 meter','&gt;= 800 meter']; } . example 1.2: Numerical data, multiple color ramp . unit Ratio_12K: nrofrows = 12 { attribute ClassBreaks: DialogType = \"Classification\", [ 0,.5,.55,.575,.6,.625,.65,.675,.7,.725,.75,.8]; attribute&lt;int32&gt; b := max_elem(int32(0),min_elem(int32(255),( ramp(-120,int32(250), .)))); attribute&lt;int32&gt; r := max_elem(int32(0),min_elem(int32(255),( ramp(int32(250),-120, .)))); attribute&lt;int32&gt; g := max_elem(int32(0),min_elem(int32(255),( (int32(250) - b - r) *int32(2)))); attribute&lt;uint32&gt; BrushColor := rgb(r,g,b) ,DialogType = \"BrushColor\"; ) &lt;/pre&gt; *example 2: Categorical data* unit&lt;uint8&gt; LS_pres: nrofrows = 3 { attribute&lt;uint32&gt; BrushColor: DialogType = \"BrushColor\",       [rgb(255,255,198),rgb(0,0,200),rgb(0,215,0)]; attribute&lt;string&gt; Label: DialogType = \"LabelText\",       ['Low','Medium','High']; } . In the 1.1 example, a [values-unit](values-unit) meter is configured with [metric](metric): meter. Such quantity values units are usually configured in a Units container. For this values unit a [cdf](cdf) [property](property) is configured, referring to a class break [attribute](attribute), usually called ClassBreaks (or Classes), of a Classification Scheme. By configuring this cdf property, the GeoDMS will use this Classification Scheme by default for all [data-item](data-item) with this values unit, to classify the data for the map view. By configuring the cdf property to a data item, the default Classification Scheme configured for the values unit is overruled. The class values unit is a uint8 [unit](unit) called *m_4K*. Class units are usually configured in a Classification container. For the class unit, the [nrofrows](nrofrows) property need to be configured. In the example the class unit has 4 entries. In the 1.2 example, a color ramp is configured with calculation rules. Some notes to this configuration: | the red and blue are off (value =0) for a reasonable part of the palette. Therefore, they ramp from -120 till the point where they fade in | values red and blue are clipped before green is calculated | the green part in the middle is brighter for easier recognition. Hence that green is not only the difference in brightness from one color, but *int32(2) | In example 2 the class unit is LS_pres (LandScapePressure). This class unit is also the values unit for items describing the landscape pressure in two classes. ## subitems The class units have the following subitems: 1. **ClassBreaks item**: The first data item is the item with the class breaks (only for example 1), needed if data must be classified. The values unit of this ClassBreaks item must be the same values unit as the original data item to be classified. In the example this is the values_unit meter. The [dialogtype](dialogtype) property for this item needs to be set to Classification. For each class, the start value is configured as primary data (or read from an external storage). In the example the first class starts with the value 0. The class continues until the start value of the next class, in this case 200. The last class is always open ended. The syntax for the data of the ClassBreaks item is: [*start value class 1, .., start value class n* ] 2. **Visualisation style items, like SymbolColor and BrushColor** : The second (set of) data items is used for the visualisation of each class. The DialogType needs to be configured to the specific [visualisation-style](visualisation-style). The possible style items are dependent on the type of data. The current Classification and Palette editor in the [geodms-gui](geodms-gui) only supports adapting colors. Other visualisation style items can at the moment only be configured in the GeoDMS syntax. 3. **Labels item**: The last data item is the item with the labels shown in the (map) legend for each class. A labels item need to be configured as an attribute with a string values type. The DialogType property for labels items needs to be set to \"LabelText\". For each class a label needs to be configured. The syntax for the data of the label item is: [*label 1, .., label n*]. Labels are also shown in the table to refer the data visualized. The current Classification and Palette editor in the GeoDMS GUI supports editing label items. ",
    "url": "/docs/classification.html#classification-schemes",
    
    "relUrl": "/docs/classification.html#classification-schemes"
  },"442": {
    "doc": "classification",
    "title": "classification",
    "content": "Numeric data items (see value-type Numerical) can be numerical or categorical. | Numerical data need to be classified before it can presented in a map view. Classify means grouping the values of the original distribution in a limited set of classes. A class unit and a class break attribute are used for this purpose, see example 1. | Categorical data does not have to be classified before it can be presented in a map view, as it is already available in a limited set of classes. Still it can be useful to classify also this type of data, e.g. to reclassify groups to Low, Middle and High, see example 2. | . For each class of a class unit, visualisation-style (like colors) and labels can be configured. Labels describe the classes in the map view legend or in the table. The combination of class breaks (if necessary), the set of visualisation-style and labels is called a Classification Scheme. Classification schemes in the GeoDMS are usually configured in a Classifications Container. ",
    "url": "/docs/classification.html",
    
    "relUrl": "/docs/classification.html"
  },"443": {
    "doc": "classify-functions",
    "title": "classify-functions",
    "content": "Classify operators-and-functions are used to classify the values-unit of data-item to classification. This can be useful, e.g. to present data in a map view. | classify | . | classifyequalcount | classifyequalinterval | classifyuniquevalues | classifyjenksfisher | classifynonzerojenksfisher | classifyloginterval | . ",
    "url": "/docs/classify-functions.html",
    
    "relUrl": "/docs/classify-functions.html"
  },"444": {
    "doc": "classify",
    "title": "syntax",
    "content": ". | classify(a, ClassBreak) | . ",
    "url": "/docs/classify.html#syntax",
    
    "relUrl": "/docs/classify.html#syntax"
  },"445": {
    "doc": "classify",
    "title": "definition",
    "content": "classify(a, ClassBreak) results in a classified data item with the index-numbers of the domain-unit of data-item ClassBreak. The resulting data item has the same domain unit as data item a. ",
    "url": "/docs/classify.html#definition",
    
    "relUrl": "/docs/classify.html#definition"
  },"446": {
    "doc": "classify",
    "title": "applies to",
    "content": ". | a: numeric data item with Numeric value-type to be classified. | ClassBreak: data-item with Numeric value type, used to classify the data. The ClassBreak data item contains the start value of each class. The end value of is derived from the ClassBreak value of the next class. The last class is always open. | . ",
    "url": "/docs/classify.html#applies-to",
    
    "relUrl": "/docs/classify.html#applies-to"
  },"447": {
    "doc": "classify",
    "title": "conditions",
    "content": ". | The values-unit of argument a and ClassBreak must match. | . ",
    "url": "/docs/classify.html#conditions",
    
    "relUrl": "/docs/classify.html#conditions"
  },"448": {
    "doc": "classify",
    "title": "example",
    "content": "attribute&lt;m_5K&gt; classifyNrInh (DistrictDomain) := classify(NrInh, inh_4K/ClassBreaks); . | NrInh | ClassifyNrInh | . | 550 | 2 | . | 1025 | 3 | . | 300 | 2 | . | 200 | 1 | . | 0 | 0 | . | null | null | . | 300 | 2 | . | 2 | 0 | . | 20 | 0 | . | 55 | 0 | . | 860 | 3 | . | 1025 | 3 | . | 1025 | 3 | . | 100 | 1 | . | 750 | 2 | . Table District, nr of rows = 15; . | inh_4K/ClassBreaks | . | 0 | . | 100 | . | 300 | . | 800 | . Table inh_4K, nr of rows = 4 . ",
    "url": "/docs/classify.html#example",
    
    "relUrl": "/docs/classify.html#example"
  },"449": {
    "doc": "classify",
    "title": "classify",
    "content": "classify-functions classify . ",
    "url": "/docs/classify.html",
    
    "relUrl": "/docs/classify.html"
  },"450": {
    "doc": "classifyequalcount",
    "title": "syntax",
    "content": ". | ClassifyEqualCount(a, domain-unit) | . ",
    "url": "/docs/classifyequalcount.html#syntax",
    
    "relUrl": "/docs/classifyequalcount.html#syntax"
  },"451": {
    "doc": "classifyequalcount",
    "title": "definition",
    "content": "ClassifyEqualCount(a, domain unit) results in a data-item with class breaks, based on an equal count distribution of classes. The resulting values-unit is the values unit of data item a, the resulting domain unit is the domain unit argument. | a: numeric data item to be classified | domain unit: determining the number of class breaks. | . ",
    "url": "/docs/classifyequalcount.html#definition",
    
    "relUrl": "/docs/classifyequalcount.html#definition"
  },"452": {
    "doc": "classifyequalcount",
    "title": "description",
    "content": "An equal distribution of classes means the data item to be classified is split up in classes with, as far as possible, an equal count of occurrences in each class. The same function can also be applied from the geodms-gui, by requesting the Palette Editor of a map layer and activate the Classify &gt; Equal Count classification. The ClassifyEqualCount results in a set of ClassBreaks that can be used in the classify function to classify a data item. ",
    "url": "/docs/classifyequalcount.html#description",
    
    "relUrl": "/docs/classifyequalcount.html#description"
  },"453": {
    "doc": "classifyequalcount",
    "title": "applies to",
    "content": ". | data item a with Numeric value type | domain unit with value-type from group CanBeDomainUnit | . ",
    "url": "/docs/classifyequalcount.html#applies-to",
    
    "relUrl": "/docs/classifyequalcount.html#applies-to"
  },"454": {
    "doc": "classifyequalcount",
    "title": "since version",
    "content": "7.019 . ",
    "url": "/docs/classifyequalcount.html#since-version",
    
    "relUrl": "/docs/classifyequalcount.html#since-version"
  },"455": {
    "doc": "classifyequalcount",
    "title": "example",
    "content": "attribute&lt;nrPersons&gt; classifyEcNrInh (inh_4K) := ClassifyEqualCount(NrInh, inh_4K); . | classifyEcNrInh | . | 0 | . | 55 | . | 300 | . | 860 | . Table inh_4K, nr of rows = 4 . | NrInh | . | 550 | . | 1025 | . | 300 | . | 200 | . | 0 | . | null | . | 300 | . | 2 | . | 20 | . | 55 | . | 860 | . | 1025 | . | 1025 | . | 100 | . | 750 | . Table District, nr of rows = 15 . ",
    "url": "/docs/classifyequalcount.html#example",
    
    "relUrl": "/docs/classifyequalcount.html#example"
  },"456": {
    "doc": "classifyequalcount",
    "title": "classifyequalcount",
    "content": "classify-functions ClassifyEqualCount . ",
    "url": "/docs/classifyequalcount.html",
    
    "relUrl": "/docs/classifyequalcount.html"
  },"457": {
    "doc": "classifyequalinterval",
    "title": "syntax",
    "content": ". | ClassifyEqualInterval(a, domain-unit) | . ",
    "url": "/docs/classifyequalinterval.html#syntax",
    
    "relUrl": "/docs/classifyequalinterval.html#syntax"
  },"458": {
    "doc": "classifyequalinterval",
    "title": "definition",
    "content": "ClassifyEqualInterval(a, domain unit) results in a data-item with class breaks, based on a equal interval distribution of classes. The resulting values-unit is the values unit of data item a, the resulting domain unit is thedomain unit argument. | a: numeric data item to be classified | domain unit: determining the number of class breaks. | . ",
    "url": "/docs/classifyequalinterval.html#definition",
    
    "relUrl": "/docs/classifyequalinterval.html#definition"
  },"459": {
    "doc": "classifyequalinterval",
    "title": "description",
    "content": "An equal distribution of classes means the data item to be classified is split up in classes with, as far as possible, an equal interval size of each class. The same function can also be applied from the geodms-gui, by requesting the Palette Editor of a map layer and activate the Classify &gt; Equal Interval classification. The ClassifyEqualInterval results in a set of ClassBreaks that can be used in the classify function to classify a data item. ",
    "url": "/docs/classifyequalinterval.html#description",
    
    "relUrl": "/docs/classifyequalinterval.html#description"
  },"460": {
    "doc": "classifyequalinterval",
    "title": "applies to",
    "content": ". | data item a with Numeric value type | domain unit with value-type from group CanBeDomainUnit | . ",
    "url": "/docs/classifyequalinterval.html#applies-to",
    
    "relUrl": "/docs/classifyequalinterval.html#applies-to"
  },"461": {
    "doc": "classifyequalinterval",
    "title": "since version",
    "content": "7.019 . ",
    "url": "/docs/classifyequalinterval.html#since-version",
    
    "relUrl": "/docs/classifyequalinterval.html#since-version"
  },"462": {
    "doc": "classifyequalinterval",
    "title": "example",
    "content": "attribute&lt;nrPersons&gt; classifyEiNrInh (inh_4K) := ClassifyEqualInterval(NrInh, inh_4K); . | classifyEiNrInh | . | 0 | . | 341 | . | 683 | . | 1025 | . Table inh_4K, nr of rows = 4 . | NrInh | . | 550 | . | 1025 | . | 300 | . | 200 | . | 0 | . | null | . | 300 | . | 2 | . | 20 | . | 55 | . | 860 | . | 1025 | . | 1025 | . | 100 | . | 750 | . Table District, nr of rows = 15 . ",
    "url": "/docs/classifyequalinterval.html#example",
    
    "relUrl": "/docs/classifyequalinterval.html#example"
  },"463": {
    "doc": "classifyequalinterval",
    "title": "classifyequalinterval",
    "content": "classify-functions ClassifyEqualInterval . ",
    "url": "/docs/classifyequalinterval.html",
    
    "relUrl": "/docs/classifyequalinterval.html"
  },"464": {
    "doc": "classifyjenksfisher",
    "title": "syntax",
    "content": ". | ClassifyJenksFisher(a, domain-unit) | . ",
    "url": "/docs/classifyjenksfisher.html#syntax",
    
    "relUrl": "/docs/classifyjenksfisher.html#syntax"
  },"465": {
    "doc": "classifyjenksfisher",
    "title": "definition",
    "content": "ClassifyJenksFisher(a, domain unit) results in a data-item with class breaks, based on the method described in fisher’s-natural-breaks-classification-complexity-proof. The resulting values-unit is the values unit of data item a, the resulting domain-unit is the domain unit argument. | a: numeric data item to be classified | domain unit: determining the number of class breaks. | . ",
    "url": "/docs/classifyjenksfisher.html#definition",
    
    "relUrl": "/docs/classifyjenksfisher.html#definition"
  },"466": {
    "doc": "classifyjenksfisher",
    "title": "description",
    "content": "The Jenks Fisher classification method, is a fast algorithm that results in breaks that minimize the sum of the square deviations from the class means, also known as natural breaks. The self contained code with an example usage is: calcnaturalbreaks . The same function can also be applied from the geodms-gui by requesting the Palette Editor of a map layer and activate the Classify &gt; JenksFisher classification. The ClassifyJenksFisher results in a set of ClassBreaks that can be used in the classify function to classify a data item. ",
    "url": "/docs/classifyjenksfisher.html#description",
    
    "relUrl": "/docs/classifyjenksfisher.html#description"
  },"467": {
    "doc": "classifyjenksfisher",
    "title": "applies to",
    "content": ". | data item a with Numeric value-type | domain unit with value type from group CanBeDomainUnit | . ",
    "url": "/docs/classifyjenksfisher.html#applies-to",
    
    "relUrl": "/docs/classifyjenksfisher.html#applies-to"
  },"468": {
    "doc": "classifyjenksfisher",
    "title": "since version",
    "content": "7.019 . ",
    "url": "/docs/classifyjenksfisher.html#since-version",
    
    "relUrl": "/docs/classifyjenksfisher.html#since-version"
  },"469": {
    "doc": "classifyjenksfisher",
    "title": "example",
    "content": "attribute&lt;nrPersons&gt; classifyJfNrInh (inh_4K) := ClassifyJenksFisher(NrInh, inh_4K); . | classifyJfNrInh | . | 0 | . | 200 | . | 550 | . | 860 | . Table inh_4K, nr of rows = 4 . | NrInh | . | 550 | . | 1025 | . | 300 | . | 200 | . | 0 | . | null | . | 300 | . | 2 | . | 20 | . | 55 | . | 860 | . | 1025 | . | 1025 | . | 100 | . | 750 | . Table District, nr of rows = 15 . see also . | classifynonzerojenksfisher | . ",
    "url": "/docs/classifyjenksfisher.html#example",
    
    "relUrl": "/docs/classifyjenksfisher.html#example"
  },"470": {
    "doc": "classifyjenksfisher",
    "title": "classifyjenksfisher",
    "content": "classify-functions ClassifyJenksFisher . ",
    "url": "/docs/classifyjenksfisher.html",
    
    "relUrl": "/docs/classifyjenksfisher.html"
  },"471": {
    "doc": "classifyloginterval",
    "title": "syntax",
    "content": ". | ClassifyLogInterval(a, domain-unit) | . ",
    "url": "/docs/classifyloginterval.html#syntax",
    
    "relUrl": "/docs/classifyloginterval.html#syntax"
  },"472": {
    "doc": "classifyloginterval",
    "title": "definition",
    "content": "ClassifyLogInterval(a, domain unit) results in a data-item with class breaks, based on a logarithmic interval distribution of classes. The resulting values-unit is the values unit of data item a, the resulting domain unit is the domain unit argument. | a: numeric data item to be classified | domain unit: determining the number of class breaks. | . ",
    "url": "/docs/classifyloginterval.html#definition",
    
    "relUrl": "/docs/classifyloginterval.html#definition"
  },"473": {
    "doc": "classifyloginterval",
    "title": "description",
    "content": "An logarithmic interval of classes means the data item to be classified is split up in classes with, as far as possible, an equal logarithmic interval size of each class. The same function can also be applied from the geodms-gui, by requesting the Palette Editor of a map layer and activate the Classify &gt; Logarithmic Intervals classification. The ClassifyLogInterval results in a set of ClassBreaks that can be used in the classify function to classify a data item. ",
    "url": "/docs/classifyloginterval.html#description",
    
    "relUrl": "/docs/classifyloginterval.html#description"
  },"474": {
    "doc": "classifyloginterval",
    "title": "applies to",
    "content": ". | data item a with Numeric value-type | domain unit with value type from group CanBeDomainUnit | . ",
    "url": "/docs/classifyloginterval.html#applies-to",
    
    "relUrl": "/docs/classifyloginterval.html#applies-to"
  },"475": {
    "doc": "classifyloginterval",
    "title": "since version",
    "content": "7.019 . ",
    "url": "/docs/classifyloginterval.html#since-version",
    
    "relUrl": "/docs/classifyloginterval.html#since-version"
  },"476": {
    "doc": "classifyloginterval",
    "title": "example",
    "content": "attribute&lt;nrPersons&gt; classifyLiNrInh (inh_4K) := ClassifyLogInterval(NrInh, inh_4K); . | classifyLiNrInh | . | 0 | . | 1 | . | 10 | . | 100 | . Table inh_4K, nr of rows = 4 . | NrInh | . | 550 | . | 1025 | . | 300 | . | 200 | . | 0 | . | null | . | 300 | . | 2 | . | 20 | . | 55 | . | 860 | . | 1025 | . | 1025 | . | 100 | . | 750 | . Table District, nr of rows = 15 . ",
    "url": "/docs/classifyloginterval.html#example",
    
    "relUrl": "/docs/classifyloginterval.html#example"
  },"477": {
    "doc": "classifyloginterval",
    "title": "classifyloginterval",
    "content": "classify-functions ClassifyLogInterval . ",
    "url": "/docs/classifyloginterval.html",
    
    "relUrl": "/docs/classifyloginterval.html"
  },"478": {
    "doc": "classifynonzerojenksfisher",
    "title": "syntax",
    "content": ". | ClassifyNonzeroJenksFisher(a, domain-unit) | . ",
    "url": "/docs/classifynonzerojenksfisher.html#syntax",
    
    "relUrl": "/docs/classifynonzerojenksfisher.html#syntax"
  },"479": {
    "doc": "classifynonzerojenksfisher",
    "title": "definition",
    "content": "ClassifyNonzeroJenksFisher(a, domain unit) results in a data-item with class breaks, based on the method described in fisher’s-natural-breaks-classification-complexity-proof. The resulting values-unit is the values unit of data item a, the resulting domain-unit is the domain unit argument. | a: numeric data item to be classified | domain unit: determining the number of class breaks. | . This Nonzero version of this function classifies the positive and negative values separately. The value 0 is a treated as a special value, it is a compulsory class break. The number of classes for the positive and the negative values, within the total number of classes, are chosen in a manner that minimalizes the sum of the square deviations from the class means. ",
    "url": "/docs/classifynonzerojenksfisher.html#definition",
    
    "relUrl": "/docs/classifynonzerojenksfisher.html#definition"
  },"480": {
    "doc": "classifynonzerojenksfisher",
    "title": "description",
    "content": "The Jenks Fisher classification method, is a fast algorithm that results in breaks that minimize the sum of the square deviations from the class means, also known as natural breaks. The self contained code with an example usage is: calcnaturalbreaks . The same function can also be applied from the geodms-gui by requesting the Palette Editor of a map layer and activate the Classify &gt; JenksFisher classification. The ClassifyNonzeroJenksFisher results in a set of ClassBreaks that can be used in the classify function to classify a data item. ",
    "url": "/docs/classifynonzerojenksfisher.html#description",
    
    "relUrl": "/docs/classifynonzerojenksfisher.html#description"
  },"481": {
    "doc": "classifynonzerojenksfisher",
    "title": "applies to",
    "content": ". | data item a with Numeric value-type | domain unit with value type from group CanBeDomainUnit | . ",
    "url": "/docs/classifynonzerojenksfisher.html#applies-to",
    
    "relUrl": "/docs/classifynonzerojenksfisher.html#applies-to"
  },"482": {
    "doc": "classifynonzerojenksfisher",
    "title": "since version",
    "content": "7.019 . ",
    "url": "/docs/classifynonzerojenksfisher.html#since-version",
    
    "relUrl": "/docs/classifynonzerojenksfisher.html#since-version"
  },"483": {
    "doc": "classifynonzerojenksfisher",
    "title": "example",
    "content": "attribute&lt;nrPersons&gt; classifyNZJfNrInh (inh_4K) := ClassifyNonzeroJenksFisher(NrInh, inh_4K); . | classifyJfNrInh | . | 0 | . | 2 | . | 300 | . | 750 | . Table inh_4K, nr of rows = 4 . | NrInh | . | 550 | . | 1025 | . | 300 | . | 200 | . | 0 | . | null | . | 300 | . | 2 | . | 20 | . | 55 | . | 860 | . | 1025 | . | 1025 | . | 100 | . | 750 | . Table District, nr of rows = 15 . see also . | classifyjenksfisher | . ",
    "url": "/docs/classifynonzerojenksfisher.html#example",
    
    "relUrl": "/docs/classifynonzerojenksfisher.html#example"
  },"484": {
    "doc": "classifynonzerojenksfisher",
    "title": "classifynonzerojenksfisher",
    "content": "classify-functions ClassifyNonzeroJenksFisher . ",
    "url": "/docs/classifynonzerojenksfisher.html",
    
    "relUrl": "/docs/classifynonzerojenksfisher.html"
  },"485": {
    "doc": "classifyuniquevalues",
    "title": "syntax",
    "content": ". | ClassifyUniqueValues(a, domain-unit) | . ",
    "url": "/docs/classifyuniquevalues.html#syntax",
    
    "relUrl": "/docs/classifyuniquevalues.html#syntax"
  },"486": {
    "doc": "classifyuniquevalues",
    "title": "definition",
    "content": "ClassifyUniqueValues(a, domain unit) results in a data-item with class breaks, based on the unique values occurring in the data item a. The resulting values-unit is the values unit of data item a, the resulting domain unit is the domain unit argument. | a: numeric data item to be classified | domain unit: determining the number of class breaks. | . ",
    "url": "/docs/classifyuniquevalues.html#definition",
    
    "relUrl": "/docs/classifyuniquevalues.html#definition"
  },"487": {
    "doc": "classifyuniquevalues",
    "title": "description",
    "content": "The ClassifyUniqueValues function results in a number of class breaks, based on the number of rows of the domain unit argument. If the data item to be classified contains more unique values than this number, the resulting set of cut off by this number. If the data item to be classified contains less unique values, the resulting data-item is completed up with repeating the highest unique value. To create a new domain unit with all unique values occurring in the original data set once, use the unique function. This unique function works similar to the unique values function in the geodms-gui which can be applied by requesting the Palette Editor of a map layer and activate the Classify &gt; Unique values classification. ",
    "url": "/docs/classifyuniquevalues.html#description",
    
    "relUrl": "/docs/classifyuniquevalues.html#description"
  },"488": {
    "doc": "classifyuniquevalues",
    "title": "applies to",
    "content": ". | data item a with Numeric value-type | domain unit with value type from group CanBeDomainUnit | . ",
    "url": "/docs/classifyuniquevalues.html#applies-to",
    
    "relUrl": "/docs/classifyuniquevalues.html#applies-to"
  },"489": {
    "doc": "classifyuniquevalues",
    "title": "since version",
    "content": "7.019 . ",
    "url": "/docs/classifyuniquevalues.html#since-version",
    
    "relUrl": "/docs/classifyuniquevalues.html#since-version"
  },"490": {
    "doc": "classifyuniquevalues",
    "title": "example",
    "content": "attribute&lt;nrPersons&gt; classifyUvNrInh (inh_4K) := ClassifyUniqueValues(NrInh, inh_4K); . | classifyUvNrInh | . | 0 | . | 2 | . | 20 | . | 55 | . Table inh_4K, nr of rows = 4 . | NrInh | . | 550 | . | 1025 | . | 300 | . | 200 | . | 0 | . | null | . | 300 | . | 2 | . | 20 | . | 55 | . | 860 | . | 1025 | . | 1025 | . | 100 | . | 750 | . Table District, nr of rows = 15 . ",
    "url": "/docs/classifyuniquevalues.html#example",
    
    "relUrl": "/docs/classifyuniquevalues.html#example"
  },"491": {
    "doc": "classifyuniquevalues",
    "title": "classifyuniquevalues",
    "content": "classify-functions ClassifyUniqueValues . ",
    "url": "/docs/classifyuniquevalues.html",
    
    "relUrl": "/docs/classifyuniquevalues.html"
  },"492": {
    "doc": "clean-polygon-geometry",
    "title": "clean-polygon-geometry",
    "content": "Cleaning a polygon geometry has two purposes: . 1) get rid of unexpected lines in the visualsiation of polygon items in map views, often due to coordinate-conversions. 2) remove double coordinates to finish simplifying your geometry. Cleaning a polygon geometry can be configured with the partitioned_union_polygon-(dissolve-by-attribute) function, see example: . attribute&lt;LatLong_mdegrees&gt; Geometry_mdegrees_clean (polygon, domain) :=  partitioned_union_polygon(Geometry_mdegrees, id(domain)); . ",
    "url": "/docs/clean-polygon-geometry.html",
    
    "relUrl": "/docs/clean-polygon-geometry.html"
  },"493": {
    "doc": "clean-up-gui",
    "title": "clean-up-gui",
    "content": "recent-developments: Clean up GUI . The geodms-gui was developed with the idea that it is useful and possible to edit configurations (add/remove/edit items) with the GUI. The current way of working is that configurations are edited with a configuration-file-editor and the GUI is used as a viewer on data, metadata and calculations results. Therefore menu options like Insert container/data item etc. are not longer in use and removed from the GUI. This is an ongoing process. ",
    "url": "/docs/clean-up-gui.html",
    
    "relUrl": "/docs/clean-up-gui.html"
  },"494": {
    "doc": "clean-up-support",
    "title": "related issues",
    "content": ". | issue 1092 | . ",
    "url": "/docs/clean-up-support.html#related-issues",
    
    "relUrl": "/docs/clean-up-support.html#related-issues"
  },"495": {
    "doc": "clean-up-support",
    "title": "clean-up-support",
    "content": "recent-developments: Clean-up support . Configurations, especially for continuing projects with multiple contributors, tend to expand to a level that the overview on the whole configuration get lost. Configuration parts are added, but less attention is given to removing unused parts of the configuration/source data. Partly this is because it is not always clear which items/data are still ‘in use’. We implemented functions to help the user in finding out unused parts of the configuration/source data. Items can be set from the pop-up menu as: . | source: to find out which other items are using this item. | target: to find out which other items are used to calculate this item. | . The aim was not be on a full automatic clean-up procedure as: . | there is no objective manner to find out if configuration parts/data are not useful anymore. | cleaning up configuration files automatically would also mean reformatting, which we think can better be done by the modeller. | . Furthermore, further support for finding all used data sources with the Source Descr Tab in the detail pages, will be considered and/or clarified. ",
    "url": "/docs/clean-up-support.html",
    
    "relUrl": "/docs/clean-up-support.html"
  },"496": {
    "doc": "collect_attr_by_cond",
    "title": "syntax",
    "content": ". | collect_attr_by_cond(tree_item, selection domain unit, condition) | . ",
    "url": "/docs/collect_attr_by_cond.html#syntax",
    
    "relUrl": "/docs/collect_attr_by_cond.html#syntax"
  },"497": {
    "doc": "collect_attr_by_cond",
    "title": "definition",
    "content": "collect_attr_by_cond(tree_item, selection domain unit, condition) results in a new container with all subitem from the src_tree_item argument with the same domain unit as the condition argument. The condition is applied to select a set of elements of the original domain, this set is defined by the second argument: selection domain unit. This selection domain unit becomes the domain unit of the collected attributes. The resulting attribute have the same values units and composition as the source attributes, expression are made with the lookup function for each new attribute. This works similar to the collect_attr_by_org_rel function, with as difference that the collect_attr_by_cond does not use an org_rel item. ",
    "url": "/docs/collect_attr_by_cond.html#definition",
    
    "relUrl": "/docs/collect_attr_by_cond.html#definition"
  },"498": {
    "doc": "collect_attr_by_cond",
    "title": "applies to",
    "content": ". | tree_item can by any tree-item, but usually a unit or container | domain unit a unit with value-type of the group CanbeDomainUnit | condition must be a boolean attribute or subexpression resulting in boolean values. | . ",
    "url": "/docs/collect_attr_by_cond.html#applies-to",
    
    "relUrl": "/docs/collect_attr_by_cond.html#applies-to"
  },"499": {
    "doc": "collect_attr_by_cond",
    "title": "since version",
    "content": "8.8.0 . ",
    "url": "/docs/collect_attr_by_cond.html#since-version",
    
    "relUrl": "/docs/collect_attr_by_cond.html#since-version"
  },"500": {
    "doc": "collect_attr_by_cond",
    "title": "example",
    "content": "unit&lt;uint32&gt; City: StorageName = \"city.csv\", StorageType = \"gdal.vect\", StoragReadOnly = \"True\" { attribute&lt;string&gt; name attribute&lt;uint32&gt; RegionCode; } unit&lt;uint32&gt; ZHCities := select_with_attr_by_cond(City, City/RegionCode == 200) container attributes_ZHCities := collect_attr_by_cond(City, ZHCities, City/RegionCode == 200); &lt;/pre&gt; | City/RegionCode | City/Name |----------------:|-----------| 100 | Amsterdam | 200 | Rotterdam | 300 | Utrecht | 200 | Den Haag | 400 | Eindhoven | null | Haarlem | 400 | Tilburg | *domain City, nr of rows = 7* |attributes_ZHCities/name|attributes_ZHCities/regionCode|------------------------|-----------------------------:|**Rotterdam** |**200** |**Den Haag** |**200** | *domain ZHCities, nr of rows = 2* The subitems: name and regionCode are generated by the configured collect_attr_by_cond function. ## see also - [collect_attr_by_org_rel](collect_attr_by_org_rel) - [select_with_attr_by_cond](select_with_attr_by_cond) . ",
    "url": "/docs/collect_attr_by_cond.html#example",
    
    "relUrl": "/docs/collect_attr_by_cond.html#example"
  },"501": {
    "doc": "collect_attr_by_cond",
    "title": "collect_attr_by_cond",
    "content": "relational-functions collect_attr_by_cond . ",
    "url": "/docs/collect_attr_by_cond.html",
    
    "relUrl": "/docs/collect_attr_by_cond.html"
  },"502": {
    "doc": "collect_attr_by_org_rel",
    "title": "syntax",
    "content": ". | collect_attr_by_org_rel(tree_item, selection domain unit, org_rel) | . ",
    "url": "/docs/collect_attr_by_org_rel.html#syntax",
    
    "relUrl": "/docs/collect_attr_by_org_rel.html#syntax"
  },"503": {
    "doc": "collect_attr_by_org_rel",
    "title": "definition",
    "content": "collect_attr_by_cond(tree_item, selection domain unit, org_rel) results in a new container with all subitem from the src_tree_item argument with the same domain unit as the values-unit of the org_rel argument. The org_rel attribute is used in lookup expressions to select a set of elements of the original domain, this set is defined by the second argument: selection domain unit. This selection domain unit becomes the domain unit of the collected attributes. The resulting attribute have the same values units and composition as the source attributes, expression are made with the lookup function for each new attribute. This works similar to the select_afew function, with as difference that the collect_attr_by_org_rel does not create a new domain unit. Between versions 8.5.2 and 8.7.2 the name relate_attr was used for the collect_attr_by_org_rel function. ",
    "url": "/docs/collect_attr_by_org_rel.html#definition",
    
    "relUrl": "/docs/collect_attr_by_org_rel.html#definition"
  },"504": {
    "doc": "collect_attr_by_org_rel",
    "title": "applies to",
    "content": ". | tree_item can by any tree-item, but usually a unit or container | domain unit a unit with value-type of the group CanbeDomainUnit | org_rel a relation from the domain unit argument toward the domain unit of the attributes to be collect_attr_by_org_rel. | . ",
    "url": "/docs/collect_attr_by_org_rel.html#applies-to",
    
    "relUrl": "/docs/collect_attr_by_org_rel.html#applies-to"
  },"505": {
    "doc": "collect_attr_by_org_rel",
    "title": "since version",
    "content": "8.8.0 . ",
    "url": "/docs/collect_attr_by_org_rel.html#since-version",
    
    "relUrl": "/docs/collect_attr_by_org_rel.html#since-version"
  },"506": {
    "doc": "collect_attr_by_org_rel",
    "title": "example",
    "content": "unit&lt;uint32&gt; City: StorageName = \"city.csv\", StorageType = \"gdal.vect\", StoragReadOnly = \"True\" { attribute&lt;string&gt; name attribute&lt;uint32&gt; RegionCode; } unit&lt;uint32&gt; ZHCities := select_with_attr_by_org_rel(City, City/RegionCode == 200) container attributes_ZHCities := collect_attr_by_org_rel(City, ZHCities, ZHCities/org_rel); &lt;/pre&gt; | City/RegionCode | City/Name |----------------:|-----------| 100 | Amsterdam | 200 | Rotterdam | 300 | Utrecht | 200 | Den Haag | 400 | Eindhoven | null | Haarlem | 400 | Tilburg | *domain City, nr of rows = 7* |attributes_ZHCities/name|attributes_ZHCities/regionCode|------------------------|-----------------------------:|**Rotterdam** |**200** |**Den Haag** |**200** | *domain ZHCities, nr of rows = 2* The subitems: name and regionCode are generated by the configured collect_attr_by_org_rel function. ## see also - [collect_attr_by_cond](collect_attr_by_cond) - [select_with_attr_by_org_rel](select_with_attr_by_org_rel) . ",
    "url": "/docs/collect_attr_by_org_rel.html#example",
    
    "relUrl": "/docs/collect_attr_by_org_rel.html#example"
  },"507": {
    "doc": "collect_attr_by_org_rel",
    "title": "collect_attr_by_org_rel",
    "content": "relational-functions collect_attr_by_org_rel . ",
    "url": "/docs/collect_attr_by_org_rel.html",
    
    "relUrl": "/docs/collect_attr_by_org_rel.html"
  },"508": {
    "doc": "collect_by_cond",
    "title": "syntax",
    "content": ". | collect_by_cond(selection domain unit, condition, attribute) | . ",
    "url": "/docs/collect_by_cond.html#syntax",
    
    "relUrl": "/docs/collect_by_cond.html#syntax"
  },"509": {
    "doc": "collect_by_cond",
    "title": "definition",
    "content": "collect_by_cond(selection domain unit, condition, attribute) results in a the values of attribute attribute, with the selection domain unit as domain-unit, for which the values of the condition argument are true. ",
    "url": "/docs/collect_by_cond.html#definition",
    
    "relUrl": "/docs/collect_by_cond.html#definition"
  },"510": {
    "doc": "collect_by_cond",
    "title": "applies to",
    "content": ". | selection domain unit: a unit with value type of the group CanbeDomainUnit | condition: must be a boolean attribute or subexpression resulting in boolean values. | attribute: can be any attribute with the same domain unit as the condition argument | . ",
    "url": "/docs/collect_by_cond.html#applies-to",
    
    "relUrl": "/docs/collect_by_cond.html#applies-to"
  },"511": {
    "doc": "collect_by_cond",
    "title": "since version",
    "content": "8.8.0 . ",
    "url": "/docs/collect_by_cond.html#since-version",
    
    "relUrl": "/docs/collect_by_cond.html#since-version"
  },"512": {
    "doc": "collect_by_cond",
    "title": "example",
    "content": "unit&lt;uint32&gt; City: StorageName = \"city.csv\", StorageType = \"gdal.vect\", StoragReadOnly = \"True\" { attribute&lt;string&gt; name attribute&lt;uint32&gt; RegionCode; } unit&lt;uint32&gt; ZHCities := select_with_attr_by_cond(City, City/RegionCode == 200); attribute&lt;string&gt; name (ZHCities) := collect_by_cond(ZHCities, City/RegionCode == 200, City/name); &lt;/pre&gt; | City/RegionCode | City/Name |----------------:|-----------| 100 | Amsterdam | 200 | Rotterdam | 300 | Utrecht | 200 | Den Haag | 400 | Eindhoven | null | Haarlem | 400 | Tilburg | *domain City, nr of rows = 7* |name |--------------|**Rotterdam** |**Den Haag** | *domain ZHCities, nr of rows = 2* ## see also - [collect_attr_by_org_rel](collect_attr_by_org_rel) - [collect_attr_by_cond](collect_attr_by_cond) . ",
    "url": "/docs/collect_by_cond.html#example",
    
    "relUrl": "/docs/collect_by_cond.html#example"
  },"513": {
    "doc": "collect_by_cond",
    "title": "collect_by_cond",
    "content": "relational-functions collect_by_cond . ",
    "url": "/docs/collect_by_cond.html",
    
    "relUrl": "/docs/collect_by_cond.html"
  },"514": {
    "doc": "combine",
    "title": "syntax",
    "content": ". | combine(a, b, … , n) | . ",
    "url": "/docs/combine.html#syntax",
    
    "relUrl": "/docs/combine.html#syntax"
  },"515": {
    "doc": "combine",
    "title": "definition",
    "content": "combine(a, b, … , n) results in a uint32 domain-unit with the cartesian product of the domain units a, b, …, n. The number of elements of the new domain unit is the multiplication of the number of elements of a, b, …, n. ",
    "url": "/docs/combine.html#definition",
    
    "relUrl": "/docs/combine.html#definition"
  },"516": {
    "doc": "combine",
    "title": "description",
    "content": "The combine function generates subitem, named nr_SequenceNr, in the example nr_1 for NHDomain and nr_2 for YearDomain. These data-item contain relation to the original domain-unit and can be used in a lookup function to relate attribute to the new domain-unit, see the example. Use the combine_data function to combine values of data items, resulting in a data item with the unit resulting from the combine function as values-unit. Use a combine_uint8_16_32_64 function to configure a domain unit for another value type. ",
    "url": "/docs/combine.html#description",
    
    "relUrl": "/docs/combine.html#description"
  },"517": {
    "doc": "combine",
    "title": "applies to",
    "content": ". | unit a, b, …, n with value type from group CanBeDomainUnit | . ",
    "url": "/docs/combine.html#applies-to",
    
    "relUrl": "/docs/combine.html#applies-to"
  },"518": {
    "doc": "combine",
    "title": "conditions",
    "content": "The combine functions combines a maximum of six domain units. Use a combine in a combine if more domain units need to be combined. ",
    "url": "/docs/combine.html#conditions",
    
    "relUrl": "/docs/combine.html#conditions"
  },"519": {
    "doc": "combine",
    "title": "example",
    "content": "unit&lt;uint32&gt; NHCityYear := combine(NHCity, YearDomain) {  attribute&lt;string&gt; NHCity_name := NHCity/name[nr_1]; attribute&lt;string&gt; Year        := YearDomain/Year[nr_2]; } . ",
    "url": "/docs/combine.html#example",
    
    "relUrl": "/docs/combine.html#example"
  },"520": {
    "doc": "combine",
    "title": "see also",
    "content": ". | combine_uint8_16_32_64 | combine_data | . ",
    "url": "/docs/combine.html#see-also",
    
    "relUrl": "/docs/combine.html#see-also"
  },"521": {
    "doc": "combine",
    "title": "combine",
    "content": "relational-functions combine . ",
    "url": "/docs/combine.html",
    
    "relUrl": "/docs/combine.html"
  },"522": {
    "doc": "combine_data",
    "title": "syntax",
    "content": ". | combine_data (combined_domain, a_rel, b_rel) | . ",
    "url": "/docs/combine_data.html#syntax",
    
    "relUrl": "/docs/combine_data.html#syntax"
  },"523": {
    "doc": "combine_data",
    "title": "definition",
    "content": "combine_data(combined_domain, a_rel, b_rel) results in an attribute with index-numbers to the combined_domain argument, combining the values of data-item a_rel and b_rel. ",
    "url": "/docs/combine_data.html#definition",
    
    "relUrl": "/docs/combine_data.html#definition"
  },"524": {
    "doc": "combine_data",
    "title": "description",
    "content": "The first argument combined_domain is usually made with a combine function. The combine_data function results in an attribute with an index to combined_domain for each element of the domain of a_rel and b_rel by as values-unit the first argument of the function (domainunit) and as domain-unit the domain unit of data items: a, b, .. n. ",
    "url": "/docs/combine_data.html#description",
    
    "relUrl": "/docs/combine_data.html#description"
  },"525": {
    "doc": "combine_data",
    "title": "applies to",
    "content": ". | unit combined_domain with value type from the group CanBeDomainUnit. | attributes a_rel, b_rel with value type from group CanBeDomainUnit. | . ",
    "url": "/docs/combine_data.html#applies-to",
    
    "relUrl": "/docs/combine_data.html#applies-to"
  },"526": {
    "doc": "combine_data",
    "title": "conditions",
    "content": ". | The domain units of the data items a_rel and b_rel must match (or be all void). | values unit of b_rel must match the 2nd argument of the combine or combine_unit with which the combined_domain has been defined. | . ",
    "url": "/docs/combine_data.html#conditions",
    
    "relUrl": "/docs/combine_data.html#conditions"
  },"527": {
    "doc": "combine_data",
    "title": "since version",
    "content": "7.131 . ",
    "url": "/docs/combine_data.html#since-version",
    
    "relUrl": "/docs/combine_data.html#since-version"
  },"528": {
    "doc": "combine_data",
    "title": "combining multiple indices",
    "content": "combine_data can only be used to combine two indices . When 3 (or more ) indices need to be combined, chain them: . | unit  BC  := combine_unit(B,  C); | unit  ABC := combine_unit(A, BC); | attribute ABC_rel (domain) := combine_data(ABC, domain/A_rel, combine_data(BC, domain/B_rel, domain/C_rel)); | . ",
    "url": "/docs/combine_data.html#combining-multiple-indices",
    
    "relUrl": "/docs/combine_data.html#combining-multiple-indices"
  },"529": {
    "doc": "combine_data",
    "title": "example",
    "content": "unit&lt;uint32&gt; NHCityYear := combine(NHCity, YearDomain); attribute&lt;NHCityYear&gt; NHCityYear_rel (Adomain) := combine_data(NHCityYear, NHCity_rel, YearDomain_rel); . | NHCity_rel | YearDomain_rel | NHCity | Year | NHCityYear_rel | . | 0 | 0 | Amsterdam | 1995 | 0 | . | 0 | 1 | Amsterdam | 2005 | 3 | . | 1 | 1 | Haarlem | 2005 | 4 | . | 2 | 0 | Alkmaar | 1995 | 2 | . | 2 | 1 | Alkmaar | 2005 | 5 | . ADomain, nr of rows = 5 . | nr_1 | nr_2 | NHCityName | Year | . | 0 | 0 | Amsterdam | 1995 | . | 0 | 1 | Amsterdam | 2005 | . | 1 | 0 | Haarlem | 1995 | . | 1 | 1 | Haarlem | 2005 | . | 2 | 0 | Alkmaar | 1995 | . | 2 | 1 | Alkmaar | 2005 | . domain NHCityYear, nr of rows = 6 . | NHCity/name | . | Amsterdam | . | Haarlem | . | Alkmaar | . domain NHCity, nr of rows = 3 . | YearDomain/Year | . | 1995 | . | 2005 | . Yeardomain, nr of rows = 2 . ",
    "url": "/docs/combine_data.html#example",
    
    "relUrl": "/docs/combine_data.html#example"
  },"530": {
    "doc": "combine_data",
    "title": "see also",
    "content": ". | full configuration example: overlay-versus-combine-data | . ",
    "url": "/docs/combine_data.html#see-also",
    
    "relUrl": "/docs/combine_data.html#see-also"
  },"531": {
    "doc": "combine_data",
    "title": "combine_data",
    "content": "relational-functions combine_data . ",
    "url": "/docs/combine_data.html",
    
    "relUrl": "/docs/combine_data.html"
  },"532": {
    "doc": "combine_uint8_16_32_64",
    "title": "syntax",
    "content": ". | combine_uint8(a, b, … , n) | combine_uint16(a, b, … , n) | combine_uint32(a, b, … , n) | combine_uint64(a, b, … , n) | . ",
    "url": "/docs/combine_uint8_16_32_64.html#syntax",
    
    "relUrl": "/docs/combine_uint8_16_32_64.html#syntax"
  },"533": {
    "doc": "combine_uint8_16_32_64",
    "title": "definition",
    "content": "These functions work in the same way as the combine function, only they result in domain-unit of respectively uint8, uint16, uint32 or uint64 value-type . ",
    "url": "/docs/combine_uint8_16_32_64.html#definition",
    
    "relUrl": "/docs/combine_uint8_16_32_64.html#definition"
  },"534": {
    "doc": "combine_uint8_16_32_64",
    "title": "combine_uint8_16_32_64",
    "content": "relational-functions combine_uint8, combine_uint16, combine_uint32, combine_uint64 . ",
    "url": "/docs/combine_uint8_16_32_64.html",
    
    "relUrl": "/docs/combine_uint8_16_32_64.html"
  },"535": {
    "doc": "combine_unit_uint8_16_32_64",
    "title": "combine_unit_uint8_16_32_64",
    "content": "Same as combine_uint8_16_32_64, but without creating subitems. ",
    "url": "/docs/combine_unit_uint8_16_32_64.html",
    
    "relUrl": "/docs/combine_unit_uint8_16_32_64.html"
  },"536": {
    "doc": "compiling-the-geodms",
    "title": "Clone GeoDMS from Github",
    "content": "Clone GeoDMS from the Github repository. ",
    "url": "/docs/compiling-the-geodms.html#clone-geodms-from-github",
    
    "relUrl": "/docs/compiling-the-geodms.html#clone-geodms-from-github"
  },"537": {
    "doc": "compiling-the-geodms",
    "title": "setting up external dependencies",
    "content": "vcpkg: openssl, gdal and boost . Dependencies are easily installed using the open-source package manager vcpkg. Open a Developer Command Prompt, cd to the desired location for vcpkg and use the following commands to install and integrate vcpkg into Microsoft Visual Studio (2022): . git clone https://github.com/Microsoft/vcpkg cd vcpkg bootstrap-vcpkg.bat vcpkg integrate install . The last command is optional, but recommended for user-wide integration. TODO: add vcpkg paths . Now vcpkg is installed the following three commands will install necessary GeoDMS dependencies: openssl (https requests for wms background layers), gdal and boost. In case multiple Microsoft Visual Studio versions are installed, you can open a Developer Command Prompt from the Microsoft Visual Studio (2022) menu in Tools &gt; Command line &gt; Developer Command Prompt to ensure vcpkg is hooked to the right environment, and, assuming you build for x64: . set VCPKG_DEFAULT_TRIPLET=x64-windows . vcpkg install boost boost-locale openssl-windows sqlite3[rtree] gdal ms-gsl --triplet x64-windows . The vcpkg triplet you use may vary depending on the platform specifics. Make sure to restart Microsoft Visual Studio (2022) for changes to take effect. To update further down the line use git pull from within the vcpkg folder and ./vcpkg update or ./vcpkg upgrade. Known issues: . | Error: Building package atlmfc:x64-windows failed with: BUILD_FAILED -&gt; Solution: https://github.com/microsoft/vcpkg/issues/4257 | . Intel IPP . Download the Intel® oneAPI Base Toolkit here. From setup select the latest Integrated Performance Primitives (IPP) library. Open the Microsoft Visual Studio (2022) project file located in /geo/dll/GeoDLL.vcxproj and set the IPP paths on lines 49, 55 and 59. GeoDMSGui . Install Qt version 6.5.1 or later. ",
    "url": "/docs/compiling-the-geodms.html#setting-up-external-dependencies",
    
    "relUrl": "/docs/compiling-the-geodms.html#setting-up-external-dependencies"
  },"538": {
    "doc": "compiling-the-geodms",
    "title": "building the GeoDMS DLLs",
    "content": "Open the solution file “geodms/trunk/all22.sln” in Microsoft Visual Studio (2022). You see that GeoDMS consists of various projects from which we will create .dll files. There are four build configurations: a Release and Debug version in both x64 and Win32. Use ctrl-shift-b to build the whole solution, or alternatively follow these steps as roadmap to build GeoDmsRun.exe: . | Rtc (Runtime Core Library) | Sym (configuration syntax parser and producer of an internal representation of a model and its calculation rules.) | Tic (Tree Item Classes, Data Items and Units and related services.) | Stx (configuration syntax parser and producer of an internal representation of a model and its calculation rules.) | Stg (Storage Managers, providing a generic interface to GDAL, Proj, and native Storage Implementations including .shp and .dbf the TIFF lib, and ODBC connections.) | Clc (implementation of common operators) | Geo (implementation of geometric and network operators, such as Dijkstra functions, raster convolution, polygon and arc operations) | Shv (Viewer Components (TableViewer, MapViewer) and related Carets, and Graphic Components.) | And finally: GeoDmsRun.exe, and GeoDmsGuiQt.exe | . All build products will be placed in the bin folder depending on the chosen build configuration, for instance the “GeoDmsRun.exe” file may reside in the: geodms/bin/Release/x64 folder. ",
    "url": "/docs/compiling-the-geodms.html#building-the-geodms-dlls",
    
    "relUrl": "/docs/compiling-the-geodms.html#building-the-geodms-dlls"
  },"539": {
    "doc": "compiling-the-geodms",
    "title": "Python bindings (work in progress)",
    "content": "Python bindings are being developed in the main development git branch (currently: v14). The GeoDmsPython project produces the required Python3 bindings using pybin11. First make sure python 3.10 or above is installed on your system, which can be downloaded here. Next make sure pybind11 is installed, using command: . vcpkg install python3 --triplet x64-windows vcpkg install pybind11 --triplet x64-windows . Then in the GeoDmsPython project properties make sure that the include path refers correctly to your vcpkg python locations . | C/C++ -&gt; Additional Include Directories: | . If all is setup, GeoDmsPython project can be build without errors, the output will be named geodms.pyd in the output folder (python dynamic module). Now open a terminal in the build folder where geodms.pyd is located and type “python” which will start up python in command line mode. To test the geodms module import the version function: . from geodms import version . And evaluate: . version() . Which should return a proper version string, which depends on the build time and type: . Additionally, you can run LoadConfigFromPython.py, located in the LoadConfigFromPython project folder. ",
    "url": "/docs/compiling-the-geodms.html#python-bindings-work-in-progress",
    
    "relUrl": "/docs/compiling-the-geodms.html#python-bindings-work-in-progress"
  },"540": {
    "doc": "compiling-the-geodms",
    "title": "Native Linux compilation (work in progress)",
    "content": "Native Linux compilation is being prepared in the linux_gcc branch. Steps that i did to get somewhere are: . | Install WSL (Ubuntu) and set ssh on port 23 sudo apt update sudo apt upgrade sudo apt install net-tools cd /etc/ssh/sshd_config vi sshd_config ; sudo service ssh restart . | install gcc and vcpkg | . sudo apt install g++ gdb make ninja-build rsync zip sudo apt install vcpkg cd /mnt/c/vcpkg/scripts/buildsystems ./bootstrap-vcpkg.sh vcpkg install boost --triplet x64-linux vcpkg integrate install . ",
    "url": "/docs/compiling-the-geodms.html#native-linux-compilation-work-in-progress",
    
    "relUrl": "/docs/compiling-the-geodms.html#native-linux-compilation-work-in-progress"
  },"541": {
    "doc": "compiling-the-geodms",
    "title": "compiling-the-geodms",
    "content": "This page describes how to compile GeoDmsRun.exe from source on Windows. The process is bound to change through an ongoing effort to make the source code more accessible to the open source community. Compilation is performed using Microsoft Visual Studio (2022) which can be downloaded here. Make sure to also install the latest versions of additional components: C++ MFC and C++ ATL. This document is written as a chronological guide. ",
    "url": "/docs/compiling-the-geodms.html",
    
    "relUrl": "/docs/compiling-the-geodms.html"
  },"542": {
    "doc": "complement",
    "title": "syntax",
    "content": ". | complement(a) | . ",
    "url": "/docs/complement.html#syntax",
    
    "relUrl": "/docs/complement.html#syntax"
  },"543": {
    "doc": "complement",
    "title": "definition",
    "content": "complement(a) results in the logical negation of the boolean or integer data-item a. In this bitwise operation, a true or 1 value is returned if the original bit value was false or 0 and vice versa. The values-unit of the resulting data item is the values unit of data item a. ",
    "url": "/docs/complement.html#definition",
    
    "relUrl": "/docs/complement.html#definition"
  },"544": {
    "doc": "complement",
    "title": "description",
    "content": "complement is a bitwise operation. ",
    "url": "/docs/complement.html#description",
    
    "relUrl": "/docs/complement.html#description"
  },"545": {
    "doc": "complement",
    "title": "applies to",
    "content": ". | data item with bool, (u)int8, (u)int16, (u)int32 or (u)int64 value-type | . ",
    "url": "/docs/complement.html#applies-to",
    
    "relUrl": "/docs/complement.html#applies-to"
  },"546": {
    "doc": "complement",
    "title": "since version",
    "content": "7.023 . ",
    "url": "/docs/complement.html#since-version",
    
    "relUrl": "/docs/complement.html#since-version"
  },"547": {
    "doc": "complement",
    "title": "example",
    "content": "attribute&lt;uint8&gt; complementA (ADomain) := complement(A); . ",
    "url": "/docs/complement.html#example",
    
    "relUrl": "/docs/complement.html#example"
  },"548": {
    "doc": "complement",
    "title": "complement",
    "content": "logical-functions complement . ",
    "url": "/docs/complement.html",
    
    "relUrl": "/docs/complement.html"
  },"549": {
    "doc": "composite-function",
    "title": "definition",
    "content": "Composite functions are functions generating one or more subitems (e.g. select_with_org_rel, griddist) . ",
    "url": "/docs/composite-function.html#definition",
    
    "relUrl": "/docs/composite-function.html#definition"
  },"550": {
    "doc": "composite-function",
    "title": "caching",
    "content": "The direct results (generated subitem) are session-specific. Indirect results, calculated with expressions that are not only direct references to such subitems can be stored persistently. In this way they differ from the session-specific functions. ",
    "url": "/docs/composite-function.html#caching",
    
    "relUrl": "/docs/composite-function.html#caching"
  },"551": {
    "doc": "composite-function",
    "title": "composite-function",
    "content": " ",
    "url": "/docs/composite-function.html",
    
    "relUrl": "/docs/composite-function.html"
  },"552": {
    "doc": "composition",
    "title": "composition",
    "content": "The composition type indicates how a sequence of coordinates need to be interpreted. The GeoDMS supports two composition types: . | arc: an arc consists of at least a start and end point and 0 or more intermediates per entry. | poly or polygon: a polygon consist of at least three points per entry, the last and first point need to be the same to create a closed polygon. The composition type poly is also used to indicate multiple elements in sequence-functions. | . The composition type is configured for feature-attribute of arcs and polygons with the keyword arc or polygon in the same brackets as the domain-unit. A comma separates domain units and the composition type, the order is irrelevant. For point feature attributes no composition type has to be configured. ",
    "url": "/docs/composition.html",
    
    "relUrl": "/docs/composition.html"
  },"553": {
    "doc": "compress-files",
    "title": "compress files (also advised for SourceDataDir)",
    "content": "If possible, put the CalcCache in a folder on a disk with a NTFS partition. The NTFS disk management system allows you to keep files in a compressed on disk. The following steps are needed to store files compressed: . 1) Browse in the Windows Explorer to your LocalDataDir, see for the physical location the GeoDMS GUI &gt; Tools &gt; Options &gt; Advance tab &gt; Paths&gt; LocalDataDir. 2) View the properties (right mouse click), a following dialog appears (Windows 10 layout): . [](File:CCproperties.png \"wikilink\") . 3) Click the Advanced button, a following dialog appears (Windows 10 layout) . [](File:CCadvanced.png \"wikilink\") . Activate the option Compress contents to save disk space (third checkbox) and deactivate Indexing Service (second checkbox). Indexing on CalcCache folders is not useful and makes you system slow. An additional dialog can pop up, in which you indicate to compress both folders and subfolders. Dependent on the amount of data in the folder and subfolders, the process to compress files can take some time. The advantage of storing files compressed is that the amount of disk space is saved substantially. Furthermore the GeoDMS can read the compressed files faster, as less disk access is needed. A small disadvantage is that writing files take some more time, as the data need to be compressed first. But still it is advisable to keep the files compressed on disk. ",
    "url": "/docs/compress-files.html#compress-files-also-advised-for-sourcedatadir",
    
    "relUrl": "/docs/compress-files.html#compress-files-also-advised-for-sourcedatadir"
  },"554": {
    "doc": "compress-files",
    "title": "compress-files",
    "content": "CalcCache Managing Files . ",
    "url": "/docs/compress-files.html",
    
    "relUrl": "/docs/compress-files.html"
  },"555": {
    "doc": "concatenation_(+)",
    "title": "syntax",
    "content": ". | add(string_dataitem_a,string_dataitem_b) | string_dataitem_a + string_dataitem_b | . ",
    "url": "/docs/concatenation_(+).html#syntax",
    
    "relUrl": "/docs/concatenation_(+).html#syntax"
  },"556": {
    "doc": "concatenation_(+)",
    "title": "definition",
    "content": "add(string_dataitem_a,string_dataitem_b) or string_dataitem_a + string_dataitem_b + … results in the element-by-element concatenation of corresponding string values of argument: string_dataitem_a and string_dataitem_b. ",
    "url": "/docs/concatenation_(+).html#definition",
    
    "relUrl": "/docs/concatenation_(+).html#definition"
  },"557": {
    "doc": "concatenation_(+)",
    "title": "description",
    "content": "The add is also in use for numeric additions. String concatenations differ from normal additions, they are not commutative (a + b is not equal to b + a). ",
    "url": "/docs/concatenation_(+).html#description",
    
    "relUrl": "/docs/concatenation_(+).html#description"
  },"558": {
    "doc": "concatenation_(+)",
    "title": "applies to",
    "content": ". | data-item with string value-type | . ",
    "url": "/docs/concatenation_(+).html#applies-to",
    
    "relUrl": "/docs/concatenation_(+).html#applies-to"
  },"559": {
    "doc": "concatenation_(+)",
    "title": "conditions",
    "content": "The domain-unit of all arguments must match or be void (string literals and parameter can be concatenated with any string data item. ",
    "url": "/docs/concatenation_(+).html#conditions",
    
    "relUrl": "/docs/concatenation_(+).html#conditions"
  },"560": {
    "doc": "concatenation_(+)",
    "title": "example",
    "content": "attribute&lt;string&gt; AandB (ADomain) := A + B; . | A | B | AandB | . | ‘Test’ | ‘Test2’ | ‘TestTest2’ | . | ‘88hallo99’ | null | null | . | ’+)’ | ’-‘ | ’+)-’ | . | ‘twee woorden’ | ‘drie woorden test’ | ‘twee woordendrie woorden test’ | . | ’ test met spatie’ | ’ _woord’ | ’ test met spatie _woord’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/concatenation_(+).html#example",
    
    "relUrl": "/docs/concatenation_(+).html#example"
  },"561": {
    "doc": "concatenation_(+)",
    "title": "see also",
    "content": ". | add | . ",
    "url": "/docs/concatenation_(+).html#see-also",
    
    "relUrl": "/docs/concatenation_(+).html#see-also"
  },"562": {
    "doc": "concatenation_(+)",
    "title": "concatenation_(+)",
    "content": "string-functions concatenation (+) . ",
    "url": "/docs/concatenation_(+).html",
    
    "relUrl": "/docs/concatenation_(+).html"
  },"563": {
    "doc": "config-options-dialog",
    "title": "dialog",
    "content": "The Config Options dialog can be activated from the Settings main menu option. The contents of this dialog is dependent on the opened configuration. All string parameter configured in the container ConfigSettings &gt; Overridable are presented in this view. Each parameter can be overruled with this dialog to set a local machine specific value, which is stored in the Windows Registry of the local machine. This way, the generic configured folders can be configured to the folders as they occur on your computer. ",
    "url": "/docs/config-options-dialog.html#dialog",
    
    "relUrl": "/docs/config-options-dialog.html#dialog"
  },"564": {
    "doc": "config-options-dialog",
    "title": "config-options-dialog",
    "content": "user-guide-geodms-gui - Config Options dialog . ",
    "url": "/docs/config-options-dialog.html",
    
    "relUrl": "/docs/config-options-dialog.html"
  },"565": {
    "doc": "config.ini",
    "title": "planned changes",
    "content": "To improve source code management, most config.ini settings will be stored elsewhere in a version after GeoDms 5.60. | Project related settings will be moved to the container ConfigSettings included in/from the main configuration file. | User related settings will be moved to the user specific HKEY_CURRENT_USER/Software/ObjectVision/Dms. | Machine related settings will be moved the machine specific HKEY_LOCAL_MACHINE/SOFTWARE/ObjectVision/Dms. | . | [general] A reference to the project specific DmsProject.dll must be found before a configuration is loaded (in order to load the SplashScreen first). Also the value for ConfigPointColRow needs to be known before reading of the configuration starts. Therefore, these settings will remain in the configuration specific config.ini. | The setting under [configuration] and [Case Management] are related to a specific configuration and will be read from the ConfigSettings. | [Directories] is related to both the machine and the project. However, since %LocalDataDir% and %SourceDataDir% are already stored in the windows registry and LocalDataProjDir and SourceDataProjDir should be defined as a function of these registry settings and possibly %projName% (their default values are usually sufficient), LocalDataProjDir and SourceDataProjDir will be defined in _ConfigSettings _as well. Their default values will remain. | [Directories] projDir sometimes needs to be reset if branches of configurations end up at a higher level in the folder hierarchy and therefore remains in config.ini. Furthermore, projDir may be required in the evaluation of the (default value of) DmsProjectDLL. | [Directories] orgConfig indicates wether a configuration may be overwritten and needs to be changed by the GeoDmsGui.exe when a configuration is saved, but the GeoDMS can then equally well store/change this setting in ConfigSettings. | The keys under [Colors] are considered as user related settings. | The Hide0..Hide2 keys under [messages] indicate if a user requested not to show future Disclaimers, SourceData notification and copyright notifications. They are considered both project related (since the message might be different for different projects) and user related (since a new user might not have seen a notification). These flags will be stored as StatusFlags messages in the user specific HKEY_CURRENT_USER/Software/ObjectVision/Dms with a keyname determined by ConfigSettings messages which will default to MessageFlags_%projName%. The default value for this key will be that all notifications should be shown. | . The DmsEditor, LocalDataDir and SourceDataDir settings are considered as machine related and will be moved to HKEY_LOCAL_MACHINE/SOFTWARE/ObjectVision/Dms The GeneralUrl and HelpFileUrl are considered as project related and will be stored in the configuration specific and therefore project specific /ConfigSettings. ",
    "url": "/docs/config.ini.html#planned-changes",
    
    "relUrl": "/docs/config.ini.html#planned-changes"
  },"566": {
    "doc": "config.ini",
    "title": "migration policy",
    "content": "After implementation of the above described migrations, the settings will continue to be read but not stored from the original locations during some versions, possibly with the generation of a warning. As long as the above is not implemented and the config.ini contains user related settings, project source managers are advised to put config.ini on the ignore list of their source code constrol system (such as subversion). ",
    "url": "/docs/config.ini.html#migration-policy",
    
    "relUrl": "/docs/config.ini.html#migration-policy"
  },"567": {
    "doc": "config.ini",
    "title": "see also",
    "content": ". | geodms-gui | geodmsrun | . ",
    "url": "/docs/config.ini.html#see-also",
    
    "relUrl": "/docs/config.ini.html#see-also"
  },"568": {
    "doc": "config.ini",
    "title": "config.ini",
    "content": "The config.ini file is placed in the folders-and-placeholders . It contains project related, user related and configuration related settings that can be edited directly and/or by the geodms-gui-&gt; MainMenu -&gt; Tools -&gt; Options dialog. There are also editable user and/or machine related settings stored in the windows registry. Here follows a list of all sections and keys that are read and stored by the GeoDMS. After each key the default value is given, if any. If a default value is OK, you don’t have to include the related key. [general] DmsProjectDLL=%projdir%/bin/DmsProject.dll ; default OK, Used by GeoDmsGui.exe to find the project specific GuiElements ConfigPointColRow=0                        ; default OK for the Land Use Scanner. Determines that point functions and point config data is interpreted as [Row,Col] [configuration] classifications=Classifications            ; default OK, can refer to multiple containers separated by ';' geography=geography                        ; default NOT OK for the Land Use Scanner. Should be /Geografie for NLL2.0 units=Units                                ; default OK, can refer to multiple containers separated by ';' [Case management] TemplateContainers= ; should be Rekenschemas in NLL2.0, can refer to multiple containers separated by ';'. Used By GeoDmsGui.exe in TfrmNewCase CaseContainer=Cases ; default OK [Directories] orgconfig=@ projdir=.. dataDir=%sourceDataProjDir%/data CalcCacheDir=%localDataProjDir%/CalcCache LocalDataProjDir=%LocalDataDir%/%projName% SourceDataProjDir=%SourceDataDir%/%projName% [Colors] NoData=8421504       ; $808080 = clGrey, NoDataColor is Obsolete` Background=16777215  ; $FFFFFF = clWhiteValid=16711680 ; $FF0000 = clBue` Invalidated=16711935 ; $FF00FF = clPurpleFailed=255 ; $0000FF = clRed` Exogenic=65280       ; $00FF00 = clGreenOperator=0 ; $000000 = clBlack` RampStart=16711680   ; $FF0000 = clBlueRampEnd=255 ; $0000FF = clRed` [CalcCache] SwapfileMinSize=4000 ; See CalcCache management [messages] Hide0=0              ; Indicator that the user requested suppression of Optional Info on Disclaimer Hide1=0              ; Indicator that the user requested suppression of a SourceDescr explanation Hide2=0              ; Indicator that the user requested suppression of the CopyRight notification . The following settings that are now stored in the user specific HKEY_CURRENT_USER/Software/ObjectVision/Dms: . [HKEY_CURRENT_USER/Software/ObjectVision/Dms] DmsEditor     = C:\\Program Files\\Crimson Editor\\cedt.exe /L:%L \"%F\" ErrBoxHeight  = 508 ErrBoxWidth   = 300 GeneralUrl    = https://www.geodms.nl HelpFileUrl   = https://www.geodms.nl LastConfigFile= LocalDataDir  = C:\\LocalData SourceDataDir = C:\\SourceData StatusFlags   = 134 ; default= SF_SuspendForGUI + SF_ShowStateColors + SF_ToolBarVisible ) StatusFlags can be any combination of the following enumeration values: const  SF_AdminMode       =   1;  SF_SuspendForGUI   =   2;  SF_ShowStateColors =   4;  SF_TraceLogFile    =   8;  SF_TreeViewVisible =  16;  SF_DetailsVisible  =  32;  SF_EventLogVisible =  64;  SF_ToolBarVisible  = 128; . Furthermore, a list of recently opened configurations is maintained in HKEY_CURRENT_USER/Software/ObjectVision/Dms/RecentFiles. ",
    "url": "/docs/config.ini.html",
    
    "relUrl": "/docs/config.ini.html"
  },"569": {
    "doc": "configuration-basics",
    "title": "getting acquainted",
    "content": "The GeoDMS configures how to calculate and visualise projects results in (a set of) configuration file(s). An example is shown here: . container ExampleProject { container Units {        unit&lt;float32&gt; m  := BaseUnit('m', float32),  cdf  = \"Classifications/M3K/Classes\";        unit&lt;float32&gt; m2 := m * m;    }    #include &lt;Classifications.dms&gt;    container SourceData: Using = \"Units\"    {        // BAG is the registration of buildings and addresses in the Netherlands        container BAG        {            unit&lt;uint32&gt; vbo: StorageName = \"%SourceDataDir/BagSnapshot/20190101/vbo.fss\"            {                attribute&lt;string&gt;   identificatie;                attribute&lt;units/m2&gt; oppervlakte;            }        }    } } . ",
    "url": "/docs/configuration-basics.html#getting-acquainted",
    
    "relUrl": "/docs/configuration-basics.html#getting-acquainted"
  },"570": {
    "doc": "configuration-basics",
    "title": "hierarchical structure",
    "content": "Each GeoDMS configuration has a hierarchical structure, used to tree-item-name items (called tree-item in a context, also known as namespace). Curly bracket characters { and } introduce new levels, all elements within these brackets are subitem of a higher level item (parent-item). The use of tabs to indicate the levels is not obligatory but strongly advised. The convention is to position the brackets at the same level as the parent item, subitems are positioned one tab position to the right. ",
    "url": "/docs/configuration-basics.html#hierarchical-structure",
    
    "relUrl": "/docs/configuration-basics.html#hierarchical-structure"
  },"571": {
    "doc": "configuration-basics",
    "title": "keywords",
    "content": "In configurations we can find keywords: . | container | unit | attribute | parameter | template | include | using | . Each item is configured with one of the first four keywords, a name and optionally one or more property. The definition of an item is ended by a semicolon, unless the item has subitems. ",
    "url": "/docs/configuration-basics.html#keywords",
    
    "relUrl": "/docs/configuration-basics.html#keywords"
  },"572": {
    "doc": "configuration-basics",
    "title": "comments",
    "content": "Two forward slashes(//) in a row indicates that the following text is interpreted as comments (like the line : BAG is the registration of buildings and addresses in the Netherlands in the example). To comment blocks with multiple lines, use /* to start and */ to finish a comment block. ",
    "url": "/docs/configuration-basics.html#comments",
    
    "relUrl": "/docs/configuration-basics.html#comments"
  },"573": {
    "doc": "configuration-basics",
    "title": "configuration-basics",
    "content": " ",
    "url": "/docs/configuration-basics.html",
    
    "relUrl": "/docs/configuration-basics.html"
  },"574": {
    "doc": "configuration-examples",
    "title": "small configuration blocks",
    "content": "This section presents small configuration blocks to perform specific tasks, e.g. reading data from an ascii file or making a crosstab. Tables . | [domain-unit-example](domain-unit-example) | [aggregation-example](aggregation-example) | [crosstab](crosstab) | . | [transpose](transpose) | [unique-values](unique-values) | [convert-od-long-to-wide-format](convert-od-long-to-wide-format) | . Relational . | [relational-attribute-example](relational-attribute-example) | [relational-model-versus-semantic-arrays](relational-model-versus-semantic-arrays) | . Geographic . | [how-to-configure-a-coordinate-system](how-to-configure-a-coordinate-system) | [dissolve-(merge-geometries)](dissolve-(merge-geometries)) | [spatial-overlap](spatial-overlap) | . | [simplify-geometry](simplify-geometry) | [cut-out-polygon-from-other-polygon](cut-out-polygon-from-other-polygon) | [polygon-to-grid](polygon-to-grid) | . | [distances-in-latlong-coordinate-system](distances-in-latlong-coordinate-system) | [cbs-gemeente-wijk-buurt-kaart](cbs-gemeente-wijk-buurt-kaart) | [wmts-background-layer](wmts-background-layer) | . | [spatial-join](spatial-join) | . Grids . | [geographic-grid-domain](geographic-grid-domain) | [potential-with-kernel](potential-with-kernel) | [point-2-grid](point-2-grid) | . | [grid-2-point](grid-2-point) | [explicit-tiling](explicit-tiling) | [rotate-scale-shear-a-grid](rotate-scale-shear-a-grid) | [grid-2-polygon-example](grid-2-polygon-example) | . &lt;/table&gt; ### Data sources | [tablechopper-(read-ascii-file)](tablechopper-(read-ascii-file)) | [tablecomposer-(write-ascii-file)](tablecomposer-(write-ascii-file)) | . ### Network | [dijkstra-examples](dijkstra-examples) | . ### Other | [special-characters](special-characters) | [indirect-expression-file-foldername](indirect-expression-file-foldername) | [discrete-allocation-example](discrete-allocation-example) | . | [bag-relate-attributes-and-make-grids-example](bag-relate-attributes-and-make-grids-example) | [date-to-unix-timestamp](date-to-unix-timestamp) | . ## full configuration examples This section contains small downloadable projects, often combining multiple [operators-and-functions](operators-and-functions). The projects contains both configuration and data, they are ready to run with the GeoDMS. [how-to-configure-a-coordinate-system](how-to-configure-a-coordinate-system), corresponding [grid](grid), predefined [metric](metric) [unit](unit) etc. are already configured. The projects can be edited, so they can also be a starting point for your own project. | [grid-processing-example](grid-processing-example) | [polygon-processing-example](polygon-processing-example) | [vector-to-grid-processing-example](vector-to-grid-processing-example) | . | [buffer-processing-example](buffer-processing-example) | [networks-processing-example](networks-processing-example) | [bag-relate-attributes-and-make-grids-example](bag-relate-attributes-and-make-grids-example) | . | [overlay-versus-combine-data](overlay-versus-combine-data) | . ## other configurations - [urban-attractivity-index](urban-attractivity-index) . ",
    "url": "/docs/configuration-examples.html#small-configuration-blocks",
    
    "relUrl": "/docs/configuration-examples.html#small-configuration-blocks"
  },"575": {
    "doc": "configuration-examples",
    "title": "configuration-examples",
    "content": " ",
    "url": "/docs/configuration-examples.html",
    
    "relUrl": "/docs/configuration-examples.html"
  },"576": {
    "doc": "configuration-file-editor",
    "title": "Notepad ++",
    "content": "The Notepad ++ editor can be downloaded from: https://notepad-plus-plus.org. The language definition file can be found in the same folder as the installed GeoDMS software (%programfiles%/ObjectVision/GeoDmsVersion). In Notepad ++ activate the menu option language &gt; user defined language &gt; define your language and in this dialog the import button to import this language definition file: GeoDMS_npp_def.xml. For working with this editor, the geodms-gui setting for Tools &gt; Options &gt; Advanced &gt; DMS Editor should be: . \"C:\\Program Files\\Notepad++\\Notepad++.exe\" \"%F\" -n%L . (default setting after installing the GeoDMS). If you installed Notepad ++ in a different folder as Notepad suggested, adjust the reference to the folder. If your command line parameters do not work, see the issue notepad—command-line-parameters-not-working. ",
    "url": "/docs/configuration-file-editor.html#notepad-",
    
    "relUrl": "/docs/configuration-file-editor.html#notepad-"
  },"577": {
    "doc": "configuration-file-editor",
    "title": "Crimson Editor",
    "content": "For Crimson Editor (if you still want to use it, use version 3.70.), language definition files can de downloaded here: CE_syntax_files . Copy the contents of the zip file in the indicated folders in the Crimson Editor program files folder. In the geodms-gui the setting for Tools &gt; Options &gt; Advanced &gt; DMS Editor should be: . \"%ProgramFiles32%\\Crimson Editor\\cedt.exe\" /L:%L \"%F\" . If you installed Crimson Editor in a different folder as the folder Crimson Editor suggested, adjust the reference to the folder. If your folder contains spaces please use the quoted full path as in the NotePad++ example. ",
    "url": "/docs/configuration-file-editor.html#crimson-editor",
    
    "relUrl": "/docs/configuration-file-editor.html#crimson-editor"
  },"578": {
    "doc": "configuration-file-editor",
    "title": "configuration-file-editor",
    "content": "GeoDMS configuration-file can be viewed or editted with an ASCII editor. We advice to use an editor supporting parameters for opening a file and positioning a cursor. This makes editing easy, the menu option: edit configuration source in the geodms-gui can immediately show the relevant part of the code (if the setting in the Tools &gt; Options is correctly configured). We have experience and made language definition files available (highlighting the GeoDMS grammar in different colors) for two editors. As the development of Crimson Editor is stopped, we advice to use Notepad ++. ",
    "url": "/docs/configuration-file-editor.html",
    
    "relUrl": "/docs/configuration-file-editor.html"
  },"579": {
    "doc": "configuration-file",
    "title": "contents",
    "content": "In a configuration file can be configured: . | which unit are in use | which classification are in use | which source data is read | which calculations are made | how data is visualised with visualisation-style | how data is exported with export settings | . ",
    "url": "/docs/configuration-file.html#contents",
    
    "relUrl": "/docs/configuration-file.html#contents"
  },"580": {
    "doc": "configuration-file",
    "title": "primary data",
    "content": "Configuration files can also contain (small parts) of primary data. small data items . For small data items like case parameter or class boundaries/labels in classifications it is common to store these values in configuration files, see example: . &lt;uint32&gt; ClassUnit : nrofrows = 4  { attribute&lt;meter&gt;  ClassBreaks : DialogType = \"Classification\", [0,200,400,800]; attribute&lt;string&gt; Label    : DialogType = \"LabelText\",      ['0 - 200','200 - 400','400 - 800','&gt; 800']; } . Since version 7.199, is it also possible to configure data in such a way for domains with 0 entries, see empty-domain . Primary data for data-item is configured between square brackets [], comma separated. String values need to be single quoted. Configure a value for each entry of the domain unit. two dimensional data items . To configure two dimensional data items (coodinates), use the following syntax . unit&lt;uint32&gt; PointSet : nrofrows = 4  { attribute&lt;fpoint&gt; geometry :  [ {0,0},{1,1},{2,2},{3,3} ]; } . tabular data . Configuring attribute values as in the earlier example is not so user-friendly for tabular data with multiple attributes. With the following configuration example, primary data can be stored in a configuration file and be edited as a table: . unit&lt;uint32&gt; supermarket: NrOfRows = 3 {     parameter&lt;uint32&gt; nrAttr := 5;     unit&lt;uint32&gt; elem := range(uint32, 0, nrAttr *#supermarkt) // domain of all cells in a table`     {         attribute&lt;string&gt; values: [         // 'name'      ,'street'           ,'housenr' ,'zipcode'  ,'place'            'Plusmarkt' ,'Amerikaplein'     , '2'      ,'6269DA'   ,'Margraten',           ,'Lidl'      ,'Wilhelminastraat' ,'63'      ,'6245AV'   ,'Eijsden',           ,'Spar'      ,'Dalestraat'       ,'23'      ,'6262NP'   ,'Banholt'         ];     }     attribute&lt;.&gt; id := id(.);     attribute&lt;string&gt; name    := elem/values[value(id * nrAttr + 0, elem)];     attribute&lt;string&gt; street  := elem/values[value(id * nrAttr + 1, elem)];     attribute&lt;uint32&gt; housenr := uint32(elem/values[value(id * nrAttr + 2, elem)]);     attribute&lt;string&gt; zipcode := elem/values[value(id * nrAttr + 3, elem)];     attribute&lt;string&gt; place   := elem/values[value(id * nrAttr + 4, elem)];    } } . In this example the primary data is configured for the supermarket/elem/values data item. The values are presented and can be edited as a table. All data values are configured as string values. The trick here is that the data is not configured per attribute but for a new domain unit: elem, which is the domain unit of all cells in a table. This elem domain can be formatted in a tabular way (see example). Later on the correct values per attribute are selected from the elem domain with lookup functions. conversion-functions functions are used to convert the original string values to their requested value-type. ",
    "url": "/docs/configuration-file.html#primary-data",
    
    "relUrl": "/docs/configuration-file.html#primary-data"
  },"581": {
    "doc": "configuration-file",
    "title": "configuration-file",
    "content": "A configuration file is an ASCII file, used in the GeoDMS to store logical parts of the modelling logic. A configuration file in the GeoDMS always has one and only one parent-item. Configuration file can include other configuration files by using the include statement. Configuration files can be viewed or edited with a configuration-file-editor. Configuration files always use the extension: .dms . ",
    "url": "/docs/configuration-file.html",
    
    "relUrl": "/docs/configuration-file.html"
  },"582": {
    "doc": "connect",
    "title": "syntax",
    "content": ". | connect(point_dataitem_dest, point_dataitem_org) | connect(arc_polygon_dataitem, point_dataitem, [optional]maxSqrDist) | . ",
    "url": "/docs/connect.html#syntax",
    
    "relUrl": "/docs/connect.html#syntax"
  },"583": {
    "doc": "connect",
    "title": "definition",
    "content": "The connect function connects nearby geometries. It has two variants: . | Both argument are single point data-item (syntax 1). This variant is used to find the nearest point_dataitem_dest for each point_dataitem_org. The function results in a relation for the domain-unit of point_dataitem_org towards the domain unit of point_geom_dest. | The first argument is an arc or polygon, the second argument is a point data item (syntax 2). The points of point_dataitem are connected to the nearest arc/polygon outline of the arc_polygon_dataitem. Cut points are added as (intermediate) points to the arc_polygon_dataitem The functions results in a new domain unit with: . | a geometry subitem (previously named UnionData) containing a new geometry, combining the original geometry of the arc_polygon_dataitem and the new connections to the point_dataitem. | an arc_rel subitem (previously named Nr_OrgEntity) with a relation to the domain of the arc_polygon_dataitem (null for the new connections). | . | . Additionally, an optional maxSqrDist can be specified, with the squares of the maximum distance that each point of the 2nd argument is allowed to look around. The figure illustrates this second variant. The dark green houses represent the point_dataitem, the light green lines the arc_polygon_dataitem. The resulting UnionData subitem of the connect function is presented with the blue lines. ",
    "url": "/docs/connect.html#definition",
    
    "relUrl": "/docs/connect.html#definition"
  },"584": {
    "doc": "connect",
    "title": "description",
    "content": "The second variant is often used to build a network typology. If the distance in the precision of the value-type to the nearest point/arc/polygon is similar for multiple features, points are connected to the point/arc/polygon with the lowest index-numbers. In both variants, the first argument should contain unique geometry. Use the unique function to make a domain unit with unique geometries. The connect_info function is used in the second variant to present information on the extra connections, e.g. the distance of each connection and the coordinates of the CutPoint on the connected arc/polygon. ",
    "url": "/docs/connect.html#description",
    
    "relUrl": "/docs/connect.html#description"
  },"585": {
    "doc": "connect",
    "title": "applies to",
    "content": ". | data items point_dataitem_org, point_dataitem_dest, arc_polygon_dataitem and point_dataitem with fpoint or dpoint value type | data item arc_polygon_dataitem with composition type arc or polygon. Be aware, if you connect points to polygons, always use a split_polygon first of the polygon geometry to get rid of the connection lines in polygons between islands and lakes. | . ",
    "url": "/docs/connect.html#applies-to",
    
    "relUrl": "/docs/connect.html#applies-to"
  },"586": {
    "doc": "connect",
    "title": "conditions",
    "content": "The value type of all arguments must match. ",
    "url": "/docs/connect.html#conditions",
    
    "relUrl": "/docs/connect.html#conditions"
  },"587": {
    "doc": "connect",
    "title": "example",
    "content": "variant 1: . attribute&lt;destination&gt; destination_rel  (origin) := connect(destination/geometry, origin/geometry); . | origin/geometry | destination_rel | . | {401331, 115135} | 0 | . | {399476, 111803} | 1 | . | {399289, 114903} | 2 | . | {401729, 111353} | 3 | . | {398696, 111741} | 1 | . domain origin, nr of rows = 5 . | destination/geometry | . | {401331, 115131} | . | {399138, 112601} | . | {398600, 114903} | . | {401729, 112156} | . domain destination, nr of rows = 4 . variant 2: . unit&lt;uint32&gt; location2road := connect(road/geometry, location/geometry); . | road/geometry | . | {2 {399246, 112631}{398599, 111866}} | . | {3 {398599, 111866}{399495, 111924} {401801, 111524}} | . | {2 {401529, 114921}{398584, 114823}} | . domain road, nr of rows = 3 . | location/geometry | . | {398600, 114903} | . | {398696, 111741} | . | {399138, 112601} | . | {399289, 114903} | . | {399476, 111803} | . | {401331, 115135} | . | {401729, 111353} | . | {401729, 112156} | . domain location, nr of rows = 8 . | Location2Road/UnionData | . | {2: {399246, 112631} {399186, 112560}} | . | {2: {398599, 111866} {398688, 111872}} | . | {2: {401529, 114921} {401338, 114915}} | . | {2: {398600, 114903} {398603, 114824}} | . | {2: {398696, 111741} {398688, 111872}} | . | {2: {399138, 112601} {399186, 112560}} | . | {2: {399289, 114903} {399291, 114847}} | . | {2: {399476, 111803} {399468, 111922}} | . | {2: {401331, 115135} {401338, 114915}} | . | {2: {401729, 111353} {401760, 111531}} | . | {2: {401729, 112156} {401625, 111555}} | . | {2: {398603, 114824} {398584, 114823}} | . | {2: {398688, 111872} {399468, 111922}} | . | {2: {399186, 112560} {398599, 111866}} | . | {2: {399291, 114847} {398603, 114824}} | . | {3: {399468, 111922} {399495, 111924} {401625, 111555}} | . | {2: {401338, 114915} {399291, 114847}} | . | {2: {401760, 111531} {401801, 111524}} | . | {2: {401625, 111555} {401760, 111531}} | . domain location2road, nr of rows = 19 . ",
    "url": "/docs/connect.html#example",
    
    "relUrl": "/docs/connect.html#example"
  },"588": {
    "doc": "connect",
    "title": "see also",
    "content": ". | connect_eq | connect_ne | connect_neighbour | connect_info | capacitated_connect | . ",
    "url": "/docs/connect.html#see-also",
    
    "relUrl": "/docs/connect.html#see-also"
  },"589": {
    "doc": "connect",
    "title": "connect",
    "content": "network-functions connect . ",
    "url": "/docs/connect.html",
    
    "relUrl": "/docs/connect.html"
  },"590": {
    "doc": "connect_eq",
    "title": "syntax",
    "content": ". | connect_eq(arc_polygon_dataitem, arc_polygon_match_dataitem, point_dataitem, point_match_dataitem) | . ",
    "url": "/docs/connect_eq.html#syntax",
    
    "relUrl": "/docs/connect_eq.html#syntax"
  },"591": {
    "doc": "connect_eq",
    "title": "definition",
    "content": "The connect_eq functions works in a similar way as the second variant of the connect function, with the extra condition that the values of the arc_polygon_match_dataitem need to match with the values of the point_match_dataitem. The figure shows an example of how this connect_eq function can be used. With the connect function the blue star location would be connected to the BRoad. But assume the actual address of the star location is AStreet. The connect_eq can be used to connect the blue star to the ARoad according to the blue dashed line. ",
    "url": "/docs/connect_eq.html#definition",
    
    "relUrl": "/docs/connect_eq.html#definition"
  },"592": {
    "doc": "connect_eq",
    "title": "description",
    "content": "The value-type of matching argument: arc_polygon_match_dataitem and point_match_dataitem need to be uint32. This means street names (as in the example) first need to be converted to street index-numbers, see the example. Points with null values for the point_match_dataitem will always be connected to the nearest road (even if the road has a null value in the arc_polygon_match_dataitem). To arcs/polygons with null values for the arc_polygon_match_dataitem, no points will be connected (except for points that are nearest to these roads and have a null value as point_match_dataitem). ",
    "url": "/docs/connect_eq.html#description",
    
    "relUrl": "/docs/connect_eq.html#description"
  },"593": {
    "doc": "connect_eq",
    "title": "applies to",
    "content": ". | data-item arc_polygon_dataitem with composition type arc or polygon. Be aware, if you connect points to polygons, always use a split_polygon first of the polygon geometry to get rid of the connection lines in polygons between islands and lakes. | data item point_dataitem with fpoint or dpoint value-type | data items arc_polygon_match_dataitem and point_match_dataitem with uint32 value-type. | . ",
    "url": "/docs/connect_eq.html#applies-to",
    
    "relUrl": "/docs/connect_eq.html#applies-to"
  },"594": {
    "doc": "connect_eq",
    "title": "conditions",
    "content": ". | The value type of the arc_polygon_dataitem and point_dataitem argument must match. | The arc_polygon_dataitem and arc_polygon_match_dataitem arguments need to have the same domain-unit. | The point_dataitem and point_match_dataitem arguments need to have the same domain unit. | . ",
    "url": "/docs/connect_eq.html#conditions",
    
    "relUrl": "/docs/connect_eq.html#conditions"
  },"595": {
    "doc": "connect_eq",
    "title": "since version",
    "content": "7.131 . ",
    "url": "/docs/connect_eq.html#since-version",
    
    "relUrl": "/docs/connect_eq.html#since-version"
  },"596": {
    "doc": "connect_eq",
    "title": "example",
    "content": "unit&lt;uint32&gt; location : nrofrows = 5 {    attribute&lt;point_rd&gt; point      := src/location/point;    attribute&lt;string&gt;   streetname : ['Astreet','CRoad','BStreet','DSquare','BStreet'];    attribute&lt;street&gt;   street_rel := rlookup(streetname, street/values); } unit&lt;uint32&gt; road : nrofrows = 4 {    attribute&lt;point_rd&gt; line (arc) := src/road/line;    attribute&lt;string&gt;   streetname : ['Astreet','BStreet','CRoad','DSquare'];    attribute&lt;street&gt;   street_rel := rlookup(streetname, street/values); } unit&lt;uint32&gt; street := unique(roadarcs/street); unit&lt;uint32&gt; connect_eq := connect_eq(road/line, road/street_rel, location/point, location/street_rel); . ",
    "url": "/docs/connect_eq.html#example",
    
    "relUrl": "/docs/connect_eq.html#example"
  },"597": {
    "doc": "connect_eq",
    "title": "see also",
    "content": ". | connect | connect_ne | connect_info | . ",
    "url": "/docs/connect_eq.html#see-also",
    
    "relUrl": "/docs/connect_eq.html#see-also"
  },"598": {
    "doc": "connect_eq",
    "title": "connect_eq",
    "content": "network-functions connect_eq . ",
    "url": "/docs/connect_eq.html",
    
    "relUrl": "/docs/connect_eq.html"
  },"599": {
    "doc": "connect_info",
    "title": "syntax",
    "content": ". | connect_info(arcs, points, [optional] maxSqrDist) | dist_info(arcs, points, [optional] maxSqrDist) | . ",
    "url": "/docs/connect_info.html#syntax",
    
    "relUrl": "/docs/connect_info.html#syntax"
  },"600": {
    "doc": "connect_info",
    "title": "definition",
    "content": "The connect_info(arcs, points) function is used to get information for each entry in the domain-unit of attribute points on how the connect function (second variant) results in a connection to the attribute arcs. The connect_info has the same argument as the connect function. The connect_info results in a container with a set of attributes for the same domain unit as the points. The result contains the following attributes: . | dist: the distance between the point from the points and the CutPoint on the arc/polygon outline from the arcs; | ArcID: the relation for each entry of the domain unit of the points to the connected arc of the arcs domain unit; | CutPoint: The coordinate of the connection point on the arcs; | InArc: true if the CutPoint is not the first or last point | InSegm, true if the CutPoint is not an (intermediate or final) point of the sequence of points. | SegmID, id of the segment in the arc to which the point is connected. | . ",
    "url": "/docs/connect_info.html#definition",
    
    "relUrl": "/docs/connect_info.html#definition"
  },"601": {
    "doc": "connect_info",
    "title": "description",
    "content": "The arcs should contain unique geometries. Use the unique function to make a domain unit with unique geometries. ",
    "url": "/docs/connect_info.html#description",
    
    "relUrl": "/docs/connect_info.html#description"
  },"602": {
    "doc": "connect_info",
    "title": "applies to",
    "content": ". | data-item arcs and points with fpoint or dpoint value-type | data item arcs with composition arc or polygon. Be ware, if you connect points to polygons, use a split_polygon to avoid connecting to segments that separate different rings (lakes or islands) in a polygon. | . ",
    "url": "/docs/connect_info.html#applies-to",
    
    "relUrl": "/docs/connect_info.html#applies-to"
  },"603": {
    "doc": "connect_info",
    "title": "conditions",
    "content": "The values type of arcs and points must match. ",
    "url": "/docs/connect_info.html#conditions",
    
    "relUrl": "/docs/connect_info.html#conditions"
  },"604": {
    "doc": "connect_info",
    "title": "example",
    "content": "container location2road := connect_info(road/geometry, location/geometry); . | road/geometry | . | {2 {399246, 112631}{398599, 111866}} | . | {3 {398599, 111866}{399495, 111924} {401801, 111524}} | . | {2 {401529, 114921}{398584, 114823}} | . domain road, nr of rows = 3 . | location/geometry | . | {398600, 114903} | . | {398696, 111741} | . | {399138, 112601} | . | {399289, 114903} | . | {399476, 111803} | . | {401331, 115135} | . | {401729, 111353} | . | {401729, 112156} | . domain location, nr of rows = 8 . | dist | ArcID | CutPoint | InArc | InSegm | SegmID | . | 79.42 | 2 | {398603, 114824} | True | True | 0 | . | 131.00 | 1 | {398688, 111872} | True | True | 0 | . | 63.09 | 0 | {399186, 112560} | True | True | 0 | . | 56.51 | 2 | {399291, 114847} | True | True | 0 | . | 119.52 | 1 | {399468, 111922} | True | True | 0 | . | 220.47 | 2 | {401338, 114915} | True | True | 0 | . | 180.79 | 1 | {401760, 111531} | True | True | 1 | . | 610.40 | 1 | {401625, 111555} | True | True | 1 | . domain location, nr of rows = 8 . ",
    "url": "/docs/connect_info.html#example",
    
    "relUrl": "/docs/connect_info.html#example"
  },"605": {
    "doc": "connect_info",
    "title": "see also",
    "content": ". | connect | connect_info_eq | connect_info_ne | . ",
    "url": "/docs/connect_info.html#see-also",
    
    "relUrl": "/docs/connect_info.html#see-also"
  },"606": {
    "doc": "connect_info",
    "title": "connect_info",
    "content": "network-functions connect_info . ",
    "url": "/docs/connect_info.html",
    
    "relUrl": "/docs/connect_info.html"
  },"607": {
    "doc": "connect_info_eq",
    "title": "syntax",
    "content": ". | connect_info_eq(arc_polygon_dataitem, arc_polygon_match_dataitem, point_dataitem, point_match_dataitem) | . ",
    "url": "/docs/connect_info_eq.html#syntax",
    
    "relUrl": "/docs/connect_info_eq.html#syntax"
  },"608": {
    "doc": "connect_info_eq",
    "title": "definition",
    "content": "The connect_info_eq works in a similar way and results in the same attribute as the connect_info function, only based on connections with the connect_eq in stead of the connect function. The connect_info_eq has the same arguments as the connect_eq function. ",
    "url": "/docs/connect_info_eq.html#definition",
    
    "relUrl": "/docs/connect_info_eq.html#definition"
  },"609": {
    "doc": "connect_info_eq",
    "title": "see also",
    "content": ". | connect_eq | connect_info | connect_info_ne | . ",
    "url": "/docs/connect_info_eq.html#see-also",
    
    "relUrl": "/docs/connect_info_eq.html#see-also"
  },"610": {
    "doc": "connect_info_eq",
    "title": "connect_info_eq",
    "content": "network-functions connect_info_eq . ",
    "url": "/docs/connect_info_eq.html",
    
    "relUrl": "/docs/connect_info_eq.html"
  },"611": {
    "doc": "connect_info_ne",
    "title": "syntax",
    "content": ". | connect_info_ne(arc_polygon_dataitem, arc_polygon_match_dataitem, point_dataitem, point_match_dataitem) | . ",
    "url": "/docs/connect_info_ne.html#syntax",
    
    "relUrl": "/docs/connect_info_ne.html#syntax"
  },"612": {
    "doc": "connect_info_ne",
    "title": "definition",
    "content": "The connect_info_ne works in a similar way and results in the same attribute as the connect_info function, only based on connections with the connect_ne in stead of the connect function. The connect_info_ne has the same arguments as the connect_ne function. ",
    "url": "/docs/connect_info_ne.html#definition",
    
    "relUrl": "/docs/connect_info_ne.html#definition"
  },"613": {
    "doc": "connect_info_ne",
    "title": "see also",
    "content": ". | connect_ne | connect_info | connect_info_eq | . ",
    "url": "/docs/connect_info_ne.html#see-also",
    
    "relUrl": "/docs/connect_info_ne.html#see-also"
  },"614": {
    "doc": "connect_info_ne",
    "title": "connect_info_ne",
    "content": "network-functions connect_info_ne . ",
    "url": "/docs/connect_info_ne.html",
    
    "relUrl": "/docs/connect_info_ne.html"
  },"615": {
    "doc": "connect_ne",
    "title": "syntax",
    "content": ". | connect_ne(arc_polygon_dataitem, arc_polygon_match_dataitem, point_dataitem, point_match_dataitem) | . ",
    "url": "/docs/connect_ne.html#syntax",
    
    "relUrl": "/docs/connect_ne.html#syntax"
  },"616": {
    "doc": "connect_ne",
    "title": "definition",
    "content": "The connect_ne functions works in a similar way as the second variant of the connect function, with the extra condition that the values of the arc_polygon_match_dataitem may not match with the values of the point_match_dataitem. The figure shows an example of how this connect_ne function can be used. With the connect function the blue star location would be connected to the orange road. Assume this orange road is a highway, then a connection should not be made to this road. The connect_ne can be used to connect the blue star to the nearest road not being a highway. ",
    "url": "/docs/connect_ne.html#definition",
    
    "relUrl": "/docs/connect_ne.html#definition"
  },"617": {
    "doc": "connect_ne",
    "title": "description",
    "content": "The value-type of matching argument: arc_polygon_match_dataitem and point_match_dataitem need to be uint32. This means street names (as in the example) first need to be converted to street index-numbers, see the example. Points with null values for the point_match_dataitem will always be connected to the nearest road (even if the road has a null value in the arc_polygon_match_dataitem). To arcs/polygons with null values for the arc_polygon_match_dataitem, no points will be connected (except for points that are nearest to these roads and have a null value as point_match_dataitem). ",
    "url": "/docs/connect_ne.html#description",
    
    "relUrl": "/docs/connect_ne.html#description"
  },"618": {
    "doc": "connect_ne",
    "title": "applies to",
    "content": ". | data-item arc_polygon_dataitem with composition arc or polygon. Be aware, if you connect points to polygons, always use a split_polygon first of the polygon geometry to get rid of the connection lines in polygons between islands and lakes. | data item point_dataitem with fpoint or dpoint value-type | data items arc_polygon_match_dataitem and point_match_dataitem with uint32 value type. | . ",
    "url": "/docs/connect_ne.html#applies-to",
    
    "relUrl": "/docs/connect_ne.html#applies-to"
  },"619": {
    "doc": "connect_ne",
    "title": "conditions",
    "content": ". | The value type of the arc_polygon_dataitem and point_dataitem argument must match. | The arc_polygon_dataitem and arc_polygon_match_dataitem arguments need to have the same domain-unit. | The point_dataitem and point_match_dataitem arguments need to have the same domain unit. | . ",
    "url": "/docs/connect_ne.html#conditions",
    
    "relUrl": "/docs/connect_ne.html#conditions"
  },"620": {
    "doc": "connect_ne",
    "title": "since version",
    "content": "7.131 . ",
    "url": "/docs/connect_ne.html#since-version",
    
    "relUrl": "/docs/connect_ne.html#since-version"
  },"621": {
    "doc": "connect_ne",
    "title": "example",
    "content": "unit&lt;uint32&gt; location : nrofrows = 5 {    attribute&lt;point_rd&gt; point      := src/location/point;    attribute&lt;string&gt;   streetname : ['Astreet','CRoad','BStreet','DSquare','BStreet'];    attribute&lt;street&gt;   street_rel := rlookup(streetname, street/values); } unit&lt;uint32&gt; road : nrofrows = 4 {    attribute&lt;point_rd&gt; line (arc) := src/road/line;    attribute&lt;string&gt;   streetname : ['Astreet','BStreet','CRoad','DSquare'];    attribute&lt;street&gt;   street_rel := rlookup(streetname, street/values); } unit&lt;uint32&gt; street := unique(roadarcs/street); unit&lt;uint32&gt; connect_ne := connect_ne(road/line, road/street_rel, location/point, location/street_rel); . ",
    "url": "/docs/connect_ne.html#example",
    
    "relUrl": "/docs/connect_ne.html#example"
  },"622": {
    "doc": "connect_ne",
    "title": "see also",
    "content": ". | connect | connect_eq | connect_info_ne | . ",
    "url": "/docs/connect_ne.html#see-also",
    
    "relUrl": "/docs/connect_ne.html#see-also"
  },"623": {
    "doc": "connect_ne",
    "title": "connect_ne",
    "content": "network-functions connect_ne . ",
    "url": "/docs/connect_ne.html",
    
    "relUrl": "/docs/connect_ne.html"
  },"624": {
    "doc": "connect_neighbour",
    "title": "syntax",
    "content": ". | connect_neighbour(point_dataitem) | connect_neighbour(point_dataitem, relation) | . ",
    "url": "/docs/connect_neighbour.html#syntax",
    
    "relUrl": "/docs/connect_neighbour.html#syntax"
  },"625": {
    "doc": "connect_neighbour",
    "title": "definition",
    "content": "The connect_neighbour(point_dataitem) results in relation for and towards the domain-unit of the point_dataitem, referring to the nearest point in the point_dataitem not being the point itself. The connect_neighbour function(point_geom, partioning) results in relation for and towards the domain unit of the point_dataitem, referring to the nearest point in the point_dataitem not being the point itself and being a point within the relation. ",
    "url": "/docs/connect_neighbour.html#definition",
    
    "relUrl": "/docs/connect_neighbour.html#definition"
  },"626": {
    "doc": "connect_neighbour",
    "title": "description",
    "content": "The connect_neighbour is a special variant of the first variant of the connect function. The connect(point_dataitem, point_dataitem) function results in a relation to the nearest point, usually the same point. The connect_neighbour function results in the relation to the nearest point, not being the same point. ",
    "url": "/docs/connect_neighbour.html#description",
    
    "relUrl": "/docs/connect_neighbour.html#description"
  },"627": {
    "doc": "connect_neighbour",
    "title": "applies to",
    "content": ". | data-item point_dataitem with Point value-type. | . ",
    "url": "/docs/connect_neighbour.html#applies-to",
    
    "relUrl": "/docs/connect_neighbour.html#applies-to"
  },"628": {
    "doc": "connect_neighbour",
    "title": "conditions",
    "content": "The domain-unit of argument point_dataitem and relation must match. ",
    "url": "/docs/connect_neighbour.html#conditions",
    
    "relUrl": "/docs/connect_neighbour.html#conditions"
  },"629": {
    "doc": "connect_neighbour",
    "title": "since version",
    "content": "7.047 . ",
    "url": "/docs/connect_neighbour.html#since-version",
    
    "relUrl": "/docs/connect_neighbour.html#since-version"
  },"630": {
    "doc": "connect_neighbour",
    "title": "example",
    "content": "attribute&lt;origin&gt; origin_rel (origin) := connect_neighbour(origin/geometry); . | origin/geometry | origin_rel | . | {401331, 115135} | 2 | . | {399476, 111803} | 4 | . | {399289, 114903} | 0 | . | {401729, 111353} | 1 | . | {398696, 111741} | 1 | . domain origin, nr of rows = 5 . ",
    "url": "/docs/connect_neighbour.html#example",
    
    "relUrl": "/docs/connect_neighbour.html#example"
  },"631": {
    "doc": "connect_neighbour",
    "title": "see also",
    "content": ". | connect | . ",
    "url": "/docs/connect_neighbour.html#see-also",
    
    "relUrl": "/docs/connect_neighbour.html#see-also"
  },"632": {
    "doc": "connect_neighbour",
    "title": "connect_neighbour",
    "content": "network-functions connect_neighbour . ",
    "url": "/docs/connect_neighbour.html",
    
    "relUrl": "/docs/connect_neighbour.html"
  },"633": {
    "doc": "connected_parts",
    "title": "syntax",
    "content": ". | connected_parts(F1, F2) | . ",
    "url": "/docs/connected_parts.html#syntax",
    
    "relUrl": "/docs/connected_parts.html#syntax"
  },"634": {
    "doc": "connected_parts",
    "title": "definition",
    "content": "The connected_parts function is used to find out how many connected (sub)networks exist in a set of links . connected_parts(F1, F2) results in a new domain-unit with a as subitem the attribute: Partnr. The arguments F1 and F2 are the relation towards the the first and last node of a link set. The Partnr item contains the relation towards the connected network(s). Each value indicates a group of connected nodes. If all Partnr values are zero, the network is fully connected. ",
    "url": "/docs/connected_parts.html#definition",
    
    "relUrl": "/docs/connected_parts.html#definition"
  },"635": {
    "doc": "connected_parts",
    "title": "applies to",
    "content": "data-item F1 and F2 with uint32 value-type . ",
    "url": "/docs/connected_parts.html#applies-to",
    
    "relUrl": "/docs/connected_parts.html#applies-to"
  },"636": {
    "doc": "connected_parts",
    "title": "conditions",
    "content": "The domain units of argument F1 and F2 must match. ",
    "url": "/docs/connected_parts.html#conditions",
    
    "relUrl": "/docs/connected_parts.html#conditions"
  },"637": {
    "doc": "connected_parts",
    "title": "example",
    "content": "unit&lt;uint32&gt; connected_parts := connected_parts(F1, F2); . | F1 | F2 | . | 8 | 7 | . | 1 | 4 | . | 16 | 15 | . | 2 | 3 | . | 5 | 4 | . | 6 | 7 | . | 9 | 10 | . | 12 | 11 | . | 14 | 15 | . | 18 | 20 | . | 19 | 17 | . | 3 | 0 | . | 4 | 11 | . | 7 | 1 | . | 10 | 3 | . | 11 | 13 | . | 13 | 17 | . | 15 | 10 | . | 20 | 21 | . | 17 | 20 | . domain linkset, nr of rows = 19 . | PartNr | . | 0 | . | 1 | . | 0 | . | 0 | . | 1 | . | 1 | . | 1 | . | 1 | . | 1 | . | 0 | . | 0 | . | 1 | . | 1 | . | 1 | . | 0 | . | 0 | . | 0 | . | 1 | . | 1 | . | 1 | . | 1 | . | 1 | . domain nodeSet, nr of rows = 21 . ",
    "url": "/docs/connected_parts.html#example",
    
    "relUrl": "/docs/connected_parts.html#example"
  },"638": {
    "doc": "connected_parts",
    "title": "connected_parts",
    "content": "network-functions connected_parts . ",
    "url": "/docs/connected_parts.html",
    
    "relUrl": "/docs/connected_parts.html"
  },"639": {
    "doc": "const",
    "title": "syntax",
    "content": ". | const(value, domain unit) | const(value, domain unit, values unit) | . ",
    "url": "/docs/const.html#syntax",
    
    "relUrl": "/docs/const.html#syntax"
  },"640": {
    "doc": "const",
    "title": "definition",
    "content": "const(value, domain unit) or const(value, domain unit, values unit) results in an attribute with the first argument value as constant value for each entry of the domain-unit second argument. The values unit can be configured with the value argument or explicitly as third argument). ",
    "url": "/docs/const.html#definition",
    
    "relUrl": "/docs/const.html#definition"
  },"641": {
    "doc": "const",
    "title": "description",
    "content": ". | const(0 , domain) is synonym for const(0,domain,unit32). | const(0f , domain) or const(float32(0),domain) is synonym for const(0,domain,float32). | const(3[m], domain) is synonym for const (3, domain, m). | . ",
    "url": "/docs/const.html#description",
    
    "relUrl": "/docs/const.html#description"
  },"642": {
    "doc": "const",
    "title": "applies to",
    "content": ". | literal value with Numeric, Point, uint2, uint4, bool or string value-type | unit domain unit with value type of group CanBedomain unit | unit values-unit with Numeric, Point, uint2, uint4, bool or string value type | . ",
    "url": "/docs/const.html#applies-to",
    
    "relUrl": "/docs/const.html#applies-to"
  },"643": {
    "doc": "const",
    "title": "conditions",
    "content": "The value type of argument value needs to match with the value type of the values unit argument. ",
    "url": "/docs/const.html#conditions",
    
    "relUrl": "/docs/const.html#conditions"
  },"644": {
    "doc": "const",
    "title": "example",
    "content": "attribute&lt;uint8&gt; Uint8Att (ADomain) := const(1b, ADomain); attribute&lt;string&gt; StringAtt (ADomain) := const('const', ADomain, string); . | Uint8Att | StringAtt | . | 1 | ‘const’ | . | 1 | ‘const’ | . | 1 | ‘const’ | . | 1 | ‘const’ | . | 1 | ‘const’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/const.html#example",
    
    "relUrl": "/docs/const.html#example"
  },"645": {
    "doc": "const",
    "title": "const",
    "content": "constant-functions const . ",
    "url": "/docs/const.html",
    
    "relUrl": "/docs/const.html"
  },"646": {
    "doc": "constant-functions",
    "title": "constant-functions",
    "content": "Constant operators-and-functions are used to define constant values like pi or true. | const - constant values for a domain unit | true | false | pi | null | . ",
    "url": "/docs/constant-functions.html",
    
    "relUrl": "/docs/constant-functions.html"
  },"647": {
    "doc": "constant-state-of-data-items",
    "title": "states",
    "content": "In the GeoDMS a data-item can have one of the following states: . | Not Calculated (not yet calculated or a supplier is not anymore valid) | MetaData updated (the metadata of a data item is ready. If the item is not red, it means the expression is ok in terms of it’s metadata) | Calculating | Valid (if the calculations finished successfully) | Failed (in case an error occurred at the meta or primary data level or an integrity check failed) | . ",
    "url": "/docs/constant-state-of-data-items.html#states",
    
    "relUrl": "/docs/constant-state-of-data-items.html#states"
  },"648": {
    "doc": "constant-state-of-data-items",
    "title": "constant-state-of-data-items",
    "content": "To make the calculation steps of a model transparent, it is important that all intermediate results can be visualized. Therefore data items have a constant state in a calculation process. Constructions often used in programming languages like A = A + 1 are therefore explicitly forbidden, as the value of variable A in such a construction is dependent on the progress in the calculation process and intermediate results can not easily be requested. In a GeoDMS configuration each new value for variable A requests a new data item. ",
    "url": "/docs/constant-state-of-data-items.html",
    
    "relUrl": "/docs/constant-state-of-data-items.html"
  },"649": {
    "doc": "container",
    "title": "instantiation",
    "content": "Containers are also used for template instantiations. To configure a container for a case-instantiation, use the keyword container, followed by it’s name and as expression the name of the template with between brackets the case-parameter (see example 2). ",
    "url": "/docs/container.html#instantiation",
    
    "relUrl": "/docs/container.html#instantiation"
  },"650": {
    "doc": "container",
    "title": "example",
    "content": "1. container SourceData 2. container Yr2050 := AllocatieLandUse('yr2050'); . The first example indicates that this branche of the tree is used to configure source data items, often read from external storages. The second example is a case instantiation. The template AllocatieLandUse is here instantiated with one case parameter: a year parameter as string. ",
    "url": "/docs/container.html#example",
    
    "relUrl": "/docs/container.html#example"
  },"651": {
    "doc": "container",
    "title": "container",
    "content": "A container is a structuring tree-item, not being a unit or data-item. A container often has a role as a folder in a directory structure (although in a GeoDMS configuration also units and data items can contain subitem). To configure a container use the keyword container, followed by it’s name (see example). Curly brackets { and } are used to configure the subitems of a container. ",
    "url": "/docs/container.html",
    
    "relUrl": "/docs/container.html"
  },"652": {
    "doc": "conversion-functions",
    "title": "conversion-functions",
    "content": "Conversion operators-and-functions are used to convert value-type, round data-item or use different notations. Examples how to convert coordinates can be found coordinate-conversions. | uint2 | uint4 | uint8 | uint16 | uint32 | uint64 | int8 | int16 | int32 | int64 | float32 | float64 | string | bool | . | spoint | wpoint | ipoint | upoint | fpoint | dpoint | spolygon | wpolygon | ipolygon | upolygon | fpolygon | dpolygon | . | round | round_64 | roundup | roundup_64 | rounddown | rounddown_64 | roundtozero | roundtozero_64 | . | value | convert | . | rgb | ashex | . ",
    "url": "/docs/conversion-functions.html",
    
    "relUrl": "/docs/conversion-functions.html"
  },"653": {
    "doc": "convert-od-long-to-wide-format",
    "title": "convert-od-long-to-wide-format",
    "content": "configuration-examples Convert OD long to wide format . If you would create a full OD with a Dijkstra algorithm, you will get the result in a long data format. This is often not convenient when exporting to other applications. The following piece of code can be helpful in converting that output into a wide date format. The following code could be inserted in the Dijkstra unit: . attribute&lt;string&gt; impedance_min := string(round(impedance / 60f));  //Convert the impedance from seconds to minutes, round it off, and store it as a string value. unit&lt;uint32&gt; Matrix_Array := org {     attribute&lt;string&gt; org_name           := org/name;     attribute&lt;string&gt; impedance_min_list := AsList(impedance_min, ';', OrgZone_rel); } unit&lt;uint32&gt; Header : nrofrows = 1 {     attribute&lt;string&gt; dest_name          := AsList(dest/name, ';', const(0[Header],dest)); } unit&lt;uint32&gt; Matrix_met_header := union_unit(Header, Matrix_Array)  //This unit can easily be exported to csv and used in other applications. {     attribute&lt;string&gt; org_name           := union_data(., const('',Header), Matrix_Array/org_name);     attribute&lt;string&gt; values             := union_data(., Header/dest_name, Matrix_Array/impedance_min_list); } . ",
    "url": "/docs/convert-od-long-to-wide-format.html",
    
    "relUrl": "/docs/convert-od-long-to-wide-format.html"
  },"654": {
    "doc": "convert",
    "title": "definition",
    "content": "The convert function is a synonym for the value function. ",
    "url": "/docs/convert.html#definition",
    
    "relUrl": "/docs/convert.html#definition"
  },"655": {
    "doc": "convert",
    "title": "convert versus value function",
    "content": "The value function is usually used to define values-unit for new data-item, the convert function to convert data items to new related values units. The concept of ‘related’ is in development. At the moment the convert function can be used to convert: . | related values units (like miles to meters) if based on the same base-unit | GDAL/PROJ4 reprojections for known projections | . For future use also affine translations like conversions from degrees Celsius to Fahrenheit can be added to the convert function. The convert function should not be used to convert data items with values units of unrelated metric, for instance to convert meters to second. Use an expression with an explicit multiplication factor (for instance 1 second per meter) for this purpose. ",
    "url": "/docs/convert.html#convert-versus-value-function",
    
    "relUrl": "/docs/convert.html#convert-versus-value-function"
  },"656": {
    "doc": "convert",
    "title": "convert",
    "content": "conversion-functions convert . ",
    "url": "/docs/convert.html",
    
    "relUrl": "/docs/convert.html"
  },"657": {
    "doc": "converting-mondaine-vesta-output-into-esdl",
    "title": "converting-mondaine-vesta-output-into-esdl",
    "content": "If you have generated Vesta output files, you can now convert those into ESDL-files using a python script. | Download the Vesta configuration here or make a git-clone of that repository | Extract the zip file and move it to your ProjDir-folder, for example “C:/GeoDMS/ProjDir/Vesta-ESDL” | Install a python editor, such as Spyder Anaconda | Open the python file called Vesta_to_ESDL_PerPlanRegio_versimpeld.py | There scroll to the bottom and uncomment/comment the lines that are needed. Comment all lines that are not needed and only uncomment what is needed. | Choose the required time steps ‘TijdstapNamen’ | Choose the study area ‘RegioNamen’ | Choose the scenario ‘ScenarioNaam’ . | Each time there is the ScenarioNaam on one line, and the under it holds the strategies. Comment/uncomment in duo’s. | If you have selected a scenario, run the file by pressing F5. If it is done, choose the next scenario and run again. | . | The output is automatically saved to the MONDAINE hub and to your harddrive, in the folder ProjDir\\Vesta-ESDL\\output | . | . ",
    "url": "/docs/converting-mondaine-vesta-output-into-esdl.html",
    
    "relUrl": "/docs/converting-mondaine-vesta-output-into-esdl.html"
  },"658": {
    "doc": "convolution",
    "title": "ToDo",
    "content": "Investigate FFTW as substitute for IPPS 7.0 . | http://www.fftw.org/fftw-paper-ieee.pdf | . ",
    "url": "/docs/convolution.html#todo",
    
    "relUrl": "/docs/convolution.html#todo"
  },"659": {
    "doc": "convolution",
    "title": "convolution",
    "content": "Disambiguation: see also polygon-convolution . Convolution (see wikipedia) is used in the GeoDms to calculate a neighbourhood-potential using an input grid with n*m elements and a kernel of k*j elements, see the description of the potential function. The GeoDms utilizes the IPP 7.0 library convolution functions ippsConv_16s_Sfs, ippsConv_32f, ippsConv_64f in the OperPot.cpp code unit as default implementation for potential calculations. These functions perform an FFT on both their input arrays of size N, then multiply the spectra element-wize and then reverse-FFT the product to generate the requested result. The IPP 7.0 library also utilizes multiple cores when present and available, still available as potentialSlow for comparison. This results in a O(N*log(N)) operation, whereas the classical naive implementation with four nested loops requires O(n*m*k*j) operations. To make this possible, the 2D n * m grid and k * j grid are translated to two uniform signals of N = (n+k−1) * (m+j−1) elements each with appropriate zero-padding. The resulting grid can sometimes contain small round-off errors resulting from different frequencies that have to cancel-out, especially in empty zero-valued regions sometimes very small values occur, sometimes even negative when all input is non-negative. In order to remove these undesired artifacts, a smoothing post-processing is performed by default that resets to zero all values that are nearer to zero than $\\sqrt{\\sum\\limits_i(v_i^2) \\over 1000000000.0}$. The potential_raw operations does not perform this post-processing. ",
    "url": "/docs/convolution.html",
    
    "relUrl": "/docs/convolution.html"
  },"660": {
    "doc": "coordinate-conversions",
    "title": "between different coordinate systems",
    "content": "There are two options to convert vector-data between different coordinate systems: . | geometric functions are available to convert e.g. Rijksdriehoekcoördinaten to LatLongWgs84 coordinates. | Use configured EPSG codes: | . unit&lt;upoint&gt; rdc_base   : SpatialReference = \"EPSG:28992\"; unit&lt;dpoint&gt; wgs84_base : SpatialReference = \"EPSG:4326\"; parameter&lt;rdc_base&gt;    rdc_point   := point(390390, 111612, rdc_base); parameter&lt;wgs84_base&gt; wgs84_point := convert(rdc_point, wgs84_base); . Until 8.7.0 the format property was used instead of SpatialReference. ",
    "url": "/docs/coordinate-conversions.html#between-different-coordinate-systems",
    
    "relUrl": "/docs/coordinate-conversions.html#between-different-coordinate-systems"
  },"661": {
    "doc": "coordinate-conversions",
    "title": "conversions within a coordinate system",
    "content": "vector data to grid and vice versa . See point-2-grid and grid-2-point examples for how to convert vector-data to grid-data and vice versa. vector data expressed in different values-unit . conversions within a coordinate system, for instance to integer coordinates or from meter to hectometer can be configured in two steps: . 1) configure the new values-unit with an expression relating to the original values unit. 2) relate the coordinates with the value function . See the following example (default order of Y, X in point functions, see XY order): . unit&lt;float32&gt; m               := baseunit('m', float32), label = \"meter\"; unit&lt;fpoint&gt;  point_rd_base   : SpatialReference = \"EPSG:28992\"; unit&lt;fpoint&gt;  point_rd        := range(point_rd_base, point(300000[m],0[m]), point(625000[m],280000[m])); unit&lt;ipoint&gt;  point_rd_ipoint := ipoint(point_rd); unit&lt;ipoint&gt;  point_rd_hectom := //values unit for rijkdsriehoek coordinates in hectometers   gridset(point_rd, point(100f, 100f, point_rd), point(0f, 0f, point_rd), ipoint); attribute&lt;point_rd&gt;        geometry        (DomainUnit, polygon); attribute&lt;point_rd_ipoint&gt; geometry_ipoint (DomainUnit, polygon) := geometry[point_rd_ipoint]; attribute&lt;point_rd_hectom&gt; geometry_hectom (DomainUnit, polygon) := geometry[point_rd_hectom]; . The point_rd_ipoint &amp;&amp; point_rd_hectom values units are configured based on the base unit of this coordinate system: point_rd (in meters). The geometry_ipoint attribute results in an integer variant of the geometry coordinates. The geometry_hectom attribute results in coordinates in hectometer. ",
    "url": "/docs/coordinate-conversions.html#conversions-within-a-coordinate-system",
    
    "relUrl": "/docs/coordinate-conversions.html#conversions-within-a-coordinate-system"
  },"662": {
    "doc": "coordinate-conversions",
    "title": "conversion issues",
    "content": "For polygon, converting coordinates might result in unexpected lines in the visualisation, see the next example: . This is related to the polygon data model, using artificial lines between rings. This issue can be solved by clean-polygon-geometry. ",
    "url": "/docs/coordinate-conversions.html#conversion-issues",
    
    "relUrl": "/docs/coordinate-conversions.html#conversion-issues"
  },"663": {
    "doc": "coordinate-conversions",
    "title": "see also",
    "content": ". | coordinate-system | how-to-configure-a-coordinate-system | . ",
    "url": "/docs/coordinate-conversions.html#see-also",
    
    "relUrl": "/docs/coordinate-conversions.html#see-also"
  },"664": {
    "doc": "coordinate-conversions",
    "title": "coordinate-conversions",
    "content": "Coordinates in the GeoDMS can be converted between and within coordinate-system. This can be useful if: . | your source data uses different coordinates as your project | you want to convert vector data to grids or vice versa | your coordinates need to be converted to integer coordinates for polygon operations | your want to simplify your geometry | . ",
    "url": "/docs/coordinate-conversions.html",
    
    "relUrl": "/docs/coordinate-conversions.html"
  },"665": {
    "doc": "coordinate-system",
    "title": "a cartesian system",
    "content": "Most GeoDMS applications use a cartesian coordinate system, like in the Netherlands the Rijksdriehoekcoördinaten. A Cartesian coordinate system is a orthogonal coordinate system in which the distance between two coördinate lines is constant in a length unit. This means the Pythagorean theorem can be used to calculate distances, which is an important assumption in GeoDMS functions like dist and connect_info. ",
    "url": "/docs/coordinate-system.html#a-cartesian-system",
    
    "relUrl": "/docs/coordinate-system.html#a-cartesian-system"
  },"666": {
    "doc": "coordinate-system",
    "title": "or a geographic coordinate systems based on longitude and latitude",
    "content": "Within the GeoDMS is possible to configure coordinate systems based on lat / long coordinates. Be carefull in interpreting the results of functions that assume the Pythagorean theorem can be used like dist and connect_info. ",
    "url": "/docs/coordinate-system.html#or-a-geographic-coordinate-systems-based-on-longitude-and-latitude",
    
    "relUrl": "/docs/coordinate-system.html#or-a-geographic-coordinate-systems-based-on-longitude-and-latitude"
  },"667": {
    "doc": "coordinate-system",
    "title": "see also",
    "content": ". | how-to-configure-a-coordinate-system | coordinate-conversions | . ",
    "url": "/docs/coordinate-system.html#see-also",
    
    "relUrl": "/docs/coordinate-system.html#see-also"
  },"668": {
    "doc": "coordinate-system",
    "title": "coordinate-system",
    "content": "geography data describes objects/subjects/processes on the earth surface for which the location on this surface is relevant. As the earth is a sphere/ellips, a map projection is needed to project these locations in a two-dimensional plane. This two-dimensional plane can be described by a geographic coordinate system. The coordinate system of a GeoDMS project is defined by it’s how-to-configure-a-coordinate-system, defining how the coordinates need to be interpreted, in terms of their metric (meters, degrees) and their origin. In a GeoDMS project usually one coordinate system is used, although source data can be available in different coordinate systems. But most functions only support calculating with data in the same coordinate system, which also applies to visualization data in a map view. Therefore coordinate-conversions can be used to convert data between and within coordinate systems. In working with coordinate systems, it is important to make the following distinction: . ",
    "url": "/docs/coordinate-system.html",
    
    "relUrl": "/docs/coordinate-system.html"
  },"669": {
    "doc": "copyfile",
    "title": "syntax",
    "content": ". | CopyFile(source_filename, target_filename) | . ",
    "url": "/docs/copyfile.html#syntax",
    
    "relUrl": "/docs/copyfile.html#syntax"
  },"670": {
    "doc": "copyfile",
    "title": "definition",
    "content": "CopyFile(source_filename, target_filename) copies the source_filename to the target_filename. If the target_filename already exists, it will be overwritten (the initfile function does not overwrite an existing target_filename) . ",
    "url": "/docs/copyfile.html#definition",
    
    "relUrl": "/docs/copyfile.html#definition"
  },"671": {
    "doc": "copyfile",
    "title": "description",
    "content": "In the GeoDMS use forward slashes(/) in path names in stead of backward slashes. ",
    "url": "/docs/copyfile.html#description",
    
    "relUrl": "/docs/copyfile.html#description"
  },"672": {
    "doc": "copyfile",
    "title": "applies to",
    "content": "data-item or literal source_filename and target_filename with string value-type . ",
    "url": "/docs/copyfile.html#applies-to",
    
    "relUrl": "/docs/copyfile.html#applies-to"
  },"673": {
    "doc": "copyfile",
    "title": "conditions",
    "content": "The source_filename must exist, if not an error is generated. The folder of the target_filename to which the file is copied will be created, if it did not already exists. ",
    "url": "/docs/copyfile.html#conditions",
    
    "relUrl": "/docs/copyfile.html#conditions"
  },"674": {
    "doc": "copyfile",
    "title": "example",
    "content": "parameter&lt;string&gt; CopyFile := CopyFile('c:/tmp/test.txt', 'd:/tmp/test.txt'); . result: updating this item copies the source file c:/tmp/test.txt to the target file d:/tmp/test.txt, even if the targetfile does not exists. ",
    "url": "/docs/copyfile.html#example",
    
    "relUrl": "/docs/copyfile.html#example"
  },"675": {
    "doc": "copyfile",
    "title": "see also",
    "content": ". | initfile | createfile | . ",
    "url": "/docs/copyfile.html#see-also",
    
    "relUrl": "/docs/copyfile.html#see-also"
  },"676": {
    "doc": "copyfile",
    "title": "copyfile",
    "content": "file,-folder-and-read-functions CopyFile . ",
    "url": "/docs/copyfile.html",
    
    "relUrl": "/docs/copyfile.html"
  },"677": {
    "doc": "correlation",
    "title": "syntax",
    "content": ". | corr(a, b) | corr(a, b, relation) | . ",
    "url": "/docs/correlation.html#syntax",
    
    "relUrl": "/docs/correlation.html#syntax"
  },"678": {
    "doc": "correlation",
    "title": "definition",
    "content": ". | corr(a, b) results in the correlation coefficient of attribute a and b. | corr(a, b, relation) results in the correlation coefficient of attributes a and b, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | . The value-type of the resulting data-item is float32 or float64. ",
    "url": "/docs/correlation.html#definition",
    
    "relUrl": "/docs/correlation.html#definition"
  },"679": {
    "doc": "correlation",
    "title": "applies to",
    "content": ". | attribute a and b with Numeric value-type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/correlation.html#applies-to",
    
    "relUrl": "/docs/correlation.html#applies-to"
  },"680": {
    "doc": "correlation",
    "title": "conditions",
    "content": ". | The value type of the argument a and b must match. | The domain of arguments a, b and relation must match. | . ",
    "url": "/docs/correlation.html#conditions",
    
    "relUrl": "/docs/correlation.html#conditions"
  },"681": {
    "doc": "correlation",
    "title": "example",
    "content": "1. parameter&lt;float32&gt; corrNrInhabitantsTemp                :=  corr(float32(City/NrInhabitants), City/avgDailyTemperature); result = -0.89948 2. attribute&lt;float32&gt; corrNrInhabitantsTempRegion (Region) :=     corr(        float32(City/NrInhabitants)       ,City/avgDailyTemperature       ,City/RegionNr    ); . | City/NrInhabitants | City/avgDailyTemperature | City/Region_rel | . | 550 | 12 | 0 | . | 525 | 11 | 1 | . | 300 | null | 2 | . | 500 | 11 | 1 | . | 200 | 14 | 3 | . | 175 | null | null | . | null | 14 | 3 | . domain City, nr of rows = 7 . | corrNrInhabitantsTempRegion | . | null | . | null | . | null | . | null | . | null | . domain Region, nr of rows = 5 . ",
    "url": "/docs/correlation.html#example",
    
    "relUrl": "/docs/correlation.html#example"
  },"682": {
    "doc": "correlation",
    "title": "correlation",
    "content": "aggregation-functions correlation . ",
    "url": "/docs/correlation.html",
    
    "relUrl": "/docs/correlation.html"
  },"683": {
    "doc": "cos",
    "title": "syntax",
    "content": ". | cos(angle) | . ",
    "url": "/docs/cos.html#syntax",
    
    "relUrl": "/docs/cos.html#syntax"
  },"684": {
    "doc": "cos",
    "title": "definition",
    "content": "cos(angle) results in the cosine of data-item angle. ",
    "url": "/docs/cos.html#definition",
    
    "relUrl": "/docs/cos.html#definition"
  },"685": {
    "doc": "cos",
    "title": "description",
    "content": "data item angle need to be expressed in the unit radian (radiaal), the SI unit for angles. ",
    "url": "/docs/cos.html#description",
    
    "relUrl": "/docs/cos.html#description"
  },"686": {
    "doc": "cos",
    "title": "applies to",
    "content": "data item angle with float32 or float64 value-type . ",
    "url": "/docs/cos.html#applies-to",
    
    "relUrl": "/docs/cos.html#applies-to"
  },"687": {
    "doc": "cos",
    "title": "since version",
    "content": "5.18 . ",
    "url": "/docs/cos.html#since-version",
    
    "relUrl": "/docs/cos.html#since-version"
  },"688": {
    "doc": "cos",
    "title": "example",
    "content": "attribute&lt;float64&gt; Angle_rad (ADomain) := Angle * pi() / 180.0; attribute&lt;float64&gt; cosAngle_rad (ADomain) := cos(Angle_rad); . | Angle(°) | Angle_rad(rad) | cosAngle_radA | . | 0 | 0 | 1 | . | 30 | 0.52 | 0.87 | . | 45 | 0.79 | 0.71 | . | 420 | 7.33 | 0.5 | . | null | null | null | . ADomain, nr of rows = 5 . ",
    "url": "/docs/cos.html#example",
    
    "relUrl": "/docs/cos.html#example"
  },"689": {
    "doc": "cos",
    "title": "see also",
    "content": ". | sin | tan | . ",
    "url": "/docs/cos.html#see-also",
    
    "relUrl": "/docs/cos.html#see-also"
  },"690": {
    "doc": "cos",
    "title": "cos",
    "content": "trigonometric-functions cos(ine) . ",
    "url": "/docs/cos.html",
    
    "relUrl": "/docs/cos.html"
  },"691": {
    "doc": "count",
    "title": "syntax",
    "content": ". | count(a) | count(a, relation) | . ",
    "url": "/docs/count.html#syntax",
    
    "relUrl": "/docs/count.html#syntax"
  },"692": {
    "doc": "count",
    "title": "definition",
    "content": ". | count(a) results in an uint32 parameter with the number of non null values of attribute a. | count(a, relation) results in a an uint32 attribute with the number of non null values of attribute a, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | . ",
    "url": "/docs/count.html#definition",
    
    "relUrl": "/docs/count.html#definition"
  },"693": {
    "doc": "count",
    "title": "applies to",
    "content": ". | attribute a with Numeric or Point value type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/count.html#applies-to",
    
    "relUrl": "/docs/count.html#applies-to"
  },"694": {
    "doc": "count",
    "title": "conditions",
    "content": "The domain unit of argument a and relation must match. ",
    "url": "/docs/count.html#conditions",
    
    "relUrl": "/docs/count.html#conditions"
  },"695": {
    "doc": "count",
    "title": "example",
    "content": "1. parameter&lt;uint32&gt; countNrInh := count(City/NrInhabitants); result = 6 2. attribute&lt;uint32&gt; countNrInhRegion (Region) := count(City/NrInhabitants, City/Region_rel); . | City/NrInhabitants | City/Region_rel | . | 550 | 0 | . | 525 | 1 | . | 300 | 2 | . | 500 | 1 | . | 200 | 3 | . | 175 | null | . | null | 3 | . domain City, nr of rows = 7 . | countNrInhRegion | . | 1 | . | 2 | . | 1 | . | 1 | . | 0 | . domain Region, nr of rows = 5 . ",
    "url": "/docs/count.html#example",
    
    "relUrl": "/docs/count.html#example"
  },"696": {
    "doc": "count",
    "title": "see also",
    "content": ". | pcount | . ",
    "url": "/docs/count.html#see-also",
    
    "relUrl": "/docs/count.html#see-also"
  },"697": {
    "doc": "count",
    "title": "count",
    "content": "aggregation-functions count . ",
    "url": "/docs/count.html",
    
    "relUrl": "/docs/count.html"
  },"698": {
    "doc": "covariance",
    "title": "syntax",
    "content": ". | cov(a, b) | cov(a, b, relation) | . ",
    "url": "/docs/covariance.html#syntax",
    
    "relUrl": "/docs/covariance.html#syntax"
  },"699": {
    "doc": "covariance",
    "title": "definition",
    "content": ". | cov(a, b) results in a parameter with the co-variance of attribute a and b. | cov(a, b, relation) results in an attribute with the co-variance of attributes a and b, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | . The value-type of the resulting data-item is float32 or float64. ",
    "url": "/docs/covariance.html#definition",
    
    "relUrl": "/docs/covariance.html#definition"
  },"700": {
    "doc": "covariance",
    "title": "applies to",
    "content": ". | attribute a and b with Numeric value type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/covariance.html#applies-to",
    
    "relUrl": "/docs/covariance.html#applies-to"
  },"701": {
    "doc": "covariance",
    "title": "conditions",
    "content": ". | The value type of the argument a and b must match. | The domain of arguments a, b and relation must match. | . ",
    "url": "/docs/covariance.html#conditions",
    
    "relUrl": "/docs/covariance.html#conditions"
  },"702": {
    "doc": "covariance",
    "title": "example",
    "content": "1. parameter&lt;float32&gt; covNrInhabitantsTemp                :=  cov(float32(City/NrInhabitants), City/avgDailyTemperature); result = -156.25 2. attribute&lt;float32&gt; covNrInhabitantsTempRegion (Region) := cov(        float32(City/NrInhabitants)      , City/avgDailyTemperature      , City/RegionNr   ); . | City/NrInhabitants | City/avgDailyTemperature | City/Region_rel | . | 550 | 12 | 0 | . | 525 | 11 | 1 | . | 300 | null | 2 | . | 500 | 11 | 1 | . | 200 | 14 | 3 | . | 175 | null | null | . | null | 14 | 3 | . domain City, nr of rows = 7 . | covNrInhabitantsTempRegion | . | 0 | . | 0 | . | null | . | 0 | . | null | . domain Region, nr of rows = 5 . ",
    "url": "/docs/covariance.html#example",
    
    "relUrl": "/docs/covariance.html#example"
  },"703": {
    "doc": "covariance",
    "title": "covariance",
    "content": "aggregation-functions co-variance . ",
    "url": "/docs/covariance.html",
    
    "relUrl": "/docs/covariance.html"
  },"704": {
    "doc": "createfile",
    "title": "syntax",
    "content": ". | CreateFile(source_filename, target_filename) | . ",
    "url": "/docs/createfile.html#syntax",
    
    "relUrl": "/docs/createfile.html#syntax"
  },"705": {
    "doc": "createfile",
    "title": "definition",
    "content": "CreateFile(source_filename, target_filename) is synonym for initfile(source_filename, target_filename), . ",
    "url": "/docs/createfile.html#definition",
    
    "relUrl": "/docs/createfile.html#definition"
  },"706": {
    "doc": "createfile",
    "title": "createfile",
    "content": "file,-folder-and-read-functions CreateFile . ",
    "url": "/docs/createfile.html",
    
    "relUrl": "/docs/createfile.html"
  },"707": {
    "doc": "crosstab",
    "title": "example",
    "content": "SourceData . | districtname | nr_inhabitants | avg_temperature | statename | year | . | RegA | 100 | 17° | StateI | 2000 | . | RegB | 200 | 22° | StateII | 2000 | . | RegC | 150 | 25° | StateII | 2000 | . | RegD | 50 | 13° | StateIII | 2000 | . | … | … | … | … | … | . | RegX | 250 | 19° | StateV | 2010 | . Assume this data is read from a .csv storage, the GeoDMS configuration would look like this: . unit&lt;uint32&gt; DistrictTimePeriod:    StorageName =  \"%SourceDataProjDir/districs.csv\" ,  StorageType =  \"gdal.vect\" ,  StorageReadOnly  = \"True\" {    attribute&lt;string&gt;          districtname;    attribute&lt;nr_persons&gt;      nr_inhabitants;    attribute&lt;degrees_celsius&gt; avg_temperature;    attribute&lt;string&gt;          statename;    attribute&lt;string&gt;          year; } . ",
    "url": "/docs/crosstab.html#example",
    
    "relUrl": "/docs/crosstab.html#example"
  },"708": {
    "doc": "crosstab",
    "title": "result",
    "content": "A potential crosstab, based on the source data, could look like this (each cell value is the sum of the number inhabitants for the state in the indicated year) : . | statename / year | 2000 | .. | 2010 | . | StateI | 500 | … | 800 | . | .. | … | … | … | . | StateV | 250 | … | 230 | . ",
    "url": "/docs/crosstab.html#result",
    
    "relUrl": "/docs/crosstab.html#result"
  },"709": {
    "doc": "crosstab",
    "title": "configuration steps",
    "content": "1) First, if not yet configured, configure state and TimePeriod as domain-unit. 2) Configure relation from the DistrictTimePeriod domain unit towards the configured state and TimePeriod domain units. This results in two extra attribute in the DistrictTimePeriod unit configuration: . unit&lt;uint32&gt; DistrictTimePeriod: ... {    ...    attribute&lt;state&gt;      state_rel      := rlookup(statename, state/label);    attribute&lt;TimePeriod&gt; TimePeriod_rel := rlookup(year,      TimePeriod/label); } . 3) Apply the for_each function on the domain unit you would like to see as columns (in the example TimePeriod). In the expression you aggregate the values towards the domain unit used for the rows, with a condition the data applies to the column values. The following examples show the configuration for the: . Sum of inhabitants per State and TimePeriod (see result table) : . container CrossTab_SumInhabitants :=    for_each_nedv(         TimePeriod/name       ,'sum(            DistrictTimePeriod/TimePeriod_rel == ' + string(id(TimePeriod)) +'[TimePeriod]                ? DistrictTimePeriod/nr_inhabitants                : 0[nr_persons]          , DistrictTimePeriod/state_rel)'       ,state       ,nr_persons ); . In which TimePeriod/name is a string attribute with valid tree-item names for the TimePeriod domain unit. In the sum the number of inhabitants is applied if the condition on the TimePeriod is true, if not the value 0 is summed. This works well for quantities, but not for intensive variables like temperature. For these variables, use a missing value indication (for instance 0 / 0) in stead of zero, see next example: . Mean Temperature per State and TimePeriod . container CrossTab_MeanTemperature :=    for_each_nedv(         TimePeriod/name       ,'mean(            DistrictTimePeriod/TimePeriod_rel == ' + string((id(TimePeriod)) +'[TimePeriod]              ? DistrictTimePeriod/AverageTemperature               : (0 / 0)[degrees_celsius]          , DistrictTimePeriod/state_rel)'       ,state       ,degrees_celsius ); . ",
    "url": "/docs/crosstab.html#configuration-steps",
    
    "relUrl": "/docs/crosstab.html#configuration-steps"
  },"710": {
    "doc": "crosstab",
    "title": "crosstab",
    "content": "configuration-examples Crosstab . A crosstab is a type of table in a matrix format that displays the (multivariate) frequency distribution of variables. ",
    "url": "/docs/crosstab.html",
    
    "relUrl": "/docs/crosstab.html"
  },"711": {
    "doc": "csv",
    "title": "Read",
    "content": "The GeoDMS supports two ways of reading csv files: . | gdal.vect: for most csv files, we advice to use gdal.vect to read csv files, see next subparagraph. | tablechopper-(read-ascii-file): we advice to use the TableChopper to read csv files: . | If your csv file contains other separators than comma or semicolon, or | If your csv is very large (for performance reasons) | . | . gdal.vect . The following example shows how to read a .csv file with the gdal.vect storagemanager. example . unit&lt;uint32&gt; pc6 :  StorageName = \"%SourceDataDir%/CBS/pc6_data.csv\" ,  StorageType = \"gdal.vect\" , StorageReadOnly = \"True\" { } . All attribute from the csv files are read. The name is default derived from the first (header) row, the default value-type for all attributes will be string. Use conversion-functions to cast the data to requested values units. In case a .csvt file is available, values that match the value types of the data van be directly configured. A .csvt can be written with gdal.vect, see the write examples. In earlier GeoDMS versions a geometry attribute was added, usually containing null values. This attribute can be ignored. Gdal.vect supports comma and semicolon separated csv files, for reading data no separator has to be configured. options . gdal-options can be configured for reading different csv files. See: https://gdal.org/drivers/vector/csv.html#open-options for a full list of all open options. Examples on how to configure read options: container noheader {    unit&lt;int32&gt;       optionSet := range(uint32, 0, 1);    attribute&lt;string&gt; GDAL_Options (optionSet) : ['HEADERS=NO'];    unit&lt;uint32&gt; pc6_ignore_header    : StorageName     = \"%SourceDataDir%/CBS/pc6_data.csv\"    ,  StorageType     = \"gdal.vect\";    ,  StorageReadOnly = \"True\"; } container emptyvalues {    unit&lt;int32&gt;       optionSet := range(uint32, 0, 1);    attribute&lt;string&gt; GDAL_Options (optionSet) : ['EMPTY_STRING_AS_NULL=YES'];    unit&lt;int32&gt; pc6_empty_string_as_null    :  StorageName     = \"%SourceDataDir%/CBS/pc6_data.csv\"    ,  StorageType     = \"gdal.vect\";    ,  StorageReadOnly = \"True\"; } . The first example configures a source file in which the header is ignored. The resulting field names will then be: *field_1, field_2.. field_n*. The second example configures how empty cells are treated. By default the become empty strings, by configuring the option: EMPTY_STRING_AS_NULL=YES, they become [null](null) Multiple GDAL_Options can be configured in your optionSet, use a comma as separator. We advice to use different containers for configuring csv files with different open options. ",
    "url": "/docs/csv.html#read",
    
    "relUrl": "/docs/csv.html#read"
  },"712": {
    "doc": "csv",
    "title": "Write",
    "content": "The GeoDMS supports two ways of writing csv files: . | gdalwrite.vect: since GeoDMS version 7408, we advice to use the gdalwrite.vect to write most csv files, see next subparagraph. | tablecomposer-(write-ascii-file): we advice to use the TableComposer to write csv files. | If you need more flexibility in the contents of the header line(s) and/or body text, or | If you want another separator as semicolon or comma, or | If your csv is very large (for performance reasons) | . | . gdalwrite.vect . The following example shows how to write a .csv file with the gdalwrite.vect StorageManager. example . unit &lt;uint32&gt; pc6_export := src/pc6 ,  StorageName = \"%localDataProjDir%/export_semicolon.csv\" ,  StorageType = \"gdalwrite.vect\" ,  StorageReadOnly = \"false\" { attribute&lt;uint32&gt;  IntegerAtt := const(1, .); attribute&lt;float32&gt; FloatAtt   := const(1f, .); attribute&lt;string&gt;  StringAtt  := const('A', .); attribute&lt;bool&gt;    BoolAtt    := const(true, .); } . Attributes of all value types, except for values types of the point group, are written to a csv file. This applies to both the direct as the indirect subitem. The resulting file will contain one header line with the name of each attribute. By default a semicolon is used as seperator and all attributes will be double quoted. options . gdal-options can be configured for writing different csv files. See: https://gdal.org/drivers/vector/csv.html#layer-creation-options for a full list of all creation options. Examples on how to configure write options: container comma {    unit&lt;uint32&gt; optionSet := range(uint32, 0, 1);    attribute&lt;string&gt; GDAL_LayerCreationOptions (optionSet) : [\"SEPARATOR=COMMA\"];    uni&lt; pc6_export := src/pc6    , StorageName     = \"%localDataProjDir%/export_comma.csv\"    , StorageType     = \"gdalwrite.vect\"    , StorageReadOnly = \"false\"    {       attribute&lt;uint32&gt;  IntegerAtt := const(1, .);       attribute&lt;float32&gt; FloatAtt   := const(1f, .);       attribute&lt;string&gt;  StringAtt  := const('A', .);       attribute&lt;bool&gt;    BoolAtt    := const(true, .);    } } container geometry_as_wkt {    unit&lt;uint32&gt; optionSet := range(uint32, 0, 3);    attribute&lt;string&gt; GDAL_LayerCreationOptions (optionSet) :  [\"GEOMETRY=AS_WKT\", \"GEOMETRY_NAME=GEOMETRY\", \"CREATE_CSVT=YES\"];    unit&lt;uint32&gt; poly := EsriShape/Polygon    , StorageName     = \"%localDataProjDir%/poly.csv\"    ,  StorageType     = \"gdalwrite.vect\"`    ,  StorageReadOnly = \"false\"`    {       attribute&lt;fpoint&gt; geometry (poly) := EsriShape/Polygon/Geometry;       attribute&lt;string&gt; label           := EsriShape/Polygon/Label;    } } &lt;/pre&gt; The first example show how to configure a csv file with a comma as separator. The second example shows how you can also write a [vector-data](vector-data) [geometry](geometry) to a csv file (point, line and polygon). The data will be written als well-known textformat (WKT). The second option in this examples configures the name in the csv file with the WKT. The third option indicates that a .csvt is also written with exported attribute names. We advice to use different containers for configuring csv files with different creation options. &lt;/details&gt; . ",
    "url": "/docs/csv.html#write",
    
    "relUrl": "/docs/csv.html#write"
  },"713": {
    "doc": "csv",
    "title": "csv",
    "content": "A comma-separated values (csv) file stores tabular data (numbers and text) in plain text. It is a common data exchange format that is widely supported. ",
    "url": "/docs/csv.html",
    
    "relUrl": "/docs/csv.html"
  },"714": {
    "doc": "cumulate",
    "title": "syntax",
    "content": ". | cumulate(a) | cumulate(a, relation) | . ",
    "url": "/docs/cumulate.html#syntax",
    
    "relUrl": "/docs/cumulate.html#syntax"
  },"715": {
    "doc": "cumulate",
    "title": "definition",
    "content": ". | cumulate(a) results in an attribute with the cumulation of the non null values of attribute a. | cumulate(a, relation) results in an attribute with the cumulation of the non null values of attribute a, grouped by the relation. The domain-unit of the resulting attribute is the values unit of the relation attribute. | . ",
    "url": "/docs/cumulate.html#definition",
    
    "relUrl": "/docs/cumulate.html#definition"
  },"716": {
    "doc": "cumulate",
    "title": "description",
    "content": ". | For domain units with index-numbers starting from 0 (default), cumulate(const(1, domainunit, uint32)) - 1 is synonym for id(domain unit). It is advised to use the id function in such a case. | There is no id(domainunit, relation) function, use cumulate(const(1, domainunit, uint32), relation) - 1 to calculate index numbers for each entry in the relation domain. | . ",
    "url": "/docs/cumulate.html#description",
    
    "relUrl": "/docs/cumulate.html#description"
  },"717": {
    "doc": "cumulate",
    "title": "applies to",
    "content": ". | Attribute a with Numeric value-type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/cumulate.html#applies-to",
    
    "relUrl": "/docs/cumulate.html#applies-to"
  },"718": {
    "doc": "cumulate",
    "title": "conditions",
    "content": ". | The values-unit of the resulting data-item should match with regard to value type and metric with the values unit of attribute a. | The domain unit of argument a and relation must match. | . ",
    "url": "/docs/cumulate.html#conditions",
    
    "relUrl": "/docs/cumulate.html#conditions"
  },"719": {
    "doc": "cumulate",
    "title": "since version",
    "content": "6.061 . ",
    "url": "/docs/cumulate.html#since-version",
    
    "relUrl": "/docs/cumulate.html#since-version"
  },"720": {
    "doc": "cumulate",
    "title": "example",
    "content": "1. attribute&lt;uint32&gt; cumulateNrInh (City) := cumulate(City/NrInhabitants); 2. attribute&lt;uint32&gt; cumulateNrInhRegion (City) := cumulate(City/NrInhabitants, City/Region_rel); . | City/NrInhabitants | City/Region_rel | cumulateNrInh | cumulateNrInhRegion | . | 550 | 0 | 550 | 550 | . | 525 | 1 | 1075 | 525 | . | 300 | 2 | 1375 | 300 | . | 500 | 1 | 1875 | 1025 | . | 200 | 3 | 2075 | 200 | . | 175 | null | 2250 | null | . | null | 3 | 2250 | 200 | . domain City, nr of rows = 7 . ",
    "url": "/docs/cumulate.html#example",
    
    "relUrl": "/docs/cumulate.html#example"
  },"721": {
    "doc": "cumulate",
    "title": "cumulate",
    "content": "arithmetic-functions cumulate . ",
    "url": "/docs/cumulate.html",
    
    "relUrl": "/docs/cumulate.html"
  },"722": {
    "doc": "current-item-bar",
    "title": "related issues",
    "content": ". | issue: 820 | issue: 1437 | . ",
    "url": "/docs/current-item-bar.html#related-issues",
    
    "relUrl": "/docs/current-item-bar.html#related-issues"
  },"723": {
    "doc": "current-item-bar",
    "title": "current-item-bar",
    "content": "recent-developments Current Item Bar . Version 7.172 introduced an address bar (like in a browser), presenting the current item of the configuration. This makes communicating about specific issues easier as well as selecting similar items in template instantions. ",
    "url": "/docs/current-item-bar.html",
    
    "relUrl": "/docs/current-item-bar.html"
  },"724": {
    "doc": "currentdir",
    "title": "syntax",
    "content": ". | CurrentDir() | . ",
    "url": "/docs/currentdir.html#syntax",
    
    "relUrl": "/docs/currentdir.html#syntax"
  },"725": {
    "doc": "currentdir",
    "title": "definition",
    "content": ". | CurrentDir() results in a string parameter with the folder of the root file of the loaded configuration. | . ",
    "url": "/docs/currentdir.html#definition",
    
    "relUrl": "/docs/currentdir.html#definition"
  },"726": {
    "doc": "currentdir",
    "title": "example",
    "content": "parameter&lt;string&gt; cdir := CurrentDir(); . result: cdir = ‘c:/data/dev/prj/tst/Operator/cfg’ . ",
    "url": "/docs/currentdir.html#example",
    
    "relUrl": "/docs/currentdir.html#example"
  },"727": {
    "doc": "currentdir",
    "title": "currentdir",
    "content": "file,-folder-and-read-functions CurrentDir(ectory) . ",
    "url": "/docs/currentdir.html",
    
    "relUrl": "/docs/currentdir.html"
  },"728": {
    "doc": "cut-out-polygon-from-other-polygon",
    "title": "example",
    "content": "unit&lt;uint32&gt; Square : NrofRows = 1 {    // create a square    attribute&lt;meter&gt; left   := const(      0,.,meter);    attribute&lt;meter&gt; right  := const( 280000,.,meter);    attribute&lt;meter&gt; top    := const( 625000,.,meter);    attribute&lt;meter&gt; bottom := const( 300000,.,meter);    attribute&lt;rdc_meter&gt; left_top     := point(   top, left,  rdc_meter);    attribute&lt;rdc_meter&gt; right_top    := point(   top, right, rdc_meter);    attribute&lt;rdc_meter&gt; right_bottom := point(bottom, right, rdc_meter);    attribute&lt;rdc_meter&gt; left_bottom  := point(bottom, left,  rdc_meter);    unit&lt;uint32&gt; pointset : nrofrows = 5    {       attribute&lt;rdc_meter&gt; coordr := union_data(., left_top, right_top, right_bottom, left_bottom, left_top);    }    attribute&lt;rdc_meter&gt; geometry   (polygon) :=  points2sequence(pointset/coord, const(0, pointset, square), id(pointset));    attribute&lt;ipoint&gt;    geometry_i (polygon) := ipolygon(geometry);     // cut out polygon is for instance the boundary of the first municipality  (index numbers, here referred to as cut_out_polygon.    attribute&lt;rdc_meter&gt; square_with_polygon_cut_out (poly) := (geometry_i - cut_out_polygon/geometry_i[0])[rdc_meter]; } . ",
    "url": "/docs/cut-out-polygon-from-other-polygon.html#example",
    
    "relUrl": "/docs/cut-out-polygon-from-other-polygon.html#example"
  },"729": {
    "doc": "cut-out-polygon-from-other-polygon",
    "title": "explanation",
    "content": "The example first configures a square polygon for the whole of the Netherlands. The actual cutting out is done in the bold line. The sub-(difference) function is used to cut out the first geometry in the cut_out_polygon domain for instance the first municipality in the Netherlands, from the square. The ipolygon conversion function is used as these vector functions only work on integer coordinates. The casting back to [rdc_meter] at the end of the expression is used to convert the integer coordinates back to the rdc_meter values-unit. ",
    "url": "/docs/cut-out-polygon-from-other-polygon.html#explanation",
    
    "relUrl": "/docs/cut-out-polygon-from-other-polygon.html#explanation"
  },"730": {
    "doc": "cut-out-polygon-from-other-polygon",
    "title": "cut-out-polygon-from-other-polygon",
    "content": "configuration-examples Cut out polygon from other polygon . The script presents an example to cut out a polygon from another polygon. ",
    "url": "/docs/cut-out-polygon-from-other-polygon.html",
    
    "relUrl": "/docs/cut-out-polygon-from-other-polygon.html"
  },"731": {
    "doc": "data-item",
    "title": "types",
    "content": "Two types of data items are distinguished: . | parameter | attribute | . ",
    "url": "/docs/data-item.html#types",
    
    "relUrl": "/docs/data-item.html#types"
  },"732": {
    "doc": "data-item",
    "title": "multi-dimensional",
    "content": "Most data items are one-dimensional. The GeoDMS also supports the following multi-dimensional (spatial) datastructures: . | point data items: two-dimensional items with for each instance an X and an Y value. | sequence of point data item: items with for each instance a non fixed number of coordinates, used for arc and polygon data items. | . Different value-type and composition are used to configure multi-dimensional data structures, see unit. ",
    "url": "/docs/data-item.html#multi-dimensional",
    
    "relUrl": "/docs/data-item.html#multi-dimensional"
  },"733": {
    "doc": "data-item",
    "title": "data-item",
    "content": "The GeoDMS calculates and visualises data. Therefore tree-item can to be configured, referring to source data or calculation results. These items are called data items. From a technical perspective a data item is a reference to a memory array. storagemanager are used to read data from files and databases into memory arrays and to write data from these arrays to files. Small amounts of data, like parameter values or class breaks of classification, are often stored in configuration-file. Configure expression to calculate with data items. ",
    "url": "/docs/data-item.html",
    
    "relUrl": "/docs/data-item.html"
  },"734": {
    "doc": "data-model",
    "title": "datamodel",
    "content": ". | MemoryArray based processing (as with R and IDL). Computers are fast in calculating with arrays in internal memory. The GeoDMS uses this strentgh by calculating in this manner. | Memory Mapped Files utilizes the paging mechanism to have data outside the working set standby without occupying Virtual Address Space. | SubByte value-type are supported. This means that in one DWORD, 32 booleans, 16 Uint2 values (of 2 bits each) or 8 Uint4 values (of 4 bits each) can be stored. | Arrays of sequences (such as text strings, or polygons) are implemented as dual arrays (one index array and one element value array) to avoid heap memory allocations per object. | Geometric data elements can also be configured with single precision (32 bit) floating point coordinates and 32 and 16 bits integer coordinates (both signed and unsigned) (most GIS software only support double precision coordinates. | Tiling (also known as Segmentation for non rasterdata) limits the use of the Virtual Address Space (VAS) and divides calculations into smaller tasks. Large arrays are split up in multiple smaller arrays. | For most operations, type specific variants have been compiled that specialize operations for values with SubByte types, SequenceArrays, and the 6 point types for geometric values. | . ",
    "url": "/docs/data-model.html#datamodel",
    
    "relUrl": "/docs/data-model.html#datamodel"
  },"735": {
    "doc": "data-model",
    "title": "data-model",
    "content": "expression fast calculations: Data model . ",
    "url": "/docs/data-model.html",
    
    "relUrl": "/docs/data-model.html"
  },"736": {
    "doc": "data-source",
    "title": "vector, grid and non spatial data",
    "content": "For spatial data a distinction is made in: . | vector-data: point, arc or polygon geometry data for one-dimensional-domain | grid-data: attribute for two-dimensional-domain | . In gdal this same distinction is used, gdal.vect or gdalwrite.vect is used for vector data, gdal.grid or gdalwrite.grid for grid data. Non spatial data can be also partly be read from or written to with gdal.vect or gdalwrite.vect but also by some other StorageManagers. ",
    "url": "/docs/data-source.html#vector-grid-and-non-spatial-data",
    
    "relUrl": "/docs/data-source.html#vector-grid-and-non-spatial-data"
  },"737": {
    "doc": "data-source",
    "title": "data-source",
    "content": "A typical workflow for a GeoDMS project is to . | read-data from a (set of) data source(s) (files/databases) | calculate results in memory, using arrays | view results and or write-data to files/databases. | . To read data from and to write data to files/databases, so-called storagemanager are used. We advise to configure source data-item in a source data container, these data items can be referred to from any other location in the configuration. Data can also be explicitly exported with the geodms-gui with the File &gt; Export Primary Data menu options. ",
    "url": "/docs/data-source.html",
    
    "relUrl": "/docs/data-source.html"
  },"738": {
    "doc": "database",
    "title": "issues with databases in GeoDMS applications",
    "content": ". | If databases are not file-oriented, the timestamp mechanism of cannot determine if primary data is changed since the last results are calculated. | Exchanging data with non file-oriented database (e.g. PostgreSQL) between partners in projects is often less easy as with files. | The GeoDMS offers functions that are usually also available in databases (selections, aggregations, joins). | . Databases are often also in use for editing data, often using a transaction mechanism. As the GeoDMS is intended for attribute/array oriented calculations and not for editing, it does not use such a mechanism and can perform these calculations often faster. ",
    "url": "/docs/database.html#issues-with-databases-in-geodms-applications",
    
    "relUrl": "/docs/database.html#issues-with-databases-in-geodms-applications"
  },"739": {
    "doc": "database",
    "title": "database",
    "content": "Spatial vector-data and non spatial data can be read from different databases with the ODBC and gdal.vect storagemanager. The sqlstring property can be used to select the relevant data in a relevant sequence from one or multiple tables/views/queries. in GeoDMS projects data is read from the following databases: . | geopackage | msaccess / msexcel (odbc) | postgis | filegeodatabase | . ",
    "url": "/docs/database.html",
    
    "relUrl": "/docs/database.html"
  },"740": {
    "doc": "date-to-unix-timestamp",
    "title": "example",
    "content": "container StartDate2UnixTimeStamp := Date2UnixTimeStamp_T(domain, string(StartDate)); //date needs to be in the format: YYYYMMDD. Template Date2UnixTimeStamp_T { // begin case parameters unit&lt;uint32&gt; domain; attribute&lt;string&gt; date (domain); // end case parameters attribute&lt;uint32&gt; year (domain) := uint32(substr(date,0,4)); attribute&lt;uint32&gt; month (domain) := uint32(substr(date,4,2)); attribute&lt;uint32&gt; day (domain) := uint32(substr(date,6,2)); parameter&lt;uint32&gt; StartYear := 1970; attribute&lt;uint32&gt; YearDays (domain) := (((Year &lt;= StartYear ? StartYear : Year - 1) - StartYear) * 365) + MakeDefined(rjoin(year, id(Years), Years/cumulate_leaps),0); //Number of days in finished years + extra years due to leap Years attribute&lt;uint32&gt; MonthDays (domain) := Year &lt; StartYear ? 0 : MakeDefined(rjoin((sub_or_null(month,1))[DayPerMonth], id(DayPerMonth), DayPerMonth/days_up_to),0); // number of days in the year up to the month attribute&lt;uint32&gt; Days (domain) := Year &lt; StartYear ? 0 : day; attribute&lt;uint32&gt; Result (domain) := YearDays + MonthDays + Days; unit&lt;uint8&gt; DayPerMonth := range(uint8,1b,13b) { attribute&lt;string&gt; name : ['January','February','March','April','May','June','July','August','September','October','November','December']; attribute&lt;uint32&gt; days : [31,28,31,30,31,30,31,31,30,31,30,31]; attribute&lt;uint32&gt; days_up_to := cumulate(days); } unit&lt;uint32&gt; Years := range(uint32, 1970, 2061) { attribute&lt;bool&gt; IsLeapYear := IsDefined(rlookup(id(.), uint32(LeapYears/value))); attribute&lt;uint32&gt; cumulate_leaps := cumulate(uint32(IsLeapYear)); } unit&lt;uint8&gt; LeapYears : nrofrows = 23 { attribute&lt;uint32&gt; value: [1972,1976,1980,1984,1988,1992,1996,2000,2004,2008,2012,2016,2020,2024,2028,2032,2036,2040,2044,2048,2052,2056,2060]; } } . ",
    "url": "/docs/date-to-unix-timestamp.html#example",
    
    "relUrl": "/docs/date-to-unix-timestamp.html#example"
  },"741": {
    "doc": "date-to-unix-timestamp",
    "title": "date-to-unix-timestamp",
    "content": "configuration-examples Date to Unix timestamp . This is a little script to convert a date to a Unix time stamp. This is useful when you want to calculate the number of days between two dates. The date needs to have the format YYYYMMDD. It is common to transform a date to the number of days from January 1st, 1970. ",
    "url": "/docs/date-to-unix-timestamp.html",
    
    "relUrl": "/docs/date-to-unix-timestamp.html"
  },"742": {
    "doc": "dbf",
    "title": "Read",
    "content": "The GeoDMS supports two ways of reading dbf files: . | gdal.vect: we advice to use the gdal.vect StorageManager to read dbf files as it supports tile data, see the next subparagraph. | dbf StorageManager | . gdal.vect . The following example shows how to read a .dbf file with gdal.vect. example: . unit&lt;uint32&gt; table: StorageName = \"%projDir%/data/DBF.dbf\" , StorageType = \"gdal.vect\" , StorageReadOnly = \"True\" {   attribute&lt;int32&gt;   IntegerAtt;   attribute&lt;float32&gt; FloatAtt;   attribute&lt;bool&gt;    BoolAtt;   attribute&lt;string&gt;  StringAtt; } . dbf storagemanager . The following example shows how to read a .dbf file with the dbf storagemanager. example: . unit&lt;uint32&gt; table: StorageName = \"%projDir%/data/DBF.dbf\" , StorageReadOnly = \"True\" { attribute&lt;int32&gt;   IntegerAtt; attribute&lt;float32&gt; FloatAtt; attribute&lt;bool&gt;    BoolAtt; attribute&lt;string&gt;  StringAtt; } . ",
    "url": "/docs/dbf.html#read",
    
    "relUrl": "/docs/dbf.html#read"
  },"743": {
    "doc": "dbf",
    "title": "Write",
    "content": "The GeoDMS supports two ways of writing dbf files: . | gdalwrite.vect: we advice to use the gdalwrite.vect StorageManager to write dbf files see the next subparagraph. | dbf StorageManager | . Be aware: the names of attributes written to a .dbf file may not exceed 10 characters, as the .dbf file does not support longer fields. We advise to write attributes to dbf file that do not have null values, as strange results might occur. Use the makedefined function to convert null values to a specific missing data value for your dbf file. gdal.vect . The following example shows how to write a .dbf file with the gdalwrite.vect. example: . unit &lt;uint32&gt; pc6_export := src/pc6 ,  StorageName = \"%localDataProjDir%/export_table.dbf\" ,  StorageType = \"gdalwrite.vect\" ,  StorageReadOnly = \"false\" { attribute&lt;uint32&gt;  IntegerAtt := const(1, .); attribute&lt;float32&gt; FloatAtt   := const(1f, .); attribute&lt;string&gt;  StringAtt  := const('A', .); attribute&lt;bool&gt;    BoolAtt    := const(true, .); } . dbf storagemanager . The following example shows how to write a .dbf file with the dbf storagemanager. example: . unit &lt;uint32&gt; pc6_export := src/pc6 ,  StorageName = \"%localDataProjDir%/export_table.dbf\" ,  StorageReadOnly = \"false\" { attribute&lt;uint32&gt;  IntegerAtt := const(1, .); attribute&lt;float32&gt; FloatAtt   := const(1f, .); attribute&lt;string&gt;  StringAtt  := const('A', .); attribute&lt;bool&gt;    BoolAtt    := const(true, .); } . ",
    "url": "/docs/dbf.html#write",
    
    "relUrl": "/docs/dbf.html#write"
  },"744": {
    "doc": "dbf",
    "title": "dbf",
    "content": "Dbf files are dBase files, used as part of the esri-shapefile or as separate data file. In reading and writing dbf files, the value-type of the values-unit of the attribute should match with the data types of the attributes in the dbf file. The following value types can be used for dbf data: . | (u)int8/16/32/64 for byte, integer and long integer | float32/64 for single/double | bool for boolean | string for string | . Other data/value types can not be read from (e.g. date) or written to (e.g. all Point Group types) dbf storages. ",
    "url": "/docs/dbf.html",
    
    "relUrl": "/docs/dbf.html"
  },"745": {
    "doc": "ddl",
    "title": "SQL Create Table",
    "content": "In SQL Create Table statements are used to define new tables. The Create Table statement for the Building entity in our example (see next figure): . looks like this: . Create Table Building(    Id               Text Primary Key,    ConstructionTear Integer,    Footprint        Double ); . This statement only creates the table with the three fields. It does not add data to this table. Use SQL Insert Into statements to add data to these tables. ",
    "url": "/docs/ddl.html#sql-create-table",
    
    "relUrl": "/docs/ddl.html#sql-create-table"
  },"746": {
    "doc": "ddl",
    "title": "GeoDMS Domain Units",
    "content": "The SQL Create Table statement is, in GeoDMS terms, similar to defining a new domain-unit. Defining such a unit in the GeoDMS is usually combined with reading/configuring the data. The data can be read from multiple storage formats (see storagemanager, but for small amounts of data also from the configuration. The following example presents the configuration of the Building entity in the GeoDMS with it’s attribute and data: . unit&lt;uint32&gt; Building: NrOfRows = 4 {     attribute&lt;string&gt;     Id:               ['bui001','bui002','bui003','bui004'];     attribute&lt;units/year&gt; ConstructionYear: [2010,2012,2015,2016];     attribute&lt;units/m2&gt;   Footprint:        [100,300,250,150]; } . The Building entity is configured as a unit32 domain unit. As the data is read from the configuration, the number of rows need to be configured. Each field is configured as an attribute. These attributes are mappings from the Building domain towards other domains (like the set of ConstructionYears). The numeric attributes are not only configured with a data type (Integer, Double etc), but with a more meaningful values-unit like year or m2. In the GeoDMS primary keys are not explicitly configured. Formatted tables . The presented configuration structure with primary data configured between square brackets is not so user-friendly for editing tables, as the data is not presented in a tabular structure to the editor. A more editor friendly configuration of the same data is presented in the following example: . unit&lt;uint32&gt; Building: NrOfRows = 4 {     attribute&lt;string&gt;      id               := data/element/values[value(id(.) * data/nrAttr, data/element)];     attribute&lt;units/year&gt;  ConstructionYear :=  value(data/element/values[value(id(.) * data/nrAttr + 1, data/element)], units/year);    attribute&lt;units/m2&gt;    Footprint        :=  value(data/element/values[value(id(.) * data/nrAttr + 2, data/element)], units/m2);     container data     {         parameter&lt;uint32&gt; nrAttr := 3;         unit&lt;uint32&gt; element := Range(uint32, 0, nrAttr * #Building)         {            attribute&lt;string&gt; values: [             //  id  , ConstructionYear, Footprint                               'bui001' , '2010' ,'100'               ,'bui002' , '2012' ,'300'               ,'bui003' , '2015' ,'250'               ,'bui004' , '2016' ,'150'             ];         }     } } . With this way of configuring, data can easily be edited as a table. ",
    "url": "/docs/ddl.html#geodms-domain-units",
    
    "relUrl": "/docs/ddl.html#geodms-domain-units"
  },"747": {
    "doc": "ddl",
    "title": "ddl",
    "content": "relational-model-versus-semantic-arrays DDL . In the relation model a DDL (Data Definition Language) is used to define, modify and delete database objects. SQL is one of the most used DDL(Data Definition Language) (as well as DML (Data Manipulation Language) language. The GeoDMS modelling language is a functional programming language. In projects the data structure is defined in a configuration and build up in memory each time a configuration is loaded. Programming is done with expression instead of statements, avoiding changing-state and mutable data. The GeoDMS is not meant to manage objects in external databases. Therefore there are no GeoDMS functions for SQL Alter, Rename and Drop Statements. ",
    "url": "/docs/ddl.html",
    
    "relUrl": "/docs/ddl.html"
  },"748": {
    "doc": "debugging",
    "title": "Debugging GeoDMSRun.exe",
    "content": "In MSVC2019 set GeoDMSRun as startup project. Now open its properties and go to the Configuration Properties » Debugging tab and in Command arguments fill in the full path to the .dms file you want to debug including the item you are interested in to run. ",
    "url": "/docs/debugging.html#debugging-geodmsrunexe",
    
    "relUrl": "/docs/debugging.html#debugging-geodmsrunexe"
  },"749": {
    "doc": "debugging",
    "title": "Debugging GeoDMSGUI.exe",
    "content": "Debugging with MSVC2019 and the GUI is more dynamic compared to debugging GeoDMSRun.exe. First of all make sure you copy GeoDMSGui.exe from the official installation into your output folder ie bin/x64/Release. Next again in Configuration Properties » Debugging at the Command section add $(OutDir)/GeoDmsGui.exe. And at the Command Arguments section fill in /noconfig to make sure an empty GUI is started with no configuration file. ",
    "url": "/docs/debugging.html#debugging-geodmsguiexe",
    
    "relUrl": "/docs/debugging.html#debugging-geodmsguiexe"
  },"750": {
    "doc": "debugging",
    "title": "debugging",
    "content": "From here it is assumed you are able to fully compile the GeoDMSRun.exe executable for batch file processing by following the steps at compiling-the-geodms. Debugging is an essential part of software development, no different for GeoDMS. There are two ways to debug a program, debugging the command line program and debugging the GUI. ",
    "url": "/docs/debugging.html",
    
    "relUrl": "/docs/debugging.html"
  },"751": {
    "doc": "default-classification-scheme",
    "title": "example",
    "content": "unit&lt;uint32&gt; meter := BaseUnit(Meter,float32), cdf  = \"m_dist/ClassBreaks\"; unit&lt;uint8&gt; m_dist: nrofrows = 3 {    attribute&lt;meter&gt; ClassBreaks: DialogType = \"Classification\",       [   0, 1000, 2500];    attribute&lt;uint32&gt; BrushColor:  DialogType = \"BrushColor\",       [rgb(  0,192,  0),rgb( 51,205,  0),rgb(102,217,  0)];    attribute&lt;string&gt; Label: DialogType = \"LabelText\",       ['0 .. 1 km','1 .. 2 km',,'&gt;=2.5 km']; } . ",
    "url": "/docs/default-classification-scheme.html#example",
    
    "relUrl": "/docs/default-classification-scheme.html#example"
  },"752": {
    "doc": "default-classification-scheme",
    "title": "default-classification-scheme",
    "content": "The cdf property is used to configure a default classification for a values-unit. Refer the cdf property to the data-item with the class breaks of a classification. The values unit of this data item need to be the same as the values unit for which the cdf property is configured. If a default classification scheme is configured for a values unit, it is by default applied in the Map view of the geodms-gui for each data item with this values unit. The default classification can be overruled for a data item, by configuring the cdf property for the data item for which the classification scheme needs to be overruled. ",
    "url": "/docs/default-classification-scheme.html",
    
    "relUrl": "/docs/default-classification-scheme.html"
  },"753": {
    "doc": "defaultunit",
    "title": "syntax",
    "content": ". | DefaultUnit(valuetype) | . ",
    "url": "/docs/defaultunit.html#syntax",
    
    "relUrl": "/docs/defaultunit.html#syntax"
  },"754": {
    "doc": "defaultunit",
    "title": "definition",
    "content": "DefaultUnit(valuetype) results in a unit with as value-type the literal valuetype . ",
    "url": "/docs/defaultunit.html#definition",
    
    "relUrl": "/docs/defaultunit.html#definition"
  },"755": {
    "doc": "defaultunit",
    "title": "example",
    "content": "unit&lt;string&gt; unit_str := DefaultUnit('string'); . ",
    "url": "/docs/defaultunit.html#example",
    
    "relUrl": "/docs/defaultunit.html#example"
  },"756": {
    "doc": "defaultunit",
    "title": "defaultunit",
    "content": "unit-functions DefaultUnit . ",
    "url": "/docs/defaultunit.html",
    
    "relUrl": "/docs/defaultunit.html"
  },"757": {
    "doc": "delete-calccaches-that-are-not-recently-used",
    "title": "deleting CalcCaches",
    "content": "CalcCaches contain files that can always be recalculated. Therefore CalcCaches folder (and subfolders) may be deleted without losing relevant data or information. The only disadvantage of deleting a CalcCache is that it will take more time to recalculate requested results. Each project, version and environment makes it’s own CalcCache. It is advised to check regularly if projects for versions/environments are still in use and if not, delete the entire CalcCache. Deleting selections of files from the CalcCache is not adviced. This might corrupt your CalcCache. ",
    "url": "/docs/delete-calccaches-that-are-not-recently-used.html#deleting-calccaches",
    
    "relUrl": "/docs/delete-calccaches-that-are-not-recently-used.html#deleting-calccaches"
  },"758": {
    "doc": "delete-calccaches-that-are-not-recently-used",
    "title": "delete-calccaches-that-are-not-recently-used",
    "content": "CalcCache Managing Files . ",
    "url": "/docs/delete-calccaches-that-are-not-recently-used.html",
    
    "relUrl": "/docs/delete-calccaches-that-are-not-recently-used.html"
  },"759": {
    "doc": "derived-unit",
    "title": "examples",
    "content": "unit&lt;float64&gt; kilometer       := 1000 * meter; unit&lt;float64&gt; MeterPerSecondd := meter / float64(second); . In this example two new values units are configured, both with value type: float64. The kilometer unit is derived from the base-unit meter. A scale factor of 1000 is used (interpreted as float64 value), the meter unit (see base units) is configured with value type float64 also, so no conversion function is needed to result in float64 value type. The MeterPerSecond unit is derived from the two base units: meter and second. As the unit second was configured with a float32 value-type, this unit need to be converted with the float64 conversion function (the div operator does support the division of a float64 and float32 unit or data item). ",
    "url": "/docs/derived-unit.html#examples",
    
    "relUrl": "/docs/derived-unit.html#examples"
  },"760": {
    "doc": "derived-unit",
    "title": "configuration rules",
    "content": ". | Scale factors used in expressions need to be configured before units. A km unit need to be configured as 1000 * m, m * 1000 is not allowed. A centimeter unit need to be configured as 0.01 * meter, meter / 100 is not allowed. | The scale factor is needed to define the metric of a unit, in this metric this value is always interpreted as float64 value. It is therefore not needed (although not forbidden) to configure a scale factor with a value type (configuring 1000.0, 1000, 1000f, 1000d, .. * meter all result in a unit with the same metric). | . ",
    "url": "/docs/derived-unit.html#configuration-rules",
    
    "relUrl": "/docs/derived-unit.html#configuration-rules"
  },"761": {
    "doc": "derived-unit",
    "title": "derived-unit",
    "content": "Derived units are units expressed in base-unit and/or other derived units. The expression of derived units contain multiplications and/or divisions with : . | scale factor(s), constants (1 cm is expressed as 0.01 * meter). | other base or derived units (meter per seconde is expressed as meter / sec). | . Always configure derived units with as expression how they are derived (do not configure them as base unit). This is necessary to make the GeoDMS aware of the metric of the unit, needed to check inconsistencies in calculations with data-item, using these values-unit. ",
    "url": "/docs/derived-unit.html",
    
    "relUrl": "/docs/derived-unit.html"
  },"762": {
    "doc": "desktop-components",
    "title": "desktop",
    "content": "After activating the application, the following window is presented: . In this main window the following components can be distinguished: . ",
    "url": "/docs/desktop-components.html#desktop",
    
    "relUrl": "/docs/desktop-components.html#desktop"
  },"763": {
    "doc": "desktop-components",
    "title": "titlebar",
    "content": ". Titlebar with the opened configuration and GeoDMS version information . ",
    "url": "/docs/desktop-components.html#titlebar",
    
    "relUrl": "/docs/desktop-components.html#titlebar"
  },"764": {
    "doc": "desktop-components",
    "title": "main menu",
    "content": ". Menu bar with main menu options. For a description of all menu options, see section main-menu . ",
    "url": "/docs/desktop-components.html#main-menu",
    
    "relUrl": "/docs/desktop-components.html#main-menu"
  },"765": {
    "doc": "desktop-components",
    "title": "addressbar",
    "content": ". Address bar with the active item. The full name of an item can be copied to or from this address bar. Use the buttons with the left/right arrows to the right to go to the next or previous items. The arrow button down at the left can be used to get a list of all visited tee items. ",
    "url": "/docs/desktop-components.html#addressbar",
    
    "relUrl": "/docs/desktop-components.html#addressbar"
  },"766": {
    "doc": "desktop-components",
    "title": "toolbar",
    "content": ". Toolbar with view type specific tools (see map-view or table-view for a description) and the tools top activate a detailpage. ",
    "url": "/docs/desktop-components.html#toolbar",
    
    "relUrl": "/docs/desktop-components.html#toolbar"
  },"767": {
    "doc": "desktop-components",
    "title": "treeview",
    "content": ". The treeview with the first level items expanded and the active item indicated. See the section treeview for more information. ",
    "url": "/docs/desktop-components.html#treeview",
    
    "relUrl": "/docs/desktop-components.html#treeview"
  },"768": {
    "doc": "desktop-components",
    "title": "detailpage",
    "content": ". The Detail Pages are a set of tabs that present information on the selected Treeview item. These pages will be described in the section detail-pages . ",
    "url": "/docs/desktop-components.html#detailpage",
    
    "relUrl": "/docs/desktop-components.html#detailpage"
  },"769": {
    "doc": "desktop-components",
    "title": "eventlog",
    "content": ". This Eventlog provides progress information on reading, calculating or writing data and presents warnings and error. More information can be found in the eventlog section. ",
    "url": "/docs/desktop-components.html#eventlog",
    
    "relUrl": "/docs/desktop-components.html#eventlog"
  },"770": {
    "doc": "desktop-components",
    "title": "statusbar",
    "content": ". The statusbar presents information on the number of items to be calculated, the memory usage and, if a map view is opened, the coordinates (X, Y and ZoomLevel) in the map. ",
    "url": "/docs/desktop-components.html#statusbar",
    
    "relUrl": "/docs/desktop-components.html#statusbar"
  },"771": {
    "doc": "desktop-components",
    "title": "Fixed versus toggleable components",
    "content": "The titlebar, main menu and statusbar are always visible. The other components can be made invisible (and visible again) from the menu option &gt; View or with an Alt number keyboard combination. ",
    "url": "/docs/desktop-components.html#fixed-versus-toggleable-components",
    
    "relUrl": "/docs/desktop-components.html#fixed-versus-toggleable-components"
  },"772": {
    "doc": "desktop-components",
    "title": "desktop-components",
    "content": "user-guide-geodms-gui - desktop components . ",
    "url": "/docs/desktop-components.html",
    
    "relUrl": "/docs/desktop-components.html"
  },"773": {
    "doc": "detail-pages",
    "title": "introduction",
    "content": "Detail Pages present a detailed overview on the active tree-item. ",
    "url": "/docs/detail-pages.html#introduction",
    
    "relUrl": "/docs/detail-pages.html#introduction"
  },"774": {
    "doc": "detail-pages",
    "title": "generic properties",
    "content": ". This page presents the most relevant property of a Tree Item. The page shows: . | The full name and if configured: label, description. | . And, if the tree item is a data-item: . | A calculation rule (expression) for a data item for which an expression is configured, and if applicable an instantiated from reference. | if applicable a storage for a data item read from a data source, with a ReadOnly indicator and optional a SqlString. | The values unit for the data item, including if applicable the element type, the metric, the range of the values, the cardinality and, if configured, the classification scheme for the values unit. | The value-type, including range information like the range and/or the NrElements | The domain unit for which the item is available, including the element type, if relevant the geographic projection and the range (nr elements) of the domain. | . ",
    "url": "/docs/detail-pages.html#generic-properties",
    
    "relUrl": "/docs/detail-pages.html#generic-properties"
  },"775": {
    "doc": "detail-pages",
    "title": "explore accessible namespaces",
    "content": "This detail page shows the name, description and storage type of the items in the NameSpace of the active Tree Item. ",
    "url": "/docs/detail-pages.html#explore-accessible-namespaces",
    
    "relUrl": "/docs/detail-pages.html#explore-accessible-namespaces"
  },"776": {
    "doc": "detail-pages",
    "title": "all/non-default properties",
    "content": ". This detail page has a toggle state with two options: . | All: all relevant properties for the active tree item are presented. | Only non-default values: all properties with a configured value (not the default value) for the active Tree Item are presented. | . ",
    "url": "/docs/detail-pages.html#allnon-default-properties",
    
    "relUrl": "/docs/detail-pages.html#allnon-default-properties"
  },"777": {
    "doc": "detail-pages",
    "title": "configuration",
    "content": ". The detail page shows the configuration syntax of the active tree item (and if available, it’s subitems). ",
    "url": "/docs/detail-pages.html#configuration",
    
    "relUrl": "/docs/detail-pages.html#configuration"
  },"778": {
    "doc": "detail-pages",
    "title": "source description",
    "content": ". This detail page describes, if relevant, information about all sources used to calculate a data item. If a source property is configured for a data item, this information is presented, of not the data sources names (files) is presented . This detail page has a toggle state with four options: . | Configured: For storages for which a Source property is configured, the contents of these properties are shown. If not, the file/db names are presented. | ReadOnly : All file/db names are presented used to read data from (configured with StorageReadOnly = True). | Non ReadOnly : All file/db names are presented used to write data to. | All : All file/db names are presented. | . ",
    "url": "/docs/detail-pages.html#source-description",
    
    "relUrl": "/docs/detail-pages.html#source-description"
  },"779": {
    "doc": "detail-pages",
    "title": "meta information reference",
    "content": ". For more information on a tree item, an URL property can be configured that refers to a document on the local machine or on the web. A reference to this document is shown in this detail page for the item for which the URL property is configured as well as for each subitem. ",
    "url": "/docs/detail-pages.html#meta-information-reference",
    
    "relUrl": "/docs/detail-pages.html#meta-information-reference"
  },"780": {
    "doc": "detail-pages",
    "title": "detail-pages",
    "content": "user-guide-geodms-gui - detail pages . ",
    "url": "/docs/detail-pages.html",
    
    "relUrl": "/docs/detail-pages.html"
  },"781": {
    "doc": "dialogdata",
    "title": "dialogdata",
    "content": "Used in combination with the dialogtype property to configure information on how to present data-item. If the DialogType property is configured to Map, the DialogData should refer to the data item to which the geography data is configured (feature-attribute). This is needed to inform the GeoDMS how to visualise the geography domain unit of the requested data item. The DialogData property can also be configured for a values-unit describing the how-to-configure-a-coordinate-system used for map views. In that case the DialogData can be configured with one or multiple attribute(s) referring to geographic information. These attribute will then be grouped into a background layer that is by default presented in each map view. If the feature attribute is called (G)(g)eometry, this property does not have to be configured (since version 7.206). ",
    "url": "/docs/dialogdata.html",
    
    "relUrl": "/docs/dialogdata.html"
  },"782": {
    "doc": "dialogtype",
    "title": "dialogtype",
    "content": "Together with the dialogdata property, this property defines how data is visualised. The following options are available: . | Classification: Defines a ClassBreaks item of a classification scheme. Configure this option for ClassBreaks items, to inform the GeoDMS the attribute is used for class boundaries of classifications and can be viewed/modified with the Classification and Palette editor in the GeoDMS GUI. See ClassBreaks item in a classification scheme for more information on ClassBreaks items. | Palette: Defines a palette item of a classification scheme. Configure this option for palette items, to inform the GeoDMS the attribute is used for the definition of colors in classifications and can be viewed/modified with the (Classification and) Palette editor in the GeoDMS GUI. See Visualisation style items in a classification scheme for more information on palette items. | Labels: Defines a labels item of a classification scheme. Configure this option for labels items, to inform the GeoDMS the attribute is used for the labels in classifications and can be viewed/modified with the (Classification and) Palette editor in the GeoDMS GUI. See Labels item in a classification scheme for more information on labels items. | Map: This option is configured for domain units, to inform the GeoDMS that all data items with this domain unit can be visualised in a map view. The DialogData property should refer to the attribute with the geographical data configured. If the feature-attribute is called (G)(g)eometry, this property does not have to be configured (since version 7.206). | SymbolSize: Defines the size in pixels for point data in the GeoDMS map view. See visualisation-style or point-visualisation. | SymbolWorldSize: Defines the worldsize in the coordinate system unit for point data in the GeoDMS map view. See visualisation-style or point-visualisation. | SymbolColor: Defines the color in rgb values for point data in the GeoDMS map view. See visualisation-style or point-visualisation. | SymbolIndex: Defines the index value in the font for point data in the GeoDMS map view. See visualisation-style or point-visualisation. | SymbolFont: Defines the font for point data in the GeoDMS map view. See visualisation-style or point-visualisation. | PenWidth: Defines the width in pixels for arc data in the GeoDMS map view. See visualisation-style or arc-visualisation. | PenWorldWidth: Defines the worldwidth in the coordinate system unit for arc data in the GeoDMS map view. See visualisation-style or arc-visualisation. | PenColor: Defines the color in rgb values for arc data in the GeoDMS map view. See visualisation-style or arc-visualisation. | PenStyle: Defines the style for arc data in the GeoDMS map view.See visualisation-style or arc-visualisation. | BrushColor: Defines the color in rgb values for the interior of polyon data in the GeoDMS map view. See visualisation-style or polygon-visualisation. | HatchStyle: Defines the style for the interior of polyon data in the GeoDMS map view. See visualisation-style or polygon-visualisation. | LabelText: Defines the labels as strings for point and polygon data in the GeoDMS map view. See visualisation-style or label-visualisation. | LabelSize: Defines the size in pixels for labels in the GeoDMS map view. See visualisation-style or label-visualisation. | LabelWorldSize: Defines the worldsize in the coordinate system unit for labels in the GeoDMS map view. See visualisation-style or label-visualisation. | LabelColor: Defines the color in rgb values for labels in the GeoDMS map view. See visualisation-style or label-visualisation. | LabelFont: Defines the font for labels in the GeoDMS map view. See visualisation-style or label-visualisation. | MinPixSize: Defines the lower limit of the scale range to visualise a layer. See scale-dependent-visualisation. | MaxPixSize: Defines the upper limit of the scale range to visualise a layer. See scale-dependent-visualisation. | . ",
    "url": "/docs/dialogtype.html",
    
    "relUrl": "/docs/dialogtype.html"
  },"783": {
    "doc": "dijkstra-examples",
    "title": "example",
    "content": "unit&lt;uint64&gt; Dijkstra_cut :=     dijkstra_m64('bidirectional(link_flag);startPoint(Node_rel);endPoint(Node_rel) ;cut(OrgZone_max_imp);od:OrgZone_rel,DstZone_rel'        , NetworkSpec/OrgToDest/impedance        , NetworkSpec/OrgToDest/F1        , NetworkSpec/OrgToDest/F2        , NetworkSpec/OrgToDest/LinkSet/roadtype  != classifications/OSM/roadtype/V/motorway   &amp;&amp; NetworkSpec/OrgToDest/LinkSet/roadtype != classifications/OSM/roadtype/V/motorway_link  // motor way en motor way link, snelwegen zijn niet bidirectional        , NetworkSpec/OrgToDest/nr_orgNode        , NetworkSpec/OrgToDest/nr_destNode        , MaxTravelTime    ), FreeData = \"false\" {    attribute&lt;int32&gt; Inhabitants           := dest/Inhabitants_2019[DstZone_rel];    attribute&lt;int32&gt; Inhabitants_org (org) := sum(Inhabitants, OrgZone_rel); } . unit&lt;uint64&gt; Dijkstra_fullOD := //calculation a full origin-destination matrix    dijkstra_m64('bidirectional(link_flag);startPoint(Node_rel);endPoint(Node_rel) ;od:impedance,OrgZone_rel,DstZone_rel'        , NetworkSpec/OrgToDest/impedance        , NetworkSpec/OrgToDest/F1        , NetworkSpec/OrgToDest/F2        , NetworkSpec/OrgToDest/LinkSet/roadtype  != classifications/OSM/roadtype/V/motorway  &amp;&amp; NetworkSpec/OrgToDest/LinkSet/roadtype != classifications/OSM/roadtype/V/motorway_link  // motor way en motor way link, snelwegen zijn niet bidirectional        , NetworkSpec/OrgToDest/nr_orgNode        , NetworkSpec/OrgToDest/nr_destNode    ), FreeData = \"false\" {    attribute&lt;string&gt; impedance_min := string(round(impedance / 60f));  //Convert the impedance from seconds to minutes, round it off, and store it as a string value.    unit&lt;uint32&gt; Matrix_Array := org    {        attribute&lt;string&gt; org_name           := org/label;        attribute&lt;string&gt; impedance_min_list := AsList(impedance_min, ';', OrgZone_rel);    }    unit&lt;uint32&gt; Header : nrofrows = 1    {        attribute&lt;string&gt; values := AsList(dest/name, ';', const(0[Header],dest));    }    unit&lt;uint32&gt; Matrix_met_header := union_unit(Header, Matrix_Array)  //This unit can easily be exported to csv and used in other applications.    {        attribute&lt;string&gt; org_name := union_data(., const('',Header), Matrix_Array/org_name);        attribute&lt;string&gt; values  := union_data(., Header/values, Matrix_Array/impedance_min_list) ;    } } . unit&lt;uint64&gt; Dijkstra_limit :=    dijkstra_m64('bidirectional(link_flag);startPoint(Node_rel):max_imp ;endPoint(Node_rel);limit(OrgZone_max_mass,DstZone_mass)'        , NetworkSpec/OrgToDest/impedance        , NetworkSpec/OrgToDest/F1        , NetworkSpec/OrgToDest/F2        , NetworkSpec/OrgToDest/LinkSet/roadtype  != classifications/OSM/roadtype/V/motorway   &amp;&amp; NetworkSpec/OrgToDest/LinkSet/roadtype != classifications/OSM/roadtype/V/motorway_link  // motor way en motor way link, snelwegen zijn niet bidirectional        , NetworkSpec/OrgToDest/nr_orgNode        , NetworkSpec/OrgToDest/nr_destNode        , MaxInhabitants, dest/Inhabitants_2019[float32]    ); attribute&lt;float32&gt; DistanceToNearestDest (NodeSet) :=     dijkstra_s('bidirectional(link_flag);startPoint(Node_rel)'        , LinkSet/length        , LinkSet/F1        , LinkSet/F2        , NetwerkSpec/OrgToDest/LinkSet/wegtype  != classifications/OSM/wegtype/v/motorway  &amp;&amp; NetwerkSpec/OrgToDest/LinkSet/wegtype != classifications/OSM/wegtype/v/motorway_link        , NetwerkSpec/OrgToDest/nr_destNode    ); . ",
    "url": "/docs/dijkstra-examples.html#example",
    
    "relUrl": "/docs/dijkstra-examples.html#example"
  },"784": {
    "doc": "dijkstra-examples",
    "title": "dijkstra-examples",
    "content": "configuration-examples Dijkstra examples . ",
    "url": "/docs/dijkstra-examples.html",
    
    "relUrl": "/docs/dijkstra-examples.html"
  },"785": {
    "doc": "direct_index",
    "title": "direct_index",
    "content": "to be added. ",
    "url": "/docs/direct_index.html",
    
    "relUrl": "/docs/direct_index.html"
  },"786": {
    "doc": "disablestorage",
    "title": "disablestorage",
    "content": "The DisableStorage property can be configured to True, indicating a data-item will not be read from or written to the configured storage. The DisableStorage is usually configured for calculated data items, not to be stored, but configured in a container for which a storage is configured. The default value for this property is: False . ",
    "url": "/docs/disablestorage.html",
    
    "relUrl": "/docs/disablestorage.html"
  },"787": {
    "doc": "disaggregation",
    "title": "extensive quantities",
    "content": ". | should adhere to the pycnophylactic principle (further: pp), i.e. $\\forall r: \\sum\\limits_{i} z_i * q_i^r = Z_r$ | . | can be done using si as proxy values. Then $z_i := \\sum_{\\lim_{r}} Z_r * \\frac{s_i * q_i^r}{\\sum_{\\lim_{j}} s_j * q_j^r}$; which distributes Zr proportional to si. The pp is guaranteed to match if: . | all qir are discrete (thus each i relates to a single aggregate) and | for each r: ${\\sum\\limits_{j} s_j * q_j^r} &gt; 0 \\vee {Z_r = 0}$ (thus each nonzero aggregate relates to at least one i ). | . | . | When qir is discrete, the former can be reformualated to $z_i := Z_{r(i)} * \\frac{s_i}{\\sum\\limits_{j: r(j) = r(i)} s_j}$ which can be done with the GeoDMS function scalesum(s, r, Z). | . | can be smoothed out by convolution when disaggregating to proxies with approximate locations, such as point-related data, by using the potential. | . | can be made subject to minimum (zero?) and maximum values for zi, by transforming and capping the result of scalesum. To comply to the pp, an iterative fitting factor fr, initially set to 1, can be used. Capping in GeoDMS: min_elem(z, z_max), max_elem (z, z_min), median(z, interval) | . | can be combined with disaggregation of other quantities such that each unit i is allocated once (iterative-proportional-fitting, Continuous Allocation, or discrete-allocation). | . | can be done by maximizing smoothness of the zi to adhere to Tobler’s first law of geography, aka smooth-pycnophylactic-interpolation. | . ",
    "url": "/docs/disaggregation.html#extensive-quantities",
    
    "relUrl": "/docs/disaggregation.html#extensive-quantities"
  },"788": {
    "doc": "disaggregation",
    "title": "intensive quantities",
    "content": ". | can be done using homogeneous distribution (choropleth mapping), which can be done in with the GeoDMS function lookup(r, Z). | can be done using a incidence proxy ci, aka dasymmetric mapping, in GeoDMS: “c ? Z[r] : 0[valuesunit](valuesunit)(Z)\". | . ",
    "url": "/docs/disaggregation.html#intensive-quantities",
    
    "relUrl": "/docs/disaggregation.html#intensive-quantities"
  },"789": {
    "doc": "disaggregation",
    "title": "disaggregation",
    "content": "Disaggegation is the process of estimating a quantity zi for a finer grained domain i, given quantity Zr for a coarser domain r and an incidence relation qir that indicates the fraction of unit i that belongs to region r such that qir ≥ 0 and $\\forall i: \\sum\\limits_{r} q_i^r = 1$. In most cases, qir is discrete, thus either 0 or 1 and one can define r(i) such that qir(i) = 1. The reverse of disaggregation is aggregation-functions. Quantitative modelling of attribute values can often be considered as some sort of (combination of ) disaggregation of known aggregates, restrictions and other proxy values. zi can be an extensive (additive) quantity of i or an intensive quantity (such as discrete class values or density measures). ",
    "url": "/docs/disaggregation.html",
    
    "relUrl": "/docs/disaggregation.html"
  },"790": {
    "doc": "discrete-allocation-example",
    "title": "example",
    "content": "container allocation {   unit&lt;fpoint&gt; TestCoords: Range = \"[{300000, 0}, {625000, 280000})\";   unit&lt;spoint&gt; DomainGrid := range(         gridset(TestCoords, point(  -500f, 500f, TestCoords), point(625000f, 10000f, TestCoords), spoint)       , point(0s, 0s)       , point(6s, 6s)     )     ,   DialogType = \"Map\";      container source   {      unit&lt;int32&gt; EurM2:   range    = \"[int32, 0, 20)\";      unit&lt;uint8&gt; lu_type: NrOfRows = 3      {         attribute&lt;string&gt;  Name:           ['Living', 'Working', 'Nature'];         attribute&lt;string&gt;  PartioningName: ['Living', 'Working', 'Nature'];         attribute&lt;lu_type&gt; partioning    := id(lu_type);       }       attribute&lt;lu_type&gt; landuse (DomainGrid):       [        2, 2, 2, 1, null, null,        2, 2, 0, 0, null, 1,        2, 0, 0, 1,    1, 1,        2, 0, 0, 0,    1, 1,        2, 0, 0, 1, null, 1,        2, 2, 2, 2,    2, 2       ];       container Suitability       {          attribute&lt;EurM2&gt; Living (DomainGrid):           [           1,  2,  5, 4,  3, -1,           2,  5,  8, 9,  7, 3,           4, 10, 12,13, 12, 6,           5, 11, 13,14, 12, 6,           4,  9,  9, 5,  3, 2,           2,  2,  4, 3,  1, 1          ];          attribute&lt;EurM2&gt; Working (DomainGrid):          [           1, 1, 2, 3,  4, -6,           2, 3, 4, 6,  8,  9,           2, 4, 9,11, 12, 10,           1, 3, 5, 9, 10,  6,           2, 4, 5, 5,  3,  2,           1, 1, 2, 1,  1,  1          ];          attribute&lt;EurM2&gt; Nature (DomainGrid):          [           3, 3, 3, 2, 2, -2,           3, 3, 2, 2, 2, 2,           3, 2, 1, 1, 1, 1,           3, 2, 1, 1 ,1, 2,           3, 3, 2, 1, 2, 2,           3, 3, 3, 3, 3, 3          ];       }       container regMaps       {          unit&lt;uint8&gt; p1: NrOfRows = 1;          unit&lt;uint8&gt; p2: NrOfRows = 2;          attribute&lt;p1&gt; p1Map (DomainGrid) := const(0, DomainGrid, p1);          attribute&lt;p2&gt; p2Map (DomainGrid) := pointRow(id(DomainGrid)) &lt; 4s ? 0[p2] : 1[p2];       }       container claim_sources       {          unit&lt;float32&gt; Meter := BaseUnit('m', float32);          unit&lt;float32&gt; Ha    := 10000.0 * Meter * Meter;          container p1          {             attribute&lt;Ha&gt; Nature_min (regMaps/p1): [12];             attribute&lt;Ha&gt; Nature_max (regMaps/p1): [20];             attribute&lt;Ha&gt; Living_min (regMaps/p1):  [5];             attribute&lt;Ha&gt; Living_max (regMaps/p1):  [9];          }          container p2          {             attribute&lt;Ha&gt; Working_min (regMaps/p2):  [6,2];             attribute&lt;Ha&gt; Working_max (regMaps/p2): [10,4];          }       }       parameter&lt;float32&gt; nrHaPerCel := 1[claim_sources/Ha];       container claims_min       {          attribute&lt;uint32&gt; Living  (regMaps/p1) := uint32(claim_sources/p1/Living_min  / nrHaPerCel);          attribute&lt;uint32&gt; Working (regMaps/p2) := uint32(claim_sources/p2/Working_min / nrHaPerCel);          attribute&lt;uint32&gt; Nature  (regMaps/p1) := uint32(claim_sources/p1/Nature_min  / nrHaPerCel);       }       container claims_max       {          attribute&lt;uint32&gt; Living  (regMaps/p1) := uint32(claim_sources/p1/Living_max  / nrHaPerCel);          attribute&lt;uint32&gt; Working (regMaps/p2) := uint32(claim_sources/p2/Working_max / nrHaPerCel);          attribute&lt;uint32&gt; Nature  (regMaps/p1) := uint32(claim_sources/p1/Nature_max  / nrHaPerCel);       }       container regionSets       {          attribute&lt;regMaps/p1&gt; Nature  (DomainGrid) := regMaps/p1Map;          attribute&lt;regMaps/p1&gt; Living  (DomainGrid) := regMaps/p1Map;          attribute&lt;regMaps/p2&gt; Working (DomainGrid) := regMaps/p2Map;       }       unit&lt;uint16&gt; AtomicRegions := overlay(lu_type/PartioningName, DomainGrid, regionSets);       attribute&lt;Bool&gt; InRegio (DomainGrid):       [        True, True, True, True, False, True,        True, True, True, True, False, True,        True, True, True, True, True,  True,        True, True, True, True, True,  True,        True, True, True, True, False, True,        True, True, True, True, True,  True       ];       attribute&lt;Bool&gt; FreeLand (DomainGrid) := InRegio;       container Compacted       {          unit&lt;uint32&gt; ADomain := select_with_org_rel(FreeLand = True), label = \"allocation domain\";            attribute&lt;ADomain&gt; BaseGrid (DomainGrid) := invert(ADomain/org_rel);            container SuitabilityMaps          {             attribute&lt;EurM2&gt; Living  (ADomain) := source/Suitability/Living[ADomain/nr_orgEntity];             attribute&lt;EurM2&gt; Working (ADomain) := source/Suitability/Working[ADomain/nr_orgEntity];             attribute&lt;EurM2&gt; Nature  (ADomain) := source/Suitability/Nature[ADomain/nr_orgEntity];          }          attribute&lt;AtomicRegions&gt; AtomicRegionMap (ADomain) := AtomicRegions/UnionData[ADomain/nr_orgEntity];       }       parameter&lt;EurM2&gt; treshold := 0[EurM2];       container FeasibleSolution;   }   container allocate_discrete := discrete_alloc(          source/lu_type/name         ,source/Compacted/ADomain         ,source/Compacted/SuitabilityMaps         ,source/lu_type/partioning         ,source/lu_type/PartioningName         ,source/AtomicRegions         ,source/Compacted/AtomicRegionMap         ,source/claims_min         ,source/claims_max         ,source/treshold         ,source/FeasibleSolution      )    {       attribute&lt;Source/lu_type&gt; alloc (DomainGrid) := landuse[Source/Compacted/BaseGrid];    } } . ",
    "url": "/docs/discrete-allocation-example.html#example",
    
    "relUrl": "/docs/discrete-allocation-example.html#example"
  },"791": {
    "doc": "discrete-allocation-example",
    "title": "result",
    "content": "The resulting data for this example: . | alloc | . | 2 | 2 | 2 | 1 | null | null | . | 2 | 2 | 0 | 0 | null | 1 | . | 2 | 0 | 0 | 1 | 1 | 1 | . | 2 | 0 | 0 | 0 | 1 | 1 | . | 2 | 0 | 0 | 1 | null | 1 | . | 2 | 2 | 2 | 2 | 2 | 2 | . DomainGrid, nr of rows = 6, nr of cols = 6 . ",
    "url": "/docs/discrete-allocation-example.html#result",
    
    "relUrl": "/docs/discrete-allocation-example.html#result"
  },"792": {
    "doc": "discrete-allocation-example",
    "title": "discrete-allocation-example",
    "content": "configuration-examples Discrete Allocation . The discrete allocation is used to allocate land use types to grid cells with the allocation-functions function. The example presents how to configure all argument and the function itself. ",
    "url": "/docs/discrete-allocation-example.html",
    
    "relUrl": "/docs/discrete-allocation-example.html"
  },"793": {
    "doc": "discrete-allocation",
    "title": "discrete-allocation",
    "content": "Discrete Allocation is the Allocation of resources to a set of categories. In the context of the GeoDMS and its applications it is defined as finding the Xi**j &gt;  = 0 for each land unit i and land use type j that solve the following Semi Assignment Problem for given suitabilities Si**j: . $max \\sum\\limits_{ij}{X_{ij} S_{ij}} \\ subject to . for each claim j: $ClaimMin_j \\le \\sum\\limits_{i}{X_{ij}} \\le ClaimMax_j$ and for each land unit i: $\\sum\\limits_{j}{X_{ij}} = 1$ . Thus Xij represents whether land unit i is allocated to land use type j and only one single allocation per land unit is allowed. It is used to find the allocation of land use to land units that maximizes total suitability when endogenous interactions are disregarded. Discrete Allocation can also be used to aggregate a discrete map (aka Downsampling) to a larger zones or raster-cells while keeping the total area’s constant or within bounds by using the amount of each land use type in or near an aggregate unit as suitability for that type and the total areas as claims (rounded down as minimum claim and rounded up as maximum claim). A script called BalancedClassAgggr.dms will become available in our code examples. When applied iteratively and by incorporation of dynamic neighbourhood enrichment, one can simulate land use change caused by natural processes while minimum demands and/or maximum land use restrictions (as specified by the claims) are maintained. When applied iteratively with a feedback from future (neigbourhood dependend) yields on the current suitability, one can model a time consistent market equilibrium. In the GeoDms, discrete allocation can be done with the function-discrete-alloc. In luisa, the suitabilities for discrete allocation are called Transition Potentials and there are three Model Traits for calculating them: . | [[Mnl100]] (the default and mostly used) | [[Split100]] | [[Linear100]] | . ",
    "url": "/docs/discrete-allocation.html",
    
    "relUrl": "/docs/discrete-allocation.html"
  },"794": {
    "doc": "dissolve-(merge-geometries)",
    "title": "example",
    "content": "container dissolve {    unit&lt;float32&gt; meter    := baseunit('meter', float32);    unit&lt;fpoint&gt;  point_rd_base;    unit&lt;fpoint&gt;  point_rd :=  range(point_rd_base, point(300000[meter],0[meter]), point(625000[meter],280000[meter]));    unit&lt;uint32&gt; municipality    : StorageName      = \"%SourceDataDir%/CBS/2017/gem_2017.shp\"    , StorageType      = \"gdal.vect\"    , StorageReadOnly  = \"True\"   {       attribute&lt;point_rd&gt; geometry (polygon);       attribute&lt;string&gt;   name;       attribute&lt;string&gt;   regionname;       attribute&lt;region&gt;   region_rel := rlookup(regionname, region /values);    }    unit&lt;uint32&gt; region := unique(municipality/regionname)    {     attribute&lt;point_rd&gt; geometry (polygon) := partitioned_union_polygon(ipolygon(municipality/geometry), municipality/region_rel)[point_rd];    } } . ",
    "url": "/docs/dissolve-(merge-geometries).html#example",
    
    "relUrl": "/docs/dissolve-(merge-geometries).html#example"
  },"795": {
    "doc": "dissolve-(merge-geometries)",
    "title": "explanation",
    "content": "The example presents two domains: municipality and region. A relation is configured (region_rel) relating the municipality domain unit to the region domain. The actual dissolving is done in the bold line. The partitioned_union_polygon-(dissolve-by-attribute) is used to dissolve the geometries of a municipality for a region. The ipolygon conversion function is used as these vector functions only work on integer coordinates. The casting back to [point_rd] at the end of the expression is used to convert the integer coordinates back to the point_rd values-unit. ",
    "url": "/docs/dissolve-(merge-geometries).html#explanation",
    
    "relUrl": "/docs/dissolve-(merge-geometries).html#explanation"
  },"796": {
    "doc": "dissolve-(merge-geometries)",
    "title": "dissolve-(merge-geometries)",
    "content": "configuration-examples Dissolve . Dissolving is the process of merging detailed polygon geometries in larger polygon geometries by removing interior segments. In the GeoDMS this can also be done based on a relation to make polygons for each entry of the domain-unit of this relational attribute. ",
    "url": "/docs/dissolve-(merge-geometries).html",
    
    "relUrl": "/docs/dissolve-(merge-geometries).html"
  },"797": {
    "doc": "dist",
    "title": "syntax",
    "content": ". | dist(destination, origin) | . ",
    "url": "/docs/dist.html#syntax",
    
    "relUrl": "/docs/dist.html#syntax"
  },"798": {
    "doc": "dist",
    "title": "definition",
    "content": "dist(destination, origin) calculates the distance (as the crow flies) between origin and destination points of the same domain-unit. The resulting data-item has a float32 value-type without metric. Use the value function to convert the result to the requested values-unit. ",
    "url": "/docs/dist.html#definition",
    
    "relUrl": "/docs/dist.html#definition"
  },"799": {
    "doc": "dist",
    "title": "description",
    "content": "Use the sqrdist function if only the distance order is relevant as the sqrdist function calculates faster. ",
    "url": "/docs/dist.html#description",
    
    "relUrl": "/docs/dist.html#description"
  },"800": {
    "doc": "dist",
    "title": "applies to",
    "content": ". | destination and origin are data-item with Point value type | . ",
    "url": "/docs/dist.html#applies-to",
    
    "relUrl": "/docs/dist.html#applies-to"
  },"801": {
    "doc": "dist",
    "title": "conditions",
    "content": "The values unit and domain unit of the destination and origin argument must match. ",
    "url": "/docs/dist.html#conditions",
    
    "relUrl": "/docs/dist.html#conditions"
  },"802": {
    "doc": "dist",
    "title": "example",
    "content": "attribute&lt;meter&gt; distOD (ADomain) := value(dist(destination, origin), meter); . | destination | origin | distOD | . | {401331, 115135} | {401331, 115135} | 0 | . | {399501, 111793} | {399476, 111803} | 26.9 | . | {399339, 114883} | {399289, 114903} | 53.9 | . | {401804, 111323} | {401729, 111353} | 80.8 | . | {398796, 111701} | {398696, 111741} | 107.7 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/dist.html#example",
    
    "relUrl": "/docs/dist.html#example"
  },"803": {
    "doc": "dist",
    "title": "see also",
    "content": ". | sqrdist | . ",
    "url": "/docs/dist.html#see-also",
    
    "relUrl": "/docs/dist.html#see-also"
  },"804": {
    "doc": "dist",
    "title": "extra: distance between points of different domains",
    "content": "If you want to calculate the distance to the nearest point between to different domain, the following example script can be used. unit&lt;uint32&gt; from_domain := plan { attribute&lt;rdc_meter&gt; geometry := plan/geometry; attribute&lt;to_domain&gt; to_domain_rel := connect(to_domain/geometry, geometry); attribute&lt;rdc_meter&gt; geometry_to := to_domain/geometry[to_domain_rel]; attribute&lt;meter&gt; dist := value(dist(geometry_to, geometry), meter); } unit&lt;uint32&gt; to_domain := city { attribute&lt;rdc_meter&gt; geometry := city/geometry; } . ",
    "url": "/docs/dist.html#extra-distance-between-points-of-different-domains",
    
    "relUrl": "/docs/dist.html#extra-distance-between-points-of-different-domains"
  },"805": {
    "doc": "dist",
    "title": "dist",
    "content": "geometric-functions dist(ance) . ",
    "url": "/docs/dist.html",
    
    "relUrl": "/docs/dist.html"
  },"806": {
    "doc": "dist2",
    "title": "syntax",
    "content": ". | dist2(point_data_item, values unit) | . ",
    "url": "/docs/dist2.html#syntax",
    
    "relUrl": "/docs/dist2.html#syntax"
  },"807": {
    "doc": "dist2",
    "title": "definition",
    "content": "dist2(point_data_item, values unit) results in a new attribute of a grid-domain with the distances to the point_data_item argument. The values unit argument is the values-unit of the resulting attribute. ",
    "url": "/docs/dist2.html#definition",
    
    "relUrl": "/docs/dist2.html#definition"
  },"808": {
    "doc": "dist2",
    "title": "description",
    "content": "The dist2 function is mainly used in the configuration of a kernel, used for potential calculations. ",
    "url": "/docs/dist2.html#description",
    
    "relUrl": "/docs/dist2.html#description"
  },"809": {
    "doc": "dist2",
    "title": "applies to",
    "content": ". | data-item, usually a parameter, point_data_item with Point value-type | unit values unit with numeric value type | . ",
    "url": "/docs/dist2.html#applies-to",
    
    "relUrl": "/docs/dist2.html#applies-to"
  },"810": {
    "doc": "dist2",
    "title": "example",
    "content": "unit&lt;spoint&gt; pot3Range: range = \"[{-1, -1}, {2, 2})\" { attribute&lt;uint32&gt; distMatr := dist2(point(0s, 0s, pot3Range), uint32); }; . pot3Range/distMatr | | |——-:|—-:|—-:| 2 |1|2| 1 |0|1| 2 |1|2| . domain pot3Range, nr of rows = 3, nr of cols = 3 . ",
    "url": "/docs/dist2.html#example",
    
    "relUrl": "/docs/dist2.html#example"
  },"811": {
    "doc": "dist2",
    "title": "dist2",
    "content": "grid-functions dist2 . ",
    "url": "/docs/dist2.html",
    
    "relUrl": "/docs/dist2.html"
  },"812": {
    "doc": "distances-in-latlong-coordinate-system",
    "title": "example haversine function",
    "content": "template DistanceMtrFromDegrees { // begin case parameters attribute&lt;float64&gt; lat1_degrees (NL); attribute&lt;float64&gt; lat2_degrees (NL); attribute&lt;float64&gt; lon1_degrees (NL); attribute&lt;float64&gt; lon2_degrees (NL); // end case parameters attribute&lt;float64&gt; lat1_radian (NL) := lat1_degrees * pi() / 180.0; attribute&lt;float64&gt; lat2_radian (NL) := lat2_degrees * pi() / 180.0; attribute&lt;float64&gt; lon1_radian (NL) := lon1_degrees * pi() / 180.0; attribute&lt;float64&gt; lon2_radian (NL) := lon2_degrees * pi() / 180.0;           ` attribute&lt;float64&gt; deltaLon_radian (NL) := lon1_radian - lon2_radian;` attribute&lt;float64&gt; deltaLat_radian (NL) := lat1_radian - lat2_radian;` attribute&lt;float64&gt; a               (NL) :=  sqr(sin(deltaLat_radian/2d)) + (((cos(lat1_radian) * cos(lat2_radian))) * sqr(sin(deltaLon_radian/2d))); attribute&lt;units/meter&gt; distance    (NL) := (2d * 6371000d * atan(sqrt(a) / (sqrt(1d - a))))[Units/Meter]; } . ",
    "url": "/docs/distances-in-latlong-coordinate-system.html#example-haversine-function",
    
    "relUrl": "/docs/distances-in-latlong-coordinate-system.html#example-haversine-function"
  },"813": {
    "doc": "distances-in-latlong-coordinate-system",
    "title": "distances-in-latlong-coordinate-system",
    "content": "configuration-examples Distances in LatLong coordinate system . Great-circle distances between two points on a sphere given their longitudes and latitudes can be calculated with the haversine formula. The following example shows an implementation in the GeoDMS configuration. We thank PBL for making this example available. ",
    "url": "/docs/distances-in-latlong-coordinate-system.html",
    
    "relUrl": "/docs/distances-in-latlong-coordinate-system.html"
  },"814": {
    "doc": "distinct",
    "title": "single attribute selection",
    "content": "Assume the following SQL Statement: . Select Distinct Town From Appartment . This statement can be applied on our relation model, resulting in the following data: . For a SQL Distinct statement in the GeoDMS a new domain-unit needs to be configured with the unique function. This function generates a subitem called Values, containing the unique occurrences of it’s argument, in alphabetic order. GeoDMS configuration (the Appartment domain unit is configured in a src container): . unit&lt;uint32&gt; Town := unique(src/Appartment/Town); . ",
    "url": "/docs/distinct.html#single-attribute-selection",
    
    "relUrl": "/docs/distinct.html#single-attribute-selection"
  },"815": {
    "doc": "distinct",
    "title": "multiple attributes selection",
    "content": "Assume the following SQL Statement: . Select Distinct Town, ZipCode From Appartment . The GeoDMS unique function does not support multiple argument. Therefore concatenate the Town and ZipCode attributes, see the example: . unit&lt;uint32&gt; TownZipCode := unique(src/Appartment/Town + '_' + src/Appartment/ZipCode); . ",
    "url": "/docs/distinct.html#multiple-attributes-selection",
    
    "relUrl": "/docs/distinct.html#multiple-attributes-selection"
  },"816": {
    "doc": "distinct",
    "title": "distinct",
    "content": "Relational model versus Semantic arrays dml . The Select Distinct … From … statement is used to select unique occurrences of one or more attribute from a table. ",
    "url": "/docs/distinct.html",
    
    "relUrl": "/docs/distinct.html"
  },"817": {
    "doc": "district",
    "title": "syntax",
    "content": ". | district(grid_data_item) | . ",
    "url": "/docs/district.html#syntax",
    
    "relUrl": "/docs/district.html#syntax"
  },"818": {
    "doc": "district",
    "title": "definition",
    "content": "The district function is used to find adjacent (horizontal &amp; vertical, not diagonal) grid cell values with the same values. district(grid_data_item) results in a new uint32 domain-unit, with a generated subitem: Districts. If two adjacent cells have the same value in the grid_data_item argument, they will get the same district value. The Districts attribute has the the same domain unit as the grid_data_item and contains a relation to each district (zero based). ",
    "url": "/docs/district.html#definition",
    
    "relUrl": "/docs/district.html#definition"
  },"819": {
    "doc": "district",
    "title": "description",
    "content": "In earlier versions of the GeoDMS adjacency was also defined in diagonal directions, the district_8 function defines adjacent also in diagonal directions. ",
    "url": "/docs/district.html#description",
    
    "relUrl": "/docs/district.html#description"
  },"820": {
    "doc": "district",
    "title": "applies to",
    "content": ". | attribute grid_data_item with uin8 or unit32 value-type | . ",
    "url": "/docs/district.html#applies-to",
    
    "relUrl": "/docs/district.html#applies-to"
  },"821": {
    "doc": "district",
    "title": "conditions",
    "content": "The domain unit of the grid_data_item argument must be a Point value type of the group CanBeDomainUnit. ",
    "url": "/docs/district.html#conditions",
    
    "relUrl": "/docs/district.html#conditions"
  },"822": {
    "doc": "district",
    "title": "example",
    "content": "unit&lt;uint32&gt; unit_district := district(sourcegrid); . sourcegrid | | | |—–:|—–:|—–:|—–:|—–:| null | 0 | 0 | 0 | 1 | 0 | 0 | 2 | 1 | 1 | 0 | 2 | 3 | 3 | 3 | 1 | 1 | 1 | 3 | 0 | 0 | 1 | 0 | 1 | 3 | . Table GridDomain, nr of rows = 5, nr of cols = 5 . unit_district/districts | | | |———:|——:|——:|——:|——:| null | 0 | 0 | 0 | 1 | 0 | 0 | 2 | 1 | 1 | 0 | 3 | 4 | 4 | 4 | 5 | 5 | 5 | 4 | 6 | 7 | 5 | 8 | 9 | 10| . Table GridDomain, nr of rows = 5, nr of cols = 5 . ",
    "url": "/docs/district.html#example",
    
    "relUrl": "/docs/district.html#example"
  },"823": {
    "doc": "district",
    "title": "see also",
    "content": ". | district_8 | . ",
    "url": "/docs/district.html#see-also",
    
    "relUrl": "/docs/district.html#see-also"
  },"824": {
    "doc": "district",
    "title": "district",
    "content": "grid-functions district . ",
    "url": "/docs/district.html",
    
    "relUrl": "/docs/district.html"
  },"825": {
    "doc": "district_8",
    "title": "syntax",
    "content": ". | district_8(grid_data_item) | . ",
    "url": "/docs/district_8.html#syntax",
    
    "relUrl": "/docs/district_8.html#syntax"
  },"826": {
    "doc": "district_8",
    "title": "definition",
    "content": "The district_8 function is a variant of the district function . The only difference is that adjacent is defined as horizontal, vertical and diagonal. ",
    "url": "/docs/district_8.html#definition",
    
    "relUrl": "/docs/district_8.html#definition"
  },"827": {
    "doc": "district_8",
    "title": "district_8",
    "content": "grid-functions district_8 . ",
    "url": "/docs/district_8.html",
    
    "relUrl": "/docs/district_8.html"
  },"828": {
    "doc": "div",
    "title": "syntax",
    "content": ". | div(a, b) | a / b | . ",
    "url": "/docs/div.html#syntax",
    
    "relUrl": "/docs/div.html#syntax"
  },"829": {
    "doc": "div",
    "title": "definition",
    "content": "div(a, b) or a / b results in the element-by-element division of the values of data-item a by the corresponding values of data item b. The resulting metric of the values-unit is the quotient of the metric of the argument. ",
    "url": "/docs/div.html#definition",
    
    "relUrl": "/docs/div.html#definition"
  },"830": {
    "doc": "div",
    "title": "description",
    "content": "A division by zero results in an undefined (null) value. ",
    "url": "/docs/div.html#description",
    
    "relUrl": "/docs/div.html#description"
  },"831": {
    "doc": "div",
    "title": "applies to",
    "content": "Data items with Numeric or Point value-type . unit with Numeric value type . ",
    "url": "/docs/div.html#applies-to",
    
    "relUrl": "/docs/div.html#applies-to"
  },"832": {
    "doc": "div",
    "title": "conditions",
    "content": ". | domain-unit of the arguments | argument must match or be void (literals or parameter can be divided by data items of any domain). | . | Arguments must have matching: . | value-type | . | . ",
    "url": "/docs/div.html#conditions",
    
    "relUrl": "/docs/div.html#conditions"
  },"833": {
    "doc": "div",
    "title": "example",
    "content": "1. attribute&lt;float32&gt; divAB (ADomain) := div(A, B); 2. attribute&lt;float32&gt; divAB (ADomain) := A / B; . | A | B | divAB | . | 0 | 1 | 0 | . | 1 | -1 | -1 | . | -2 | 2 | -1 | . | 3.6 | 1.44 | 2.5 | . | 999 | 111 | 9 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/div.html#example",
    
    "relUrl": "/docs/div.html#example"
  },"834": {
    "doc": "div",
    "title": "div",
    "content": "arithmetic-functions divide (/) . ",
    "url": "/docs/div.html",
    
    "relUrl": "/docs/div.html"
  },"835": {
    "doc": "diversity",
    "title": "syntax",
    "content": ". | diversity(grid_data_item, radius, square_or_circle) | . ",
    "url": "/docs/diversity.html#syntax",
    
    "relUrl": "/docs/diversity.html#syntax"
  },"836": {
    "doc": "diversity",
    "title": "definition",
    "content": "diversity(grid_data_item, radius, square_or_circle) results in a new attribute with the number of different occurences in the neighbourhood of each cell of the grid_data_item. The argument radius defines the neighbourhood size, in number of cells. The argument square_or_circle indicates if a square (value 0) or a circle (value 1) is used to define the shape of the neighbourhood. The resulting item has the same domain-unit as the grid_data_item and a uint8 or unit32 value-type (based on the value type of the grid_data_item). ",
    "url": "/docs/diversity.html#definition",
    
    "relUrl": "/docs/diversity.html#definition"
  },"837": {
    "doc": "diversity",
    "title": "applies to",
    "content": ". | attribute grid_data_item with uint8 or uint32 value-type | parameter or literal radius with uint16 value type | parameter or literal square_or_circle with uint16 value type | . ",
    "url": "/docs/diversity.html#applies-to",
    
    "relUrl": "/docs/diversity.html#applies-to"
  },"838": {
    "doc": "diversity",
    "title": "conditions",
    "content": "The domain unit of the grid_data_item argument must be a Point value type of the group CanBeDomainUnit. ",
    "url": "/docs/diversity.html#conditions",
    
    "relUrl": "/docs/diversity.html#conditions"
  },"839": {
    "doc": "diversity",
    "title": "example",
    "content": "attribute&lt;uint32&gt; divgrid (GridDomain) := diversity(sourcegrid, 2w, 1w); . sourcegrid | | | |—–:|—–:|—–:|—–:|—–:| null | 0 | 0 | 0 | 1 | 0 | 0 | 2 | 1 | 1 | 0 | 2 | 3 | 3 | 3 | 1 | 1 | 1 | 3 | 0 | 0 | 1 | 0 | 1 | 3 | . GridDomain, nr of rows = 5, nr of cols = 5 . divgrid | | | |———:|——:|——:|——:|——:| null | 0 | 0 | 0 | 1 | 0 | 0 | 2 | 1 | 1 | 0 | 2 | 3 | 3 | 3 | 1 | 1 | 1 | 3 | 0 | 0 | 1 | 0 | 1 | 3 | . GridDomain, nr of rows = 5, nr of cols = 5 . ",
    "url": "/docs/diversity.html#example",
    
    "relUrl": "/docs/diversity.html#example"
  },"840": {
    "doc": "diversity",
    "title": "diversity",
    "content": "grid-functions diversity . ",
    "url": "/docs/diversity.html",
    
    "relUrl": "/docs/diversity.html"
  },"841": {
    "doc": "dml",
    "title": "SQL Select",
    "content": "The SQL Select is used to make selections of data from one or more tables/views in a desired sequence. The SQL statement implicitly creates a new view, which can be used as a table, with a selection of the records of the original table(s)/view(s). As the GeoDMS works with semantic arrays, new domain-unit need to be configured before the data-item can be configured. The GeoDMS has a set of relational-functions. These functions often result in mappings towards the original domain units, which can be used to define the new data items. ",
    "url": "/docs/dml.html#sql-select",
    
    "relUrl": "/docs/dml.html#sql-select"
  },"842": {
    "doc": "dml",
    "title": "examples",
    "content": ". | select-…-from-… | select-…-from-…-where-… | select-…-from-…-order-by… | select-…-from-…-where-…-order-by… | distinct | select-…-from-…-group-by-… | select-…-from-…-inner-join-….-on-… | select-…-from-…-left_right-join-…-on-… | select-…-from-…-… | . ",
    "url": "/docs/dml.html#examples",
    
    "relUrl": "/docs/dml.html#examples"
  },"843": {
    "doc": "dml",
    "title": "dml",
    "content": "relational-model-versus-semantic-arrays DML . In the relational model a DML (data manipulation language) is used to select, insert, update or delete data in a database. SQL is one of the most used DML (as well as DDL) language. The GeoDMS modelling language is a functional programming language. Programming is done with expression instead of statements, avoiding changing-state and mutable data. The GeoDMS is also not meant to manage data in external databases. Therefore there are no GeoDMS functions for SQL Insert, Update, Delete and Select Into Statements. ",
    "url": "/docs/dml.html",
    
    "relUrl": "/docs/dml.html"
  },"844": {
    "doc": "domain-unit-example",
    "title": "configuration",
    "content": "Domain units can be configured in a GeoDMS configuration in three ways: . explicitly configuring the cardinality and order in the configuration . example . unit&lt;uint8&gt; direction: nrofrows = 4 { attribute&lt;string&gt; name  : ['North','East','South','West'];` attribute&lt;string&gt; label := Name;` } . In this example the domain unit direction is configured with 4 entries (rows). | The attribute name is used to name each entry in the table (it is advised to use name for an attribute, of which the values can be used as tree-item names, see also naming-conventions. | An attribute with as name: label is configured. This is advised, as these labels are presented every time the id of the domain or a relation towards this domain is requested in a table. The label is presented after each index-numbers between normal brackets. The labels are not copied to the clipboard or exported. | . For domain units with a small number of elements, this way of configuring is fine. If the number of entries/rows and/or attributes increases, a configuration for a more user friendly way of editing the data is presented in the: configuration-file paragraph of the page. as data-source. deriving the cardinality and order with an expression . Example . unit&lt;uint32&gt; region := unique(GridDomain/regioncode); . In this example the domain unit region is derived from the unique occurrences of the regioncode attribute of a GridDomain domain unit. We advice to use the unique function mainly to explore your dataset. If the set of entries of a domain is known, configure this set explicitly (example 1). This make the configuration less dependent on the occurrences of (all) values in your data and the indexing persistent. Except from the unique function, domain units are also often defined with the select_with_org_rel, combine or union_unit functions. deriving the cardinality and order from a data-source . Example . unit&lt;uint32&gt; region : StorageName = \"%SourceDataProjDir%/region.shp\" , StorageType = \"gdal.vect\"; . In this example the cardinality and order of the values in the domain unit are derived from the region esri-shapefile. If source data is read from a storage, this is the advised way of configuring the domain. ",
    "url": "/docs/domain-unit-example.html#configuration",
    
    "relUrl": "/docs/domain-unit-example.html#configuration"
  },"845": {
    "doc": "domain-unit-example",
    "title": "domain-unit-example",
    "content": "configuration-examples Domain unit/Table . The one-dimensional (table) domain-unit corresponds to what in a database usually is called a table. The domain unit unit defines the table and the number cardinality and order of entries. attribute of this table have the configured unit as domain unit. ",
    "url": "/docs/domain-unit-example.html",
    
    "relUrl": "/docs/domain-unit-example.html"
  },"846": {
    "doc": "domain-unit",
    "title": "tiled/segmented Data",
    "content": "For tiled/segmented data, a tiled domain unit is needed. A tiled domain is a domain with an additional tiling/segmenting. Only domains with value types of more that 2 bytes (all point value types, uint32, int32, uint64 or int64) can be tiled/segmented. ",
    "url": "/docs/domain-unit.html#tiledsegmented-data",
    
    "relUrl": "/docs/domain-unit.html#tiledsegmented-data"
  },"847": {
    "doc": "domain-unit",
    "title": "configuration",
    "content": "See domain-unit-example for how to configure domain units. ",
    "url": "/docs/domain-unit.html#configuration",
    
    "relUrl": "/docs/domain-unit.html#configuration"
  },"848": {
    "doc": "domain-unit",
    "title": "domain-unit",
    "content": "A domain unit defines the entity to which an attribute belongs. Different domain unit types are: . | geography like: Country, Nuts2 region, 1km grid cell. | Model object like house, service, street. The data is often read from an external data-source (database or file). | classification like Corine, EHS, Percentage_10K, often configured as domain unit of a Classification Scheme. | . The GeoDMS supports both one-dimensional-domain and two-dimensional-domain domains. The value-type of the domain unit defines the number of dimensions and the cardinality. The allowed value types for domain units can be found in the CanBeDomain column of the value type table. ",
    "url": "/docs/domain-unit.html",
    
    "relUrl": "/docs/domain-unit.html"
  },"849": {
    "doc": "domainunit",
    "title": "concept",
    "content": ". | domain-unit is a unit with as role to define an entity. | DomainUnit() is a function to get the DomainUnit of an attribute. | . This page describes the DomainUnit() function. ",
    "url": "/docs/domainunit.html#concept",
    
    "relUrl": "/docs/domainunit.html#concept"
  },"850": {
    "doc": "domainunit",
    "title": "syntax",
    "content": ". | DomainUnit(a) | . ",
    "url": "/docs/domainunit.html#syntax",
    
    "relUrl": "/docs/domainunit.html#syntax"
  },"851": {
    "doc": "domainunit",
    "title": "definition",
    "content": "DomainUnit(a) results in a unit with a reference to the domain unit of attribute a. ",
    "url": "/docs/domainunit.html#definition",
    
    "relUrl": "/docs/domainunit.html#definition"
  },"852": {
    "doc": "domainunit",
    "title": "example",
    "content": "unit&lt;uint32&gt; RefADomain := DomainUnit(A); . ",
    "url": "/docs/domainunit.html#example",
    
    "relUrl": "/docs/domainunit.html#example"
  },"853": {
    "doc": "domainunit",
    "title": "see also",
    "content": ". | valuesunit | propvalue | . ",
    "url": "/docs/domainunit.html#see-also",
    
    "relUrl": "/docs/domainunit.html#see-also"
  },"854": {
    "doc": "domainunit",
    "title": "domainunit",
    "content": "unit-functions DomainUnit . ",
    "url": "/docs/domainunit.html",
    
    "relUrl": "/docs/domainunit.html"
  },"855": {
    "doc": "dpoint",
    "title": "concept",
    "content": ". | dpoint is a Point(Group) value-type with two coordinates of the 64 bits (8 bytes) floating point value type: float64. | dpoint() is a function converting other point data-item or unit to the dpoint value type. | . This page describes the dpoint() function. ",
    "url": "/docs/dpoint.html#concept",
    
    "relUrl": "/docs/dpoint.html#concept"
  },"856": {
    "doc": "dpoint",
    "title": "syntax",
    "content": ". | dpoint(a) | . ",
    "url": "/docs/dpoint.html#syntax",
    
    "relUrl": "/docs/dpoint.html#syntax"
  },"857": {
    "doc": "dpoint",
    "title": "definition",
    "content": "dpoint(a) converts the coordinates of a point tree-item a to the dpoint (float64 coordinates) value type. ",
    "url": "/docs/dpoint.html#definition",
    
    "relUrl": "/docs/dpoint.html#definition"
  },"858": {
    "doc": "dpoint",
    "title": "applies to",
    "content": ". | data item or unit with PointGroup value type | . ",
    "url": "/docs/dpoint.html#applies-to",
    
    "relUrl": "/docs/dpoint.html#applies-to"
  },"859": {
    "doc": "dpoint",
    "title": "example",
    "content": "attribute&lt;dpoint&gt; dpointA (ADomain) := dpoint(A); . | A(dpoint) | dpointA | . | {0,0} | {0,0} | . | {1,1} | {1,1} | . | {1000000,10000000} | {1000000,10000000} | . | {-2.5, 2.5} | {-2, 2} | . | {99.9, 99.9} | {99,99} | . ADomain, nr of rows = 5 . ",
    "url": "/docs/dpoint.html#example",
    
    "relUrl": "/docs/dpoint.html#example"
  },"860": {
    "doc": "dpoint",
    "title": "dpoint",
    "content": "conversion-functions dpoint . ",
    "url": "/docs/dpoint.html",
    
    "relUrl": "/docs/dpoint.html"
  },"861": {
    "doc": "dpolygon",
    "title": "syntax",
    "content": ". | dpolygon(a) | . ",
    "url": "/docs/dpolygon.html#syntax",
    
    "relUrl": "/docs/dpolygon.html#syntax"
  },"862": {
    "doc": "dpolygon",
    "title": "definition",
    "content": "dpolygon(a) converts the coordinates of a point tree-item a with a sequence of points (arc or polygon) to the dpoint (float64 coordinates) value-type. ",
    "url": "/docs/dpolygon.html#definition",
    
    "relUrl": "/docs/dpolygon.html#definition"
  },"863": {
    "doc": "dpolygon",
    "title": "applies to",
    "content": ". | data-item with Point value type and composition arc or polygon | . ",
    "url": "/docs/dpolygon.html#applies-to",
    
    "relUrl": "/docs/dpolygon.html#applies-to"
  },"864": {
    "doc": "dpolygon",
    "title": "example",
    "content": "attribute&lt;spoint&gt; dpolygonA (SDomain, polygon) := dpolygon(A); . | A(dpolygon) | dpolygonA | . | {2:{0,0},{1,1}} | {2:{0,0},{1,1}} | . | {3: {1E+007,1E+007},{-2.5,-2.5},{99.9,99.9}} | {3: {1E+007,1E+007},{-2.5,-2.5},{99.9,99.9}} | . ",
    "url": "/docs/dpolygon.html#example",
    
    "relUrl": "/docs/dpolygon.html#example"
  },"865": {
    "doc": "dpolygon",
    "title": "dpolygon",
    "content": "conversion-functions dpolygon . ",
    "url": "/docs/dpolygon.html",
    
    "relUrl": "/docs/dpolygon.html"
  },"866": {
    "doc": "dquote",
    "title": "syntax",
    "content": ". | dquote(string_dataitem) | . ",
    "url": "/docs/dquote.html#syntax",
    
    "relUrl": "/docs/dquote.html#syntax"
  },"867": {
    "doc": "dquote",
    "title": "definition",
    "content": "dquote(string_dataitem) double quotes the values of data-item string_dataitem. ",
    "url": "/docs/dquote.html#definition",
    
    "relUrl": "/docs/dquote.html#definition"
  },"868": {
    "doc": "dquote",
    "title": "applies to",
    "content": "data item string_dataitem with string value-type . ",
    "url": "/docs/dquote.html#applies-to",
    
    "relUrl": "/docs/dquote.html#applies-to"
  },"869": {
    "doc": "dquote",
    "title": "example",
    "content": "attribute&lt;string&gt; dquoteA (ADomain) := dquote(A); . | A | dquoteA | . | ‘Test’ | ‘“Test”’ | . | ‘88hallo99’ | ‘“88hallo99”’ | . | ’+)’ | ’”+)”’ | . | ‘twee woorden’ | ‘“twee woorden”’ | . | ’ test met spatie’ | ’” test met spatie”’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/dquote.html#example",
    
    "relUrl": "/docs/dquote.html#example"
  },"870": {
    "doc": "dquote",
    "title": "see also",
    "content": ". | quote | undquote | . ",
    "url": "/docs/dquote.html#see-also",
    
    "relUrl": "/docs/dquote.html#see-also"
  },"871": {
    "doc": "dquote",
    "title": "dquote",
    "content": "string-functions d(ouble)quote . ",
    "url": "/docs/dquote.html",
    
    "relUrl": "/docs/dquote.html"
  },"872": {
    "doc": "dyna_point",
    "title": "syntax",
    "content": ". | dyna_point(startpoint, endpoint, distance) | dyna_point_with_ends(startpoint, endpoint, distance) | . ",
    "url": "/docs/dyna_point.html#syntax",
    
    "relUrl": "/docs/dyna_point.html#syntax"
  },"873": {
    "doc": "dyna_point",
    "title": "definition",
    "content": ". | dyna_point(startpoint, endpoint, distance) results in a new domain-unit, with three generated [[subitems | subitem] (see description) : | . | . | Point: the generated point data items | SequenceNr: the relation between each point and it’s segment. | Ordinal: the order of the points in each segment. | . The dyna_point function results in a set of entries with the points generated by the dyna_point function. Points are generated at segments, configured by the startpoint and nextpoint data-item. In the figure above the light green lines are the segments, the dark green dots the dyna_points. The distance between the points is configured with the distance parameter or literal. The dyna_point_with_ends functions like the dyna_point function, only the end coordinates are always added to the resulting attribute. ",
    "url": "/docs/dyna_point.html#definition",
    
    "relUrl": "/docs/dyna_point.html#definition"
  },"874": {
    "doc": "dyna_point",
    "title": "applies to",
    "content": ". | startpoint and endpoint data items with fpoint or dpoint value-type | literal or parameter dist with float32 or float64 value type | . ",
    "url": "/docs/dyna_point.html#applies-to",
    
    "relUrl": "/docs/dyna_point.html#applies-to"
  },"875": {
    "doc": "dyna_point",
    "title": "conditions",
    "content": "The domain unit and values-unit of the startpoint and endpoint argument must match. ",
    "url": "/docs/dyna_point.html#conditions",
    
    "relUrl": "/docs/dyna_point.html#conditions"
  },"876": {
    "doc": "dyna_point",
    "title": "see also",
    "content": ". | arc2segm | dyna_segment | . ",
    "url": "/docs/dyna_point.html#see-also",
    
    "relUrl": "/docs/dyna_point.html#see-also"
  },"877": {
    "doc": "dyna_point",
    "title": "example",
    "content": "unit&lt;uint32&gt; CalcPoint := dyna_point(startpoint, endpoint, 5f); . | startpoint | endpoint | . | {13732, 371391} | {13738, 371384} | . | {13738, 371384} | {13746, 371378} | . | {13746, 371378} | {13758, 371369} | . | {13758, 371369} | {13764, 371364} | . | {13764, 371364} | {13768, 371360} | . domain Segment, nr of rows = 5 . | point | SequenceNr | Ordinal | . | {13732, 371391} | 0 | 0 | . | {13735.3, 371387} | 0 | 1 | . | {13738.6, 371384} | 1 | 0 | . | {13742.6, 371381} | 1 | 1 | . | {13742.6, 371378} | 2 | 0 | . | {13746.6, 371375} | 2 | 1 | . | {13754.6, 371372} | 2 | 2 | . | {13758.6, 371369} | 3 | 0 | . | {13762.4, 371365} | 3 | 1 | . | {13766.1, 371362} | 4 | 0 | . domain CalcPoint, nr of rows = 10 . ",
    "url": "/docs/dyna_point.html#example",
    
    "relUrl": "/docs/dyna_point.html#example"
  },"878": {
    "doc": "dyna_point",
    "title": "dyna_point",
    "content": "geometric-functions dyna_point . ",
    "url": "/docs/dyna_point.html",
    
    "relUrl": "/docs/dyna_point.html"
  },"879": {
    "doc": "dyna_segment",
    "title": "syntax",
    "content": ". | dyna_segment(startpoint, endpoint, distance) | dyna_segment_with_ends(startpoint, endpoint, distance) | . ",
    "url": "/docs/dyna_segment.html#syntax",
    
    "relUrl": "/docs/dyna_segment.html#syntax"
  },"880": {
    "doc": "dyna_segment",
    "title": "definition",
    "content": ". | dyna_segment(startpoint, endpoint, distance) results in a new domain-unit, with four generated subitem (see description) : | . | Point: the generated first point data-item of the segment | NextPoint: the generated last point data items of the segment | SequenceNr: the relation between each point and it’s segment. | Ordinal: the order of the points in each segment. | . The dyna_segment function results in a set of entries with the segments generated by the dyna_segment function. The number or rows of the dyna_segment is 1 less than the dyna_point function. Points are generated at segments, configured by the startpoint and nextpoint data items. In the figure above the light green lines are the segments, the dark green dots the dyna_segments. The distance between the points is configured with the distance parameter or literal. The dyna_segment_with_ends functions like the dyna_segment function, only the end coordinates are always added to the resulting attribute. ",
    "url": "/docs/dyna_segment.html#definition",
    
    "relUrl": "/docs/dyna_segment.html#definition"
  },"881": {
    "doc": "dyna_segment",
    "title": "applies to",
    "content": ". | startpoint and endpoint data items with fpoint or dpoint value-type | literal or parameter dist with float32 or float64 value type | . ",
    "url": "/docs/dyna_segment.html#applies-to",
    
    "relUrl": "/docs/dyna_segment.html#applies-to"
  },"882": {
    "doc": "dyna_segment",
    "title": "conditions",
    "content": "The domain unit and values-unit of the startpoint and endpoint argument must match. ",
    "url": "/docs/dyna_segment.html#conditions",
    
    "relUrl": "/docs/dyna_segment.html#conditions"
  },"883": {
    "doc": "dyna_segment",
    "title": "see also",
    "content": ". | arc2segm | dyna_point | . ",
    "url": "/docs/dyna_segment.html#see-also",
    
    "relUrl": "/docs/dyna_segment.html#see-also"
  },"884": {
    "doc": "dyna_segment",
    "title": "example",
    "content": "unit&lt;uint32&gt; CalcSegment := dyna_segment(startpoint, endpoint, 5f); . | startpoint | endpoint | . | {13732, 371391} | {13738, 371384} | . | {13738, 371384} | {13746, 371378} | . | {13746, 371378} | {13758, 371369} | . | {13758, 371369} | {13764, 371364} | . | {13764, 371364} | {13768, 371360} | . domain Segment, nr of rows = 5 . | point | NextPoint | SequenceNr | Ordinal | . | {13735.3, 371387} | {13732, 371391} | 0 | 0 | . | {13738.6, 371384} | {13735.3, 371387} | 1 | 0 | . | {13742.6, 371381} | {13738.6, 371384} | 1 | 1 | . | {13746.6, 371378} | {13742.6, 371378} | 2 | 0 | . | {13750.6, 371375} | {13746.6, 371378} | 2 | 1 | . | {13754.6, 371372} | {13750.6, 371375} | 2 | 2 | . | {13758.6, 371369} | {13754.6, 371372} | 3 | 0 | . | {13762.4, 371365} | {13758.6, 371369} | 3 | 1 | . | {13766.1, 371362} | {13762.4, 371365} | 4 | 0 | . domain CalcSegment, nr of rows = 9 . ",
    "url": "/docs/dyna_segment.html#example",
    
    "relUrl": "/docs/dyna_segment.html#example"
  },"885": {
    "doc": "dyna_segment",
    "title": "dyna_segment",
    "content": "geometric-functions dyna_segment . ",
    "url": "/docs/dyna_segment.html",
    
    "relUrl": "/docs/dyna_segment.html"
  },"886": {
    "doc": "efdm",
    "title": "intro",
    "content": "Model description of proposed https://forestwiki.jrc.ec.europa.eu/efdm/index.php/Main_Page EFDM extensions. Included are: . | Fitting activities to regional commodity demands | Allocating activities to a raster of discrete forest data and apply transition rules locally. | . Not included are: . | Allowing for non-even forests. We remain the assumption that forests belong to a specific age-group and don’t have a mixed state. However, it might be possible within the proposed framework to model non-even age groups as specific age categories that participate in the transition rules (such as thinning an even aged forest might cause it to become oddly aged). | . ",
    "url": "/docs/efdm.html#intro",
    
    "relUrl": "/docs/efdm.html#intro"
  },"887": {
    "doc": "efdm",
    "title": "indices",
    "content": ". | Time t | . The following indices can be country specific: . | Raster cell i | Region r | Species s, which may include several non-mutating characteristics such as Siteclass, but is initially limited to conifer and broad-leaf. | Volume Classes 1..11: v, w | Age groups 1..33: g, h | Activity 1..3: a, b, usually: no activity, thinning, and full felling. | Commodity 1..4: c, usually: Coniferous Pulp, Coniferous Timber, Broad-leaf Pulp, and Broad-leaf Timber. | . | Forest type f: a combination of and substitute for s, v, and g. | . A symbol $\\sideset{{t}^{f}}{{a}^{b}}X$ indicates a set of tables or matrices http://www.objectvision.nl/geodms/operators-a-functions/metascript/for_each for each f with a indicating the set of rows and b indicating the set of columns or values indicating a (probabilistic) mapping from the set of a’s to the set of b’s, defined in a script that is instantiated http://www.objectvision.nl/geodms/operators-a-functions/metascript/for_each for each t. Although Region r is mostly used as upper-left index, in the implementation it might become part of the lower-right indices, thus part of the rowset definitions. ",
    "url": "/docs/efdm.html#indices",
    
    "relUrl": "/docs/efdm.html#indices"
  },"888": {
    "doc": "efdm",
    "title": "regional model",
    "content": "Input: . | Initial State vectors: $\\sideset{0^{rs}}{{vg}}X$ in [ha] | State Transition fraction matrices: $\\sideset{^{ras}}{_{wh}^{vg}}P$, given per region. This will be implemented as a sparse matrix (a table with only the nonzero elements) for each r, a and s. | Activity fraction Prior matrices: $\\sideset{^{rs}}{_{vg}^a}A$. | Activity Yield matrices: $\\sideset{^{rs}}{_{vg}^{ca}}H$ in [q/ha], given per region. | National Demand for Commodities covectors: $\\sideset{_t}{^c}D$ in [q] | . For each a and t use Iterative proportional fitting or Continuous Allocation to find balancing factors $\\sideset{t^{s}}{^a}\\lambda$ such that $\\forall c: \\sum\\limits{rasvg} \\sideset{^{rs}}{{vg}^{ca}}H \\cdot \\sideset{_t^{rs}}{{vg}^a}B \\cdot \\sideset{t^{rs}}{{vg}}X = \\sideset{_t}{^c}D$ . with Activity fraction Posterior matrices $\\sideset{t^{rs}}{{vg}^a}B := {^a}\\lambda \\cdot \\sideset{^{rs}}{{vg}^a}A} \\over {\\sum\\limits{b}\\sideset{t^{s}}{^b}\\lambda \\cdot \\sideset{^{rs}}{{vg}^b}A}}$ . This requires that each c is linked to a disjunct non-empty set of combinations of a and s that contributes most to that commodity, maybe determined for each a and s by $\\underset{c}{\\mathbf{argmax}}\\left( \\sum\\limits_{rvg} \\sideset{^{rs}}{_{vg}^{ca}}H\\right)$ . Then apply the State Transition and Posterior Activity fractions to calculate State vectors for the next time step: $\\sideset{{t+1}^{rs}}{{wh}}X := \\sum\\limits_{avg} \\sideset{^{ras}}{{wh}^{vg}}P \\cdot \\sideset{_t^{rs}}{{vg}^a}B \\cdot \\sideset{{t}^{rs}}{{vg}}X$ . Note that this application seems equivalent to the current EFDM when all balancing factors are assumed to be 1. ",
    "url": "/docs/efdm.html#regional-model",
    
    "relUrl": "/docs/efdm.html#regional-model"
  },"889": {
    "doc": "efdm",
    "title": "raster model",
    "content": "Input: . | Initial State incidence map: $\\sideset{_0}{_i^{svg}}Y$ [ha] with exactly one 1[ha] in each row. | Region incidence map: Rir with exactly one 1 in each row. | Activity Suitability maps: $\\sideset{^a}{_i}S$ [utility] | . Incidence maps will be implemented as index vectors $\\sideset{_0}{_i}{svg}$ and ri, but for simplicity, the matrix notation is used here. It is a precondition that $\\forall r, s, v, g: \\sum\\limits_{i} R_i^r \\cdot \\sideset{0}{_i^{svg}}Y = \\sideset{_0^{rs}}{{vg}}X$ . For each t, r, s, v, and g use Discrete Allocation to disaggregate the regional amount of activities resulting in an Activity incidence map $\\sideset{t}{_i^{a}}M$ that maximizes total Suitability $\\sum\\limits{ia} \\sideset{^a}{i}S \\cdot \\sideset{_t}{_i^{a}}M$ subject to $\\forall a: \\sum\\limits{i} R_i^r \\cdot \\sideset{t}{_i^{svg}}Y \\cdot \\sideset{_t}{_i^{a}}M = \\sideset{_t^{rs}}{{vg}^a}B \\cdot \\sideset{t^{rs}}{{vg}}X$ . Then apply the state transitions and allocated activities to calculate a probability distrbution for the state of each cell in the next time step and draw a sample from that: $E\\left[ \\sideset{{t+1}}{_i^{swh}}Y \\right] = Prob( \\sideset{{t+1}}{i^{swh}}Y = 1 ) := \\sum\\limits{avg} \\sideset{^{as}}{_{wh}^{vg}}P \\cdot \\sideset{_t}{_i^{a}}M \\cdot \\sideset{_t}{_i^{svg}}Y$ . Note that the expected occurrence of each new state balances with the new regional totals since for each t, r, s, w, and h: $E\\left[ \\sum\\limits_{i} R_i^r \\cdot \\sideset{{t+1}}{_i^{swh}}Y \\right] = \\sum\\limits{i} R_i^r \\cdot E\\left[ \\sideset{{t+1}}{_i^{swh}}Y \\right] = \\sum\\limits{i} \\left[ R_i^r \\cdot \\sum\\limits_{avg} \\sideset{^{as}}{{wh}^{vg}}P \\cdot \\sideset{_t}{_i^{a}}M \\cdot \\sideset{_t}{_i^{svg}}Y \\right] = \\sum\\limits{avg} \\left[ \\sideset{^{as}}{{wh}^{vg}}P \\cdot \\sum\\limits{i} R_i^r \\cdot \\sideset{t}{_i^{svg}}Y \\cdot \\sideset{_t}{_i^{a}}M \\right] = \\sum\\limits{avg} \\sideset{^{as}}{{wh}^{vg}}P \\cdot \\sideset{_t^{rs}}{{vg}^a}B \\cdot \\sideset{t^{rs}}{{vg}}X = \\sideset{{t+1}^{rs}}{{wh}}X$ . Additional notes: . The raster model would use the discrete allocation operation to allocate activities that maximize suitability within the bounds set by the regional amount of activities (expressed as constraints after the “subject to”). This means that decisions are taken locally based on a suitability that is augmented (within the discrete allocation) by a shadow price per region per activity to meet these constraints. A positive shadow price reflects a ‘subsidy’ that might be required to get sufficient locations for an activity whereas a negative shadow price reflects a ‘taxation’ to prevent over-allocation. For more details, see: . | http://wiki.objectvision.nl/index.php/Discrete_Allocation | http://wiki.objectvision.nl/index.php/Function:discrete_alloc | http://www.objectvision.nl/geodms/operators-a-functions/allocation | . Even in degenerated cases when too many different locations have the same relative suitability for one activity, the discrete allocation will only allocate the required amount of cells by taking arbitrary choices based on http://wiki.objectvision.nl/index.php/Virtual_perturbation . Suitabilities are expressed as 32 bits integers to prevent round-off issues that arise when dealing with floating point values with varying magnitudes. Usually a calculated bidding price in EUR / ha is multiplied by a factor and then rounded off to make it integer, but one can also define a limited set of suitability classes with fixed units of extra utility as the resulting degeneration is not a big issue. ",
    "url": "/docs/efdm.html#raster-model",
    
    "relUrl": "/docs/efdm.html#raster-model"
  },"890": {
    "doc": "efdm",
    "title": "suitability and uncertainty",
    "content": "The activity suitability maps may contain several factors which are weighted according to a logit regression on observed choices. When maximization is considered ‘too optimal’, the discrete allocation can also be used to get a result of a Monte Carlo sample from a stochastic activity choice based on the probabilities $P_i(a) := {\\exp(\\sideset{^a}{_i}S + \\lambda_a) \\over { \\sum\\limits_b \\exp {\\sideset{^b}{_i}S + \\lambda_b} }}$ by adding to the augmented suitability a random term with exponential distribution where the β parameter indicates the scale of suitability increments, usally 1. The odds ratio of the probability of one option to another then becomes equal to the exponent of the augmented suitability difference where augmentation here includes the regional schadow prices as well as raster price, $p_i := \\ln \\sum\\limits_b \\exp \\left[\\sideset{^b}{_i}S + \\lambda_a\\right]$. A random term with exponential distribution can be drawn for each combination of i and a by calculating  − β ⋅ ln (U) with U iid uniform random between 0 and 1. See also: . | Exponential distribution in wikipedia | . ",
    "url": "/docs/efdm.html#suitability-and-uncertainty",
    
    "relUrl": "/docs/efdm.html#suitability-and-uncertainty"
  },"891": {
    "doc": "efdm",
    "title": "proposed changes to the initial description during the implementation of the prototype",
    "content": "The following proposed changes are provisional and will be used to update the above description when agreed upon and demonstrated in a working prototype. | the age groups and volume class breaks are specified per forest type per NUTS1 (and not per country). | Forest type is set to {CF, BL} for all run countries (NUTS0) for the prototype, but will be adjustable per NUTS1, provided that forest type specific data is provided. | For rules on transitions (source: e-mail dd 23-10-2015): . | Thinning: For now assume one drop in volume class for thinned areas for the following time step. This rule is a blanket rule that should be flexible from region to region, but we do not have data now, so this assumption holds for all regions and species. | Final felling: assume the area drops to volume class0 and age class0 in the next time step because it is clear cut and no volume remains. The area felled then starts to grow again using the probabilities in the transition probabilities matrices for each species per region. | . | How to assess the amount of m3 wood per volume class (see: e-mail dd 09-10-2015): . | Final Felling: I’ll assume the average of the class-break and the next class-break that is fine, except the last class, where the next class-break is assumed to be 25 % above the break of the beginning of the last class. | Thinning: the m3 wood production is determined by the difference in average volumes of the decreased volume class. | . | Sawlogs versus pulpwood: I don’t see now how different production types contribute to the different type of wood production (except for the obvious different forest types). I assume for now that I rescale the different activity quantities towards balancing the total wood production to the sum of sawlogs + pulpwood. This assumes 100% yield of the removed wood which can be varied later, but I expect this to give a more balanced regional model than by selecting different age groups and volume classes to use the relative differences between sawlog and pulpwood production to meet the demand. | . ",
    "url": "/docs/efdm.html#proposed-changes-to-the-initial-description-during-the-implementation-of-the-prototype",
    
    "relUrl": "/docs/efdm.html#proposed-changes-to-the-initial-description-during-the-implementation-of-the-prototype"
  },"892": {
    "doc": "efdm",
    "title": "efdm",
    "content": " ",
    "url": "/docs/efdm.html",
    
    "relUrl": "/docs/efdm.html"
  },"893": {
    "doc": "empty-domain",
    "title": "empty-domain",
    "content": "An empty domain is a domain-unit with zero elements. The following example shows how such a domain and a set of attribute for this domain can be configured. unit&lt;uint32&gt; empty_domain : nrofrows = 0 {    attribute&lt;uint32&gt; int_data         : [ ];    attribute&lt;dpoint&gt; poly_data (poly) : [ ]; } . ",
    "url": "/docs/empty-domain.html",
    
    "relUrl": "/docs/empty-domain.html"
  },"894": {
    "doc": "endogenous-land-use-types",
    "title": "endogenous-land-use-types",
    "content": "Endogenous Land Use Types are land use classes that are allocated by the GeoDMS based on an Allocation mechanism . ",
    "url": "/docs/endogenous-land-use-types.html",
    
    "relUrl": "/docs/endogenous-land-use-types.html"
  },"895": {
    "doc": "energy-transition",
    "title": "the built environment",
    "content": "Together with PBL we develop the Vesta Model, a spatially explicit model that matches future projected demand for energy in the built environment to options for local and zonal energy supply. This model is, amongst other, used for the Startanalyse to support all municipalities in the Netherlands with their transition strategy. ",
    "url": "/docs/energy-transition.html#the-built-environment",
    
    "relUrl": "/docs/energy-transition.html#the-built-environment"
  },"896": {
    "doc": "energy-transition",
    "title": "energy-transition",
    "content": "[](File:Landuse.jpg \"wikilink\") . The current transition to renewable/sustainable energy has impact on many aspects of our society. Many different options are available to reduce carbon dioxide. These options have different benefits and costs. Modelling can support in choosing optimal alternatives. ",
    "url": "/docs/energy-transition.html",
    
    "relUrl": "/docs/energy-transition.html"
  },"897": {
    "doc": "energy",
    "title": "energy",
    "content": "The Energy transition is an important topic with long term effects. To understand the process and to support policy, models are developed. One of the spatial models, used to support policy on the transition of the heating of buildings, is the Vesta model. This model is implemented in the GeoDMS. ",
    "url": "/docs/energy.html",
    
    "relUrl": "/docs/energy.html"
  },"898": {
    "doc": "eq",
    "title": "syntax",
    "content": ". | eq(a, b) | a == b | . ",
    "url": "/docs/eq.html#syntax",
    
    "relUrl": "/docs/eq.html#syntax"
  },"899": {
    "doc": "eq",
    "title": "definition",
    "content": "eq(a, b) or a ==b results in a boolean data-item indicating if the values of data item a are equal to the corresponding values of data item b. ",
    "url": "/docs/eq.html#definition",
    
    "relUrl": "/docs/eq.html#definition"
  },"900": {
    "doc": "eq",
    "title": "description",
    "content": "The comparison between two missing values (null == null) results in the value False. ",
    "url": "/docs/eq.html#description",
    
    "relUrl": "/docs/eq.html#description"
  },"901": {
    "doc": "eq",
    "title": "applies to",
    "content": "Data items with Numeric, Point, string or bool value-type . ",
    "url": "/docs/eq.html#applies-to",
    
    "relUrl": "/docs/eq.html#applies-to"
  },"902": {
    "doc": "eq",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be compared to data items of any domain unit. | Arguments must have matching: . | value-type | metric | . | . ",
    "url": "/docs/eq.html#conditions",
    
    "relUrl": "/docs/eq.html#conditions"
  },"903": {
    "doc": "eq",
    "title": "example",
    "content": "1. attribute&lt;bool&gt; AisB (CDomain) := eq(A, B); 2. attribute&lt;bool&gt; AisB (CDomain) := A == B; . | A | B | AisB | . | 0 | 0 | True | . | 1 | 2 | False | . | 2.5 | 2.5 | True | . | -100 | 100 | False | . | 999 | -999 | False | . | null | 0 | False | . | null | null | False | . | 0 | null | False | . | null | 100 | False | . | 100 | null | False | . CDomain, nr of rows = 10 . ",
    "url": "/docs/eq.html#example",
    
    "relUrl": "/docs/eq.html#example"
  },"904": {
    "doc": "eq",
    "title": "see also",
    "content": ". | eq_or_both_null | float_isnearby | . ",
    "url": "/docs/eq.html#see-also",
    
    "relUrl": "/docs/eq.html#see-also"
  },"905": {
    "doc": "eq",
    "title": "eq",
    "content": "ordering-functions equals (==) . ",
    "url": "/docs/eq.html",
    
    "relUrl": "/docs/eq.html"
  },"906": {
    "doc": "eq_or_both_null",
    "title": "syntax",
    "content": ". | eq_or_both_null(a, b) | . ",
    "url": "/docs/eq_or_both_null.html#syntax",
    
    "relUrl": "/docs/eq_or_both_null.html#syntax"
  },"907": {
    "doc": "eq_or_both_null",
    "title": "definition",
    "content": "eq_or_both_null(a, b) results in a boolean data-item indicating if the values of data item a are equal to the corresponding values of data item b or if both corresponding values are null. ",
    "url": "/docs/eq_or_both_null.html#definition",
    
    "relUrl": "/docs/eq_or_both_null.html#definition"
  },"908": {
    "doc": "eq_or_both_null",
    "title": "description",
    "content": "The comparison between two missing values (null == null) results in the value True. ",
    "url": "/docs/eq_or_both_null.html#description",
    
    "relUrl": "/docs/eq_or_both_null.html#description"
  },"909": {
    "doc": "eq_or_both_null",
    "title": "applies to",
    "content": "Data items with Numeric, Point, string or bool value-type . ",
    "url": "/docs/eq_or_both_null.html#applies-to",
    
    "relUrl": "/docs/eq_or_both_null.html#applies-to"
  },"910": {
    "doc": "eq_or_both_null",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be compared to data items of any domain). | Arguments must have matching: . | value-type | metric | . | . ",
    "url": "/docs/eq_or_both_null.html#conditions",
    
    "relUrl": "/docs/eq_or_both_null.html#conditions"
  },"911": {
    "doc": "eq_or_both_null",
    "title": "example",
    "content": "attribute&lt;bool&gt; AisB (CDomain) := eq_or_both_null(A, B); . | A | B | AisB | . | 0 | 0 | True | . | 1 | 2 | False | . | 2.5 | 2.5 | True | . | -100 | 100 | False | . | 999 | -999 | False | . | null | 0 | False | . | null | null | True | . | 0 | null | False | . | null | 100 | False | . | 100 | null | False | . CDomain, nr of rows = 10 . ",
    "url": "/docs/eq_or_both_null.html#example",
    
    "relUrl": "/docs/eq_or_both_null.html#example"
  },"912": {
    "doc": "eq_or_both_null",
    "title": "see also",
    "content": ". | eq | . ",
    "url": "/docs/eq_or_both_null.html#see-also",
    
    "relUrl": "/docs/eq_or_both_null.html#see-also"
  },"913": {
    "doc": "eq_or_both_null",
    "title": "eq_or_both_null",
    "content": "ordering-functions equals or both values null . ",
    "url": "/docs/eq_or_both_null.html",
    
    "relUrl": "/docs/eq_or_both_null.html"
  },"914": {
    "doc": "error-dialog-improvements",
    "title": "Improvements",
    "content": ". | We will make a list of all potential errors and check the labeling for more down to earth labels | Based on this list we also try to inform the user more on the probable cause of the error (modelling error or GeoDMS software error). This is always an indication. | Hyperlinks (with markup) for clickable references to geodms source code | For indirect expression, more information on the resulting (part of) the direct expression that is generated, see also error-tracking-in-indirect-expressions | repeat part of the syntax that probably causes the error, where possible | context information only visible after clicking on a show-context button | . ",
    "url": "/docs/error-dialog-improvements.html#improvements",
    
    "relUrl": "/docs/error-dialog-improvements.html#improvements"
  },"915": {
    "doc": "error-dialog-improvements",
    "title": "See also",
    "content": ". | event-log-improvements | . ",
    "url": "/docs/error-dialog-improvements.html#see-also",
    
    "relUrl": "/docs/error-dialog-improvements.html#see-also"
  },"916": {
    "doc": "error-dialog-improvements",
    "title": "error-dialog-improvements",
    "content": "under-study Error dialog improvements . Errors are used to inform the user a model result can not be calculated. Errors are presented in the treeview (red items), the detail pages, the event log and in dialog boxes. In this page we focus on improvements of errors in dialog boxes. An error box should appear when: . | a syntax error in a geodms source file disables a valid interpretation of intended tree-items. | expanding a container | requested data can not be read, calculated, visualized or written | . (data of layer controls of) items with Integrity check Failures are shown with red background and with failure annotation and only initiate an error dialog when written or exported. Meta Info level Failures that disable the proper evaluation of a template instantiation, for each evaluation or result unification only result in red items . | FIX: now expanding such container may incorrectly initiate an error dialog | . ",
    "url": "/docs/error-dialog-improvements.html",
    
    "relUrl": "/docs/error-dialog-improvements.html"
  },"917": {
    "doc": "error-in-delayed-loading-a-dll",
    "title": "solution",
    "content": "For installing the missing Package, see https://www.microsoft.com/en-us/download/details.aspx?id=26999 for more information. ",
    "url": "/docs/error-in-delayed-loading-a-dll.html#solution",
    
    "relUrl": "/docs/error-in-delayed-loading-a-dll.html#solution"
  },"918": {
    "doc": "error-in-delayed-loading-a-dll",
    "title": "error-in-delayed-loading-a-dll",
    "content": "When opening a file with the GDAL storagemanager or requesting version information of GDAL (Help- &gt; About), an: . Error in delayed loading a dll may occur (errorcode: 0xC06D007E). might occur. This can also result in an OS Structured Exception. This error may be related to a missing Microsoft Visual C++ 2010 Service Pack 1 Redistributable Package MFC Security Update. ",
    "url": "/docs/error-in-delayed-loading-a-dll.html",
    
    "relUrl": "/docs/error-in-delayed-loading-a-dll.html"
  },"919": {
    "doc": "error-tracking-in-indirect-expressions",
    "title": "error-tracking-in-indirect-expressions",
    "content": "If there is an error in evaluating an indirect-expression, it is difficult to find what the error is, especially in complex long expressions. For example the following error from evaluating the indirect expression displayed below. FailReason iif Error: Cannot find operator for these arguments: arg1 of type DataItem&lt;Bool&gt; arg2 of type DataItem&lt;String&gt; arg3 of type DataItem&lt;Float32&gt; Possible cause: argument type mismatch. Check the types of the used arguments. attribute&lt;Woning&gt; Restclaim0 (AllocRegio) := = FirstSeqIndicator &amp;&amp; FirstIterIndicator &amp;&amp; FirstExtentIndicator ? ClaimSrc_Wonen : FirstSeqIndicator &amp;&amp; FirstIterIndicator &amp;&amp; !FirstExtentIndicator ? 'PerExtent/'+PrevExtent+'/Restclaim0 - PerExtent/'+PrevExtent+'/Netto_woningbouw/OverExtents/Per_AllocRegio' : FirstSeqIndicator &amp;&amp; !FirstIterIndicator&amp;&amp; FirstExtentIndicator ? PrevIter+'/PerExtent/'+LastExtentName+'/Restclaim0 - '+PrevIter+'/PerExtent/'+LastExtentName+'/Netto_woningbouw/OverExtents/Per_AllocRegio' : FirstSeqIndicator &amp;&amp; !FirstIterIndicator &amp;&amp; !FirstExtentIndicator ? 'PerExtent/'+PrevExtent+'/Restclaim0 - PerExtent/'+PrevExtent+'/Netto_woningbouw/OverExtents/Per_AllocRegio' : !FirstSeqIndicator &amp;&amp; FirstIterIndicator &amp;&amp; FirstExtentIndicator ? 'PerAllocatieSequence/'+PrevSeq+'/DisplacedWonenDoorWerken/DisplacedWonen_perAllocRegio' : !FirstSeqIndicator &amp;&amp; FirstIterIndicator &amp;&amp; !FirstExtentIndicator ? 'PerExtent/'+PrevExtent+'/Restclaim0 - PerExtent/'+PrevExtent+'/Netto_woningbouw/OverExtents/Per_AllocRegio' : !FirstSeqIndicator &amp;&amp; !FirstIterIndicator &amp;&amp; FirstExtentIndicator ? PrevIter+'/PerExtent/'+LastExtentName+'/Restclaim0 - '+PrevIter+'/PerExtent/'+LastExtentName+'/Netto_woningbouw/OverExtents/Per_AllocRegio' : !FirstSeqIndicator &amp;&amp; !FirstIterIndicator &amp;&amp; !FirstExtentIndicator ? 'PerExtent/'+PrevExtent+'/Restclaim0 - PerExtent/'+PrevExtent+'/Netto_woningbouw/OverExtents/Per_AllocRegio' : const(0[woning],AllocRegio); . Here the error is that _“const(0[woning],AllocRegio)” _is not between single quotes, but it can’t be seen from the error dialog. ",
    "url": "/docs/error-tracking-in-indirect-expressions.html",
    
    "relUrl": "/docs/error-tracking-in-indirect-expressions.html"
  },"920": {
    "doc": "esri-shapefile",
    "title": "Read",
    "content": "The GeoDMS supports two ways of reading ESRI Shapefiles: . | gdal.vect: for most shape files, we advice to use gdal.vect (see next subparagraph) to read csv files as it: . | is faster | is more generic | is shorter to configure | supports open options | supports segmented data (If the file has more than 50.000 records, tiled-domain with segments of maximum 50.000 entries will be made) | . | shapefile/dbf storagemanager | . gdal.vect . examples . how to configure reading point, polygon and arc data with gdal.vect: unit&lt;uint32&gt; location : StorageName = \"%projDir%/vectordata/points.shp\" ,  StorageType = \"gdal.vect\" {    attribute&lt;point_rd&gt; geometry;    attribute&lt;string&gt;   name; } unit&lt;uint32&gt; region :  StorageName = \"%projDir%/vectordata/region.shp\" ,  StorageType = \"gdal.vect\" {    attribute&lt;point_rd&gt; geometry (polygon);    attribute&lt;string&gt;   name; } unit&lt;uint32&gt; road :  StorageName = \"%projDir%/vectordata/road.shp\" ,  StorageType = \"gdal.vect\" {    attribute&lt;point_rd&gt; geometry (arc);    attribute&lt;string&gt;   name; } . The .shp file is configured as [storagename](storagename) for the [domain-unit](domain-unit). The .dbf and .shx files are not explicitly configured, but need to be available in the same folder as the .shp file. The difference between the configuration of points, arcs and polygons is the configured [composition](composition). If your dbf file already contains an attribute named geometry, use another attribute name for the data from the .shp file, for instance geom. options . gdal-options can be configured for reading different ESRI Shapefiles. See: https://gdal.org/drivers/vector/shapefile.html#open-options for a full list of all open options. shapefile/dbf StorageManager . Shapefiles can also still be read with the GeoDMS specific shapefile/dbf StorageManagers (mainly for backward compatibility). examples . how to configure reading point, polygon and arc data with shapefile/dbf StorageManager: unit&lt;uint32&gt; location: StorageName = \"%projDir%/data/location.dbf\" {    attribute&lt;point_rd&gt; geometry: StorageName = \"%projDir%/data/location.shp\";    attribute&lt;string&gt;   name; } unit&lt;uint32&gt; region: StorageName = \"%projDir%/data/region.dbf\" {    attribute&lt;point_rd&gt; region (polygon): StorageName = \"%projDir%/data/region.shp\";    attribute&lt;string&gt;   name; } unit&lt;uint32&gt; road:  StorageName = \"%projDir%/data/road.dbf\" {    attribute&lt;point_rd&gt; geometry (arc): StorageName = \"%projDir%/data/road.shp\";    attribute&lt;string&gt;   name; } . The dbf file is configured as StorageName of the domain unit. The number of elements is read from this file. The feature attribute with the coordinates is configured as subitem of the domain unit. This attribute is read from the explicitly configured .shp file. The .shx file is not configured, the file needs to be available in the same folder as the .shp file. The difference between the configuration of points, arcs and polygons is the configured [composition](composition). ",
    "url": "/docs/esri-shapefile.html#read",
    
    "relUrl": "/docs/esri-shapefile.html#read"
  },"921": {
    "doc": "esri-shapefile",
    "title": "Write",
    "content": "The GeoDMS supports two ways of writing ESRI Shapefiles: . | gdalwrite.vect: for most shape files, we advice to use gdalwrite.vect (see next subparagraph) to write csv files as it: . | is faster | is more generic | is shorter to configure | supports open options | . | shapefile/dbf StorageManager | . gdalwrite.vect . examples . how to configure writing point, polygon and arc data with gdal.vect: unit&lt;uint32&gt; location := SourceData/location , StorageName = \"%LocalalDataProjDir%/export/points.shp\" ,  StorageType = \"gdalwrite.vect\" {    attribute&lt;point_rd&gt; geometry := SourceData/location/geometry;    attribute&lt;string&gt;   name := SourceData/location/name; } unit&lt;uint32&gt; region := SourceData/region :  StorageName = \"%projDir%/vectordata/region.shp\" ,  StorageType = \"gdalwrite.vect\" {    attribute&lt;point_rd&gt; geometry (polygon) := SourceData/region/geometry;    attribute&lt;string&gt;   name := SourceData/region/name; } unit&lt;uint32&gt; road :  StorageName = \"%projDir%/vectordata/road.shp\" ,  StorageType = \"gdalwrite.vect\" {    attribute&lt;point_rd&gt; geometry (arc) := SourceData/road/geometry;    attribute&lt;string&gt;   name := SourceData/road/name; } . The [feature-attribute](feature-attribute) is written to the .shp file (in the examples _geometry_). All other attributes (with supported .[dbf](dbf) [value-type](value-type)) are written to a filename with the same name and a .dbf extension. This applies to both the direct as the indirect [subitem](subitem). If multiple subitems with a PoinGroup [value-type](value-type) occur, an error is generated. Set the [disablestorage](disablestorage) [property](property) to True for the attributes you do not want to be written to the.dbf file. A index file is also written together with the .shp file, with the same name but with the .shx extension. The difference between the configuration of points, arcs and polygons is the configured [composition](composition). options . gdal-options can be configured for writing different ESRI Shapefiles. See: https://gdal.org/drivers/vector/shapefile.html#layer-creation-options for a full list of all creation options. example on how to configure a write option: container with_index {    unit&lt;uint32&gt; optionSet := range(uint32, 0, 1);    attribute&lt;string&gt; GDAL_LayerCreationOptions (optionSet) : [\"SPATIAL_INDEX=YES\"]; unit&lt;uint32&gt; location := SourceData/location , StorageName = \"%LocalalDataProjDir%/export/points.shp\" ,  StorageType = \"gdalwrite.vect\" {     attribute&lt;point_rd&gt; geometry := SourceData/location/geometry;     attribute&lt;string&gt;   name := SourceData/location/name; } } . This example shows how to export an ESRI Shapefile with a spatial index file (.qix) extensie. shapefile/dbf StorageManager . Shapefiles can also still be written with the GeoDMS specific shapefile/dbf StorageManagers (mainly for backward compatibility). examples . how to configure writing point, polygon and arc data with shapefile/dbf StorageManager: The example shows how to export an ESRI Shapefile with a spatial index file (.qix) extensie. Furthermore the resulting .dbf file is resized to an optimal size, this we advice especially for all ESRI Shapefiles to keep the size of the .dbf file limited. container export { unit&lt;uint32&amp;gt optionSet := range(uint32, 0, 2); attribute&lt;string&gt; GDAL_LayerCreationOptions (optionSet) : [\"SPATIAL_INDEX=YES\",\"RESIZE=YES\"]; unit&lt;uint32&gt; location := SourceData/location, StorageName = \"%projDir%/data/location.dbf\" {     attribute&lt;point_rd&gt; geometry := SourceData/Location/geometry, StorageName = \"%projDir%/data/location.shp\";     attribute&lt;string&gt;   name := SourceData/Location/name; } unit&lt;uint32&gt; region := SourceData/region, StorageName = \"%projDir%/data/region.dbf\" {     attribute&lt;point_rd&gt; region (polygon) := SourceData/region/geometry,  StorageName = \"%projDir%/data/region.shp\";     attribute&lt;string&gt;   name := SourceData/region/name; } unit&lt;uint32&gt; road := SourceData/road,  StorageName = \"%projDir%/data/road.dbf\" {     attribute&lt;point_rd&gt; geometry (arc) := SourceData/road/geometry, StorageName = \"%projDir%/data/road.shp\";     attribute&lt;string&gt;   name := SourceData/road/name; } } . The dbf file is configured as StorageName of the domain unit. The attributes (with supported .[dbf](dbf) [value-type](value-type)) are written to the .dbf file with this filename. The feature attribute is written to the explicitly configured .shp file. An index file is also written together with the .shp file, with the same name but with the .shx extension. The difference between the configuration of points, arcs and polygons is the configured [composition](composition). ",
    "url": "/docs/esri-shapefile.html#write",
    
    "relUrl": "/docs/esri-shapefile.html#write"
  },"922": {
    "doc": "esri-shapefile",
    "title": "esri-shapefile",
    "content": "ESRI Shapefiles are used to store vector-data and related attribute data. The ESRI Shapefile format always consists of (at least) three accompanying files, with the extensions: . | .shp: containing the geographical coordinates (feature-attribute). | .shx: containing a spatial index. | .dbf: containing tabular information describing the shapes. If a logical entity (like countries) consists of multiple shapes, the relation between the shapes and the logical entity is usually stored in this .dbf file. | . Optionally a .prj file is als available, containing the projection information. This file is at the moment not (yet) used by the GeoDMS (projection information is configured explicitly in the GeoDMS). The GeoDMS supports at the moment (multi)point, arc and polygon types (Shape types: 1,3, 5 and 8). ",
    "url": "/docs/esri-shapefile.html",
    
    "relUrl": "/docs/esri-shapefile.html"
  },"923": {
    "doc": "estimate-a-cross-table-from-a-series-of-row--and-columntotals",
    "title": "estimate-a-cross-table-from-a-series-of-row--and-columntotals",
    "content": "Consider the following problem: . Known: . | Ggr: number of objects of g-type g in zone r, aka row-totals. | Hhr: number of objects of h-type h in zone r, aka column-totals. | . Requested: . | Qg**hr, an estimated number of objects with g-type g and h-type h in zone r. | estimated number of objects per h-type as a function (preferably a linear combination) of object numbers per h-type (for estimating a h-type distribution given a g-type distribution of new objects). | . We assume that: . | For each zone r, the F and G count all objects, thus: $\\forall r: \\sum\\limits_g G^r_g = \\sum\\limits_h H^r_h$ | Phi is equal for all i in the same r and with the same g, thus depends only on P(h|r**g). | Qgh*&lt;/sub&gt;*r* has a *G**g**r* repeated categorical distribution per row *g* and zone *r*; thus *E*[*Q**g**h**r*] = *P*(*h*|*rg) ⋅ Ggr | Qg**hr := fg ⋅ fh ⋅ Pg**h such that $\\sum\\limits_{h} Q^r_{gh} = G^r_g$ and $\\sum\\limits_{g} Q^r_{gh} = H^r_h$, to be determined by Iterative proportional fitting | . Thus: . | $\\sum\\limits_{h} P(h|rg) = 1$, $f_g = G^r_g / \\sum\\limits_{h} f_h \\cdot P_{gh}$, and $f_h = H^r_h / \\sum\\limits_{g} f_g \\cdot P_{gh}$. | Pg**h is to be determined by regression of Hhr by Ggr, thus, written in matrix notation: H = G × P + ϵ with ϵ a r × h matrix of independent stochasts with zero expectation. | it follows that: P := (GT×G)−1 × (GT×H) | . ToDo: . | Consider Alternative: Qbjh is determined by discrete allocation with the given constraints and suitability Pg**h | Consider Alternative: P := (GT×H) × (HT×H)−1 which follows from regression of Ggr by Hhr. | Consider Alternative: P := (GT×H) | Consider Effect of possible heteroscedasticity of ϵ with H; i.e. assume var(ϵ) ∼ H, as each element of H is assumed to be the sum over j of the results of Ggr trials of categorical distributions with conditional probabilities Pg|h. | . ",
    "url": "/docs/estimate-a-cross-table-from-a-series-of-row--and-columntotals.html",
    
    "relUrl": "/docs/estimate-a-cross-table-from-a-series-of-row--and-columntotals.html"
  },"924": {
    "doc": "european-geoportals",
    "title": "european-geoportals",
    "content": "This is a list of Inspire implementing Geoportals of some EU members. See also: http://inspire.ec.europa.eu/index.cfm/pageid/182 EU overview. | http://www.geoportail.gouv.fr/accueil France | http://www.geoportal.de/EN/Geoportal/geoportal.html?lang=en Germany | http://nationaalgeoregister.nl/geonetwork/srv/dut/search Netherlands | http://www.geodata.se/GeodataExplorer/index.jsp?loc=en Sweden | http://data.gov.uk/data/map-based-search United Kingdom | . ",
    "url": "/docs/european-geoportals.html",
    
    "relUrl": "/docs/european-geoportals.html"
  },"925": {
    "doc": "event-log-improvements",
    "title": "General",
    "content": "Errors and warning now result in many logged messages. It would be nice to present overview information on the whole process. After data is requested in a view, the eventlog can start with messages such as: . | Start processing | Update meta information for xxx (throttle | Update primary data | … messages … | Finished processing (system back to idle) | . ",
    "url": "/docs/event-log-improvements.html#general",
    
    "relUrl": "/docs/event-log-improvements.html#general"
  },"926": {
    "doc": "event-log-improvements",
    "title": "Throttling",
    "content": "To avoid wasting resources on overflowing a user with logging data, while still periodically reporting progress, a (per category) time since last report in combination with severity or skip-count may be used to decide (further) suppression of messaging, provided that: . | time since action that ended idle-time is used to scale time since last report | (if an end goal is known) distance to end goal: idem | weight of the message | . ",
    "url": "/docs/event-log-improvements.html#throttling",
    
    "relUrl": "/docs/event-log-improvements.html#throttling"
  },"927": {
    "doc": "event-log-improvements",
    "title": "Events",
    "content": "Event categories: . | Reading item yyy from data source xxx | Writing item yyy to data sink xxx | Warnings | Progress of operations | HTTPS requests | Resource usage (requires a separate design, see link below). | . Not: FailReasons, as they are accessible at the failed items or displayed in an Failure Dialog when they blocked a requested operation. ",
    "url": "/docs/event-log-improvements.html#events",
    
    "relUrl": "/docs/event-log-improvements.html#events"
  },"928": {
    "doc": "event-log-improvements",
    "title": "Improvements",
    "content": ". | Errors &gt; minimalize redundant labels (e.g. logging ThrowingItemErrror &gt; error) | A new tab in Tools &gt; Options &gt; EventLog, in which you can enable or disable message categories, with as extra options: . | show data/time for all messages | show thread number, | error number Furthermore it would be nice to have a summary of the process between Start processing and Finished processing with duration and maximum RAM usage. | . | Toggle option to sort by thread number, and show/hide duplicates. | Using segments for progress information on time consuming operators (e.g.: processing segment 1 from 100) | More operators showing progress information (e.g. for_each with large numbers of items) | Empty Working Pages &gt; more clear label like Empty RAM and deduplicating | Reconsider current Component type, now: TListBox. Short term alternatives: TEdit or TWebBrowser, of owner drawn listbox; medium term alternative: QtWebView (QtWebKit) would enable hyperlinks, better text selection and ordering. | Fix issue of not repainting EventLog after appending new messages. | Copy-text function (1 line, all lines, some lines (requires a multi-select TListBox), selected text (requires an alternative component). | Clear function (Alt 22) | Markup functions: bold, links to items: requires new GUI framework or intensification of TWebBrowser. | NOT: Resource usage: design which targets to trace, how to trace them and how to present a snapshot of linked resources in a separate lemma. | Do not error-dialog-improvements that came from evaluating the calculation rule of items. | Do not error-dialog-improvements that disable the calculation of an item due to item not found, value type or domain ncompatibility error etc. | . ",
    "url": "/docs/event-log-improvements.html#improvements",
    
    "relUrl": "/docs/event-log-improvements.html#improvements"
  },"929": {
    "doc": "event-log-improvements",
    "title": "event-log-improvements",
    "content": "under-study Event log improvements . The main function of the eventlog is to: . | log user actions | inform the user on the progress of processes to calculate model results. | report on unexpected events that affect such processes. | . The current implementation of the eventlog can be improved for this purpose. ",
    "url": "/docs/event-log-improvements.html",
    
    "relUrl": "/docs/event-log-improvements.html"
  },"930": {
    "doc": "eventlog",
    "title": "eventlog",
    "content": ". The eventlog component shows messages to inform on the progress in the calculation process and warnings and error that might occur during the process. Colors are used to indicate the contents or the severity type of the message. ",
    "url": "/docs/eventlog.html#eventlog",
    
    "relUrl": "/docs/eventlog.html#eventlog"
  },"931": {
    "doc": "eventlog",
    "title": "tools",
    "content": "At the right side of the eventlog, 4 tools are available: . | tool | description | . | | copy the selected eventlog messages to the clipboard. | . | | turn eventlog filter on/off, see next paragraph | . | | clear all eventlog messages. | . | | scroll contents of message to bottom and keep up with the new log messages. | . ",
    "url": "/docs/eventlog.html#tools",
    
    "relUrl": "/docs/eventlog.html#tools"
  },"932": {
    "doc": "eventlog",
    "title": "filter",
    "content": ". The eventlog filter is used to make a selection of relevant messages in the eventlog. The left side contains categories like Calculation Progress and Storage. The relevant message categories can be selected with the check boxes. The eventlog filter also functions as a legend, indicating which text colors are used for which category. The Filter on text part of the eventlog is used to filter messages on text parts (case insensitive). The Filter button becomes active if a (new) text is typed into the textbox. With the button the filter is applied in the text box. The Clear button can be used to clear the contents of the textbox (if the box contains characters). The Filter message contents block is used for additional filter settings, with two subblocks: . | Clear eventlog before: This option can be set to clear the whole eventlog if a new configuration is opened (open configuration) and/or if the current configuration is reopened (reopen configuration). | Add to each message: This option filters the contents of each message, the data/time, the thread number and the message category can be added or removed from each message. | . ",
    "url": "/docs/eventlog.html#filter",
    
    "relUrl": "/docs/eventlog.html#filter"
  },"933": {
    "doc": "eventlog",
    "title": "eventlog",
    "content": "user-guide-geodms-gui - eventlog . ",
    "url": "/docs/eventlog.html",
    
    "relUrl": "/docs/eventlog.html"
  },"934": {
    "doc": "exec",
    "title": "syntax",
    "content": ". | exec(command) | . ",
    "url": "/docs/exec.html#syntax",
    
    "relUrl": "/docs/exec.html#syntax"
  },"935": {
    "doc": "exec",
    "title": "definition",
    "content": "exec(command) executes the command argument. if the results of the exec command (for instance a list of files to be imported) are used further in the process, use the exec_ec function to make sure the command is executed or an error code is generated. ",
    "url": "/docs/exec.html#definition",
    
    "relUrl": "/docs/exec.html#definition"
  },"936": {
    "doc": "exec",
    "title": "applies to",
    "content": ". | command with string value-type | . ",
    "url": "/docs/exec.html#applies-to",
    
    "relUrl": "/docs/exec.html#applies-to"
  },"937": {
    "doc": "exec",
    "title": "example",
    "content": "container calc := exec(‘calc.exe’); . result: runs the Windows calculator . ",
    "url": "/docs/exec.html#example",
    
    "relUrl": "/docs/exec.html#example"
  },"938": {
    "doc": "exec",
    "title": "see also",
    "content": ". | exec_ec | execdll | . ",
    "url": "/docs/exec.html#see-also",
    
    "relUrl": "/docs/exec.html#see-also"
  },"939": {
    "doc": "exec",
    "title": "exec",
    "content": "file,-folder-and-read-functions exec(ute) . ",
    "url": "/docs/exec.html",
    
    "relUrl": "/docs/exec.html"
  },"940": {
    "doc": "exec_ec",
    "title": "syntax",
    "content": ". | exec_ec(command) | . ",
    "url": "/docs/exec_ec.html#syntax",
    
    "relUrl": "/docs/exec_ec.html#syntax"
  },"941": {
    "doc": "exec_ec",
    "title": "definition",
    "content": "exec_ec(command) executes the command argument and returns it’s ExitCode, . This enables a modeller to use that result in for example the construction of a storage name of a source that can only be read after completion of that process. ",
    "url": "/docs/exec_ec.html#definition",
    
    "relUrl": "/docs/exec_ec.html#definition"
  },"942": {
    "doc": "exec_ec",
    "title": "applies to",
    "content": ". | command with string value-type | . ",
    "url": "/docs/exec_ec.html#applies-to",
    
    "relUrl": "/docs/exec_ec.html#applies-to"
  },"943": {
    "doc": "exec_ec",
    "title": "since version",
    "content": "7.314 . ",
    "url": "/docs/exec_ec.html#since-version",
    
    "relUrl": "/docs/exec_ec.html#since-version"
  },"944": {
    "doc": "exec_ec",
    "title": "example",
    "content": "This example shows how to use the exec_ec function to make a list of files in a folder and store the resulting list in a text file, that can be used later in the process to read all files from the folder. The CanGenerate parameter can be used in your expression to process all files, making sure the list of files or an error code is generated first. container folderinfo {   container impl   {      parameter&lt;string&gt; FileNameDirInfo := '%LocalDataProjDir%/dirinfo_' + date +'.str';      parameter&lt;string&gt; DirCmdOrg       := Expand(., 'Dir '+ XmlDir +'/*.xml &gt; ' + FileNameDirInfo);      parameter&lt;string&gt; DirCmd          := Replace(DirCmdOrg, '/', '\\\\') + ' /B';    }    parameter&lt;uint32&gt; writeFileList    :=  exec_ec(Expand(., '%env:ComSpec%'), '/c ' + impl/DirCmd, Expand(., '%LocalDataProjDir%'));    parameter&lt;bool&gt;   CanGenerate      := writeObjectenlijst == 0; } . ",
    "url": "/docs/exec_ec.html#example",
    
    "relUrl": "/docs/exec_ec.html#example"
  },"945": {
    "doc": "exec_ec",
    "title": "see also",
    "content": ". | exec | execdll | . ",
    "url": "/docs/exec_ec.html#see-also",
    
    "relUrl": "/docs/exec_ec.html#see-also"
  },"946": {
    "doc": "exec_ec",
    "title": "exec_ec",
    "content": "file,-folder-and-read-functions exec(ute)_ec(errorcode) . ",
    "url": "/docs/exec_ec.html",
    
    "relUrl": "/docs/exec_ec.html"
  },"947": {
    "doc": "execdll",
    "title": "syntax",
    "content": ". | execDll(dll, function) | . ",
    "url": "/docs/execdll.html#syntax",
    
    "relUrl": "/docs/execdll.html#syntax"
  },"948": {
    "doc": "execdll",
    "title": "definition",
    "content": "execDll(dll, function) executes the function in the dll. ",
    "url": "/docs/execdll.html#definition",
    
    "relUrl": "/docs/execdll.html#definition"
  },"949": {
    "doc": "execdll",
    "title": "applies to",
    "content": ". | dll and function with string value-type | . ",
    "url": "/docs/execdll.html#applies-to",
    
    "relUrl": "/docs/execdll.html#applies-to"
  },"950": {
    "doc": "execdll",
    "title": "example",
    "content": "container execDll := execDll('C:/dev/bin/accessrun.dll','RunProcAndWait'); . ",
    "url": "/docs/execdll.html#example",
    
    "relUrl": "/docs/execdll.html#example"
  },"951": {
    "doc": "execdll",
    "title": "see also",
    "content": ". | exec | exec_ec | . ",
    "url": "/docs/execdll.html#see-also",
    
    "relUrl": "/docs/execdll.html#see-also"
  },"952": {
    "doc": "execdll",
    "title": "execdll",
    "content": "file,-folder-and-read-functions exec(ute)Dll . ",
    "url": "/docs/execdll.html",
    
    "relUrl": "/docs/execdll.html"
  },"953": {
    "doc": "existingfile",
    "title": "syntax",
    "content": ". | ExistingFile(alternative, filename) | . ",
    "url": "/docs/existingfile.html#syntax",
    
    "relUrl": "/docs/existingfile.html#syntax"
  },"954": {
    "doc": "existingfile",
    "title": "definition",
    "content": "ExistingFile(alternative, filename) results in a string value with the full path name of the filename argument if the file exists and in the alternative argument if the file does not exists. If no path information is configured, the default path for both arguments is the %ConfigDir% placeholder. ",
    "url": "/docs/existingfile.html#definition",
    
    "relUrl": "/docs/existingfile.html#definition"
  },"955": {
    "doc": "existingfile",
    "title": "applies to",
    "content": ". | data-item or literal alternative and filename with string value-type | . ",
    "url": "/docs/existingfile.html#applies-to",
    
    "relUrl": "/docs/existingfile.html#applies-to"
  },"956": {
    "doc": "existingfile",
    "title": "since version",
    "content": "6.026 . ",
    "url": "/docs/existingfile.html#since-version",
    
    "relUrl": "/docs/existingfile.html#since-version"
  },"957": {
    "doc": "existingfile",
    "title": "example",
    "content": "parameter&lt;string&gt; ExistingFile := ExistingFile('c:/tmp/test.txt', 'd:/tmp/test.txt'); . result: Updating this item results in the value ‘d:/tmp/test.txt’ if this file exists and if not in the value ‘c:/tmp/test.txt’. ",
    "url": "/docs/existingfile.html#example",
    
    "relUrl": "/docs/existingfile.html#example"
  },"958": {
    "doc": "existingfile",
    "title": "existingfile",
    "content": "file,-folder-and-read-functions ExistingFile . ",
    "url": "/docs/existingfile.html",
    
    "relUrl": "/docs/existingfile.html"
  },"959": {
    "doc": "exogenous-land-use-types",
    "title": "exogenous-land-use-types",
    "content": "Exogenous land use types are types of land use that are not allocated by the an allocation model in contrast to Endogenous Land Use Types. Examples are: . | nearly immutable types of land use such as water and glaciers | highly connected and planned types of land use such as transport infrastructure | . ",
    "url": "/docs/exogenous-land-use-types.html",
    
    "relUrl": "/docs/exogenous-land-use-types.html"
  },"960": {
    "doc": "expand",
    "title": "syntax",
    "content": ". | expand(item, placeholderString) | . ",
    "url": "/docs/expand.html#syntax",
    
    "relUrl": "/docs/expand.html#syntax"
  },"961": {
    "doc": "expand",
    "title": "definition",
    "content": "expand(item, placeholderString) results in a string parameter with the expanded value of the placeholderString in the context of the item argument. ",
    "url": "/docs/expand.html#definition",
    
    "relUrl": "/docs/expand.html#definition"
  },"962": {
    "doc": "expand",
    "title": "description",
    "content": "Expansion means placeholders are replaced by (sub)folders on the local machine. See folders-and-placeholders for more information on placeholders. ",
    "url": "/docs/expand.html#description",
    
    "relUrl": "/docs/expand.html#description"
  },"963": {
    "doc": "expand",
    "title": "applies to",
    "content": ". | tree-item | string parameter placeholderString | . ",
    "url": "/docs/expand.html#applies-to",
    
    "relUrl": "/docs/expand.html#applies-to"
  },"964": {
    "doc": "expand",
    "title": "since version",
    "content": "5.60 . ",
    "url": "/docs/expand.html#since-version",
    
    "relUrl": "/docs/expand.html#since-version"
  },"965": {
    "doc": "expand",
    "title": "example",
    "content": "parameter&lt;string&gt; LocalDataProjDir := expand(. ,'%localDataProjDir%'); . result: LocalDataDir = ‘C:/LocalData/operator’ (or based on the value of another %localDataProjDir% configured) . ",
    "url": "/docs/expand.html#example",
    
    "relUrl": "/docs/expand.html#example"
  },"966": {
    "doc": "expand",
    "title": "expand",
    "content": "string-functions expand . ",
    "url": "/docs/expand.html",
    
    "relUrl": "/docs/expand.html"
  },"967": {
    "doc": "explicit-configuration-of-value-types",
    "title": "explicit-configuration-of-value-types",
    "content": "The GeoDMS offers operators-and-functions with efficient algorithms for fast calculations of (large) data sets. A necessary precondition for these algorithms is the awareness of the type of data of each data item. In the GeoDMS this is called the value-type. Value types are configured for each data item as part of the values-unit. ",
    "url": "/docs/explicit-configuration-of-value-types.html",
    
    "relUrl": "/docs/explicit-configuration-of-value-types.html"
  },"968": {
    "doc": "explicit-tiling",
    "title": "example",
    "content": "unit&lt;uint32&gt; TileDomain :=  ='union_unit('+AsItemList('CreateTiles/LoopPolygons/'+string(CreateTiles/TileSet/name)+'/shape')+')' {       attribute&lt;rdc&gt; geometry (poly) :=  ='union_data(.,'+AsItemList( 'CreateTiles/LoopPolygons/'+string(CreateTiles/TileSet/name)+'/shape/geometry')+ ')'; } container CreateTiles {     parameter&lt;float32&gt; NrofTiles_horizontal := 5f;      parameter&lt;float32&gt; NrofTiles_vertical   := 5f;         // bounding box of The Netherlands     parameter&lt;meter&gt; x_min := 0[meter];     parameter&lt;meter&gt; x_max := 280000[meter];      parameter&lt;meter&gt; y_min := 300000[meter];     parameter&lt;meter&gt; y_max := 625000[meter];         parameter&lt;meter&gt; x_div := (x_max - x_min) / NrofTiles_horizontal;     parameter&lt;meter&gt; y_div := (y_max - y_min) / NrofTiles_vertical;         unit&lt;uint32&gt; TileSet := range(uint32, 0, uint32(NrofTiles_horizontal * NrofTiles_vertical))     {        attribute&lt;uint32&gt; values     := id(.);        attribute&lt;string&gt; name       := 'Tile'+ string(values);        attribute&lt;uint32&gt; row_number := values / NrofTiles_horizontal[uint32];        attribute&lt;uint32&gt; col_number := mod(values, NrofTiles_horizontal[uint32]);     }         container LoopPolygons := for_each_ne(     TileSet/name     ,'CreatePolygons('+string(TileSet/values)+','+string(TileSet/row_number)+','+string(TileSet/col_number)+')'     );         template CreatePolygons     {    parameter&lt;uint32&gt; TileNumber;    parameter&lt;uint32&gt; row_number;    parameter&lt;uint32&gt; col_number;            unit&lt;uint32&gt; shape: nrofrows = 1    {       attribute&lt;rdc&gt; left_top     :=  const(point(x_min + col_number[float32]     *x_div, y_max-row_number[float32]     *y_div, rdc), .);        attribute&lt;rdc&gt; right_top    :=   const(point(x_min + (col_number[float32]+1f)*x_div, y_max-row_number[float32]     *y_div, rdc), .);       attribute&lt;rdc&gt; right_bottom :=  const(point(x_min + (col_number[float32]+1f)*x_div, y_max-(row_number[float32]+1f)*y_div, rdc), .);       attribute&lt;rdc&gt; left_bottom  :=  const(point(x_min + col_number[float32]     *x_div, y_max-(row_number[float32]+1f)*y_div, rdc), .);                   attribute&lt;rdc&gt; geometry (poly) :=  points2sequence(pointset/point, pointset/sequence, pointset/order);    }    unit&lt;uint32&gt; pointset: nrofrows = 5    {       attribute&lt;rdc&gt;    point    :=  union_data( ., shape/left_top, shape/right_top, shape/right_bottom, shape/left_bottom, shape/left_top );       attribute&lt;shape&gt;  sequence := const(0,., shape);       attribute&lt;uint32&gt; order    := id(.);    }     } } . ",
    "url": "/docs/explicit-tiling.html#example",
    
    "relUrl": "/docs/explicit-tiling.html#example"
  },"969": {
    "doc": "explicit-tiling",
    "title": "explicit-tiling",
    "content": "configuration-examples Explicit Tiling . For some time/memory intensive operations, such as the determination of a dwelling type of each pand in the BAG, an explicit tiling of polygons can be implemented limit the number of objects worked on simultaneously and thereby reducing the memory usage. ",
    "url": "/docs/explicit-tiling.html",
    
    "relUrl": "/docs/explicit-tiling.html"
  },"970": {
    "doc": "explicitsuppliers",
    "title": "explicitsuppliers",
    "content": "The ExplicitSuppliers property is used to configure items that need to be updated before the item for which the property is configured is updated. An example is a parameter with a list of files in a folder, needed to determine which files need to be read, needs to be updated with a batch command. This parameter can be configured as ExplicitSupplier for the item that reads the file list. ExplicitSuppliers can be combined with a semicolon (;) delimiter. ",
    "url": "/docs/explicitsuppliers.html",
    
    "relUrl": "/docs/explicitsuppliers.html"
  },"971": {
    "doc": "exponent",
    "title": "syntax",
    "content": ". | exp(exponent) | . ",
    "url": "/docs/exponent.html#syntax",
    
    "relUrl": "/docs/exponent.html#syntax"
  },"972": {
    "doc": "exponent",
    "title": "definition",
    "content": "exp(exponent) is defined as eexponent . exp(exponent) results in null values for the values of data-item exponent for which the exp(onent) results are outside the scope of the value-type (e.g. values above 88 for items of value type float32). ",
    "url": "/docs/exponent.html#definition",
    
    "relUrl": "/docs/exponent.html#definition"
  },"973": {
    "doc": "exponent",
    "title": "applies to",
    "content": ". | data item with float32 or float64 value type | . ",
    "url": "/docs/exponent.html#applies-to",
    
    "relUrl": "/docs/exponent.html#applies-to"
  },"974": {
    "doc": "exponent",
    "title": "example",
    "content": "attribute&lt;float32&gt; expA (ADomain) := exp(A); . | A | expA | . | 1 | 2.71 | . | 2 | 7.39 | . | 3.5 | 33.12 | . | 5 | 148.41 | . | 10 | 22026.46 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/exponent.html#example",
    
    "relUrl": "/docs/exponent.html#example"
  },"975": {
    "doc": "exponent",
    "title": "exponent",
    "content": "transcendental-functions exp(onent) . ",
    "url": "/docs/exponent.html",
    
    "relUrl": "/docs/exponent.html"
  },"976": {
    "doc": "export-primary-data",
    "title": "activate export",
    "content": "Source data and model results can be exported to different formats. Select a data-item in the treeview and activate the menu option: Export Primary Data on a data item or a container with direct data items. After activating the following dialog appears (in this case for a container with neighborhood data). ",
    "url": "/docs/export-primary-data.html#activate-export",
    
    "relUrl": "/docs/export-primary-data.html#activate-export"
  },"977": {
    "doc": "export-primary-data",
    "title": "Vector/Raster",
    "content": "The dialog has two tabs, Vector or Raster. Based on the domain-unit of the data items to be exported, a tab is presented: . | Vector for one-dimensional-domain | Raster for two-dimensional-domain | . both tabs work in a similar way. The following options can be set: . | Foldername: data is exported to one or multiple files, in the foldername set here. With the button a foldername can be selected or can be typed in the text box. By default the folder name is the name of your LocalDataDir folders-and-placeholders and the path of the item exported. | Filename (no extension): as for some formats (e.g. esri-shapefile), multiple actual files are written in an export, in this textbox the part of the filename can be set without the file extension. The actual files that will be written are presented in the Resulting filename(s) box in the dialog. | Format: From a combobox a selection can be made for the format, based on the characteristics of the data. New formats can be added in the future. | Use native driver: for some formats, a native GeoDMS storagemanager and a gdal driver is available to export data. With this checkbox you can indicate if you want to use the native (checked) or GDAL (unchecked) driver. In some cases only one option is available and the setting can not be changed. | . With the Export button the actual data is exported. ",
    "url": "/docs/export-primary-data.html#vectorraster",
    
    "relUrl": "/docs/export-primary-data.html#vectorraster"
  },"978": {
    "doc": "export-primary-data",
    "title": "export-primary-data",
    "content": "user-guide-geodms-gui - export primary data . ",
    "url": "/docs/export-primary-data.html",
    
    "relUrl": "/docs/export-primary-data.html"
  },"979": {
    "doc": "export-viewports",
    "title": "viewports",
    "content": "The main Viewports of MapViews (the part of a MapView that contains the map, excluding the LayerControl and overview area) can also be exported as (a collection of) bitmap files. The center of the ROI and the set of layers and their aspects are defined by each exported MapView. You can specify the desired PaperSize, and Scale (or DotWorldSize), to overrule the use of the ROI and Scale of the exported ViewPort and specify the given dot-resolution (DPI) of the final medium and a number of sub-dots for added accuracy. A ViewFactor may be given to scale Symbols and Text Objects to make them readable from distances that significantly differ from typical screen view distances. ",
    "url": "/docs/export-viewports.html#viewports",
    
    "relUrl": "/docs/export-viewports.html#viewports"
  },"980": {
    "doc": "export-viewports",
    "title": "further processing",
    "content": "We advice that you will further process these exports with other software tools (Word, PowerPoint, Impress) to include them in printable publications, web-pages, and/or slide presentations. Therefore, Legends and Map Titles are not included here. As the GeoDMS and many of these tools (especially their 32 bit builds) cannot process very large individual bitmaps as they often utilize the GPU which often limit bitmap capacity to approximately 3.000 x 3.000 pixels, the GeoDMS divides an export over multiple bitmap files when the number of subdots exceeds the given MaxNrSubDotsPerTile. For example, we were able to make-up a A0 map in PowerPoint by tiling the individual high resolution bitmap images (and added boxes for title and legend), which we could not have handled as one bitmap (an portrait A0 page of 33.1 “ x 46.8 “ with 600 dpi and 4x4 subdots has 112.320 subdot rows and 79.440 subdot columns, which doesn’t even fit in the RAM of most PC’s). ",
    "url": "/docs/export-viewports.html#further-processing",
    
    "relUrl": "/docs/export-viewports.html#further-processing"
  },"981": {
    "doc": "export-viewports",
    "title": "exporting MapViews",
    "content": "MapView Viewports can be exported with the geodms-gui) in two ways: . | With the menu option: File &gt; Export Viewports or the tool: . These options present a dialog with the open MapViews. The views to be exported can be selected, the path for the resulting file names are presented. With the OK button the resulting files are made. | With the tool: only the main ViewPort of the active MapView will be exported to the file name indicated. | . The settings for the export need to be configured in the ExportSettings container. See the following example script: . container ExportSettings {     parameter&lt;string&gt;  FileNameBase := \"'resultfolder/resultfile'\";    parameter&lt;float64&gt; width  := 24;     parameter&lt;float64&gt; height := 18;    parameter&lt;dpoint&gt;  PaperSize := Point(height / 100.0, width / 100.0)    ,  url = \"about: papersize is defined as height * width\";    parameter&lt;float64&gt; ScaleDenom:   [50000];    parameter&lt;float64&gt; Scale := 1.0 / ScaleDenom;    parameter&lt;float64&gt; dwsc : [null];    parameter&lt;dpoint&gt;  DotWorldSize := point(dwsc, dwsc);        parameter&lt;float64&gt; dpi: = 600;    parameter&lt;dpoint&gt;  DotSize := Point(0.0254 / dpi,0.0254 / dpi);        parameter&lt;float64&gt; ViewFactor: = 1.0;    parameter&lt;ipoint&gt;  MaxNrSubDotsPerTile: [(4096, 4096)]; parameter&lt;uint32&gt;  NrSubDotsPerDot := 1; } . ",
    "url": "/docs/export-viewports.html#exporting-mapviews",
    
    "relUrl": "/docs/export-viewports.html#exporting-mapviews"
  },"982": {
    "doc": "export-viewports",
    "title": "script parameters",
    "content": "In this script the following parameters can be set: . | FileNameBase: The path within the %LocalDataProjDir% and the base name for the files that will be generated. The actual filenames are composed by the base name and the id of the bitmap tile. | width: the width in [cm] of the paper for which the export file(s) is/are made | height: the heigth in [cm] of the paper for which the export file(s) is/are made | . If no width or height parameter is configured or any of them is defined as , these are derived from the map window size. The resulting PaperSize is calculated and does not have to be configured. | ScaleDenom: the scale denominator is used to calculate the scale of the exported file. The value 50.000 means the scale is 1 to 50.000 so 1 [cm] in the map is 500 [meter] in the real world. If no scale denominator is configured, the scale is based on the scale of the main ViewPort of the MapWindow. | dwsc: the dot world size coordinate can be configured to specify the size of a dot in world coordinates. This is an alternative for configuring the scale of the export. If the ScaleDenom is configured, the dwsc does not have to be configured or can be set to (as in the example). The DotWorldSize [parameter](parameter) itself is calculated, using the configured dot world size coordinate. | dpi: Dots Per Inch. This parameter indicates the number of dots per inch in the resulting file. Increasing this number results in better quality maps but also in more/larger bitmaps. MS Office products such as PowerPoint usually assume images to be 96 DPI (small Fonts), 120 DPI (medium Fonts) or 144 DPI (larger Fonts). Image sizes need to be adjusted if files with a larger DPI are imported. The actual Dotsize is calculated based on the configured DPI. | ViewFactor: A factor indicating if the final result is to be seen at the distance of a screen of e.g. of a poster, which is usually looked at from a larger distance. The default value for the ViewFactor is 1, corresponding to a ViewDistance of approximately 50 [cm]. A larger VIewFactor will increase the number of dots per symbol and text object while leaving the number of dots per geographic object unchanged. Use a ViewFactor of 8 for exporting to posters that are assumed to be seen from a distance of 4 [m]. | maxNrSubDotsPerTile: The result of the export is a bitmap file or a set of bitmap files(tiling). The maxNrSubDitsPerTile indicates the maximum size of a seperate file, if the resulting file would contain more dots, it will be split up into a set of tiles. To export bitmaps that can be used in other software packages, it is advised to limit the size of an individual bitmap file to a maximum of 4096 * 4096 dots. If the GPU of your system does not support writing large bitmaps, it can be necessary to limit this size even further. | NrSubDotsPerDot: This parameter determines the number of subdots in the export file(s) for every dot. Use 1 as a default value and higher values for higher quality images. A larger number increases the number of subdots per object (both symbols and geographic objects). The GeoDMS does not aggregate sub dot color values to average dot color values. The software used for printing and/or displaying the export results should do this to get an anti-aliased version of the original image. | . N.B.: to get exports with the same number of subdots as the main ViewPort of a MapView, one should not configure Width, Height, ScaleDenom, and dwsc, or set the to , set ViewFactor and NrSubDotsPerDot to 1, and set the DPI to 127, which corresponds to 0.2 [mm] per dot, the screen resolution that the GeoDMS assumes when calculating the screen scale of the main ViewPort. ",
    "url": "/docs/export-viewports.html#script-parameters",
    
    "relUrl": "/docs/export-viewports.html#script-parameters"
  },"983": {
    "doc": "export-viewports",
    "title": "export-viewports",
    "content": " ",
    "url": "/docs/export-viewports.html",
    
    "relUrl": "/docs/export-viewports.html"
  },"984": {
    "doc": "export",
    "title": "clipboard",
    "content": "The table view can be used to export data to the clipboard with the following tools: . copies the (selected) data from the table to the clipboard, string data-item are quoted and a semicolon is used as delimiter between the data item. copies the visible contents of the active table as picture to the clipboard . More information on how to use the table view can be found in chapter 8 of the user-guide. ",
    "url": "/docs/export.html#clipboard",
    
    "relUrl": "/docs/export.html#clipboard"
  },"985": {
    "doc": "export",
    "title": "primary data to files",
    "content": "Primary data can be exported to files in two ways: . 1) By configuring a storagemanager to data items referring to calculation results, see topic: data-source. 2) By using the geodms-gui (see paragraph 15.3 of the User Guide). In the tree view a pop up menu option is available for each data item to export primary data to the following formats: . | Bitmap (*.TIF or *.BMP) (for data items with a grid-domain)). The option exports data to (default and advised) tif format and optional bmp format. | Table (*.DBF with .shp and .shx where possible). This option exports data to dbf format. If the data item refers to vector-data, the geometry is also exported to .shp/.shx format resulting in an ShapeFile. | ascii-grid (for data items with a grid-domain). The option exports data to Ascii grid format. | csv table for all data items. This option exports data to a csv file with string fields quoted and a semicolon delimiter between all fields. | . ",
    "url": "/docs/export.html#primary-data-to-files",
    
    "relUrl": "/docs/export.html#primary-data-to-files"
  },"986": {
    "doc": "export",
    "title": "export",
    "content": "With the GeoDMS data can be exported to multiple formats. This applies both to source data as well as calculated results. Three types of exports are distinguished: . | Export primary data to the clipboard | Export primary data to files | export-viewports | . ",
    "url": "/docs/export.html",
    
    "relUrl": "/docs/export.html"
  },"987": {
    "doc": "expression-syntax",
    "title": "how to configure",
    "content": "expression can be configured in two ways: . advised syntax . The advised syntax (since version 7.105) is to configure an expression after the combination of a colon and an equals sign (:=). Expressions are not quoted in this syntax. See the following examples: . attribute&lt;NrHa&gt; ForestAndNature (rdc_100l) := LandUseClass/Forest + LandUseClass/Nature; unit&lt;float32&gt;    meter                      := baseunit('m', float32); parameter&lt;string&gt; capitol                    := 'Amsterdam'; parameter&lt;meter&gt;  marathon                   := 42195[meter]; . original syntax . The original syntax (and only syntax until GeoDMS Version 7.104) is to configure an expression with the “expr” property. With this syntax expression are always configured between double quotes (“”). See the following examples: . attribute&lt;NrHa&gt;   ForestAndNature (rdc_100l) : expr = \"LandUseClass/Forest + LandUseClass/Nature\"; unit&lt;float32&gt;     m                          : expr = \"baseunit('m', float32)\"; parameter&lt;string&gt; capitol                    : expr = \"'Amsterdam'\"; parameter&lt;meter&gt;  marathon                   : expr = \"42195[meter]\"; . This syntax is still valid, but the new syntax is advised since GeoDMS version 7.105 as: . | It is shorter. | It is better understood by grammar configuration files for example in Notepad ++ and or Crimson Editor. | Double quotes in strings can be used without indirections. | . ",
    "url": "/docs/expression-syntax.html#how-to-configure",
    
    "relUrl": "/docs/expression-syntax.html#how-to-configure"
  },"988": {
    "doc": "expression-syntax",
    "title": "components",
    "content": "Expressions consist of one or a combination of the following components: . | other data-item, see example 1 | operators-and-functions, see example 1,2,4 | constants, see example 3 and 4 | . ",
    "url": "/docs/expression-syntax.html#components",
    
    "relUrl": "/docs/expression-syntax.html#components"
  },"989": {
    "doc": "expression-syntax",
    "title": "expression-syntax",
    "content": " ",
    "url": "/docs/expression-syntax.html",
    
    "relUrl": "/docs/expression-syntax.html"
  },"990": {
    "doc": "expression",
    "title": "characteristics",
    "content": ". | management-of-dependencies | constant-state-of-data-items | explicit-configuration-of-value-types | subexpression | unit-metric-consistency | . ",
    "url": "/docs/expression.html#characteristics",
    
    "relUrl": "/docs/expression.html#characteristics"
  },"991": {
    "doc": "expression",
    "title": "how to configure",
    "content": ". | expression-syntax | indirect-expression | external-components | . ",
    "url": "/docs/expression.html#how-to-configure",
    
    "relUrl": "/docs/expression.html#how-to-configure"
  },"992": {
    "doc": "expression",
    "title": "fast calculations",
    "content": "The GeoDMS is used interactively, even with large data sets. This can only be achieved if calculations are performed fast, limiting the waiting time of the user for results. Much attention in the development of the GeoDMS is being paid to efficient calculation processes. This is integral characteristic of the GeoDMS, taking into account the following aspects . | data-model | calculation-management | algorithmic-techniques | programming-architecture | system-architecture | . ",
    "url": "/docs/expression.html#fast-calculations",
    
    "relUrl": "/docs/expression.html#fast-calculations"
  },"993": {
    "doc": "expression",
    "title": "expression",
    "content": "The GeoDMS is intended to configure calculations, indicators, model components and chains. It offers a powerful set of operators-and-functions to configure and calculate the calculation/model logic in an efficient and transparent way. Quality control in the model logic is implemented by the management of dependencies and checking the consistency of calculations. Although it is possible to execute external components with the GeoDMS, it is advised to configure especially the core components of a model in GeoDMS operators &amp; functions, to be able to use the full functionality of the GeoDMS modeling environment. External components keep their ‘black box’ character, which limit the transparency, efficiency and control of a the model configuration in the GeoDMS. ",
    "url": "/docs/expression.html",
    
    "relUrl": "/docs/expression.html"
  },"994": {
    "doc": "external-components",
    "title": "external components",
    "content": "The GeoDMS can execute external executables (with and without parameters) and scripts in for instance MsAccess. Dependencies in external components can not be managed by the GeoDMS. If relevant, they need be made explicit to the GeoDMS (see explicitsuppliers property). ",
    "url": "/docs/external-components.html#external-components",
    
    "relUrl": "/docs/external-components.html#external-components"
  },"995": {
    "doc": "external-components",
    "title": "executables",
    "content": "This paragraph presents an example on how to execute an external executable. In this example an executable: C:\\acsl\\math\\amath.exe need to be executed with a set of parameters. Example: . C:\\acsl\\math\\amath.exe -I C:\\data\\PcDitch\\bel\\PCD_WP_v3.m -P C:\\data\\PcDitch\\bel\\pd121.prx . The command consists of the following parts: . | C:\\acsl\\math\\amath: the name of the ACSL executable | -I: a first parameter | C:\\data\\PcDitch\\bel\\PCD_WP_v3.m : a second parameter, refering to a external model configuration script. | -P: a third parameter | C:\\data\\PcDitch\\bel\\pd121.prx: a fourth parameter, refering to a file with a set of other model parameters. | . Configuration to execute the executable: . container ConfigurationSettings {   container ACSL_exe: Descr = \"c:\\\\acsl\\\\math\\\\amath\";   container Data_Dir: Descr = \"c:\\\\data\\\\PcDitch\\\\bel\\\\\"; } container Command {     container ModelScript:     Descr = \"PCD_WP_v3.m\";     container ModelParameters: Descr = \"pd121.prx\";     container Execute: Using = \"ConfigurationSettings\"     , := EXEC(            DESCR(ACSL_exe) +  ' -I ' + `            DESCR(Data_Dir) + `            DESCR(ModelScript) + '  -P ' + `            DESCR(Data_Dir) + `            DESCR(ModelParameters)`         ); } . The external component is configured to the Execute container. The function EXEC executes the ACSL executable with the set of parameters. The configuration element DESCR(ACSL_exe) is configured to use the value of the description property of the ACSL_exe item in the expression It also makes the GeoDMS aware the ModelScript has become a supplier of the Execute item. ",
    "url": "/docs/external-components.html#executables",
    
    "relUrl": "/docs/external-components.html#executables"
  },"996": {
    "doc": "external-components",
    "title": "Ms Access functions",
    "content": "Functions written in scripts in Ms Access databases can also be executed. A necessary precondition to execute a Ms Access function is to add an Eval function in the Ms Access database containing the function to be executed. This Eval function need to look as follows: . Function DoAction(ByVal VarAction As Variant)    Eval (VarAction) End Function . From a GeoDMS configuration this DoAction function can now be executed. The function can call any other function in the same database (be aware, only function, no subroutines). Two GeoDMS functions can be used, both run a MsAccess application with a given database name, function name and optional parameters. | EXEC_ACCESS_ACTION_DB: The Ms Access application does not become visible. | EXEC_VIS_ACCESS_ACTION_DB: The Ms Access application becomes visible. | . Example: . container PrepareDatabase . {    parameter&lt;string&gt; codeDb         := fullPathName(System/Database, System/Database/MetaDbFullName);    parameter&lt;string&gt; dataDir        := fullPathName(System/Database, System/Database/DbDirectory);    parameter&lt;string&gt; sourceTemplate := dataDir + '/Sources/Elpen_Template.mdb';    container FSS:      := EXEC_VIS_ACCESS_ACTION_DB(          codeDb         ,'ImportFSSSourceFiles('             + quote(dataDir + '/Elpen_FSS.mdb')             + ',' + quote(sourceTemplate)             + ',' + quote(dataDir + '/Sources')  + '         )'      ); } . The first parameter of the EXEC_VIS_ACCESS_ACTION_DB operator is the codeDb parameter. This parameter has an expression configured that results in a full path name of the MsAccess database file. Within this database the function ImportFSSSourceFiles is called, the second parameter in the expression. The function ImportFSSSourceFiles should occur in the database. This function requests three parameters, configured between the brackets in the function call. The Eval function in MsAccess requests parameters to be quoted. Therefore, each function parameter is configured with the quote function. ",
    "url": "/docs/external-components.html#ms-access-functions",
    
    "relUrl": "/docs/external-components.html#ms-access-functions"
  },"997": {
    "doc": "external-components",
    "title": "external-components",
    "content": " ",
    "url": "/docs/external-components.html",
    
    "relUrl": "/docs/external-components.html"
  },"998": {
    "doc": "feasibilitytest",
    "title": "feasibilitytest",
    "content": "The Feasibility Test is a test within the DiscreteAlloc function that tests whether the claims are compatible with the amount of grid cells per region. It does not take into account that some cells may have a suitability below the threshold. Assuming that all cells are suitable enough for each land use type, the question whether a feasible allocation results exists can be reduced to the same question with all suitabilities being zero, which can be simplified by aggregating all cells per atomic region. Based on this assumption and reduction, the feasibility test attempts to make a Linear Assignment of all land units of each atomic region to all claims that include that region such that all claimed restrictions are met. ",
    "url": "/docs/feasibilitytest.html",
    
    "relUrl": "/docs/feasibilitytest.html"
  },"999": {
    "doc": "feasiblesolution",
    "title": "definition",
    "content": "FeasibleSolution is the eleventh argument of the discrete_alloc function. FeasibleSolution is an arbitrary container. The FeasibleSolution argument is not in use, it is implemented for future use. Still it is necessary to configure this FeasibleSolution argument. ",
    "url": "/docs/feasiblesolution.html#definition",
    
    "relUrl": "/docs/feasiblesolution.html#definition"
  },"1000": {
    "doc": "feasiblesolution",
    "title": "example",
    "content": "container FeasibleSolution; . ",
    "url": "/docs/feasiblesolution.html#example",
    
    "relUrl": "/docs/feasiblesolution.html#example"
  },"1001": {
    "doc": "feasiblesolution",
    "title": "feasiblesolution",
    "content": "allocation-functions, argument 11: FeasibleSolution . ",
    "url": "/docs/feasiblesolution.html",
    
    "relUrl": "/docs/feasiblesolution.html"
  },"1002": {
    "doc": "feature-attribute",
    "title": "composition type",
    "content": "The distinction between point, arc or polygon data is made by configuring the composition. The composition type options are: . | not configured for point coordinates | arc for arc coordinates | poly(gon) for coordinates | . ",
    "url": "/docs/feature-attribute.html#composition-type",
    
    "relUrl": "/docs/feature-attribute.html#composition-type"
  },"1003": {
    "doc": "feature-attribute",
    "title": "feature-attribute",
    "content": "A feature attribute is a an attribute referring to a geography location. It refers to one or a sequence of coordinates. The feature type for a country is usually the coordinates of the boundary, for a road the start/end location and one or more intermediates and for an address in the BAG the coordinate of the location. The value-type of a feature attribute is a value type from the PointGroup. Feature attributes are in use for vector-data, referring to point, arc or polygon geometries. Although the concept feature attribute contains the word attribute, it can also be used for parameter. For feature attributes it is advised to use the name: geometry. If another name is used, the feature attribute need to be configured for the vector domain-unit with the following syntax: . unit&lt;uint32&gt; house : DialogType = \"map\" , DialogData = \"location\" {     attribute&lt;point_rd&gt; location; } . In this example the name location is used as feature attribute. As this is not the default name geometry, the configuration with the dialogtype and DialogData properties is necessary. If the feature attribute is called (G)(g)eometry, the properties: DialogType and DialogData do not have to be configured (since version 7.206). ",
    "url": "/docs/feature-attribute.html",
    
    "relUrl": "/docs/feature-attribute.html"
  },"1004": {
    "doc": "fencecontainer",
    "title": "syntax",
    "content": ". | FenceContainer(container, string message) | . ",
    "url": "/docs/fencecontainer.html#syntax",
    
    "relUrl": "/docs/fencecontainer.html#syntax"
  },"1005": {
    "doc": "fencecontainer",
    "title": "description",
    "content": "FenceContainer calculates all subitems in the specified container that are made available to consumers as subitems of the resulting container and posts the configured string message in the EventLog when finished before any of the resulting subitems can be used. This enforces the scheduler to first complete a set of calculations before commencing on a subsequent set. Starting from version 14.4.0, any calculation task that is scheduled after the calculation of a fenced container will only start after the calculation of all fenced tasks will be completed thus enabling a modeller to synchronize memory intensive sub-tasks and limit simultaneous memory allocation for such separated sub-tasks. ",
    "url": "/docs/fencecontainer.html#description",
    
    "relUrl": "/docs/fencecontainer.html#description"
  },"1006": {
    "doc": "fencecontainer",
    "title": "example",
    "content": "container Results := FenceContainer(Results0, 'Results '+Context/ThisIterName+' finished calculating'); . ",
    "url": "/docs/fencecontainer.html#example",
    
    "relUrl": "/docs/fencecontainer.html#example"
  },"1007": {
    "doc": "fencecontainer",
    "title": "fencecontainer",
    "content": "miscellaneous-functions FenceContainer . ",
    "url": "/docs/fencecontainer.html",
    
    "relUrl": "/docs/fencecontainer.html"
  },"1008": {
    "doc": "file,-folder-and-read-functions",
    "title": "file,-folder-and-read-functions",
    "content": "File, Folder and Read operators-and-functions operate on files and folders, like makedir or storage_name or read data in specific formats, like readlines . | existingfile - full path name of the filename argument if the file exists and in the alternative argument if the file does not exists | createfile - copies the source filename to the target filename | initfile - copies the init filename to the target filename, synonym for CreateFile | copyfile - copies the source filename to the target filename | . | currentdir - the folder of the root file of the loaded configuration | makedir - creates a new folder | fullpathname - full path name of the folder_or_filename argument | . | exec - executes a command argument | exec_ec - executes a command with a returning exitcode | execdll - executes a function in the dll | . | storage_name - value of the StorageName property | . | readvalue - a single parameter value from a string dataitem | readarray - an attribute, with row(s) of values from a string dataitem | readlines - an attribute with the concatenation of the values of the rows | readelems - an attribute, with column(s) of values from a string dataitem | . | parse_xml - parses the contents of the argument with XML data into a set of configured attributes, based on the xml_scheme argument. | . ",
    "url": "/docs/file,-folder-and-read-functions.html",
    
    "relUrl": "/docs/file,-folder-and-read-functions.html"
  },"1009": {
    "doc": "filegeodatabase",
    "title": "Read",
    "content": "Gdal.vect can be used to read a FileGeoDatabase. Example: . container TestFGDB  : StorageName     = \"%projdir%/data/test_fgdb.gdb\" ,   StorageType     = \"gdal.vect\" ,   StorageReadOnly = \"True\" ,   SyncMode = \"AllTables\" {     unit&lt;uint32&gt; Query: SqlString = \"SELECT * FROM base_tbl WHERE OBJECTID_1 &lt;= 3 ORDER BY id\"; } . This configuration results in a set of endogenous items for each table and each field in the test_fgdb File Geodatabase. For each table within the GeoDMS a domain-unit is created, used as parent and domain unit for the fields in this table. For each field an attribute is created with a value-type corresponding to the data type of the field. Geometry is used as default name for the feature-attribute of a table. The composition type is derived from the meta information of the features. The configured Query unit results in a new domain unit, based on a selection of the base_tbl. The * character in the sqlstring indicates all fields are read from the table and for each field an endogenous attribute is created in the GeoDMS. Attributes can also be configured explicitly, but only if the values types of the field matches exactly with the configured values types (int32 for integer, float64 for floating points and string for strings). ",
    "url": "/docs/filegeodatabase.html#read",
    
    "relUrl": "/docs/filegeodatabase.html#read"
  },"1010": {
    "doc": "filegeodatabase",
    "title": "limitations in using file Geodatabases",
    "content": ". | In general this format is not advised. The format is not open and if issues occur they can hardly be debugged. | The GeoDMS only supports reading data from file Geodatabase, not writing to. | The GeoDMS only reads vector-data, grid-data can not be read. | . ",
    "url": "/docs/filegeodatabase.html#limitations-in-using-file-geodatabases",
    
    "relUrl": "/docs/filegeodatabase.html#limitations-in-using-file-geodatabases"
  },"1011": {
    "doc": "filegeodatabase",
    "title": "filegeodatabase",
    "content": "The FileGeoDatabase is a database format from ESRI, mainly used by ArcGIS. It is a closed and non-documented format, but ESRI offers a Dynamic Link Library (DLL) with an API to open File Geodatabases, which is part of gdal. ",
    "url": "/docs/filegeodatabase.html",
    
    "relUrl": "/docs/filegeodatabase.html"
  },"1012": {
    "doc": "first",
    "title": "syntax",
    "content": ". | first(a) | first(a, relation) | . ",
    "url": "/docs/first.html#syntax",
    
    "relUrl": "/docs/first.html#syntax"
  },"1013": {
    "doc": "first",
    "title": "definition",
    "content": ". | first(a) results in a parameter with the first of the non null values of attribute a. | first(a, relation) results in an attribute with the first of the non null values of attribute a, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | . ",
    "url": "/docs/first.html#definition",
    
    "relUrl": "/docs/first.html#definition"
  },"1014": {
    "doc": "first",
    "title": "applies to",
    "content": ". | attribute a with Numeric, Point, string or bool value-type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/first.html#applies-to",
    
    "relUrl": "/docs/first.html#applies-to"
  },"1015": {
    "doc": "first",
    "title": "conditions",
    "content": ". | The values unit of the resulting data item should match with regard to value type and metric with the values unit of attribute a. | The domain of argument a and relation must match. | . ",
    "url": "/docs/first.html#conditions",
    
    "relUrl": "/docs/first.html#conditions"
  },"1016": {
    "doc": "first",
    "title": "example",
    "content": "parameter&lt;uint32&gt; firstNrInh    := first(City/NrInhabitants);  result = 550 parameter&lt;string&gt; firstCityName := first(City/CityName);       result = ‘Amsterdam’ parameter&lt;bool&gt;   firstIsCap    := first(City/IsCapital);      result = True attribute&lt;uint32&gt; firstNrInhRegion    (Region) := first(City/NrInhabitants, City/Region_rel); attribute&lt;string&gt; firstCityNameRegion (Region) := first(City/CityName,      City/Region_rel); attribute&lt;bool&gt;   firstIsCapital      (Region) := first(City/IsCapital,     City/Region_rel); . | City/NrInhabitants | City/CityName | IsCapital | City/Region_rel | . | 550 | Amsterdam | True | 0 | . | 525 | Rotterdam | False | 1 | . | 300 | Utrecht | False | 2 | . | 500 | DenHaag | False | 1 | . | 200 | Eindhoven | False | 3 | . | 175 | Haarlem | False | null | . | null | null | False | 3 | . domain City, nr of rows = 7 . | firstNrInhRegion | firstCityNameRegion | firstIsCapitalRegion | . | 550 | Amsterdam | True | . | 525 | Rotterdam | False | . | 300 | Utrecht | False | . | 200 | Eindhoven | False | . | null | null | False | . domain Region, nr of rows = 5 . ",
    "url": "/docs/first.html#example",
    
    "relUrl": "/docs/first.html#example"
  },"1017": {
    "doc": "first",
    "title": "see also",
    "content": ". | last | . ",
    "url": "/docs/first.html#see-also",
    
    "relUrl": "/docs/first.html#see-also"
  },"1018": {
    "doc": "first",
    "title": "first",
    "content": "aggregation-functions first . ",
    "url": "/docs/first.html",
    
    "relUrl": "/docs/first.html"
  },"1019": {
    "doc": "first_node",
    "title": "syntax",
    "content": ". | first_node(arc_polygon_dataitem) | . ",
    "url": "/docs/first_node.html#syntax",
    
    "relUrl": "/docs/first_node.html#syntax"
  },"1020": {
    "doc": "first_node",
    "title": "definition",
    "content": "first_node(arc_polygon_dataitem) results in a point data-item with the coordinates of the first point of an arc or polygon of argument arc_polygon_dataitem. ",
    "url": "/docs/first_node.html#definition",
    
    "relUrl": "/docs/first_node.html#definition"
  },"1021": {
    "doc": "first_node",
    "title": "description",
    "content": "Use the arc2segm function to split an arc in segment. ",
    "url": "/docs/first_node.html#description",
    
    "relUrl": "/docs/first_node.html#description"
  },"1022": {
    "doc": "first_node",
    "title": "applies to",
    "content": "data item arc_polygon_dataitem with fpoint or dpoint value-type and composition type arc or polygon. ",
    "url": "/docs/first_node.html#applies-to",
    
    "relUrl": "/docs/first_node.html#applies-to"
  },"1023": {
    "doc": "first_node",
    "title": "example",
    "content": "attribute&lt;fpoint&gt; first_node (Road) := first_node(road/geometry); . | road/geometry | first_node | . | {2 {399246, 112631}{398599, 111866}} | {399246, 112631} | . | {3 {398599, 111866}{399495, 111924} {401801,111524}} | {398599, 111866} | . | {2 {401529, 114921}{398584, 114823}} | {401529, 114921} | . domain Road, nr of rows = 3 . ",
    "url": "/docs/first_node.html#example",
    
    "relUrl": "/docs/first_node.html#example"
  },"1024": {
    "doc": "first_node",
    "title": "see also",
    "content": ". | last_node | . ",
    "url": "/docs/first_node.html#see-also",
    
    "relUrl": "/docs/first_node.html#see-also"
  },"1025": {
    "doc": "first_node",
    "title": "first_node",
    "content": "network-functions first node . ",
    "url": "/docs/first_node.html",
    
    "relUrl": "/docs/first_node.html"
  },"1026": {
    "doc": "fisher's-natural-breaks-classification-complexity-proof",
    "title": "definitions",
    "content": "Given a sequence of strictly increasing values vi and positive weights wi for i ? {1..n}, and a given number of classes k with k = n, . choose classification function I(x) : {1..n} ? {1..k}, such that ***SSDn, k***, the sum of the squares of the deviations from the class means, is minimal, where: . \\[\\\\begin{align} SSD_{n,k} &amp;:= \\\\min\\\\limits_{I: \\\\{1..n\\\\} \\\\to \\\\{1..k\\\\}} \\\\sum\\\\limits^k_{j=1} ssd(S_j) &amp; &amp; \\\\text{minimal sum of sum of squared deviations } \\\\\\\\ S_j &amp;:= \\\\{i\\\\in \\\\{1..n\\\\}\\|I(i) = j\\\\} &amp; &amp; \\\\text{set of indices that map to class}\\\\,j\\\\\\\\ ssd(S) &amp;:= { \\\\sum\\\\limits_{i \\\\in S} {w_i (v_i - m(S))^2} } &amp; &amp; \\\\text{the sum of squared deviations of the values of any index set}\\\\,S\\\\\\\\ m(S) &amp;:= { s(S) \\\\over w(S) } &amp; &amp; \\\\text{the weighted mean of the values of any index set}\\\\,S\\\\\\\\ s(S) &amp;:= { \\\\sum\\\\limits_{i \\\\in S} {w_i v_i} } &amp; &amp; \\\\text{the weighted sum of the values of any index set}\\\\,S\\\\\\\\ w(S) &amp;:= \\\\sum\\\\limits_{i \\\\in S} {w_i} &amp; &amp; \\\\text{the sum of the value-weights of any index set}\\\\,S \\\\end{align}\\] Note that any array of n unsorted and not necessarily unique values can be sorted and made into unique vi*** by removing duplicates with ***wi*** representing the occurrence frequency of each value in ***O(nlog(n)) time. ",
    "url": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#definitions",
    
    "relUrl": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#definitions"
  },"1027": {
    "doc": "fisher's-natural-breaks-classification-complexity-proof",
    "title": "characteristics",
    "content": "One can derive the following: . | ssd(S) = sqr(S) - wsm(S) with | . \\[\\\\begin{align} sqr(S) &amp;:= \\\\sum\\\\limits_{i \\\\in S} {w_i {v_i}^2} \\\\\\\\ wsm(S) &amp;:= {w(S) {m(S)}^2} = s(S) m(S) &amp; &amp;\\\\text{the weighted square of the mean of S} \\\\end{align}\\] . | SSD = SSV - WSM with | . \\[\\\\begin{align} SSV &amp;:= \\\\sum\\\\limits_{j} {sqr(S_j)} = sqr(\\\\{1..n\\\\}) \\\\\\\\ WSM &amp;:= \\\\sum\\\\limits_{j} {wsm(S_j)} = \\\\sum\\\\limits_{j} {w(S_j) {m(S_j)}^2} = \\\\sum\\\\limits_{j} { {s(S_j)}^2 \\\\over w(S_j)} \\\\end{align}\\] . | Since SSV is independent of the chosen partitioning Sj, minimizing SSD is equivalent to maximizing: | . \\[WSM = \\\\sum\\\\limits_{j} { {\\[\\\\sum\\\\limits_{i \\\\in S_j} {w_i v_i}\\]^2} \\\\over {\\\\sum\\\\limits_{i \\\\in S_j} {w_i}} }\\] . | Since the sequence v is sorted, all vi***’s that belong to one class ***Sj*** must be consecutive and if equal values would be allowed, these would end up in the same class provided that at least ***k unique values are given (for proof, see: Fisher, On Grouping for Maximum Homogeneity, 1958). Consequently, the Sj***’s can be 1-to-1 related to a strictly increasing sequence of class-break-indices *i**j** := min **Sj*** for **j* = 1..k with i1 = 1 and also to a strictly increasing sequence of class-break-values vij. | . | With n values and k classes, one can choose $\\binom{n-1}{k-1} = \\frac{(n-1)!}{(k-1)! (n-k)!}$ elements as first value of a class (the minimum value must be the minimum of the lowest class). | . | given indices i1 = i2 and i3 = i4: i1 = i3 ? i2 = i4 ? m(i1..i2) = m(i3..i4) | . ",
    "url": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#characteristics",
    
    "relUrl": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#characteristics"
  },"1028": {
    "doc": "fisher's-natural-breaks-classification-complexity-proof",
    "title": "dynamic programming approach",
    "content": "Take SSMi,j*** as the maximum sum of squared deviations for the first i values classified to j classes and ***CBi,j*** as the value index of the last class-break for such classification. Since a maximal sum is a sum, it is easy to see that ***SSMi,j*** is equal to the maximum value for ***p ? {j..i} of SSMp*** - 1, ***j*** - 1 + **ssm({p..i}) . Thus, the *SSMp - 1, j - 1 provide Overlapping Sub Problems with an Optimal Sub Structure and the following dynamic program can be used to find a solution. Dynamic rule for i = j &gt; 1: . \\[\\\\begin{align} SSM_{i,j} &amp;:= \\\\max\\\\limits_{p \\\\in \\\\{j..i\\\\}} SSM_{p-1, j-1}+ssm(\\\\{p..i\\\\}) \\\\\\\\ CB_{i,j} &amp;:= arg\\\\max\\\\limits_{p \\\\in \\\\{j..i\\\\}} SSM_{p-1, j-1}+ssm(\\\\{p..i\\\\}) \\\\end{align}\\] Start conditions: . \\[\\\\begin{align} SSM_{i,1} &amp;:= ssm(1..i) CB_{i,1} &amp;:= 1 \\\\end{align}\\] Thus . \\[\\\\begin{align} SSM_{i,i} &amp;:= sqr(\\\\{1..i\\\\}) \\\\\\\\ CB_{i,i} &amp;:= i \\\\\\\\ \\\\end{align}\\] Note that CBi,j and SSMi,j are only defined for j = i thus i - j = 0. Furthermore, for finding values with indices (n,k), only elements with i - j = n - k are relevant. | If i = CBn, k then the corresponding previous class-break index has been stored as CBi - 1, k - 1. | . | Fisher described an algorithm that goes through all i and for each i finding and storing all SSDi,j and CBi,j for each subsequent j, which is the approach taken in the found implementations (see links). This requires O(k × n) working memory and O(k × n 2) time. | . | Dynamically going through all j and for each j finding all SSMi,j*** for each i only requires **O(n-k)* working memory and O(k × n × log(n)) time by exploiting the no-crossing-paths characteristic, as proven below, but only provides the last ClassBreak for each i. | . | no crossing paths property: CBi, jis monotonous increasing with i, thus i1 = i2 ? CBi1, j = CBi2, j (see proof below). | . | To obtain a chain of CBi,j back from CBn, k, one needs to maintain (n - k + 1) × (k - 2) intermediate CB’s, unless the O(k × nlog(n)) algorithm is reapplied k times. | . ",
    "url": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#dynamic-programming-approach",
    
    "relUrl": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#dynamic-programming-approach"
  },"1029": {
    "doc": "fisher's-natural-breaks-classification-complexity-proof",
    "title": "complexity",
    "content": ". | Each ssm(i1..i2***) can be calculated in constant time as $\\frac{\\left(WV[i_2] - WV[i_1-1]\\right)^2}{W[i_2] - W[i_1-1]}$ after a single initialization of **O(n)* time and keeping a buffer of O(n) size containing series of cumulative weights, W, and cumulative weighted values, WV. | . | During the calculation of the n - k + 1 relevant values of SSM and CB for a row j ? {2..k - 1} using the n - k + 1 values that were calculated for row j - 1, one can divide and conquer recursively by calculating CBi***, ***j*** for i in the middle of a range for which a left and right boundary are given and using the “no crossing paths” property to cut the remaining number of options in half by sectioning the lower indices to the left or equal options and the higher indices to the greater or equal options. The required processing time budget **C(n,m)* for processing n class-breaks using m values for previous class breaks is c × m + max i : [C(n/2,i)+C(n/2,m+1-i)]. A budget of C(n,m) := c × (m + n ) × (log2(n)+1) is sufficient, thus the calculation of CBi, j*** given all ***CBi, j - 1*** requires processing time of ***C(n,n), which is O(n * logn). | . ",
    "url": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#complexity",
    
    "relUrl": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#complexity"
  },"1030": {
    "doc": "fisher's-natural-breaks-classification-complexity-proof",
    "title": "proof of the no crossing paths property",
    "content": "Addition: the no crossing paths property might be equivalent to what elsewhere is called the convex Monge condition, which allows for the found speed-up of solving a dynamic programming problem. | Given indices p1, p2, i1, i2 such that p1 &lt; p2 = i1 &lt; ***i2, | . \\[\\\\begin{align} m_p &amp;:= m(\\\\{p1 .. p2-1\\\\}) &amp;w_p &amp;:= w(\\\\{p1 .. p2-1\\\\}) \\\\\\\\ m_j &amp;:= m(\\\\{p2 .. i1 \\\\}) &amp;w_j &amp;:= w(\\\\{p2 .. i1 \\\\}) \\\\\\\\ m_n &amp;:= m(\\\\{i1+1 .. i2\\\\}) &amp;w_n &amp;:= w(\\\\{i1+1 .. i2\\\\}) \\\\\\\\ m_{pj} &amp;:= m(\\\\{p1 .. i1 \\\\}) &amp;w_{pj} &amp;:= w(\\\\{p1 .. i1\\\\}) \\\\\\\\ m_{jn} &amp;:= m(\\\\{p2 .. i2 \\\\}) &amp;w_{jn} &amp;:= w(\\\\{p2 .. i2\\\\}) \\\\\\\\ m_{pjn} &amp;:= m(\\\\{p1 .. i2 \\\\}) &amp;w_{pjn} &amp;:= w(\\\\{p1 .. i2\\\\}) \\\\\\\\ \\\\end{align}\\] . | it follows that | . \\(v_{p1} \\&lt; v_{p2} \\\\le v_{i1} \\&lt; v_{i2} \\\\\\\\ m_p \\&lt; m_{pj} \\&lt; m_j \\&lt; m_{jn} \\&lt; m_n \\\\\\\\ m_{pj} \\&lt; m_{pjn} \\&lt; m_{jn}\\) \\(\\\\begin{align} w_{pj} &amp;= w_p + w_j \\\\\\\\ w_{jn} &amp;= w_j + w_n \\\\\\\\ w_{pjn} &amp;= w_p + w_j + w_n = w_{pj}+w_{jn} - w_j \\\\\\\\ \\\\end{align}\\) \\(\\\\begin{align} w_{pj} \\\\times m_{pj} &amp;= w_p \\\\times m_p + w_j \\\\times m_j \\\\\\\\ w_{jn} \\\\times m_{jn} &amp;= w_j \\\\times m_j + w_n \\\\times m_n \\\\\\\\ w_{pjn} \\\\times m_{pjn} &amp;= w_j \\\\times m_j + w_n \\\\times m_n + w_n \\\\times m_n \\\\\\\\ w_{pj} \\\\times m_{pj}+w_{jn} \\\\times m_{jn} &amp;= w_j \\\\times m_j + w_{pjn} \\\\times m_{pjn} \\\\end{align}\\) \\(\\\\begin{align} ssm(\\\\{p1 .. i1\\\\}) &amp;= w_{pj} \\\\times m_{pj}^2 \\\\\\\\ ssm(\\\\{p2 .. i1\\\\}) &amp;= w_{j} \\\\times m_{j}^2 \\\\\\\\ ssm(\\\\{p1 .. i2\\\\}) &amp;= w_{pjn} \\\\times m_{pjn}^2 \\\\\\\\ ssm(\\\\{i1 .. i2\\\\}) &amp;= w_{jn} \\\\times m_{jn}^2 \\\\end{align}\\) . | and it follows that the following quantities are positive: | . \\[\\\\begin{align} w_{pj1} &amp;:= w_j \\\\times (m_{jn} - m_{j}) / (m_{jn} - m_{pj}) &amp;&gt; 0 \\\\\\\\ w_{jn1} &amp;:= w_j \\\\times (m_{j} - m_{pj}) / (m_{jn} - m_{pj}) &amp;&gt; 0 \\\\\\\\ w_{pj3} &amp;:= w_{pj} - w_{pj1} &amp;&gt; 0\\\\\\\\ w_{jn3} &amp;:= w_{jn} - w_{jn1} &amp;&gt; 0\\\\\\\\ \\\\end{align}\\] . | note that | . \\[\\\\begin{align} w_{pj1}+w_{jn1} &amp;= w_j \\\\\\\\ w_{pj3}+w_{jn3} &amp;= w_{pjn} \\\\\\\\ w_{pj1}+w_{pj3} &amp;= w_{pj} \\\\\\\\ w_{jn1}+w_{jn3} &amp;= w_{jn} \\\\\\\\ \\\\\\\\ w_{pj1} \\\\times m_{pj} + w_{jn1} \\\\times m_{jn} &amp;= w_j \\\\times m_j \\\\\\\\ w_{pj3} \\\\times m_{pj} + w_{jn3} \\\\times m_{jn} &amp;= w_{pj} \\\\times m_{pj}+w_{jn} \\\\times m_{jn}-w_j \\\\times aj = w_{pjn} \\\\times m_{pjn} \\\\end{align}\\] . | and therefore | . \\[\\\\begin{align} w_{pj1} \\\\times (m_{pj} - m_j )^2 &amp;+ w_{jn1} \\\\times (m_{jn} - m_j )^2 &amp;= w_{pj1} \\\\times m_{pj}^2 &amp;+ w_{jn1} \\\\times m_{jn}^2 - w_{j} \\\\times m_{j}^2 &amp;&gt; 0 \\\\\\\\ w_{pj3} \\\\times (m_{pj} - m_{pjn})^2 &amp;+ w_{jn3} \\\\times (m_{jn} - m_{pjn})^2 &amp;= w_{pj3} \\\\times m_{pj}^2 &amp;+ w_{jn3} \\\\times m_{jn}^2 - w_{pjn} \\\\times m_{pjn}^2 &amp;&gt; 0 \\\\end{align}\\] . | summation of these two inequalities gives: | . ***wpj*** × ***mpj**&lt;/sub&gt;2 + **wjn*** × ***mjn***2 - ***wj*** × ***mj2 - ***wpjn**&lt;/sub&gt; × **mpjn2*** &gt; 0 . | thus | . wjn*** × ***mjn***2 - ***wj × ***mj2**&lt;/sup&gt; &gt; **wpjn**&lt;/sub&gt; × **mpjn**&lt;/sub&gt;2 - **wpj**&lt;/sub&gt; × **mpj***2 . | which can be restated as | . ssm({p2.i2}) - ssm({p2..i1}) &gt; ssm({p1..i2}) - ssm({p1..i1}) . | given that : SSMi1, j = SSMp2 - 1, j - 1 + ssm({p2..i1}) = SSMp1 - 1, j - 1 + ssm({p1..i1}) for all p1 &lt; p2 when p2 is taken as C**Bi1, j, | adding the last two inequalities results in: | . SSMp2*** - 1, ***j*** - 1 + **ssm({p2..i2}) &gt; *SSMp1 - 1, j - 1 + ssm({p1..i2}) for all n = i . | given the definition for CB, this implies that CB*i2, j* cannot be p1 and therefore *CBi2, j*** = ***p2 = **CBi1, j***, QED. | . ",
    "url": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#proof-of-the-no-crossing-paths-property",
    
    "relUrl": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#proof-of-the-no-crossing-paths-property"
  },"1031": {
    "doc": "fisher's-natural-breaks-classification-complexity-proof",
    "title": "further improvements",
    "content": "Note that . | for each i, and j &lt; i: SSMi,j &lt; SSMi,j + 1 since splitting up any class would make the total SSM larger. | it is not always true that SSMi,j &lt; = SSMi + 1,j, for example, take v1 = - 10 and v2 = 0, then SSM1, 1 = 1 × (-10)2 = 100 and SSM2, 1 = 2 × (-5)2 = 50 | From the previous paragraph, it follows that: | . ssm({p2..i2}) - ssm({p1..i2}) &gt; ssm({p2..i1}) - ssm({p1..i1}) . | for each i1, i2 &gt; i1 and j &lt; i1: | . SSMi2, j + 1 - SSMi2, j = SSMi1, j + 1 - SSMi1, j, which can be proven by induction. following the lines of the latter induction proof it can be shown (elaborate!) that for each i and j &lt; i: CBi,j = CBi,j + 1, thus CBi,j can be used as a lower bound when calculating CBi, j + 1. ",
    "url": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#further-improvements",
    
    "relUrl": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#further-improvements"
  },"1032": {
    "doc": "fisher's-natural-breaks-classification-complexity-proof",
    "title": "previously known algorithms",
    "content": ". | Iteratively moving values from classes with high variation to classes with low variation is discussed on Wikipedia, which does not always result in an optimal solution. Start for example with Class 1 with (1 4) and Class 2 with (99 100). The described algorithms prescribes that 4 needs to go to Class 2 since Class 1 has the highest variation. | . | Local moves as long as the total sum of squared deviations decreases (as described in the ESRI FAQ). Note that this has the risk of sticking to a local optimum. For example when starting with Class 1 = {1, 8, 9, 10} and Class 2 = {16}, the SSD = 50. When moving the 10 to class 2, the SSD increases to 56, but the global minimum is reached when Class 1 = (1) and Class 2 = (8, 9, 10, 16) with an SSD of 38.75. | . ",
    "url": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#previously-known-algorithms",
    
    "relUrl": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#previously-known-algorithms"
  },"1033": {
    "doc": "fisher's-natural-breaks-classification-complexity-proof",
    "title": "source code",
    "content": "Source code is part of the GeoDms and can be found calcnaturalbreaks or in our GitHub Repository, look for the function ClassifyJenksFisher(). ",
    "url": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#source-code",
    
    "relUrl": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#source-code"
  },"1034": {
    "doc": "fisher's-natural-breaks-classification-complexity-proof",
    "title": "acknowledgements",
    "content": "This algorithm and proof of its validity and complexity is found by Maarten Hilferink, also being the author of this page. © Object Vision BV. The work for developing this method has partly been made possible by a software development request from the http://www.pbl.nl PBL Netherlands Environmental Assessment Agency. ",
    "url": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#acknowledgements",
    
    "relUrl": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#acknowledgements"
  },"1035": {
    "doc": "fisher's-natural-breaks-classification-complexity-proof",
    "title": "references",
    "content": ". | Fisher, W. D. (1958). On grouping for maximum homogeneity. American Statistical Association Journal, 53, 789-798. | Jenks, G. F. (1977). Optimal data classification for choropleth maps, Occasional paper No. 2. Lawrence, Kansas: University of Kansas, Department of Geography. | Evans, I.S. (1977). The selection of class intervals. Transactions of the Institute of British Geographers, 2:98-124. | https://arxiv.org/pdf/1701.07204.pdf | https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5148156/ | https://link.springer.com/content/pdf/10.1007%2FBF02574380.pdf | https://en.wikipedia.org/wiki/SMAWK_algorithm | . ",
    "url": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#references",
    
    "relUrl": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#references"
  },"1036": {
    "doc": "fisher's-natural-breaks-classification-complexity-proof",
    "title": "links",
    "content": ". | http://en.wikipedia.org/wiki/Jenks_natural_breaks_optimization (WikiPedia) | http://danieljlewis.org/2010/06/07/jenks-natural-breaks-algorithm-in-python | http://danieljlewis.org/files/2010/06/Jenks.pdf | http://www.biomedware.com/files/documentation/spacestat/interface/map/classify/About_natural_breaks.htm | http://marc.info/?l=r-sig-geo&amp;m=118536881101239 | http://code.google.com/p/geoviz/source/browse/trunk/common/src/main/java/geovista/common/classification/ClassifierJenks.java?spec=svn634&amp;r=634 | http://www.tandfonline.com/doi/abs/10.1080/01621459.1958.10501479 | http://www.casa.ucl.ac.uk/martin/msc_gis/evans_class_intervals.pdf | http://cran.r-project.org/web/packages/classInt/classInt.pdf | http://www.srnr.arizona.edu/rnr/rnr419/publications/jenks_caspall_1971.pdf | . ",
    "url": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#links",
    
    "relUrl": "/docs/fisher's-natural-breaks-classification-complexity-proof.html#links"
  },"1037": {
    "doc": "fisher's-natural-breaks-classification-complexity-proof",
    "title": "fisher's-natural-breaks-classification-complexity-proof",
    "content": "An O(k × n × log(n)) algorithm is presented here, with proof of its validity and complexity, for the classification of an array of n numeric values into k classes such that the sum of the squared deviations from the class means is minimal, known as Fisher’s Natural Breaks Classification. This algorithm is an improvement of Jenks’ Natural Breaks Classification Method, which is a (re)implementation of the algorithm described by Fisher within the context of choropleth maps, which has time complexity O(k × n 2). Finding breaks for 15 classes for a data array of 7 million unique values now takes 20 seconds on a desktop PC. ",
    "url": "/docs/fisher's-natural-breaks-classification-complexity-proof.html",
    
    "relUrl": "/docs/fisher's-natural-breaks-classification-complexity-proof.html"
  },"1038": {
    "doc": "float32",
    "title": "concept",
    "content": ". | float32 a 32 bits (4 bytes) floating point value-type. | float32() is a function converting data-item or unit of other value types to the float32 value type. | . This page describes the float32() function. ",
    "url": "/docs/float32.html#concept",
    
    "relUrl": "/docs/float32.html#concept"
  },"1039": {
    "doc": "float32",
    "title": "syntax",
    "content": ". | float32(a) | literalf | . ",
    "url": "/docs/float32.html#syntax",
    
    "relUrl": "/docs/float32.html#syntax"
  },"1040": {
    "doc": "float32",
    "title": "definition",
    "content": "float32(a) results in a 32 bits(4 bytes) floating point tree-item converted from item a. The function results for: . | integer data items, the integer value is interpreted as floating point value (e.g. an integer value 1 is interpreted as 1.0), if the value exceeds the maximum value for the float32 value type, the result is null; | float64 data items, we refer to documentation on calculation with floating point in your processor for more exact information on how values will be rounded off; | boolean data items, 1.0 for True values and 0.0 for False values; | string data items if the value starts with an allowed numeric value for the value type, this value is converted to a float32 value type. Other characters after the numeric values are ignored. If the string does not start with an allowed numeric value for the value type, the resulting value will be null; | units, a 32 bits(4 bytes) floating point unit of the converted unit. | . ",
    "url": "/docs/float32.html#definition",
    
    "relUrl": "/docs/float32.html#definition"
  },"1041": {
    "doc": "float32",
    "title": "applies to",
    "content": "data item or unit with Numeric, uint2, uint4, bool or string value type . ",
    "url": "/docs/float32.html#applies-to",
    
    "relUrl": "/docs/float32.html#applies-to"
  },"1042": {
    "doc": "float32",
    "title": "since version",
    "content": ". | 5.15 | f suffix since 7.105 | . ",
    "url": "/docs/float32.html#since-version",
    
    "relUrl": "/docs/float32.html#since-version"
  },"1043": {
    "doc": "float32",
    "title": "example",
    "content": "1. parameter&lt;float32&gt; float32Numeric1 := float32(1); 2. parameter&lt;float32&gt; float32Numeric1 := 1f; 3. attribute&lt;float32&gt; float32A (ADomain) := float32(A);    ` 4. attribute&lt;float32&gt; float32B (ADomain) := float32(B); . | A(float32) | B(string) | float32A | float32B | . | 0 | ‘Hello’ | 0 | null | . | 1 | ‘Test’ | 1 | null | . | 1000000 | null | 1000000 | null | . | -2.5 | ‘Two words’ | -2 | null | . | 99.9 | ‘88a’ | 99 | 88 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/float32.html#example",
    
    "relUrl": "/docs/float32.html#example"
  },"1044": {
    "doc": "float32",
    "title": "float32",
    "content": "conversion-functions float32 . ",
    "url": "/docs/float32.html",
    
    "relUrl": "/docs/float32.html"
  },"1045": {
    "doc": "float32seq",
    "title": "syntax",
    "content": ". | float32Seq(a) | . ",
    "url": "/docs/float32seq.html#syntax",
    
    "relUrl": "/docs/float32seq.html#syntax"
  },"1046": {
    "doc": "float32seq",
    "title": "definition",
    "content": "float32Seq(a) results in a sequence of 32 bits floating points derived from string data-item a. The syntax for string argument a need to be: {10: 41 9999 42 10 600 1 7 116 0 110}. In this string: . | The curly brackets {..} indicate the start and end of the sequence. | The first number (10) indicates the number of elements of the sequence followed by a colon. The elements of the sequence follow this colon, separated by spaces. | . The composition need to be configured to poly. The sequence2points function can be used to make a pointset domain. ",
    "url": "/docs/float32seq.html#definition",
    
    "relUrl": "/docs/float32seq.html#definition"
  },"1047": {
    "doc": "float32seq",
    "title": "applies to",
    "content": ". | data-item a with a string value-type | . ",
    "url": "/docs/float32seq.html#applies-to",
    
    "relUrl": "/docs/float32seq.html#applies-to"
  },"1048": {
    "doc": "float32seq",
    "title": "since version",
    "content": "7.130 . ",
    "url": "/docs/float32seq.html#since-version",
    
    "relUrl": "/docs/float32seq.html#since-version"
  },"1049": {
    "doc": "float32seq",
    "title": "example",
    "content": "parameter&lt;string&gt; param := '{10: 41 9999 42 10 600 1 7 116 0 110}'; parameter&lt;float32&gt; param_float32 (poly) := float32Seq(source/param); . | param_float32 | . | {10: 41 9999 42 10 600 7 116 0 110} | . ",
    "url": "/docs/float32seq.html#example",
    
    "relUrl": "/docs/float32seq.html#example"
  },"1050": {
    "doc": "float32seq",
    "title": "float32seq",
    "content": "sequence-functions float32Seq . ",
    "url": "/docs/float32seq.html",
    
    "relUrl": "/docs/float32seq.html"
  },"1051": {
    "doc": "float64",
    "title": "concept",
    "content": ". | float64 a 64 bits (8 bytes) floating point value-type. | float64() is a function converting data-item or unit of other value types to the float64 value type. | . This page describes the float64() function. ",
    "url": "/docs/float64.html#concept",
    
    "relUrl": "/docs/float64.html#concept"
  },"1052": {
    "doc": "float64",
    "title": "syntax",
    "content": ". | float64(a) | literald | . ",
    "url": "/docs/float64.html#syntax",
    
    "relUrl": "/docs/float64.html#syntax"
  },"1053": {
    "doc": "float64",
    "title": "definition",
    "content": "float64(a) results in a 64 bits(8 bytes) floating point tree-item converted from item a. The function results for: . | integer data items, the integer value is interpreted as floating point value (e.g. an integer value 1 is interpreted as 1.0), if the value exceeds the maximum value for the float64 value type, the result is null; | float32 data items, we refer to documentation on calculation with floating point in your processor for more exact information on how values will be rounded off; | boolean data items, 1.0 for True values and 0.0 for False values; | string data items, if the value starts with an allowed numeric value for the value type, this value is converted to a float64 value type. Other characters after the numeric values are ignored. If the string does not start with an allowed numeric value for the value type, the resulting value will be null; | units, a 64 bits(8 bytes) floating point unit of the converted unit. | . ",
    "url": "/docs/float64.html#definition",
    
    "relUrl": "/docs/float64.html#definition"
  },"1054": {
    "doc": "float64",
    "title": "description",
    "content": "The float64() function may be used to denote a literal to a float64 value type but this is not necessary, as literals.0 (e.g. 1.0) are by default considered as float64. ",
    "url": "/docs/float64.html#description",
    
    "relUrl": "/docs/float64.html#description"
  },"1055": {
    "doc": "float64",
    "title": "applies to",
    "content": "data item or unit with Numeric, uint2, uint4, bool or string value type . ",
    "url": "/docs/float64.html#applies-to",
    
    "relUrl": "/docs/float64.html#applies-to"
  },"1056": {
    "doc": "float64",
    "title": "since version",
    "content": ". | 5.15 | d suffix since 7.105 | . ",
    "url": "/docs/float64.html#since-version",
    
    "relUrl": "/docs/float64.html#since-version"
  },"1057": {
    "doc": "float64",
    "title": "example",
    "content": "1. parameter&lt;float64&gt; float64Numeric1 := float64(1); 2. parameter&lt;float64&gt; float64Numeric1 := 1d; 3. attribute&lt;float64&gt; float64A (ADomain) := float64(A); 4. attribute&lt;float64&gt; float64B (ADomain) := float64(B); . | A(float64) | B(string) |float64A | float64B |———–:|————-|————:|————-:| 0 | ‘Hello’ | 0 | null | 1 | ‘Test’ | 1 | null | 1000000 | null | 1000000 | null | -2.5 | ‘Two words’ | -2 | null | 99.9 | ‘88a’ | 99 | 88 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/float64.html#example",
    
    "relUrl": "/docs/float64.html#example"
  },"1058": {
    "doc": "float64",
    "title": "float64",
    "content": "conversion-functions float64 . ",
    "url": "/docs/float64.html",
    
    "relUrl": "/docs/float64.html"
  },"1059": {
    "doc": "float64seq",
    "title": "syntax",
    "content": ". | float64Seq(a) | . ",
    "url": "/docs/float64seq.html#syntax",
    
    "relUrl": "/docs/float64seq.html#syntax"
  },"1060": {
    "doc": "float64seq",
    "title": "definition",
    "content": "float64Seq(a) results in a sequence of 64 bits floating points derived from string data-item a. The syntax for string argument a need to be: {10: 41 9999 42 10 600 1 7 116 0 110}. In this string: . | The curly brackets {..} indicate the start and end of the sequence. | The first number (10) indicates the number of elements of the sequence followed by a colon. The elements of the sequence follow this colon, separated by spaces. | . The composition need to be configured to poly. The sequence2points function can be used to make a pointset domain. ",
    "url": "/docs/float64seq.html#definition",
    
    "relUrl": "/docs/float64seq.html#definition"
  },"1061": {
    "doc": "float64seq",
    "title": "applies to",
    "content": ". | data-item a with a string value-type | . ",
    "url": "/docs/float64seq.html#applies-to",
    
    "relUrl": "/docs/float64seq.html#applies-to"
  },"1062": {
    "doc": "float64seq",
    "title": "since version",
    "content": "7.130 . ",
    "url": "/docs/float64seq.html#since-version",
    
    "relUrl": "/docs/float64seq.html#since-version"
  },"1063": {
    "doc": "float64seq",
    "title": "example",
    "content": "parameter&lt;string&gt; param := '{10: 41 9999 42 10 600 1 7 116 0 110}'; parameter&lt;float64&gt; param_float64 (poly) := float64Seq(source/param); . | param_float64 | . | {10: 41 9999 42 10 600 7 116 0 110} | . ",
    "url": "/docs/float64seq.html#example",
    
    "relUrl": "/docs/float64seq.html#example"
  },"1064": {
    "doc": "float64seq",
    "title": "float64seq",
    "content": "sequence-functions float64Seq . ",
    "url": "/docs/float64seq.html",
    
    "relUrl": "/docs/float64seq.html"
  },"1065": {
    "doc": "float_isnearby",
    "title": "syntax",
    "content": ". | float_isNearby(a, b, margin) | . ",
    "url": "/docs/float_isnearby.html#syntax",
    
    "relUrl": "/docs/float_isnearby.html#syntax"
  },"1066": {
    "doc": "float_isnearby",
    "title": "definition",
    "content": "float_isNearby(a, b, margin) results in a boolean data-item indicating if the values of data item a are within the margin margin of the corresponding values of data item b. ",
    "url": "/docs/float_isnearby.html#definition",
    
    "relUrl": "/docs/float_isnearby.html#definition"
  },"1067": {
    "doc": "float_isnearby",
    "title": "description",
    "content": "With floating point data values, due to round offs, it can be useful to compare results and accept a margin in which the comparison still results in a True value. Use the float_isNearby function in stead of the eq function in these cases. The comparison between two missing values results in the value True. The point_isnearby function can be used in the similar manner as the float_isNearby function if the data items a and b are of a point value-type. ",
    "url": "/docs/float_isnearby.html#description",
    
    "relUrl": "/docs/float_isnearby.html#description"
  },"1068": {
    "doc": "float_isnearby",
    "title": "applies to",
    "content": "Data items a, b, margin with float32/64 value type . ",
    "url": "/docs/float_isnearby.html#applies-to",
    
    "relUrl": "/docs/float_isnearby.html#applies-to"
  },"1069": {
    "doc": "float_isnearby",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be compared to data items of any domain). | argument must have matching: . | value-type | metric (only A and B) | . | . ",
    "url": "/docs/float_isnearby.html#conditions",
    
    "relUrl": "/docs/float_isnearby.html#conditions"
  },"1070": {
    "doc": "float_isnearby",
    "title": "example",
    "content": "attribute&lt;bool&gt; ANearByB (CDomain) := float_isNearby(A, B, 0.99f); . | A | B | AisB | . | 0 | 0 | True | . | 1 | 2 | False | . | 2.5 | 2.49 | True | . | -100 | -98 | False | . | 999 | 998.5 | True | . | null | 0.1 | False | . | null | null | True | . | 0 | null | False | . | null | 100 | False | . | 100 | null | False | . CDomain, nr of rows = 10 . ",
    "url": "/docs/float_isnearby.html#example",
    
    "relUrl": "/docs/float_isnearby.html#example"
  },"1071": {
    "doc": "float_isnearby",
    "title": "see also",
    "content": ". | eq | . ",
    "url": "/docs/float_isnearby.html#see-also",
    
    "relUrl": "/docs/float_isnearby.html#see-also"
  },"1072": {
    "doc": "float_isnearby",
    "title": "float_isnearby",
    "content": "ordering-functions float_isNearby . ",
    "url": "/docs/float_isnearby.html",
    
    "relUrl": "/docs/float_isnearby.html"
  },"1073": {
    "doc": "folders-and-placeholders",
    "title": "folders",
    "content": "For a GeoDMS project folders (and subfolders) with the following content are relevant: . | installed software | project-specific configuration, data and documentation files | project-specific (intermediate) results and exports. | . ",
    "url": "/docs/folders-and-placeholders.html#folders",
    
    "relUrl": "/docs/folders-and-placeholders.html#folders"
  },"1074": {
    "doc": "folders-and-placeholders",
    "title": "placeholders",
    "content": "In GeoDMS configurations placeholders with logical names like sourcedatadir and localdatadir are used for folders. They make configurations clear and easily transferable to other locations/machines. It is advised to use these placeholders, although physical path names are also allowed. All placeholders used in a storageName or as the second argument of the expand function, starting and ending with a % character will be expanded, e.g. storagename = “%SourceDataDir%/brondata.csv”. The last column in the next table presents the expanded values for a project folder: C:/prj/nl_later. | Placeholder | Description | Default Value | Expanded Value (example) | . | %currentDir%&lt;/strong&gt;&lt;/td&gt; | The folder of the root configuration file that is opened by the GUI. For shipped configurations, this is usually the cfg subfolder of the projDir.&lt;/td&gt; | | C:/prj/nl_later\\cfg&lt;/td&gt; &lt;/tr&gt; | %exeDir% | The folder in which the software is installed. | non-overridable | C:/Program Files/ObjectVision/GeoDMS&lt;/sup&gt;&lt;/td&gt; &lt;/tr&gt; | %programFiles32% | The folder that contains the (32-bit) programs, known as the value of %env:Program Files (x86)% or if that is empty (such as on 32-bit platforms): the value of %env:Program Files% (see %env:xxx% below). | non-overridable | c:/Program Files | . | %projDir% | The full name of the project-specific folder containing the (original) configuration, data and documentation folders. non-overridable | %currentDir%\\.. | C:/prj/nl_later | . | %projBase% | Parent of the projDir. non-overridable | %projDir%\\.. | C:/prj | . | %configDir% | The directory in which the [config.ini](config.ini) and a set of configuration files are located. By default this is a subfolder of the projDir with as name the project name. | %currentDir%\\%projName% | C:/prj/nl_later/cfg/nl_later | . | %dataDir% | The base folder containing the project-specific primary data files, often also organised in subfolders. | %sourceDataProjDir%\\data | C:/prj/nl_later/data | . | %[localdatadir](localdatadir)% | The default base folder used for the project-specific localDataProjDirs. The local data folder is written to the Windows Registry (HKE_CURRENT_USER/Software/ObjectVision/DMS). | C:/LocalData | C:/LocalData | . | %LocalDataProjDir% | The folder used for the project-specific (intermediate) results and exports. Views are exported to this folder unless otherwise configured in an ExportSettings container of a view definition. | %localDataDir%/%projName% | C:/LocalData/nl_later | . | %[sourcedatadir](sourcedatadir)% | | c:/SourceData | | . | %sourceDataProjDir% | | %sourceDataDir%/%projName% | | . | %CalcCacheDir% | The folder used for the for project-specific (intermediate) results. | %localDataProjDir%/ CalcCache | C:/LocalData/nl_later/ CalcCache | . | %DateTime% | Resolves %DateTime% placeholder to current time in local system time using the format: YYYY-m-D_H-M-S (available since GeoDMS 8.044) | non-overridable | | . &lt;/tbody&gt; &lt;/table&gt; When a configuration is opened, the GeoDMS considers the folder that contains the root configuration file as currentDir. The physical paths for the other logical folders in the configuration are derived from this path but can be overruled by entries in the ConfigSettings container. There are also other placeholders that refer to other parts of the execution environment and sometimes based on the context of usage: | Placeholder | Description |-----------------------|---------------| **%projName%** | folder name of %projName%| **%env:xxx%** | is expanded to the value of the environment variable with the name xxx.| **%storageBaseName%** | is expanded to the base name of a storage (excluding the filename extension)| **%geoDmsVersion%** || **%osversion%** || **%username%** || **%computername%** || %XXX% | (for XXX not matching any of the above) if XXX is defined as parameter in /ConfigSettings/Overridable, take the value of that parameter. If the user overrides that value in the GUI in Tools-&gt;Options-&gt;Config Settings, the override value is taken (which is stored as machine-specific registry setting under Software/ObjectVision/Overridable).| . | | . ",
    "url": "/docs/folders-and-placeholders.html#placeholders",
    
    "relUrl": "/docs/folders-and-placeholders.html#placeholders"
  },"1075": {
    "doc": "folders-and-placeholders",
    "title": "folders-and-placeholders",
    "content": " ",
    "url": "/docs/folders-and-placeholders.html",
    
    "relUrl": "/docs/folders-and-placeholders.html"
  },"1076": {
    "doc": "for_each",
    "title": "syntax",
    "content": ". | for_each_n[e][i][t][d[n]v[n] | x[n]][l][d][a[t]][s][c][u] | . | . Starting from 7.163 the for_each function is in a process of being substituted by the for_each_ind function, more variants of the for_each function group will become obsolete with the new GeoDMS versions. ",
    "url": "/docs/for_each.html#syntax",
    
    "relUrl": "/docs/for_each.html#syntax"
  },"1077": {
    "doc": "for_each",
    "title": "definition",
    "content": "The for_each group represents a family of functions, used to generate a set of tree-item for each element of a domain-unit. The specific function name is dependent on the postfixes used in the for_each function name. The possible names for the specific function are derived from the following notation: for_each_n[e|t][d[n]v[n]][l][d][a[t]][s][c][u]. In this notation the name characters within brackets are optional. | The | character indicates one of the two namecharacters split by this | character need to be selected. | . The namecharacters specified need to match with the relevant postfixes. They represent: . | n: tree-item-name for each new item; | e: expression for each new item; | i: integritycheck for each new item; | t: template instantiated for each new item; | d[n]: domain unit for each item, with optional a n for the name of the container where the domain units can be found, in case a set of different domain units are requested; | v[n]: values-unit for each item, with optional a n for the name of the container where the values units can be found, in case a set of different values units are requested; | x[n]: value-type for the creating unit. | l: label property for each new item; | d: description property for each new item; | a: storagename for each new item, with an optional t for the storage type; | s: sqlstring for each new item. | c: cdf for each new item(this property can since version 7.163 only be configured using the for_each_ind function | u: url property for each new item(this property can since version 7.163 only be configured using the for_each_ind function | . ",
    "url": "/docs/for_each.html#definition",
    
    "relUrl": "/docs/for_each.html#definition"
  },"1078": {
    "doc": "for_each",
    "title": "description",
    "content": "A for_each function is used to derive a set of new tree items, based on the occuring values of data-item in a domain unit. Different data items of this same domain unit can be used to specify the name, label, description etc. for the new set of tree items. A template is used if the new items also request subitem. Often an expression is configured for the new items, in case for this expression elements from the origin domain unit are needed, the expression is usually indirect-expression. If as domain unit a parameter is configured, a values unit is also obligatory and vice versa. If a template is ONLY used to configure the domain unit and values unit for the resulting tree items, it is advised to use the domain unit and values unit argument in stead of a template (as in the example). The attribute used for naming the new items should contain values that are allowed as item names. If not, an error is generated. Use the asitemname function if your item names do not meet this condition. ",
    "url": "/docs/for_each.html#description",
    
    "relUrl": "/docs/for_each.html#description"
  },"1079": {
    "doc": "for_each",
    "title": "be aware",
    "content": "The evaluation of a for_each is executed when the meta/scheme information is generated in the geodms-gui. If for this evaluation (large) primary files are read, this becomes times consuming. Expanding tree items in the treeview becomes slow. Therefor we advice to use the contents of large primary data file (or complex calculations) as little as possible in the arguments of a for_each function. ",
    "url": "/docs/for_each.html#be-aware",
    
    "relUrl": "/docs/for_each.html#be-aware"
  },"1080": {
    "doc": "for_each",
    "title": "examples",
    "content": "Example 1 . container regions := for_each_nedvld(&gt;         Relational/Region/Name                 // name       ,'Relational/Region/NrInhabitants[rel]' // expression       ,void                 // domain unit       ,uint32                                 // values unit       ,Relational/Region/Label                // label       ,Relational/Region/Descr                // description    ); . | Name | rel | NrInhabitants | Label | Descr | . | NoordHolland | 0 | 550 |   |   | . | ZuidHolland | 1 | 1025 |   |   | . | Utrecht | 2 | 300 |   |   | . | NoordBrabant | 3 | 300 |   |   | . | Gelderland | 4 | 0 |   |   | . result: Container regions with a parameter for each province, with as value the NrInhabitants for this province. The name, expression, domain and values unit, label and description for these parameters are determined by the for_each_nedvld function. Example 2 . container FactorData := for_each_ndvnda(         MetaData/Factors/Name                      // name       ,Geography/Albers1kmGrid                   // domain unit       ,Units                                      // container with configuration of values units       ,MetaData/Factors/ValuesUnit               // values units       ,MetaData/Factors/Descr                     // description       ,'%sourceDataProjDir%/'+FileName+'.tif' // storage name   );    . result: container Factordata with an attribute for each factor. These factors are read from .tif storages. The name, domain and values unit, description, storagename and cdf for these attributes are determined by the for_each_ndvndacu function. The values units read from the data item: MetaData/Factors/ValuesUnit(fourth argument) need to be direct subitems of the Units(third argument) container. Example 3 . container RegionGrids := for_each_nedvn(        UniqueRegionRefs/Values                            // name       ,'JrcFactorData/' + URR/Values + '[domain/grid_rel]' // expression       ,domain                                             // domain unit       ,Geography/Regions                                  // container with configuration of values units       ,UniqueRegionRefs/Values                            // values units );  . result: container RegionGrids with an attribute for each UniqueRegionRefs. The name, expression, domain and values unit for these attributes are determined by the for_each_nedvn function. The values units read from the data item: UniqueRegionRefs/Values(fifth argument) need to be direct subitems of the Geography/Regions(fourth argument) container. Example 4 . container Distmatrices_100m := for_each_nex(     Matrix/name    ,'Distmatrices/Impl_100m/' + Matrix/name + '/PotRange'    ,spoint ); . Example 5 . container Read_Shapefiles := for_each_nxat(     Classifications/Services/name    ,uint32    ,'%ProjDir%/Data/cor/'+ Corridor_name +'/src/' + Services/name +'_' + Corridor_name +'_bb_200km.shp'    ,\"gdal.vect\" ); . Example 6 . If you write an expression in the IntegrityCheck, you can use ‘this’ to refer to itself. This is preferred. container ReadOpbrengsten_perOP := for_each_neidv(OP/name , 'ReadOpbrengsten_perOP_UNCHECKED/'+OP/name , '(all(IsNull(this)))' , AdminDomain , EUR ); . Example 7 . In case the full for_each result needs to be written to the same storage, define StorageName and StorageType at the container level of the for_each statement: . container test := for_each_nedv( info/names ,'reference/' + info/names ,reference ,int32 ), StorageName = \"%LocalDataProjDir%/WLO/Y1980.csv\", StorageType = \"gdalwrite.vect\"; . ",
    "url": "/docs/for_each.html#examples",
    
    "relUrl": "/docs/for_each.html#examples"
  },"1081": {
    "doc": "for_each",
    "title": "for_each",
    "content": "metascript-functions for_each . ",
    "url": "/docs/for_each.html",
    
    "relUrl": "/docs/for_each.html"
  },"1082": {
    "doc": "for_each_ind",
    "title": "syntax",
    "content": ". | for_each_ind(options, other_arguments) | . ",
    "url": "/docs/for_each_ind.html#syntax",
    
    "relUrl": "/docs/for_each_ind.html#syntax"
  },"1083": {
    "doc": "for_each_ind",
    "title": "definition",
    "content": "The for_each_ind(options, other_arguments) group, the successor of the for_each function group, represents a family of functions, used to generate a set of tree-item for each element of a domain-unit. The suffix _ind indicates the for_each_ind is an indirect variant, in which the first argument options is a string of characters with the following options: n[e|t][d[n]v[n]][l][d][a[t][r]][s][c][u]. In this notation the name characters within brackets are optional. | The | character indicates one of the two namecharacters split by this | character need to be selected. | . The namecharacters specified need to match with the relevant postfixes. They represent: . | n: tree-item-name for each new item; | e: expression for each new item; | i: integritycheck for each new item; | t: template instantiated for each new item; | d[n]: domain unit for each item, with optional a n for the name of the container where the domain units can be found, in case a set of different domain units are requested; | v[n]: values-unit for each item, with optional a n for the name of the container where the values units can be found, in case a set of different values units are requested; | x[n]: unit spec for creating units. | l: label for each new item; | d: description for each new item; | a: storagename for each new item, with an optional t for the storage type; | s: sqlstring for each new item. | c: cdf for each new item | u: url property for each new item | . ",
    "url": "/docs/for_each_ind.html#definition",
    
    "relUrl": "/docs/for_each_ind.html#definition"
  },"1084": {
    "doc": "for_each_ind",
    "title": "description",
    "content": "A for_each_ind function is used to derive a set of new tree items, based on the occurring values of data-item in a domain unit. Different data items of the same domain unit can be used to specify the name, label, description etc. for the new set of tree items. A template is used if the new items also request subitem. Often an expression is configured for the new items, in case for this expression elements from the origin domain are needed, the expression is usually indirect-expression. If as domain unit a parameter is configured, a values unit is also obligatory and vice versa. If a template is ONLY used to configure the domain and values unit for the resulting tree items, it is advised to use the domain and values unit argument in stead of a template (as in the example). The attribute used for naming the new items should contain values that are allowed as item names. If not, an error is generated. Use the asitemname function if your item names do not meet this condition. Starting from 7.163 the for_each function is in a process of being substituted by this for_each_ind function, more variants of the for_each function group will become obsolete with the new GeoDMS versions . ",
    "url": "/docs/for_each_ind.html#description",
    
    "relUrl": "/docs/for_each_ind.html#description"
  },"1085": {
    "doc": "for_each_ind",
    "title": "since version",
    "content": "7.163 . ",
    "url": "/docs/for_each_ind.html#since-version",
    
    "relUrl": "/docs/for_each_ind.html#since-version"
  },"1086": {
    "doc": "for_each_ind",
    "title": "be aware",
    "content": "The evaluation of a for_each_ind is executed when the meta/scheme information is generated in the geodms-gui. If for this evaluation (large) primary files are read, this becomes times consuming. Expanding tree items in the treeview becomes slow. Therefor we advice to use the contents of large primary data file (or complex calculations) as little as possible in the arguments of a for_each_ind function. ",
    "url": "/docs/for_each_ind.html#be-aware",
    
    "relUrl": "/docs/for_each_ind.html#be-aware"
  },"1087": {
    "doc": "for_each_ind",
    "title": "examples",
    "content": "1: container regions := for_each_ind(         'nedvld'                                // options        ,Relational/Region/Name                  // name       ,'Relational/Region/NrInhabitants[rel]'  // expression       ,void                  // domain unit       ,uint32                                  // values unit       ,Relational/Region/Label                 // label       ,Relational/Region/Descr                 // description    ); . | Name | rel | NrInhabitants | Label | Descr | . | NoordHolland | 0 | 550 |   |   | . | ZuidHolland | 1 | 1025 |   |   | . | Utrecht | 2 | 300 |   |   | . | NoordBrabant | 3 | 300 |   |   | . | Gelderland | 4 | 0 |   |   | . result: Container regions with a parameter for each province, with as value the NrInhabitants for this province. The name, expression, domain and values unit, label and description for these parameters are determined by the for_each_nedvld function. 2: container FactorData := for_each_ind(         'ndvndacu'                                 // options       ,MetaData/Factors/Name                      // name       ,Geography/Albers1kmGrid                    // domain unit       ,Units                                      // container with configuration of values units       ,MetaData/Factors/ValuesUnit               // values units       ,MetaData/Factors/Descr                     // description       ,'%sourceDataProjDir%.ASC/'+FileName+'.asc' // storage name   );    . result: container Factordata with an attribute for each factor. These factors are read from .asc storages. The name, domain and values unit, description, storagename and cdf for these attributes are determined by the for_each_ndvndacu function. The values units read from the data item: MetaData/Factors/ValuesUnit(fourth argument) need to be direct subitems of the Units(third argument) container. 3: container RegionGrids := for_each_ind(        'nedvn'                                           // options       ,UniqueRegionRefs/Values                           // name       ,'JrcFactorData/'+URR/Values+'[domain/grid_rel]'   // expression       ,domain                                            // domain unit       ,Geography/Regions                                 // container with configuration of values units       ,UniqueRegionRefs/Values                           // values units );  . result: container RegionGrids with an attribute for each UniqueRegionRefs. The name, expression, domain and values unit for these attributes are determined by the for_each_nedvn function. The values units read from the data item: UniqueRegionRefs/Values(fifth argument) need to be direct subitems of the Geography/Regions(fourth argument) container. 4: container RegionGrids := for_each_ind(       'ndvdatru'                                      // options      ,period/Name                                     // name      ,griddomain                                      // domain unit      ,nrpersons                                       // values unit      ,'urban population per cell'                     // description      ,'%SourceDataDir%/pop/' + period/name + '.tif'   // storage name (name of tiff files)      ,gdal.grid                                       // storage type      ,true                                            // StorageReadOnly status      , '%SourceDataDir%/meta/' + period/name + '.html' // url, name of html files    );  . result: container RegionGrids with an attribute for each period, read from a tif file per period. The StorageReadOnly property is set to True for each file. Furthermore descriptions and urls are configured for each subitem. ",
    "url": "/docs/for_each_ind.html#examples",
    
    "relUrl": "/docs/for_each_ind.html#examples"
  },"1088": {
    "doc": "for_each_ind",
    "title": "for_each_ind",
    "content": "metascript-functions for_each_ind . ",
    "url": "/docs/for_each_ind.html",
    
    "relUrl": "/docs/for_each_ind.html"
  },"1089": {
    "doc": "fpoint",
    "title": "concept",
    "content": ". | fpoint is a Point(Group) value-type with two coordinates of the 32 bits (4 bytes) floating point value type: float32. | fpoint() is a function converting other point data-item or unit to the fpoint value type. | . This page describes the fpoint() function. ",
    "url": "/docs/fpoint.html#concept",
    
    "relUrl": "/docs/fpoint.html#concept"
  },"1090": {
    "doc": "fpoint",
    "title": "syntax",
    "content": ". | fpoint(a) | . ",
    "url": "/docs/fpoint.html#syntax",
    
    "relUrl": "/docs/fpoint.html#syntax"
  },"1091": {
    "doc": "fpoint",
    "title": "definition",
    "content": "fpoint(a) converts the coordinates of a point tree-item a to the fpoint (float32 coordinates) value type. ",
    "url": "/docs/fpoint.html#definition",
    
    "relUrl": "/docs/fpoint.html#definition"
  },"1092": {
    "doc": "fpoint",
    "title": "applies to",
    "content": ". | data item or unit with PointGroup value type | . ",
    "url": "/docs/fpoint.html#applies-to",
    
    "relUrl": "/docs/fpoint.html#applies-to"
  },"1093": {
    "doc": "fpoint",
    "title": "example",
    "content": "attribute&lt;fpoint&gt; fpointA (ADomain) := fpoint(A); . | A(fpoint) | fpointA | . | {0,0} | {0,0} | . | {1,1} | {1,1} | . | {1000000,10000000} | {1000000,10000000} | . | {-2.5, 2.5} | {-2.5, 2.5} | . | {99.9, 99.9} | {99.9,99.9} | . ADomain, nr of rows = 5 . ",
    "url": "/docs/fpoint.html#example",
    
    "relUrl": "/docs/fpoint.html#example"
  },"1094": {
    "doc": "fpoint",
    "title": "fpoint",
    "content": "conversion-functions fpoint . ",
    "url": "/docs/fpoint.html",
    
    "relUrl": "/docs/fpoint.html"
  },"1095": {
    "doc": "fpolygon",
    "title": "syntax",
    "content": ". | fpolygon(a) | . ",
    "url": "/docs/fpolygon.html#syntax",
    
    "relUrl": "/docs/fpolygon.html#syntax"
  },"1096": {
    "doc": "fpolygon",
    "title": "definition",
    "content": "fpolygon(a) converts the coordinates of a point tree-item a with a sequence of points (arc or polygon) to the fpoint (float32 coordinates) value-type. ",
    "url": "/docs/fpolygon.html#definition",
    
    "relUrl": "/docs/fpolygon.html#definition"
  },"1097": {
    "doc": "fpolygon",
    "title": "applies to",
    "content": ". | data-item with Point value type and composition arc or polygon | . ",
    "url": "/docs/fpolygon.html#applies-to",
    
    "relUrl": "/docs/fpolygon.html#applies-to"
  },"1098": {
    "doc": "fpolygon",
    "title": "example",
    "content": "attribute&lt;spoint&gt; fpolygonA (SDomain, polygon) := fpolygon(A); . | A(fpolygon) | fpolygonA | . | {2:{0,0},{1,1}} | {2:{0,0},{1,1}} | . | {3: {1E+007,1E+007},{-2.5,-2.5},{99.9,99.9}} | {3: {1E+007,1E+007},{-2.5,-2.5},{99.9,99.9}} | . ",
    "url": "/docs/fpolygon.html#example",
    
    "relUrl": "/docs/fpolygon.html#example"
  },"1099": {
    "doc": "fpolygon",
    "title": "fpolygon",
    "content": "conversion-functions fpolygon . ",
    "url": "/docs/fpolygon.html",
    
    "relUrl": "/docs/fpolygon.html"
  },"1100": {
    "doc": "from_utf",
    "title": "syntax",
    "content": ". | from_utf(string_dataitem) | . ",
    "url": "/docs/from_utf.html#syntax",
    
    "relUrl": "/docs/from_utf.html#syntax"
  },"1101": {
    "doc": "from_utf",
    "title": "definition",
    "content": "from_utf(string_dataitem) results in the conversion from string argument string_dataitem, utf8 encoded, to the basic ASCII character set (first 128 codes). The last column in the example presents the resulting character for each special character. ",
    "url": "/docs/from_utf.html#definition",
    
    "relUrl": "/docs/from_utf.html#definition"
  },"1102": {
    "doc": "from_utf",
    "title": "description",
    "content": "The from_utf function can be used in string comparisons, for instance to compare addresses in which special characters can be ignored. ",
    "url": "/docs/from_utf.html#description",
    
    "relUrl": "/docs/from_utf.html#description"
  },"1103": {
    "doc": "from_utf",
    "title": "applies to",
    "content": "data-item with string value-type . ",
    "url": "/docs/from_utf.html#applies-to",
    
    "relUrl": "/docs/from_utf.html#applies-to"
  },"1104": {
    "doc": "from_utf",
    "title": "conditions",
    "content": "argument string_dataitem must be utf8 encoded (default). ",
    "url": "/docs/from_utf.html#conditions",
    
    "relUrl": "/docs/from_utf.html#conditions"
  },"1105": {
    "doc": "from_utf",
    "title": "since version",
    "content": "7.130 . ",
    "url": "/docs/from_utf.html#since-version",
    
    "relUrl": "/docs/from_utf.html#since-version"
  },"1106": {
    "doc": "from_utf",
    "title": "example",
    "content": "attribute&lt;string&gt; from_utf (TextDomain) := from_utf(a); . | a | b | c | d | e | f | g | from_utf | . | À | Á | Â | Ä | Ã | Å | Æ | A | . | à | á | â | ä | ã | å | æ | a | . | Ç |   |   |   |   |   |   | C | . | ç |   |   |   |   |   |   | c | . | È | É | Ê | Ë |   |   |   | E | . | è | é | ê | ë |   |   |   | e | . | Ì | Í | Î | Ï |   |   |   | I | . | ì | í | î | ï | ï |   |   | i | . | Ñ |   |   |   |   |   |   | N | . | ñ |   |   |   |   |   |   | n | . | Ò | Ó | Ô | Ö | Õ | Ø | Œ | O | . | ò | ó | ô | ö | õ | ø | œ | o | . | Ù | Ú | Û | Ü |   |   |   | U | . | ù | ú | û |   |   |   |   | u | . | Ý |   |   |   |   |   |   | Y | . | ý | ÿ |   |   |   |   |   | y | . TextDomain, nr of rows = 16 . ",
    "url": "/docs/from_utf.html#example",
    
    "relUrl": "/docs/from_utf.html#example"
  },"1107": {
    "doc": "from_utf",
    "title": "from_utf",
    "content": "string-functions from_utf . ",
    "url": "/docs/from_utf.html",
    
    "relUrl": "/docs/from_utf.html"
  },"1108": {
    "doc": "fss",
    "title": "example",
    "content": "Writing FSS: . unit&lt;uint32&gt; place := XML/woonplaats/ParsedXML/bag_LVC_Woonplaats ,   StorageName = \"= FSSDir + '/place.fss'\" {    attribute&lt;rdc_mm&gt; geom (polygon) := XML/woonplaats/geoBuilder/result;    attribute&lt;string&gt; id             := bag_LVC_identificatie;    attribute&lt;string&gt; name           := bag_LVC_woonplaatsNaam;    container meta    {       attribute&lt;string&gt; status (..) := bag_LVC_woonplaatsStatus;    } } . Reading FSS: . unit&lt;uint32&gt; place :   StorageName    = \"= FSSDir + '/place.fss'\" ,   StorageReadOnly = \"True\" {    attribute&lt;geometries/rdc_mm&gt; geom (polygon);    attribute&lt;string&gt;            id;    attribute&lt;string&gt;            name;    container meta    {       attribute&lt;string&gt; status (..);    } } . A FSS Storage always need to configured for a unit as in the storage the number of entries is stored. Configuring a FSS for a container results in an error while reading the data. The three attribute geom, id and name are stored as files with their name and .dmsdata extension in the woonplaats.fss folder (or with their name and a consecutive number in case of tile. The attribute status is stored in a subfolder woonplaats.fss/meta. If data is stored in such subfolders, reading the data from the fss files requires this same hierarchy in your configuration (as in the example). The value-type of the attribute read from the fss files need to match with the value type of the writing configuration script. Use this script to determine these value types and the hierarchy of the fss storage. Reading FSS with a subfolder using a for each loop . unit&lt;uint32&gt; place : StorageName = \"= FSSDir + '/place.fss'\" , StorageReadOnly = \"True\" { attribute&lt;geometries/rdc_mm&gt; geom (polygon); attribute&lt;string&gt;            id; attribute&lt;string&gt;            name; container meta :=       for_each_ndv(           status_types/name          , place          , string       ); } . ",
    "url": "/docs/fss.html#example",
    
    "relUrl": "/docs/fss.html#example"
  },"1109": {
    "doc": "fss",
    "title": "fss",
    "content": "The GeoDMS can read and write data from an own primary data format, called FSS, with the FSS storagemanager. This format has the following advantages: . | It is a binary, fast format. | It can store vector-data, grid-data and non spatial data. | It supports the hierarchical structures of GeoDMS configurations. | It support both storing and reading tile. | . The disadvantage of the format is that is is only supported by the GeoDMS. We therefore advice to use the FSS as exchange format between GeoDMS projects. ",
    "url": "/docs/fss.html",
    
    "relUrl": "/docs/fss.html"
  },"1110": {
    "doc": "full-discrete-alloc-script",
    "title": "script",
    "content": "container allocation { unit&lt;fpoint&gt; TestCoords: Range = \"[{300000, 0}, {625000, 280000})\"; unit&lt;spoint&gt; DomainGrid := range( gridset( TestCoords ,point( -500f, 500f, TestCoords) ,point(625000f, 10000f, TestCoords) , sPoint ), point(0s, 0s), point(6s, 6s) ) , DialogType = \"Map\"; container source { unit&lt;int32&gt; EurM2: Range = \"[0, 20)\"; unit &lt;uint8&gt; lu_type: nrofrows = 3 { attribute&lt;string&gt; Name: ['Living', 'Working', 'Nature']; attribute&lt;string&gt; PartioningName: ['Living', 'Working', 'Nature']; attribute&lt;lu_type&gt; partioning := id(lu_type); } attribute&lt;lu_type&gt; landuse (DomainGrid): [ 2, 2, 2, 1, null, null, 2, 2, 0, 0, null, 1, 2, 0, 0, 1, 1, 1, 2, 0, 0, 0, 1, 1, 2, 0, 0, 1, null, 1, 2, 2, 2, 2, 2, 2 ]; container Suitability { attribute&lt;EurM2&gt; Living (DomainGrid): [ 1, 2, 5, 4, 3, -1, 2, 5, 8, 9, 7, 3, 4, 10, 12,13, 12, 6, 5, 11, 13,14, 12, 6, 4, 9, 9, 5, 3, 2, 2, 2, 4, 3, 1, 1 ]; attribute&lt;EurM2&gt; Working (DomainGrid): [ 1, 1, 2, 3, 4, -6, 2, 3, 4, 6, 8, 9, 2, 4, 9,11, 12, 10, 1, 3, 5, 9, 10, 6, 2, 4, 5, 5, 3, 2, 1, 1, 2, 1, 1, 1 ]; attribute&lt;EurM2&gt; Nature (DomainGrid): [ 3, 3, 3, 2, 2, -2, 3, 3, 2, 2, 2, 2, 3, 2, 1, 1, 1, 1, 3, 2, 1, 1 ,1, 2, 3, 3, 2, 1, 2, 2, 3, 3, 3, 3, 3, 3 ]; } container regMaps { unit&lt;uint8&gt; p1: nrofrows = 1; unit&lt;uint8&gt; p2: nrofrows = 2; attribute&lt;p1&gt; p1Map (DomainGrid) := const(0, DomainGrid, p1); attribute&lt;p2&gt; p2Map (DomainGrid) := pointRow(id(DomainGrid)) &lt; 4s ? 0[p2] : 1[p2]; } container claim_sources { unit&lt;float32&gt; Meter := BaseUnit('m', float32); unit&lt;float32&gt; Ha := 10000.0 * Meter * Meter; container p1 { attribute&lt;Ha&gt; Nature_min (regMaps/p1): [12]; attribute&lt;Ha&gt; Nature_max (regMaps/p1): [20]; attribute&lt;Ha&gt; Living_min (regMaps/p1): [5]; attribute&lt;Ha&gt; Living_max (regMaps/p1): [9]; } container p2 { attribute&lt;Ha&gt; Working_min (regMaps/p2): [6,2]; attribute&lt;Ha&gt; Working_max (regMaps/p2): [10,4]; } } parameter&lt;float32&gt; nrHaPerCel := 1[claim_sources/Ha]; container claims_min { attribute&lt;uint32&gt; Living (regMaps/p1) := uint32(claim_sources/p1/Living_min / nrHaPerCel); attribute&lt;uint32&gt; Working (regMaps/p2) := uint32(claim_sources/p2/Working_min / nrHaPerCel); attribute&lt;uint32&gt; Nature (regMaps/p1) := uint32(claim_sources/p1/Nature_min / nrHaPerCel); } container claims_max { attribute&lt;uint32&gt; Living (regMaps/p1) := uint32(claim_sources/p1/Living_max / nrHaPerCel); attribute&lt;uint32&gt; Working (regMaps/p2) := uint32(claim_sources/p2/Working_max / nrHaPerCel); attribute&lt;uint32&gt; Nature (regMaps/p1) := uint32(claim_sources/p1/Nature_max / nrHaPerCel); } container regionSets { attribute&lt;regMaps/p1&gt; Nature (DomainGrid) := regMaps/p1Map; attribute&lt;regMaps/p1&gt; Living (DomainGrid) := regMaps/p1Map; attribute&lt;regMaps/p2&gt; Working (DomainGrid) := regMaps/p2Map; } unit&lt;uint16&gt; AtomicRegions := overlay(lu_type/PartioningName, DomainGrid, regionSets); attribute&lt;bool&gt; InRegio (DomainGrid): [ True, True, True, True, False, True, True, True, True, True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, True, True, True, True, True, True, True ]; attribute &lt;bool&gt; FreeLand (DomainGrid) := InRegio; container Compacted { unit&lt;uint32&gt; ADomain := select_with_org_rel(FreeLand = True), label = \"allocation domain\"; attribute&lt;ADomain&gt; BaseGrid (DomainGrid) := invert(ADomain/org_rel); container SuitabilityMaps { attribute&lt;EurM2&gt; Living (ADomain) := source/Suitability/Living[ADomain/org_rel]; attribute&lt;EurM2&gt; Working (ADomain) := source/Suitability/Working[ADomain/org_rel]; attribute&lt;EurM2&gt; Nature (ADomain) := source/Suitability/Nature[ADomain/org_rel]; } attribute&lt;AtomicRegions&gt; AtomicRegionMap (ADomain) := AtomicRegions/UnionData[ADomain/org_rel]; } parameter&lt;EurM2&gt; treshold := 0[EurM2]; container FeasibleSolution; } container allocate_discrete := discrete_alloc( source/lu_type/name ,source/Compacted/ADomain ,source/Compacted/SuitabilityMaps ,source/lu_type/partioning ,source/lu_type/PartioningName ,source/AtomicRegions ,source/Compacted/AtomicRegionMap ,source/claims_min ,source/claims_max ,source/treshold ,source/FeasibleSolution ) { attribute&lt;Source/lu_type&gt; alloc (DomainGrid) := landuse[Source/Compacted/BaseGrid]; } } . ",
    "url": "/docs/full-discrete-alloc-script.html#script",
    
    "relUrl": "/docs/full-discrete-alloc-script.html#script"
  },"1111": {
    "doc": "full-discrete-alloc-script",
    "title": "full-discrete-alloc-script",
    "content": "allocation-functions full script example . The discrete allocation is used to allocate land use types to grid cells with the allocation-functions. The example presents how to configure all argument and the function itself. ",
    "url": "/docs/full-discrete-alloc-script.html",
    
    "relUrl": "/docs/full-discrete-alloc-script.html"
  },"1112": {
    "doc": "fullpathname",
    "title": "syntax",
    "content": ". | fullPathName(item, folder_or_filename) | . ",
    "url": "/docs/fullpathname.html#syntax",
    
    "relUrl": "/docs/fullpathname.html#syntax"
  },"1113": {
    "doc": "fullpathname",
    "title": "definition",
    "content": "fullPathName(item, folder_or_filename) results in the full path name of the folder_or_filename argument in the context of the tree-item argument. In the GeoDMS use forward slashes(/) in path names in stead of backward slashes. ",
    "url": "/docs/fullpathname.html#definition",
    
    "relUrl": "/docs/fullpathname.html#definition"
  },"1114": {
    "doc": "fullpathname",
    "title": "applies to",
    "content": ". | argument item can be any tree item. | data-item or literal folder_or_filename with string value-type | . ",
    "url": "/docs/fullpathname.html#applies-to",
    
    "relUrl": "/docs/fullpathname.html#applies-to"
  },"1115": {
    "doc": "fullpathname",
    "title": "example",
    "content": "parameter&lt;string&gt; rootfile := fullPathName(., '%projDir%\\cfg\\test.dms') . result: rootfile= ‘C:/prj/test/cfg/test.dms’ (if C:/prj/test is the projdir) . ",
    "url": "/docs/fullpathname.html#example",
    
    "relUrl": "/docs/fullpathname.html#example"
  },"1116": {
    "doc": "fullpathname",
    "title": "fullpathname",
    "content": "file,-folder-and-read-functions FullPathName . ",
    "url": "/docs/fullpathname.html",
    
    "relUrl": "/docs/fullpathname.html"
  },"1117": {
    "doc": "function-discrete-alloc",
    "title": "syntax",
    "content": ". | discrete_alloc(arguments) | . ",
    "url": "/docs/function-discrete-alloc.html#syntax",
    
    "relUrl": "/docs/function-discrete-alloc.html#syntax"
  },"1118": {
    "doc": "function-discrete-alloc",
    "title": "definition",
    "content": "The discrete_alloc function is used to let the GeoDms to discrete allocation. | # | argument | description | unit type | value type | . | 1 | TypeNames | This attribute contains the land-use type names. | attribute | string | . | 2 | LandUnitDomain | This domain unit defines the set of land units. It can be of any value type but usually defines a grid domain. | unit | uint32 | . | 3 | SuitabilityMaps | A container that contains an attribute for each land-use type that provides suitability for that land-use type for each land unit. | container | int32 | . | 4 | Partitionings | maps each land-use type to a partitioning id | attribute | uint8 | . | 5 | PartitioningNames | maps each partitioning to a partitioning name, such as “Province” or “Municipality”. | attribute | string | . | 6 | AtomicRegions | Unit that defined the set of atomic regions. which are the smallest divisible regions of overlapping claim regions | unit | uint8/uint16 | . | 7 | AtomicRegionMap | attribute that defines to which atomic region each land unit belongs. | attribute | uint16 | . | 8 | MinClaims | minimum number of land units that should be allocated within that region to that land-use type | container | uint32 | . | 9 | MaxClaims | maximum number of land units that should be allocated within that region to that land-use type | container | uint32 | . | 10 | Threshold | minimum suitability value that a land use type should have to get allocated. A higher threshold allows fewer land-use types to get allocated which can result in no feasible solution remaining even when the feasibilitytest succeeded. A value of allows any suitability. | parameter | int32 | . | 11 | FeasibleSolution | arbitrary container for possible future use | container | (empty) | . ",
    "url": "/docs/function-discrete-alloc.html#definition",
    
    "relUrl": "/docs/function-discrete-alloc.html#definition"
  },"1119": {
    "doc": "function-discrete-alloc",
    "title": "Result",
    "content": "The result of the discrete_alloc function is a container with: . | attribute landuse(domain) an attribute that gives per land unit the resulting [land use type](Land_Use_Type \"wikilink\") | parameter status: a text that | parameter statusFlag. | container shadow_prices: a container with for each LandUseType an attribute %Lut.Name%(%Lut.ClaimRegions%). | total_allocated: a container with for each LandUseType an attribute %Lut.Name%(%Lut.ClaimRegions%). | bid_price | . status . Examples of possible resulting status texts are: . | DiscreAlloc completed with a total magnified suitability of 48317397677 over 715179 land units = 67559.866379 per land unit, which is optimal. | . This text means that an optimal allocation has been generated with an average magnified suitability of 67559.866379. Assuming a magnification factor of 100000, this represents an average suitability (aka transition potential) of 0.67559866379 . | ClaimRange(type 0 (Urban), Nuts2 3 (ITC3: Liguria)) = [min 25883, max 26057]; 26062 allocated for price {0, 0}; | . This indicates that 5 more land units were allocated than the max claim because no alternatives could be found for allocating urban land use without violating other restrictions. statusFlag . The statusFlag indicates whether a feasible allocation has been generated (without violating any claim or threshold). total_allocated . The total_allocated container presents a counting of the allocation results per Land Use Type per corresponding claim region. This is similar to what can be produced with [reg_count] (Landuse, typeNames, RegionContainer, RegionRefs). where . RegionContainer is a container with names partitionNames and values equal to the corresponding AtomicRegions/AR[atomicRegionMap] and . RegionRefs is defined as partitionNames[partitioning]. In future versions of the GeoDMS, the total_allocated sub-container could be removed or made optional, thus the usage of this part of the results is depreciated since they can easily be obtained by using reg_count explicitly. ",
    "url": "/docs/function-discrete-alloc.html#result",
    
    "relUrl": "/docs/function-discrete-alloc.html#result"
  },"1120": {
    "doc": "function-discrete-alloc",
    "title": "applies to",
    "content": " ",
    "url": "/docs/function-discrete-alloc.html#applies-to",
    
    "relUrl": "/docs/function-discrete-alloc.html#applies-to"
  },"1121": {
    "doc": "function-discrete-alloc",
    "title": "since version",
    "content": " ",
    "url": "/docs/function-discrete-alloc.html#since-version",
    
    "relUrl": "/docs/function-discrete-alloc.html#since-version"
  },"1122": {
    "doc": "function-discrete-alloc",
    "title": "example",
    "content": "container Disc_alloc := discrete_alloc( LandUsePreparation/CBSKlasse/name // 1 string attribute , Input/Compacted/ADomain // 2 uint32 unit , Input/Compacted/Suitability // 3 int32 container , const(0[Partitioning], LandUsePreparation/CBSKlasse) // 4 uint8 attribute , Partitioning/name // 5 string attribute , Input/AggRegio // 6 uint16 unit , Input/Compacted/AtomicRegionMap // 7 uint16 attribute , Input/Claims/minclaims // 8 uint32 container , Input/Claims/maxclaims // 9 uint32 container , threshold // 10 int32 parameter , FeasibleSolution // 11 (empty) container ); . ",
    "url": "/docs/function-discrete-alloc.html#example",
    
    "relUrl": "/docs/function-discrete-alloc.html#example"
  },"1123": {
    "doc": "function-discrete-alloc",
    "title": "frequent error messages",
    "content": ". | value 255 out of range of valid Atomic Regions . | solution: check for undefined values in the AtomicRegionMap. There might be gaps between regions, which will become undefined with poly2grid. | . | . ",
    "url": "/docs/function-discrete-alloc.html#frequent-error-messages",
    
    "relUrl": "/docs/function-discrete-alloc.html#frequent-error-messages"
  },"1124": {
    "doc": "function-discrete-alloc",
    "title": "discussion",
    "content": "shadow prices as a splitter . Assuming that there is one solution to the optimization problem, knowing the shadow prices that result from the allocation means that the allocation can be regenerated by simply taking the land use type j with the highest augmented suitability for each land unit i, thus j: S_ij + lambda_j &gt;= S_ik+lambda_k for all i,k. The S_ij can be regarded as the coordinates of N points in a K-dimensional vector space. If we see this space from the perspective of the point given by the coordinates of -lambda_j, we see that the resulting allocation of land unit i is equal to the direction j that the point Si has the highest value above -lambda. The hyperplane given by j+lambda_j == k+lambda_k differentiates between allocation towards j respectively k and therefore the shadow prices can be regarded as a splitter in the K dimensional vector space of land unit suitabilities. Therefore, within the context of the discrete_alloc function, the shadow prices are aka splitter. For an elaborate description of the splitter perspective, the sampling and scaling, and proof of the complexity bound of O(N*K*log(K)) for the discrete_alloc function, see Tokuyama, T. and Nakano, J. (1995) Efficient algorithms for the Hitchcock transportation problem. SIAM Journal on Computing 24(3): 563-578. Degeneration and SoS . Degenerate cases are cases where different allocations have the same total suitability, which means that there is a continuum of solutions to the optimization problem when X_ij are allowed to have any real value between 0 and 1. The discrete_alloc uses virtual perturbation, also known as (Simulation of simplicity: a technique to cope with degenerate cases in geometric algorithms, Edelsburnner et al.) to decide on degenerate cases. Within the discrete_alloc function, each suitability S’_ij is not taken as S_ij but as S_ij + epsilon * i * j where epsilon is infinitely smaller than the smallest unit of S_ij. This implies that S_ij &lt; S_ik is equivalent to S’_ij &lt; S’_ik since by definition epsilon * i * (j-k) &lt; (S’_ik - S’_ij). Only when S_ij = S_ik while i&lt;&gt;k, the simulated perturbation makes a difference of epsilon * i * (k-j). Also, the shadow prices internally have an explicit epsilon component which can make the difference between two otherwise equal land units. scaling . The discrete_alloc function uses a scaling method to find estimates for the shadow_prices before all data is processed. Instead of a random sample, the first n land units are taken from the total of N land units and it is up to the caller to provide the land units in such an order that the first n units are a representative sample of the total set. This can be done by reordering all suitabilities and claim region maps randomly. The shadow prices are initially set to 0. The scaling starts by dividing N, the total number of land units to be allocated by the stepFactor 4 until n, the number of sample units is less or equal to 1000. Based on the first sample all claims are scaled by a factor (n / N) and all units are allocated to the highest augmented suitability, which initially equals the original unaugmented suitability. Once an allocation of land use type j to land unit i results in an excess of the maximum claim for j, a procedure is started to maintain the feasibility of the maximum claims, called UpdateSplitterDown that tries to move the splitter given by the coordinates of the negative shadow price -lambda in such a way that one land unit less is allocated to j without violating other maximum claims. To achieve this, a heap is maintained for each facet(j,k) between the set of suitability vectors allocatable to j and the set of suitability vectors allocatable to k that contains all land units i that have been allocated to j but could be allocated to k. This heap is ordered on (S’_ij - S’_ik) where the ordering takes the virtual epsilon component into account. After each allocation of land unit i to type j, i is pushed into the heaps of all facets of j to other allocation alternatives k so that these alternatives are recorded in an accessible way for future reallocations. UpdateSplitterDown then searches the shortest path through the network of facets (as links with cost (S’ij + Lambda_j) - (S’ij -Lambda_k) ) and allocation alternatives k (as nodes) until an alternative without a bound claim is reached. Note that the ordered heaps give constant time complexity access to the cheapest reallocation alternative from j to k, that the link cost thereof is always positive and therefore dijkstra can be and is used. After processing each of the land units of a (scaled version of an) allocation while maintaining the feasibility of the maximum claim restrictions, a reversed procedure called UpdateSplitterDown is called repeatedly to get sufficient land allocated to meet the minimum claims. Memory usage . overview . The usage of RAM memory or Virtual Address Space by the discrete_alloc function for allocating N land units (with a non-tiled domain) to K land use types is O(K*N), to be more precise, it is as follows: . | administration of land use types and claim region names: insignificant | administration of claims and their shadow prices and facets: PM. | suitabilityMaps: K page-files of N*sizeof(Int32) are mapped into memory. | atomicRegionMap: 1 page-file of N*sizeof(UInt16) is mapped into memory. | resulting landuse: 1 page-file of N*sizeof(UInt8) is mapped into memory. | ordered heaps with reallocation options: used part bounded by (K-1)*N*sizeof(UInt32), but up to a double amount can be taken from the dynamic memory pool. | . This totals to (4K+3)*N bytes distributed over K+2 memory mapped page-files and up to 2 times (4K-4)*N bytes for the ordered heaps. Calculating and storing the bid_prices per land unit (and the shadow_prices and total_allocated counts) requires an additional page file of N*sizeof(Int32) bytes to be mapped into the Virtual Address Space, but this is done after the allocation completes and the ordered heaps have been cleared. Given that in a Win32 process, approximately 1.5 GiB is available as heap addresses, the discrete_allocation without selective threshold is safe as long as (4K+3)*N + 2*(4K-4)*N = (12K-5)*N &lt; 1.5 GiB. With K=13 as in the EuClueScanner this simplifies to 151N &lt; 1.5 GiB or roughly N &lt; 10 million allocatable land units. memory usage of the ordered heaps . For each claim j that has an overlapping region with claim k, there is a facet with an ordered heap that registers reallocation options from j to k. The number of facets is bounded by K and the number of atomic regions to … . The number of reallocation alternatives that are stored in these heaps is bounded by (K-1)*N except that for performance reasons, the execution of a reallocation from j to k does not directly remove the other alternatives that became obsolete from the other facets of j. The growth strategy of the ordered heaps is that when the required size overflows the reserved memory, a memory reallocation with double of this size is requested from the dynamic memory pool. This can result in an amount of memory reserved for the heaps that are double the amount that has been in use during any step of the discrete_alloc algorithm. Furthermore, the dynamic aspect of moving land unit indices from one facet to the other due to reallocations has not been thoroughly analyzed. A strict threshold will reduce the amount of (re)allocation options and therefore the sizes of these ordered heaps. Possible Improvement of Memory Usage . The heap growing strategy could be reduced to only allocating a fraction r, which reduces the bound of heap memory usage to (1+r) times the used parts but increases the maximum average number of copying reallocation options from 1 to approximately 1/r and it is likely that losses due to more fragmentation cancel the advantage of less memory reservation. Support for tiled data . The discrete_alloc function supports the domain of the suitability maps and atomicRegionMap to be tiled (also known as segmented) by processing subsets of subsequent tiles as scaled versions of the total allocation where the allocations of the tiles before the current are frozen. So the processing of each tile only considers alternatives for UpdateSplitterDown within that tile. This starts with only the first tile (aka tile 0), then the second tile (aka tile 1) with claims scaled to the number of land units of both tiles minus what has already been allocated in the first tile, etc. This we call the tile-by-tile-heuristic. With an unfortunate permutation of the domain, this can result in choices in the first tile(s) that are not optimal or even result in an infeasible-solution when taking the alternatives of later tiles into account. ",
    "url": "/docs/function-discrete-alloc.html#discussion",
    
    "relUrl": "/docs/function-discrete-alloc.html#discussion"
  },"1125": {
    "doc": "function-discrete-alloc",
    "title": "see also",
    "content": " ",
    "url": "/docs/function-discrete-alloc.html#see-also",
    
    "relUrl": "/docs/function-discrete-alloc.html#see-also"
  },"1126": {
    "doc": "function-discrete-alloc",
    "title": "function-discrete-alloc",
    "content": " ",
    "url": "/docs/function-discrete-alloc.html",
    
    "relUrl": "/docs/function-discrete-alloc.html"
  },"1127": {
    "doc": "fusion",
    "title": "indices",
    "content": ". | _1A: StatusA ? {‘Ar’, ‘For’, ‘Un’} | _1B: StatusB ? {CC: Clear Cutting allowed aka FAWS (IUCN_CAT = Other), Th: Only Thinning allowed aka FAWSp(IUCN_CAT = 2 or 4), Un: Unavailable aka FnAWS(IUCN_CAT =0 or 1)} | _2: Forest Type, aka FT | _3: NutsRegion, aka NR | _4: Management Type, aka MT | _5: Management Strategy, aka MS | _6: Climatic Unit, aka CU | _7: BLCF, functionally dependent on _2 and further ignored, except when allocating GFTM demand | AC: AgeClass | . | DT: Disturbance Type | HWP: Harvested Wood Products ? { IRW: Industrial Round-Wood, FW: Fuel Wood } | . | t: time { 2015, 2020, 2025, 2030} | y: {1..5} Year (of a disturbance within a time period) | C: raster cell, (100m)2. | . ",
    "url": "/docs/fusion.html#indices",
    
    "relUrl": "/docs/fusion.html#indices"
  },"1128": {
    "doc": "fusion",
    "title": "combined indices",
    "content": ". | 6A: combination of _1A, _2 .. _6. | 6B: combination of _1B, _2 .. _6. | row: generic term for a set of keys for a CBM record | rowA: combination of 6A and AC. | rowB: combination of 6B and AC. | . ",
    "url": "/docs/fusion.html#combined-indices",
    
    "relUrl": "/docs/fusion.html#combined-indices"
  },"1129": {
    "doc": "fusion",
    "title": "exogenous datasets",
    "content": ". | BACK_INVENTORY: rowA-&gt;(Area, _7, OtherAttrs) | . produced by CBM GUI . ",
    "url": "/docs/fusion.html#exogenous-datasets",
    
    "relUrl": "/docs/fusion.html#exogenous-datasets"
  },"1130": {
    "doc": "fusion",
    "title": "endogenous datasets",
    "content": " ",
    "url": "/docs/fusion.html#endogenous-datasets",
    
    "relUrl": "/docs/fusion.html#endogenous-datasets"
  },"1131": {
    "doc": "fusion",
    "title": "BACK_INVENTORY_AWS",
    "content": "rowB -&gt; (Area, _7, OtherAttrs) . Produced by FUSION_AWS, see issue 942 . Using . | BACK_INVENTORY | AWS maps, | species probability maps | . Disaggregation to c by fencing on _3 and _6, discrete allocation on _2, _4, _5 using probability maps per FT related species, and MT and MS related factor maps when available, and then assign AC based on a volume map for &lt; 2015. resulting in C -&gt; row . ",
    "url": "/docs/fusion.html#back_inventory_aws",
    
    "relUrl": "/docs/fusion.html#back_inventory_aws"
  },"1132": {
    "doc": "fusion",
    "title": "INVENTORY(2015)",
    "content": "rowB -&gt; (Area, _7, Biomass_carbon_ha, Other attributes) produced by CBM 2015 using BACK_INVENTORY_AWS: , and a fixed set of disturbances. ",
    "url": "/docs/fusion.html#inventory2015",
    
    "relUrl": "/docs/fusion.html#inventory2015"
  },"1133": {
    "doc": "fusion",
    "title": "INV_MAX(t)",
    "content": ". | (_7)-&gt;(???) | . Produced by CBM MWS(t) with t= 2015..2020, or later using INVENTORY(t) . ",
    "url": "/docs/fusion.html#inv_maxt",
    
    "relUrl": "/docs/fusion.html#inv_maxt"
  },"1134": {
    "doc": "fusion",
    "title": "HC",
    "content": "rowB -&gt; (Costs [EURO per m3], AreaCheck) . Produced by FUSION_HC . using . | INVENTORY(2015), | CostFactors of Gulia: C-&gt;Costs[EURO per m3] | . Disaggregation to c by fencing on _3 and _6, discrete allocation on _2, _4, _5 using probability maps per FT related species, and MT and MS related factor maps when available, and then assign AC based on a volume map for 2015. resulting in C -&gt; row, used to aggregate C-&gt;Costs[EURO per m3] to HC. QUESTION: HOW to aggregate? Average costs might take very expensive locations into account which will not be harvested. Better: an average of the cheapest half. ",
    "url": "/docs/fusion.html#hc",
    
    "relUrl": "/docs/fusion.html#hc"
  },"1135": {
    "doc": "fusion",
    "title": "DEMAND(t)",
    "content": ". | (_7,HWP-&gt;q) [m^3] | . Produced by GFTM(t) . Using . | INV_MAX(t) as constraint. | . ",
    "url": "/docs/fusion.html#demandt",
    
    "relUrl": "/docs/fusion.html#demandt"
  },"1136": {
    "doc": "fusion",
    "title": "disturbances(t)",
    "content": "(rowB, AC)-&gt;(_7, DT, Removed Carbon) . Produced by FUSION_DT . Using . | INVENTORY(t): rowB-&gt;(Area, _7, Biomass_carbon_ha), aka Arow**B and Crow**B | DEMAND(T): (_7)-&gt;Demand[m^3 / yr], aka D(T)_7 | HC: rowB -&gt; (Costs [EURO per m3]), aka Rrow**B | silviculture: (_1B, _2, _4, _5, {MAN, NAT}, AG) -&gt; (DT, Frac_Merch_Biom_rem), aka D**Ts**c and ?s**c | . Steps: . | Each INVENTORY row, relates to one row in HC, one row in silviculture if the NAT rows are ignored, and one row in Demand(t). | For each INVENTORY row, the total volume [in kg] is determined by multiplying Area[ha] and Biomass_carbon_ha [kg/ha]. | For each INVENTORY row, the maximum yield is determined by multiplying the total volume with the related silviculture-&gt;Frac_Merch_Biom_rem: Yrow**B := Arow**B · Crow**B. | Then per related demand category, all Inventory rows are ordered on HC-&gt;Costs in ascending order and the first rows are selected up to the cumulative total of the maximum yield exceeds the demand. | For the selected INVENTORY rows, the DT of the related silviculture are applied, for the unselected rows, DT becomes 0. | Removed_Carbon becomes maximum_yield for the selected rows and 0 for the unselected rows. | . Alternatively, one could allocate an area fraction xrow**B to each INVENTORY row, based on a descending function of Harvest costs, for example, proportional to exp (-ß·Rrow**B), such that the $\\sum\\limits_{rowB \\in \\7} x{rowB} \\cdot Y_{rowB} = D(t)_{\\_7}$ . These steps are taken for IRW. Then, a supply curve for FW and OWC provision is generated, listing harvesting options for the 5 year period in ascending order of costs per m3. The supply curve lists quantity and costs, and for which row and why it is available: {OWC of selected IRW, FW with OWC, FW, OWC of cheaper FW}. ",
    "url": "/docs/fusion.html#disturbancest",
    
    "relUrl": "/docs/fusion.html#disturbancest"
  },"1137": {
    "doc": "fusion",
    "title": "INVENTORY(t&gt;2015)",
    "content": "rowB -&gt; (Area, _7) produced by CBM(t) using INV(t-1), disturbances(t) . ",
    "url": "/docs/fusion.html#inventoryt2015",
    
    "relUrl": "/docs/fusion.html#inventoryt2015"
  },"1138": {
    "doc": "fusion",
    "title": "remaining work",
    "content": ". | divide IRW demand over the different disturbance types, proportional to maximum potential yield. | for SI: MS prob maps should only be used of MT=1 =&gt; combine MS and MT in selecting a probability map. | allocate disturbances per year and report only active disturbances | allow fractional disturbances (area intensity), keep a record of remaining area per row during the years | provide a FuelWood supply curve over the 5 years, including OWC that may arise from IRW and FW harvesting | clean-up unique_region and unique_type relations; replace overlay by key, xx_ref, and rlookup. | . ",
    "url": "/docs/fusion.html#remaining-work",
    
    "relUrl": "/docs/fusion.html#remaining-work"
  },"1139": {
    "doc": "fusion",
    "title": "fusion",
    "content": ". title: FUSION permalink: /FUSION/ — . FUSION is a set of spatially explicit model components to integrate https://en.wikipedia.org/wiki/CBM-CFS3 CBM, https://ec.europa.eu/jrc/en/publication/global-forest-trade-model-gftm GFTM, (projected) Land Use, and a harvest cost calculations for the purpose of integrated modelling to assess forestry biomass feedstock availability. This page describes the components of Fusion as mappings of input datasets to resulting datasets. Each dataset is described as a mapping from a set of indices to a set of attributes, which can also be indices. Fusion is implemented in the GeoDMS. ",
    "url": "/docs/fusion.html",
    
    "relUrl": "/docs/fusion.html"
  },"1140": {
    "doc": "gdal-options",
    "title": "open/read options",
    "content": "Open/read options are configured with tree-item-name: GDAL_Options. The following examples show how to configure the option for reading a csv file without a header: . 1. parameter&lt;string&gt; GDAL_Options: [ 'HEADERS=NO']; 2. unit&lt;uint32&gt; optionSet := range(uint32, 0, 1); attribute&lt;string&gt; GDAL_Options (optionSet) : [ 'HEADERS=NO']; . ",
    "url": "/docs/gdal-options.html#openread-options",
    
    "relUrl": "/docs/gdal-options.html#openread-options"
  },"1141": {
    "doc": "gdal-options",
    "title": "create/write options",
    "content": "Create/write options are configured with tree-item-name: GDAL_LayerCreationOptions. The following examples show how to configure the option for writing a csv file with a comma as separator: . 1. parameter&lt;string&gt; GDAL_LayerCreationOptions: [ 'SEPARATOR=COMMA']; 2. unit&lt;uint32&gt; optionSet := range(uint32, 0, 1); attribute&lt;string&gt; GDAL_LayerCreationOptions (optionSet) : [ 'SEPARATOR=COMMA']; . ",
    "url": "/docs/gdal-options.html#createwrite-options",
    
    "relUrl": "/docs/gdal-options.html#createwrite-options"
  },"1142": {
    "doc": "gdal-options",
    "title": "configuration options",
    "content": "GDAL configuration options are configured with tree-item-name: GDAL_ConfigurationOptions. For instance setting SQLite journal file to ‘OFF’: . 1. parameter&lt;string&gt; GDAL_ConfigurationOptions: ['OGR_SQLITE_JOURNAL=OFF']; . ",
    "url": "/docs/gdal-options.html#configuration-options",
    
    "relUrl": "/docs/gdal-options.html#configuration-options"
  },"1143": {
    "doc": "gdal-options",
    "title": "combining options",
    "content": "Options can be combined, for multiple options always use an attribute. The following example shows the configuration of reading a geoTiff with LZW compression, predictor level 2 and multithreading: . unit&lt;uint32&gt; optionSet := range(uint32, 0, 3); attribute&lt;string&gt; GDAL_Options (optionSet): ['NUM_THREADS=ALL_CPUS', 'COMPRESS=LZW', 'PREDICTOR=2']; . ",
    "url": "/docs/gdal-options.html#combining-options",
    
    "relUrl": "/docs/gdal-options.html#combining-options"
  },"1144": {
    "doc": "gdal-options",
    "title": "gdal-options",
    "content": "Each gdal driver has a set of specific options to modify the behavior of the driver. Since version 7.408 these options can be configured in the GeoDMS. Consult the vector drivers and/or raster drivers specification of the driver to see what options are supported. Options are configured as parameter (1 option) or attribute (1 or more options). If configured as attribute the domain-unit is usually named: optionSet. An important distinction is made between open/read options for reading data with GDAL and creations options for writing data with GDAL. ",
    "url": "/docs/gdal-options.html",
    
    "relUrl": "/docs/gdal-options.html"
  },"1145": {
    "doc": "gdal-update-issues",
    "title": "gdal.vect",
    "content": ". | When writing a subitem structure, append subitem name to avoid collisions of identical item names. | . ",
    "url": "/docs/gdal-update-issues.html#gdalvect",
    
    "relUrl": "/docs/gdal-update-issues.html#gdalvect"
  },"1146": {
    "doc": "gdal-update-issues",
    "title": "dbf",
    "content": ". | [found in 7.408; fixed in 7.411] Boolean data items seem to be written as numeric data items. Reading the written data results in the error: column: BoolAtt, configured type: Bool, database type: Int32 | [found in 7.408; fixed in 7.411] Attribute field names with more than 10 characters result in unclear “invalid index” error | [found in 7.408; fixed in 7.409] Attributes with value-type uint2/uint4 are not supported, errors: . | gdal.vect Error: Cannot read attribute data of type 1 into attribute of type 12/13* | . | [found in 7.408; fixed in 7.409] written numeric null values are reread as 0 values. | [behavior accepted, to be documentend] When writing data to a file that is locked (e.g. opened in MsExcel), no error dialog is presented. The error in the Detail Page is gdal Error: error(1): D:/LocalData/storage/regr_results/gdalwrite_vect/gdal.dbf is not a directory, which should be something like: data can not be written as resulting file is locked. | . ",
    "url": "/docs/gdal-update-issues.html#dbf",
    
    "relUrl": "/docs/gdal-update-issues.html#dbf"
  },"1147": {
    "doc": "gdal-update-issues",
    "title": "esri-shapefile",
    "content": ". | How to deal with multiple geometries as subitems of a unit for which a storagemanager is configured? What is the geometry to be written to the .shp file and how to treat the other geometries in the .dbf file? | [found in 7.408; fixed in 7.411] Index files are made if the attribute GDAL_LayerCreationOptions(optionSet) : [\"SPATIAL_INDEX=YES\"\\] is configured. This works fine if a geometry item is updated, it does not work if the parent of the geometry item is requested in map view. | . ",
    "url": "/docs/gdal-update-issues.html#esri-shapefile",
    
    "relUrl": "/docs/gdal-update-issues.html#esri-shapefile"
  },"1148": {
    "doc": "gdal-update-issues",
    "title": "csv",
    "content": ". | [found in 7.408; fixed in 7.409] reading float32 from a .csv file with a .csvt file, results in incorrect integer conversion, such as -2.5 -&gt; -2.0 | null values and empty strings are represented the same in a .csv result and become indistinguishable | [found in 7.410] all fields read as string, even when user explicitly configures datatype. | . ",
    "url": "/docs/gdal-update-issues.html#csv",
    
    "relUrl": "/docs/gdal-update-issues.html#csv"
  },"1149": {
    "doc": "gdal-update-issues",
    "title": "GeoJSON",
    "content": ". | [found in 7.410; fixed in 7.411] writing multiple attributes results in error: Committing Data (writing to storage) Failed, FailReason  gdal Error: error(1): Invalid index : -1 | . ",
    "url": "/docs/gdal-update-issues.html#geojson",
    
    "relUrl": "/docs/gdal-update-issues.html#geojson"
  },"1150": {
    "doc": "gdal-update-issues",
    "title": "Tiff",
    "content": ". | reading tiff files with uint32 data results in values between 0 and 255, even if in tiff file higher files occur | reading tiff files with boolean data results in error: GridData::ReadData Error: Cannot convert 1 bits DMS data from/to 8 bits Raster file data | reading tiff files with palette data does not read the palette data | writing GeoTiff files results in error: Committing Data (writing to storage) Failed, FailReason Check Failed Error: height == GetWidth(), C:\\dev\\geodms7400\\stg\\dll\\src\\gdal\\gdal_grid.cpp(219): | . ",
    "url": "/docs/gdal-update-issues.html#tiff",
    
    "relUrl": "/docs/gdal-update-issues.html#tiff"
  },"1151": {
    "doc": "gdal-update-issues",
    "title": "bmp",
    "content": ". | reading some bmp files results in error: file.bmp not recognized as a supported file format. | writing bmp files with bmpw results in error: Committing Data (writing to storage) Failed, FailReason Check Failed Error: height == GetWidth(), C:\\dev\\geodms7400\\stg\\dll\\src\\gdal\\gdal_grid.cpp(219): | . ",
    "url": "/docs/gdal-update-issues.html#bmp",
    
    "relUrl": "/docs/gdal-update-issues.html#bmp"
  },"1152": {
    "doc": "gdal-update-issues",
    "title": "png",
    "content": ". | reading png files with palette data does not read the palette data | . ",
    "url": "/docs/gdal-update-issues.html#png",
    
    "relUrl": "/docs/gdal-update-issues.html#png"
  },"1153": {
    "doc": "gdal-update-issues",
    "title": "gdal-update-issues",
    "content": "Since version 7.400 GeoDMS uses GDAL 3. We are aware of the following issues related to the following formats: . ",
    "url": "/docs/gdal-update-issues.html",
    
    "relUrl": "/docs/gdal-update-issues.html"
  },"1154": {
    "doc": "gdal.grid",
    "title": "see also",
    "content": ". | gdalwrite.grid | gdal.vect | . ",
    "url": "/docs/gdal.grid.html#see-also",
    
    "relUrl": "/docs/gdal.grid.html#see-also"
  },"1155": {
    "doc": "gdal.grid",
    "title": "gdal.grid",
    "content": "gdal.grid is the part of gdal, used to read grid-data. We test and support (options for) the following formats: . | geotiff | . ",
    "url": "/docs/gdal.grid.html",
    
    "relUrl": "/docs/gdal.grid.html"
  },"1156": {
    "doc": "gdal",
    "title": "formats",
    "content": "GDAL support the following raster and vector drivers. The following table shows which formats are tested/documented. Other formats may also work, but are not (yet) supported. The second and third column indicates which StorageType to use for the format. | format | read | write | . | csv | gdal.vect | gdalwrite.vect | . | dbf | gdal.vect | gdalwrite.vect | . | esri-shapefile (point, arc, poly) | gdal.vect | gdalwrite.vect | . | geopackage | gdal.vect | gdalwrite.vect | . | GeoJSON | gdal.vect | gdalwrite.vect | . | gml | gdal.vect | gdalwrite.vect | . | filegeodatabase | gdal.vect |   | . | pbf-(osm) | gdal.vect |   | . | geotiff | gdal.grid | gdalwrite.grid | . driver selection . As it is possible to read multiple data formats with GDAL, a specific driver needs to be chosen to open a dataset. The default behavior is that GDAL tries to open the dataset based on the the file/database extension. The first driver that successfully manages to open the given dataset is used for further reading. It is possible to overrule this driver, e.g. if you want to open a dataset specifically with the netCDF driver use: . parameter&lt;string&gt; GDAL_Driver : ['netCDF']; . options . There are various driver specific gdal-options available to modify the behavior of a driver. development . As GDAL (especially GDAL3 and writing data with GDAL) is relatively new, there might be some issues. See gdal-update-issues for the latest information. ",
    "url": "/docs/gdal.html#formats",
    
    "relUrl": "/docs/gdal.html#formats"
  },"1157": {
    "doc": "gdal",
    "title": "gdal",
    "content": "Since version 6.045 The GeoDMS includes the GDAL library as a storagemanager collection to read multiple (spatial) data formats. Since version 7.400, GeoDMS uses GDAL 3 (regular updates, with Microsoft’s vcpkg package manager). Data can now both be read from as well as written to (from version 7.408) data sources with GDAL. ",
    "url": "/docs/gdal.html",
    
    "relUrl": "/docs/gdal.html"
  },"1158": {
    "doc": "gdal.vect",
    "title": "see also",
    "content": ". | gdalwrite.vect | gdal.grid | . ",
    "url": "/docs/gdal.vect.html#see-also",
    
    "relUrl": "/docs/gdal.vect.html#see-also"
  },"1159": {
    "doc": "gdal.vect",
    "title": "gdal.vect",
    "content": "gdal.vect is the part of gdal, used to read vector-data and non spatial data. We test and support (options for) the following formats: . | csv | dbf | esri-shapefile (point, arc, poly) | geopackage | filegeodatabase | GeoJSON | gml | pbf-(osm) | . ",
    "url": "/docs/gdal.vect.html",
    
    "relUrl": "/docs/gdal.vect.html"
  },"1160": {
    "doc": "gdalwrite.grid",
    "title": "see also",
    "content": ". | gdal.grid | gdalwrite.vect | . ",
    "url": "/docs/gdalwrite.grid.html#see-also",
    
    "relUrl": "/docs/gdalwrite.grid.html#see-also"
  },"1161": {
    "doc": "gdalwrite.grid",
    "title": "gdalwrite.grid",
    "content": "Gdalwrite.grid is the part of gdal, used to write grid-data. Gdalwrite.grid is available since version 7.408. We test and support (options for) the following formats: . | geotiff | . ",
    "url": "/docs/gdalwrite.grid.html",
    
    "relUrl": "/docs/gdalwrite.grid.html"
  },"1162": {
    "doc": "gdalwrite.vect",
    "title": "see also",
    "content": ". | gdal.vect | gdalwrite.grid | . ",
    "url": "/docs/gdalwrite.vect.html#see-also",
    
    "relUrl": "/docs/gdalwrite.vect.html#see-also"
  },"1163": {
    "doc": "gdalwrite.vect",
    "title": "gdalwrite.vect",
    "content": "Gdalwrite.vect is the part of gdal, used to write vector-data and non spatial data. Gdalwrite.vect is available since version 7.408. We test and support (options for) the following formats: . | csv | dbf | esri-shapefile | geopackage | . ",
    "url": "/docs/gdalwrite.vect.html",
    
    "relUrl": "/docs/gdalwrite.vect.html"
  },"1164": {
    "doc": "ge",
    "title": "syntax",
    "content": ". | ge(a, b) | a &gt;= b | . ",
    "url": "/docs/ge.html#syntax",
    
    "relUrl": "/docs/ge.html#syntax"
  },"1165": {
    "doc": "ge",
    "title": "definition",
    "content": "ge(a, b) or a &gt; b results in a boolean data-item indicating if the values of data item a are greater than or equal to the corresponding values of data item b. ",
    "url": "/docs/ge.html#definition",
    
    "relUrl": "/docs/ge.html#definition"
  },"1166": {
    "doc": "ge",
    "title": "description",
    "content": "Each comparison with missing values results in the value false. ",
    "url": "/docs/ge.html#description",
    
    "relUrl": "/docs/ge.html#description"
  },"1167": {
    "doc": "ge",
    "title": "applies to",
    "content": "Data items with Numeric, string or bool value-type . ",
    "url": "/docs/ge.html#applies-to",
    
    "relUrl": "/docs/ge.html#applies-to"
  },"1168": {
    "doc": "ge",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be compared to data items of any domain). | argument must have matching: . | value-type | metric | . | . ",
    "url": "/docs/ge.html#conditions",
    
    "relUrl": "/docs/ge.html#conditions"
  },"1169": {
    "doc": "ge",
    "title": "example",
    "content": "1. attribute&lt;bool&gt; AgeB (CDomain) := ge(A, B); 2. attribute&lt;bool&gt; AgeB (CDomain) := A &gt;= B; . | A | B | AgeB | . | 0 | 0 | True | . | 1 | 2 | False | . | 2.5 | 2.5 | True | . | -100 | 100 | False | . | 999 | -999 | True | . | null | 0 | False | . | null | null | False | . | 0 | null | False | . | null | 100 | False | . | 100 | null | False | . CDomain, nr of rows = 10 . ",
    "url": "/docs/ge.html#example",
    
    "relUrl": "/docs/ge.html#example"
  },"1170": {
    "doc": "ge",
    "title": "see also",
    "content": ". | ge_or_rhs_null | . ",
    "url": "/docs/ge.html#see-also",
    
    "relUrl": "/docs/ge.html#see-also"
  },"1171": {
    "doc": "ge",
    "title": "ge",
    "content": "ordering-functions greater than or equals to (&gt;=) . ",
    "url": "/docs/ge.html",
    
    "relUrl": "/docs/ge.html"
  },"1172": {
    "doc": "ge_or_rhs_null",
    "title": "syntax",
    "content": ". | ge_or_rhs_null(a, b) | . ",
    "url": "/docs/ge_or_rhs_null.html#syntax",
    
    "relUrl": "/docs/ge_or_rhs_null.html#syntax"
  },"1173": {
    "doc": "ge_or_rhs_null",
    "title": "definition",
    "content": "ge_or_rhs_null(a, b) results in a boolean data-item indicating if the values of data item a are greater than or equals to the corresponding values of data item b or if the values of data item a are null. ",
    "url": "/docs/ge_or_rhs_null.html#definition",
    
    "relUrl": "/docs/ge_or_rhs_null.html#definition"
  },"1174": {
    "doc": "ge_or_rhs_null",
    "title": "description",
    "content": "The comparison with missing values in data item a results in the value True (except for null values in data item b). ",
    "url": "/docs/ge_or_rhs_null.html#description",
    
    "relUrl": "/docs/ge_or_rhs_null.html#description"
  },"1175": {
    "doc": "ge_or_rhs_null",
    "title": "applies to",
    "content": "Data items with Numeric, string or bool value-type . ",
    "url": "/docs/ge_or_rhs_null.html#applies-to",
    
    "relUrl": "/docs/ge_or_rhs_null.html#applies-to"
  },"1176": {
    "doc": "ge_or_rhs_null",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be compared to data items of any domain). | argument must have matching: . | value-type | metric | . | . ",
    "url": "/docs/ge_or_rhs_null.html#conditions",
    
    "relUrl": "/docs/ge_or_rhs_null.html#conditions"
  },"1177": {
    "doc": "ge_or_rhs_null",
    "title": "example",
    "content": "attribute&lt;bool&gt; geAB (CDomain) := ge_or_rhs_null(A, B); . | A | B | AgeB | . | 0 | 0 | True | . | 1 | 2 | False | . | 2.5 | 2.5 | True | . | -100 | 100 | False | . | 999 | -999 | True | . | null | 0 | False | . | null | null | False | . | 0 | null | True | . | null | 100 | False | . | 100 | null | True | . CDomain, nr of rows = 10 . ",
    "url": "/docs/ge_or_rhs_null.html#example",
    
    "relUrl": "/docs/ge_or_rhs_null.html#example"
  },"1178": {
    "doc": "ge_or_rhs_null",
    "title": "see also",
    "content": ". | ge | . ",
    "url": "/docs/ge_or_rhs_null.html#see-also",
    
    "relUrl": "/docs/ge_or_rhs_null.html#see-also"
  },"1179": {
    "doc": "ge_or_rhs_null",
    "title": "ge_or_rhs_null",
    "content": "ordering-functions greater than or equal to or right side has null values . ",
    "url": "/docs/ge_or_rhs_null.html",
    
    "relUrl": "/docs/ge_or_rhs_null.html"
  },"1180": {
    "doc": "geodetic-templates",
    "title": "geodetic-templates",
    "content": "This page provides a list of GeoDMS Template implementations with common geodetic operations, such as conversion between geodetic coordinate and datum systems (ie: spherical [longitude, latitude, height] to WGS84 ECEF [X, Y, Z] frame). Template plh2xyzVec {        unit` rowset;` `    `[`attribute`](attribute \"wikilink\")` lat (rowset);` `    `[`attribute`](attribute \"wikilink\")` lon (rowset);` `       ` `    `[`parameter`](parameter \"wikilink\")` a          := 6378137.0;             // WGS84 equatorial radius` `    `[`parameter`](parameter \"wikilink\")` f          := 1.0 / 298.257223563;   // Earth flattening` `    `[`parameter`](parameter \"wikilink\")` e2         := 2.0 * f - f * f;       // excentricity e (squared)` `    `[`attribute`](attribute \"wikilink\")` N (rowset) := a / `[`sqrt`](sqrt \"wikilink\")`(1.0-e2 * `[`sqr`](sqr \"wikilink\")`(`[`sin`](sin \"wikilink\")`(lat*`[`pi`](pi \"wikilink\")`()/180.0))); // Kromtestraal Oost-West richting` `       ` `    `[`attribute`](attribute \"wikilink\")` X (rowset) := N * `[`cos`](cos \"wikilink\")`(lat*`[`pi`](pi \"wikilink\")`()/180.0) * `[`cos`](cos \"wikilink\")`(lon*`[`pi`](pi \"wikilink\")`()/180.0);` `    `[`attribute`](attribute \"wikilink\")` Y (rowset) := N * `[`cos`](cos \"wikilink\")`(lat*`[`pi`](pi \"wikilink\")`()/180.0) * `[`sin`](sin \"wikilink\")`(lon*`[`pi`](pi \"wikilink\")`()/180.0);` `    `[`attribute`](attribute \"wikilink\")` Z (rowset) := (N-e2*N)*`[`sin`](sin \"wikilink\")`(lat * `[`pi`](pi \"wikilink\")`()/180.0);` `}` . Template plh2xyzParam {     parameter` lat;` `    `[`parameter`](parameter \"wikilink\")` lon;` `       ` `    `[`parameter`](parameter \"wikilink\")` a  := 6378137.0;             // WGS84 equatorial radius` `    `[`parameter`](parameter \"wikilink\")` f  := 1.0 / 298.257223563;   // Earth flattening` `    `[`parameter`](parameter \"wikilink\")` e2 := 2.0 * f - f * f;       // excentricity e (squared)` `    `[`parameter`](parameter \"wikilink\")` N  := a / `[`sqrt`](sqrt \"wikilink\")`(1.0-e2 * `[`sqr`](sqr \"wikilink\")`(`[`sin`](sin \"wikilink\")`(lat*`[`pi`](pi \"wikilink\")`()/180.0))); // Kromtestraal Oost-West richting` `       ` `    `[`parameter`](parameter \"wikilink\")` X  := N * `[`cos`](cos \"wikilink\")`(lat*`[`pi`](pi \"wikilink\")`()/180.0) * `[`cos`](cos \"wikilink\")`(lon*`[`pi`](pi \"wikilink\")`()/180.0);` `    `[`parameter`](parameter \"wikilink\")` Y  := N * `[`cos`](cos \"wikilink\")`(lat*`[`pi`](pi \"wikilink\")`()/180.0) * `[`sin`](sin \"wikilink\")`(lon*`[`pi`](pi \"wikilink\")`()/180.0);` `    `[`parameter`](parameter \"wikilink\")` Z  := (N-e2*N)*`[`sin`](sin \"wikilink\")`(lat * `[`pi`](pi \"wikilink\")`()/180.0);` `}` . Template Haversine {        parameter` lat1_degrees: isHidden=\"True\";` `       `[`parameter`](parameter \"wikilink\")` lat2_degrees;` `       `[`parameter`](parameter \"wikilink\")` lon1_degrees;` `       `[`parameter`](parameter \"wikilink\")` lon2_degrees;` `       `[`parameter`](parameter \"wikilink\")` lat1_radian := lat1_degrees * pi() / 180.0;` `       `[`parameter`](parameter \"wikilink\")` lat2_radian := lat2_degrees * pi() / 180.0;` `       `[`parameter`](parameter \"wikilink\")` lon1_radian := lon1_degrees * pi() / 180.0;` `       `[`parameter`](parameter \"wikilink\")` lon2_radian := lon2_degrees * pi() / 180.0;` `       `[`parameter`](parameter \"wikilink\")`     deltaLon_radian := lon1_radian - lon2_radian;` `       `[`parameter`](parameter \"wikilink\")`     deltaLat_radian := lat1_radian - lat2_radian;` `       `[`parameter`](parameter \"wikilink\")`     a               := sqr(sin(deltaLat_radian/2d)) + (((cos(lat1_radian) * cos(lat2_radian))) * sqr(sin(deltaLon_radian/2d)));` `       `[`parameter`](parameter \"wikilink\")`          distance        := (2d * 6371d * atan(sqrt(a) / (sqrt(1d - a))))[km];` `}` . ",
    "url": "/docs/geodetic-templates.html",
    
    "relUrl": "/docs/geodetic-templates.html"
  },"1181": {
    "doc": "geodms-default-tiling",
    "title": "Default tiling",
    "content": "By default GeoDMS tiles data into segments of 256x256 blocks or 65536 rows. ",
    "url": "/docs/geodms-default-tiling.html#default-tiling",
    
    "relUrl": "/docs/geodms-default-tiling.html#default-tiling"
  },"1182": {
    "doc": "geodms-default-tiling",
    "title": "Tile pipelining",
    "content": "Most GeoDMS operators, even reading data using for instance gdal.grid, can make use of tile pipelines, which means that data can be processed on a per tile basis by multiple threads. Which in theory can reduce memory consumption significantly as there is no need to keep the full domain or compacted domain into memory. One property that can be set for instance when reading data pipelined is: LazyCalculated = “True”. ",
    "url": "/docs/geodms-default-tiling.html#tile-pipelining",
    
    "relUrl": "/docs/geodms-default-tiling.html#tile-pipelining"
  },"1183": {
    "doc": "geodms-default-tiling",
    "title": "Optimal tiling of raster/grid SourceData",
    "content": "To optimally make use of GeoDMS internal default tiling data model, it is best to provide SourceData in 256x256 tiled blocks or in blocks of 65536 rows. The former 2D blocksize is more common for raster/grid datasets, for instance the GeoTiff format supports tiling. The tiling can be specified in most major GIS packages, for instance QGIS, which uses GDAL under the hood. It can also be specified using common gdal tools, for instance gdalwarp: . gdalwarp input.tif output.tif -co TILED=YES -co BLOCKXSIZE=256 -co BLOCKYSIZE=256 -s_srs ESRI:54009 -t_srs EPSG:4326 -co COMPRESS=LZW . ",
    "url": "/docs/geodms-default-tiling.html#optimal-tiling-of-rastergrid-sourcedata",
    
    "relUrl": "/docs/geodms-default-tiling.html#optimal-tiling-of-rastergrid-sourcedata"
  },"1184": {
    "doc": "geodms-default-tiling",
    "title": "Using suboptimal tiling",
    "content": "Huge performance waste can be observed when using the GeoDMS default tiling and a dataset with tiling that diverts siginificantly from the default. For instance reading a GeoTiff for the whole world, with striped tiling of 1xN, with 1 row and N columns. This leads currently to the situation that in order to fill each internal tile of 256x256 pixels, 256 stripes need to be read. Which leads to reading (and possibly decompressing) the whole dataset multiple times. ",
    "url": "/docs/geodms-default-tiling.html#using-suboptimal-tiling",
    
    "relUrl": "/docs/geodms-default-tiling.html#using-suboptimal-tiling"
  },"1185": {
    "doc": "geodms-default-tiling",
    "title": "geodms-default-tiling",
    "content": " ",
    "url": "/docs/geodms-default-tiling.html",
    
    "relUrl": "/docs/geodms-default-tiling.html"
  },"1186": {
    "doc": "geodms-engine",
    "title": "software",
    "content": "The engine consists of a set van dll’s written in C++. ",
    "url": "/docs/geodms-engine.html#software",
    
    "relUrl": "/docs/geodms-engine.html#software"
  },"1187": {
    "doc": "geodms-engine",
    "title": "geodms-engine",
    "content": "The GeoDMS Engine is the core of the GeoDMS software. The Engine parses GeoDMS configuration-file and controls an efficient calculation process. Results are calculated when requested by views in the geodms-gui or by updates from the geodmsrun. Requested results are translated by the engine in a depedency tree of items that need to be calculated. In the configuration a large set of operators-and-functions can be configured. Efficient algorithms to calculated with these operators and functions are part of the Engine. ",
    "url": "/docs/geodms-engine.html",
    
    "relUrl": "/docs/geodms-engine.html"
  },"1188": {
    "doc": "geodms-gui",
    "title": "software",
    "content": "The current GUI (started in 2023) is developed, like the geodms-engine in C++, using the Qt library. Earlier versions of the GUI were developed in Delphi. Somes issues related to Delphi (like the flickering views) were difficult to solve, the Qt library offers many interesting functions for improving the current GUI. The GUI component is an executable called: GeoDmsGuiQt.exe. The component is part of the GeoDMS software to be installed from the releases section. ",
    "url": "/docs/geodms-gui.html#software",
    
    "relUrl": "/docs/geodms-gui.html#software"
  },"1189": {
    "doc": "geodms-gui",
    "title": "how to use",
    "content": "See user-guide section GeoDMS GUI. ",
    "url": "/docs/geodms-gui.html#how-to-use",
    
    "relUrl": "/docs/geodms-gui.html#how-to-use"
  },"1190": {
    "doc": "geodms-gui",
    "title": "geodms-gui",
    "content": ". The GeoDMS GUI is used to visualise source data, calculation results and model logic. It presents both the model results as well as the steps needed to generate the results. The GUI contains a set of viewers for maps, tables and graphs. Classifications and visualisation styles can partly be edited in the GUI, but will not be stored persistently (see the section how-to-model for storing these settings persistently). It also contains viewers for descriptive/meta information and process schemes to show the model logic. ",
    "url": "/docs/geodms-gui.html",
    
    "relUrl": "/docs/geodms-gui.html"
  },"1191": {
    "doc": "geodms-on-linux",
    "title": "install Wine",
    "content": "In order to run GeoDMS on Linux we recommend using wine which can be downloaded here. Follow the installation instructions for your specific Linux flavor from the wine download page. After installation open a terminal and confirm that wine works using for instance wine --version. ",
    "url": "/docs/geodms-on-linux.html#install-wine",
    
    "relUrl": "/docs/geodms-on-linux.html#install-wine"
  },"1192": {
    "doc": "geodms-on-linux",
    "title": "configure wine for GeoDMS",
    "content": "Open a terminal and run winecfg to open the wine configuration manager. Navigate to the libraries tab and make sure that the following libraries prioritize native- over the build-in implementation: . ",
    "url": "/docs/geodms-on-linux.html#configure-wine-for-geodms",
    
    "relUrl": "/docs/geodms-on-linux.html#configure-wine-for-geodms"
  },"1193": {
    "doc": "geodms-on-linux",
    "title": "installing GeoDMS",
    "content": "Download the desired GeoDMS version from GeoDms Releases and execute the following command from the directory where you saved the setup program: . $ wine GeoDms14.3.2-Setup-x64.exe . Note: the filename of the setup program will vary for different versions of GeoDMS . ",
    "url": "/docs/geodms-on-linux.html#installing-geodms",
    
    "relUrl": "/docs/geodms-on-linux.html#installing-geodms"
  },"1194": {
    "doc": "geodms-on-linux",
    "title": "Running dms configuration using GeoDmsRun.exe",
    "content": "GeoDmsRun.exe has been experimentally tested. In a terminal navigate to the GeoDMS installation folder and run: . wine ./GeoDmsRun.exe /home/cicada/Documents/dev/wine_geodms/test_config/GeoDMS-Test/Storage_gdal/cfg/regression.dms export_all . ",
    "url": "/docs/geodms-on-linux.html#running-dms-configuration-using-geodmsrunexe",
    
    "relUrl": "/docs/geodms-on-linux.html#running-dms-configuration-using-geodmsrunexe"
  },"1195": {
    "doc": "geodms-on-linux",
    "title": "known issues",
    "content": "GeoDmsGuiQt.exe does not work at the moment using wine see: . When opening .dms configuration files, you will notice errors. These errors possibly have to do with incompatibilities in the Multi-threading DLL’s supplied with Wine. ",
    "url": "/docs/geodms-on-linux.html#known-issues",
    
    "relUrl": "/docs/geodms-on-linux.html#known-issues"
  },"1196": {
    "doc": "geodms-on-linux",
    "title": "testing &amp; debugging using Wine",
    "content": "It’s best to primarily test with the GeoDmsRun.exe, to make sure that runtime-problems don’t stem from GUI-elements. Only when tests using GeoDmsRun.exe are running smoothly, should you test using GeoDmsGui.exe. Wine supports extensive debugging features. These can be activated using the following command-line syntax: . $ WINEDEBUG=+relay,+seh,+tid,+loaddll wine GeoDmsRun.exe [/LLogFileName] {ConfigFileName} {ItemNames} &gt; {DebugLogFile} 2&gt;&amp;1 . Notes: . | [/LLogFileName] is optional | {ConfigFileName} and {ItemNames} should be provided as normal when using GeoDmsRun.exe | The &gt; part is a Linux shell-directive to redirect the output of the process to the file specified after &gt;. You could ofcourse leave this (and everything following it on the command-line) out, so that the output will be to the terminal instead, but that will cause a lot of output scrolling by quickly. It is also possible to use &gt;&gt; in order to append to that file (using &gt; will overwrite each time the command-line is executed), but please note that repeated runs of the command-line using the append-directive may quickly result in a very big output file! | {DebugLogFile} is a path to a file that will be used for the (rather extensive!) Wine debugging output | The final 2&gt;&amp;1 is a Linux shell-directive to redirect both STDERR and STDOUT to the same location, being the output file specified as {DebugLogFile} | . You can find more information on the available Debug Channels for Wine here . ",
    "url": "/docs/geodms-on-linux.html#testing--debugging-using-wine",
    
    "relUrl": "/docs/geodms-on-linux.html#testing--debugging-using-wine"
  },"1197": {
    "doc": "geodms-on-linux",
    "title": "geodms-on-linux",
    "content": " ",
    "url": "/docs/geodms-on-linux.html",
    
    "relUrl": "/docs/geodms-on-linux.html"
  },"1198": {
    "doc": "geodms-own-formats",
    "title": "geodms-own-formats",
    "content": "The GeoDMS itself also offers own formats to store primary data: . | Small amounts can be stored in GeoDMS configuration-file. | Large amounts can be stored in fss files. | . ",
    "url": "/docs/geodms-own-formats.html",
    
    "relUrl": "/docs/geodms-own-formats.html"
  },"1199": {
    "doc": "geodms-setups",
    "title": "2022: 8.0 Series",
    "content": "The first half 2022 we’ve worked on a significant renovation of the GeoDMS, resulting in the 8.0 series. Management of intermediate results has become more functional, regular tiling is used by default to facilitate memory management by re-using fixed sized blocks as tile storages. Element-by-element operations are now pipelined (when S3 is set). The CalcCache is no longer used for intermediate storage. The GeoDms 8 should process almost all GeoDms 7 model configurations with the following issues: . | formal domain and values units are checked for items that are replaced by their calculation rules in other calculation rules, resulting in new but relevant diagnostics. | Differences in the regular tiling of domains may result in: . | different results for poly2grid and point_in_polygon, although now the results have become independent of the actual tiling, they did depend of the active tiling in the GeoDMS 7 series. | .ffs storages produced with GeoDMS 7 that store tiled attributes without their domain may result in corrupted data when read with GeoDMS 8. | . | . ",
    "url": "/docs/geodms-setups.html#2022-80-series",
    
    "relUrl": "/docs/geodms-setups.html#2022-80-series"
  },"1200": {
    "doc": "geodms-setups",
    "title": "Older versions",
    "content": "2022-10-10: GeoDms Version 8.041 . GeoDms x64 installation, click here . New functionality: . | large palettes with random colours for the unique values of categorical thematic attributes. | thematic attributes can now be represented by multiple aspects, work in progress. | . Fixes: . | issue 283 | issue 291 | issue 309 | issue 310 | . 2022-09-29: GeoDms Version 8.039 . GeoDms x64 installation, click here . Fixes: . | Issue on Azure with 8.038 | TableView-&gt;Sort on column issue due to inconsistent state when setting an index was interrupted by a user message. | minor issues and compiler warnings | . 2022-09-26: GeoDms Version 8.038 . GeoDms x64 installation, click here . Fixes: . | issue 303: dyna_points | issue 305: fixed crash | ReadElemFlags now work | . Known issue: . | on Azure (with OS Windows Server 2019 Datacenter version 1809) starting this version may sometimes result in: “System Error: … Rtc.dll was not found.”; GeoDms 8.039 seems not to cause this behaviour. | . 2022-09-22: GeoDms Version 8.037 . GeoDms x64 installation, click here . Fixes: . | issue 297: Diagnostic message now have a better source location indication | issue 304 | point_in_ranked_polygon now works | . Implements: . | issue 291: various layout issues in Layer Control symbols | . Trello . | 61: hex numbers can now be used in dms syntax, preceded by the percent-sign, for example %FFFFFF | 65: null values and failure reasons have grey text in the TableView | . Detail pages: . | clean-up generic and Explore pages | . 2022-09-14: GeoDms Version 8.035 . GeoDms x64 installation, click here . New functionality . | issue 291 PenColor arc-layer, WIP. | Thread throttling | . Fixes: . | TIFF read issue | . 2022-09-01: GeoDms Version 8.033 . GeoDms x64 installation, click here . New functions: . | ClassifyNonzeroJenksFisher as alternative for ClassifyJenksFisher classification | bg_buffer_point, see bg_buffer | dyna_point_with_ends, dyna_segment, dyna_segment_with_ends, see dyna_point | point_in_all_polygons: (D1-&gt;point, D2-&gt;polygon) -&gt; unit { first_rel: . -&gt; D1; second_rel: . -&gt; D2 } | point_in_ranked_polygon, with known issue https://geodms.nl/mantis/view.php?id=302 302, which is fixed in 8.036 | . Fixes: . | TIFF read error, ntroduced in 7.412 and hotfixed in 7.414. | combine(…, bool), required for vesta50 | issue 294 | number of threads in the recursive Unique function is now limited to the number of vCPUs. | bg_buffer_linestring and bg_buffer_multi_polygon: various quality improvements. | an issue with tiling SPoint data of which the last tile would pass the 2^15 boundary if not cut-off by the domain’s range, such as with the rtc_10m raster. | . GUI . | raster and feature attributes with negative values are now displayed with a more adapted classification and colour scheme, handling negative, zero, and positive as | Ctrl-Alt-D as hot-key for “Default View”. | . Known issues: . | explain value in detail page lacks info on the source of a value resulting from union_data. | S3 (pipelined tile processing) is off by default when installing the GeoDMS on a system where geoDMS was already used. I advise to enable S3 from the GeoDmsGui.exe -&gt; Tools -&gt; Options -&gt; Advanced -&gt; check ‘3: Pipelined Tile Operations’. | . 2022-08-29: GeoDms Version 8.031 . (withdrawn, download 8.033) . Known issue, solved in 8.033: . | tiff driver incorrectly determines if a tiff is tiled or striped, resulting in not being able to read striped tiffs. Fixed in 8.033. | . 2022-08-19: GeoDms Version 8.027 . (withdrawn, download 8.033) . ",
    "url": "/docs/geodms-setups.html#older-versions",
    
    "relUrl": "/docs/geodms-setups.html#older-versions"
  },"1201": {
    "doc": "geodms-setups",
    "title": "2022: 7.400 Series",
    "content": "We concluded 2021 with the 7.400, which is compiled with Visual Studio 2022 to comply to the most recently implemented C++20 language rules. We started building and using GDAL 3.04 by vcpkg, which includes recent drivers for GeoPackage, netCDF, but also the openssl that we started using in 7.326. vcpkg allows us to have a completely working debug and release build of GDAL 3, which makes debugging easier. See also: GDAL update . 2022-09-01: GeoDms Version 7.414 . GeoDms x64 installation, click here . Fixes: . | TIFF read error, possibly introduced since 7.411 or 7.412. | hang on MapView:GetCaption, such as in RSL3 without label work-around. | issues with ArgMax and maxelem; Trello #92. | . 2022-05-31: GeoDms Version 7.412 . (withdrawn because of a tiff driver issue that has been resolved in 7.414) . Fixed: . | issues with writing GeoPackage. | Notepad++ syntax file GeoDMS_npp_def.xml is now included in the setup. Note: last update of the keyword list is of 03/10/2019. | TIFF storage manager now uses LIBTIFF 4.3.0 (latest) of vcpkg with BIGTIFF support (was 4.2 ) | AsItemName | . Known issues: . | tiff driver incorrectly determines if a tiff is tiled or striped, resulting in not being able to read striped tiffs. Fixed in 8.033. | . 2022-04-22: GeoDms Version 7.411 . GeoDms x64 installation, click here . New in 7.411: . | operator AsItemName | operator ReadElems now has formatting flags to allow strings to contain spaces, tabs and/or comma’s. | . Fixed: . | (partially) issues with polygon_connectivity, bg_buffer; see also: mantis issue 265 sub 1. | Default ColorPalette is now redesigned and determined per MapView to produce a more consistent coloring of binary rasters and non-thematic feature layers. | . GDAL 3: . | fixed reading non-string attributes from a .CSV file. | fixed writing to geojson and gml | added reading Bool, UInt2, and UInt4 rasters | added reading multiple band raster-data into a composite UInt32 raster. | . 2022-03-11: GeoDms Version 7.410 . GeoDms x64 installation, click here . New operators in 7.410: . | outer_polygon(polygon attr(poly)); resulting in polygons without lakes | outer_multi_polygon(multi_polygon attr(poly)); resulting in multi_polygons without lakes | . New operators in 7.409: . | bg_simplify_linestring(linestring attr(arc), maxTolerance: Float64) | bg_simplify_multi_polygon(polygon attr(poly), maxTolerance: Float64) | bg_buffer_linestring(linestring attr(arc), distance: Float64, nrCornersInCircle: UInt8); | bg_buffer_multi_polygon(lpolygon attr(arc), distance: Float64, nrCornersInCircle: UInt8); | bg_buffer_multi_point(multi_point attr(sequence), distance: Float64, nrCornersInCircle: UInt8); | . GeoDmsRun . | additional command line option to redirect text output, such as statistics results, to a specific file | . Breaking changes: . | removed operator: bg_simplify(), introduced in 7.408 | some layer attributes, when read from a GDAL3 vector source are read as a smaller GeoDms integer type than in 7.408 | . Fixed: . | a failure to write multiple attributes to a layer with GDAL does not cause the GeoDms to not close. | . 2022-03-08: GeoDms Version 7.409 . 7.409 has been revoked because of the issue with writing multiple layers to a GeoPackage that seems to result in only the last layer containing data. This did not occur in 7.408 and is fixed in 7.410. 2022-02-18: GeoDms Version 7.408 . GeoDms x64 installation, click here . New in 7.408: . | operator bg_simplify(line or polygon attribute, maxTolerange: Float64); See Trello #50 | statistics opvragen via GeoDmsRun en nu met Frequency count voor value types tot en bet 16 bits, Trello #19 | AsHex werkt nu ook voor UInt4, UInt8, UInt16, UInt64 | . GDAL: . | see GDAL update, especially improved support for writing to: . | csv | Geopackage | . | . Fixed: . | performance issue met connect_info, Trello #45 | Start en eindtijden rekenproces in .xml met export meta info, Trello #18 | issue: 259 | issue: 233 | issue: 110 | issue 152 | issue: 59 | Trello #46 | issue: 244 | issue: 41 | . 2022-01-26: GeoDms Version 7.407 . GeoDms x64 installation, click here . Fixes an issue with GDAL that might delete existing source data due to an unintended attribute write attempt. GDAL: . | storage types gdalwrite.vect and gdalwrite.grid that can be used when data is intended to be exported whereas storage managers of type gdal.grid and gdal.vect now only allow for reading data from an external source. | reading and writing subbyte elements: Bool, UInt2 and UInt4 are now supported. | . 2022-01-21: GeoDms Version 7.406 . GeoDms x64 installation: revoked because of the gdal source data at risc issue, update to 7.407 or later. Implements . | issue 218: now SessionStartTime and CurrentTime are written into outputmetainfo.xml files | issue 246: generate item statistics from GeoDmsRun.exe; known issue https://geodms.nl/mantis/view.php?id=254 will be fixed in 7.407 | . Fixes . | issue 248: “Check Failed Error: item-&gt;DataInMem()” | issue 251: | sporaric recursive cs-lock on operationcontext clean-up which caused program termination | InterestCount leak in exceptional AbstrCalculator construction | . Diagnostics: . | report “This seems to be a GeoDms internal error; …” where appropriate | . gdal . | usage of specified GDAL_Driver, GDAL_Options and GDAL_LayerCreateOptions | vcpkg upgrade to update to GDAL 3.4.0, released 2021/11/04 | . gdal.grid . | support of reading sub-datasets as multiple rasters | reading multiple datasets from a netCDF file | . gdal.vect . | read/write support for int64 data | write support for .csv data and .dbf data; known issue: numeric output is quoted in a resulting .csv file. | . 2022-01-10: GeoDms Version 7.404 . GeoDms x64 installation: revoked because of the gdal source data at risc issue, update to 7.407 or later. Furthermore, now also arc and polygon feature data can be written with GDAL 3. new GDAL 3 functions, see also GDAL update: . | writing point features and attributes to various GDAL vector targets | writing raster data to TIFF via GDAL | reading GeoPackage data, fixed issue https://geodms.nl/mantis/view.php?id=152 | reading OpenStreetMap’s pbf data, fixed issue https://geodms.nl/mantis/view.php?id=244 | . | using the DialogData value as values unit for all loaded geometries of tables found in a storage that contains multiple tables/layers. | . ",
    "url": "/docs/geodms-setups.html#2022-7400-series",
    
    "relUrl": "/docs/geodms-setups.html#2022-7400-series"
  },"1202": {
    "doc": "geodms-setups",
    "title": "2021: 7.300 Series",
    "content": "In 2021, we started with the 7.300 series to indicate that the GeoDMS code is now being compiled with Visual Studio 2019 (the 7.2xx series were built with VS2017) to comply to the most recently implemented C++20 language rules. 2021-07-12: GeoDms Version 7.326 . GeoDms x64 installation, click here . Same as 7.325 except for: . | fix of issue 240: WMTS background layers are now (only) read from https, using openssl. This change was necessary because the Dutch nationaal georegister stopped serving tiles through http. | fix of issue 242: handling of a transparency channel (alpha) in WMTS tiles. | . 2021-03-12: GeoDms Version 7.325 . GeoDms x64 installation, click here . Same as 7.324 except for: . | a fix of an issue with the potential function results, see 241 and 239 | a fix of an access violation in case of failure to read data for a wms background layer by http. A mechanism for utilizing htts with openTLS is expected for GeoDMS 7.326. see issue 240 | . 2021-24-11: GeoDms Version 7.324 . GeoDms x64 is withdrawn because of issues with the potential function, see 241 and 239 . Fixes: . | better implementation of deterministic parallel convolution, aka the Potential with kernel function. See issues 232 and 239 | sporadious deadlocks during a long chain of batch operations, specifically seen in LuisaBees sensitivity scripts, see issue 132 | management ownership of future calculation results (aka interest count holders) which caused order of operation issues such as 141 | code simplifications: . | ItemLocks no longer use cs_lock_map but directly own (calculated) data, provided by realised future calculation results. | concurrency::unbounded_buffer replaced by std::counted_semaphore | made critical sections faster and simpler (and less reentrant!) by separating resource disconnection (still inside a critical section) from resource deallocation (moved outside such section) by better usage of move or swap operations. - | . | . 2021-11-11: GeoDms Version 7.321 . GeoDms x64 installation, click here . | More regular default tile sizes, update on the changes in 7.317. This fixes issue 238 where overlapping tiling was created since 7.317. | GeoDmsRun.exe now sends to STDOUT ( std::cout ) for display in console all output that is also sent to an optional logfile and that GeoDmsGui.exe also displays in the EventLog; one can redirect STDOUT to a logfile as alternative to the /L command line option; Fatal errors are still sent to STDERR (std::cerr ). | . 2021-11-08: GeoDms Version 7.320 . GeoDms x64 installation, click here . | transfer of future result ownership from a operation to its awaiters is now protected by transfering ArgRefs as optional reference count holders with RAII. | with /S1, thePotential operator now calculates tiles Multi Threaded again (this was stalled since 7.315) but now with a deterministic result | furthermore identical to 7.319. | . 2021-10-28: GeoDms Version 7.319 . GeoDms x64 installation, click here . | reading a limited extent from a TIF data source caused all GridData to be read, causing large memory resource usage for projects such as LUISA and 2UP where country data is read from larger TIF data. | furthermore identical to 7.318. | . 2021-10-27: GeoDms Version 7.318 . GeoDms x64 installation, click here . | sporadic halting, issues 132 and 191, is presumably fixed. The sporadic halting issue has been seen in Luisa, Land Use Scanner, LUS demo, and 2UP. Please report to us if seen still with this or later versions. | furthermore identical to 7.317. | . 2021-10-26: GeoDms Version 7.317 . GeoDms x64 installation, click here . | code signed by “Object Vision B.V.” | Changed tiling/segmenting for large entities; tile sizes are now more equal for different sized entities | With MT1 on, transformations on separable segments larger than 4096 elements are processed parallel in sub-segments of 4096 items each. | Point in polygon is now independent of the order and tiling of the array of points. Results were dependent on that order for points that were in multiple (overlapping) polygons. | the Unique and Rlookup operations now also work with numeric and point sequences as values. | now the StatusFlags can also be set as command line flag when starting the GeoDMS GUI | . Breaking changes: . | Results of Point in polygon when polygons overlap | stored .fss results for tiled entities without decoupled entity definition and resulting segmentation need to be reproduced. | . 2021-10-12: GeoDms Version 7.315 . (withdrawn) . 2021-10-08: GeoDms Version 7.314 . GeoDms x64 installation, click here . | code signed by “Open Source Developer, Martinus Hilferink” | . New calculation rule syntax: . | UTF-8 character support in tree item names | . | arrow operator (-&gt;) to index an attribute in the NameSpaceof the values unit of that index, i.e.: classifications/x/name[x_rel] can now be written as x_rel-&gt;name. | . | And and Or as binary infix operators as alternative for &amp;&amp; and ||. | . New functions: . | EXEC_EC that executes an external process and returns its ExitCode, which enables a modeller to use that result in for example the construction of a storage name of a source that can only be read after completion of that process. | . Fixed: . | issue with maxDist in Connect, Connect info and dist_info. | . | issues related to WMTS support for LambertEA europe and LatLong | . | hanging threads with MT2 on | . | with /S1, the results of Potential were not exactly deterministic as it incorrectly relied on the associativity of floating point addition of the overlapping tile results. | . Performance improvements: . | ShadowTile generation (used in indexed Lookup) and Union data are now done in parallel when /S1 is on and the element type is separable (i.e. fixed size, thus not string or sequence, and not sharing bits in the same byte, thus not Bool, UInt2 nor UInt4). | . BREAKING CHANGE: . ExplicitSuppliers can no longer be used to control the execution of external processes such as with Exec(‘dir &gt;&gt; filelist’) to prepare for internal value calculations. For this, now use EXEC_EC, which returns 0 on success or an errorcode in order to guarantee its derivation before usage. This affects for example the BAG Toolkit; Use version 7.326 or later for the BAG Toolkit. 2021-07-20: GeoDms Version 7.313 . GeoDms x64 installation code-signed by “Open Source Developer, Martinus Hilferink” . Implemented: . - issue 59: writing available projection info to a .PRJ file when writing a .SHP file . - issues 198 and 217: take the current Clipboard contents and scroll in TableView to the specified row-number (Ctrl-G) or search-key (Ctrl-F) and in MapView to the specified coordinate. Fixed: . - issue 219: use GridLayer with basegrid for raster subset domains. 2021-06-10: GeoDms Version 7.312 for x64 . Implemented connect_info and dist_info functions that divide the tiles of points over different worker threads and that can take a maximum square distance per point to avoid connecting remote locations. Fixed issue 213 that gave error to the result of a unique(float32(round(some attribute with values with a metric))). 2021-05-13: GeoDms Version 7.311 for x64 . Implemented join_equal_values functions , see https://geodms.nl/mantis/view.php?id=107 . Fixed Help url issue https://geodms.nl/mantis/view.php?id=199 . 2021-05-06: GeoDms Version 7.310 for x64 . Fixed: issue https://geodms.nl/mantis/view.php?id=195 . 2021-02-24: GeoDms Version 7.308 for x64 . Fixed issue 141: MT issues with Stored Properties, such as DialogData, StorageReadOnly, SqlString. Now all Stored Properties are read from the main thread and kept private as task related context. 2021-02-23: GeoDms Version 7.307 for x64 . Architecture . | argmin, argmax, min_elem, max_elem are now implemented with internal operators (and no longer depend on RewriteExpr.lsp) | . New operators: . | argmin_uint8, agmax_uint8, argmin_uint16, argmax_uint16 | . Fixed issues: . | argmin, argmax with 1 argument now results in the correct domain | . 2021-02-01: GeoDms Version 7.306 for x64 . Fixed issues: . | issue 174: connect_info with a uint8 domain for the arc/polygon set to connect to now works. | . 2021-02-01: GeoDms Version 7.305 for x64 . New operations: . | subset operations that avoid the creation of nr_OrgEntity: . | select_unit(condition), | select_data(select_unit(condition: D-&gt;bool) orgData: D-&gt;V) which runs through condition and picks-up the orgData elements that correspond with condition elements that are true without the use of an intermediate org_rel (formerly known as nr_OrgEntity). | . | subset operations that result in org_rel as a replacement of nr_OrgEntity: select_orgrel(condition) | subset operations that optimize for expected limitation of the cardinality and ordinals of the result set: . | select_unit_uint8(condition), select_unit_uint16(condition), select_unit_uint32(condition) | select_orgrel_uint8(condition), select_orgrel_uint16(condition), select_orgrel_uint32(condition) | . | (partitioned) summation operations with specified value types: . | sum_(|u)int(8|16|32|64)(values: D-&gt;V[, partition: D-&gt;P]), | sum_float64(...), | sum_(i|u|d)point(...), | . | partitioned counting operations that optimize for expected limitation of the cardinality and ordinals of the results: . | pcount_uint(8|16|32)(partition: D-&gt;P): P-&gt;uint(8|16|32), | . | . Fixed issues: . | issue 182: a domain with a single tile that didn’t cover the defined range resulted in inconsistent data size handling. Now, if NrTiles = 1 and tile[0] strictly smaller than range then GetCount() = #range, but GetTileCount(0) is #tile, and data is only calculated and used for the non-covering tile. | issue 183: using unknown_item | . 2021-01-25: GeoDms Version 7.304 for x64 . Upgrades: . | build environment: MSVC 2019 (was: MSVC 2019) | compiler: C++ 14.2 (was 14.1) | platformtoolset: v142 | LanguageStandard: stdcpplast | boost: 1.75.0 (was: 1.69.0) | . Code clean-up: . | the use of boost::mpl and type_traits have been replaced by equivalent elements of namespace std | fixes related to the more strict C++20 language rules. | . Feature request: . | issue 172: GUI MapView controls: Panning and feature-info have become the default mouse actions; the related Buttons in the toolbar have been removed. | . Fixed issues: . | issue 176: Synchronisation of data read from .fss with reading domain cardinality from the same .fss | issue 181: not operator (issue introduced in 7.300 as a result of new aggregation operations | . ",
    "url": "/docs/geodms-setups.html#2021-7300-series",
    
    "relUrl": "/docs/geodms-setups.html#2021-7300-series"
  },"1203": {
    "doc": "geodms-setups",
    "title": "Versions of 2020",
    "content": "2020-12-03: GeoDms Version 7.238 for x64 . 2020-10-23: GeoDms Version 7.234 for x64 . 2020-10-05: GeoDms Version 7.229 for x64 . Fixes issues related to processing many red items and ExplainValue tooling: 1429, 1433 GUI issues: 1326, 1429 . MapView Toolbar: now default mouse functions: . | LeftButtonClick -&gt; SetFocus in active layer and all raster layers, information on focus item is presented in legend | Drag -&gt; Map Panning, | LeftButtonDoubleClick -&gt; ExplainValue of focus element in active layer, see Detailpage | InfoTool is now removed. | ZoomIn, ZoomOut and most selection Tools replace the Drag function, but leave LeftButtonClick and LeftButtonDoubleClick unchanged. The SelectObject Tool does disable the SetFocus function when active. | . TableView Toolbar: . | InfoTool now works as a command to ExplainValue on the Focus element. | . Fixed issues for Vesta. 2020-09-04: GeoDms Version 7.222 for x64 . Fixes issues 1414, 1415, 1416, 1417, 1419, Fixed issues for Vesta. 2020-08-04: GeoDms Version 7.220 for x64 . Fixes issues 1411, 1413 . Fixes issues with cancel working thread, GetLabelAttr values and Value Info Detail Page. Warning: we’re working on a found issue in the Vesta Regression test causing an Access Violation. Do not use 7.220 for Vesta for now. 2020-04-08: GeoDms Version 7.215 for x64 . Contains various fixes of GeoDMS 7.213: Fixes issues 1380, 1382, 1325, 1360 Fixes Progress Messaging . 2020-03-16: GeoDms Version 7.213 for x64 . Contains various fixes of GeoDMS 7.212. 2020-03-11: GeoDms Version 7.212 for x64 . New features: . | Gui: F2 helps to trace the source of errors | dijkstra_m for Network travel time matricices: a logit based decay function can now be specified for intermediate aggregation | . Regression tests . | includes Vesta and different Multi Threading setttings. | . Dataset size: . | better support for datasets with more than 2^32 rows, more specifically, rowset size issues were solved for merge, raster_merge, dijkstra_m, and aggregations with more than 2^32 partitions. | . Diagnostics . | better detection and reporting when values or row-counts unexpectedly exceed 2^32. | . Fixes many MT2 and dijkstra issues … . | Fixed GeoDmsGui crashes, see: issues 1347, 1348, | Fixed Delphi error in GeoDmsGui crashes, see: issues 1347 348 | Fixed “Failed to generate’ en ‘access violation’ error, see: issue 1373 | Dijkstra issues: various changes and fixes have been made in the GeoDMS to accommodate OD pair sets with more than 2^32 rows, | . see: issue 1362 . | GDAL 2 fixes and improvements, see issues 1368 and issues 1369 | . The boost::polygon library is now included in our subversion repository and some initiary investigations and updates were made as preparation of work as discussed at issue 1208. 2020-01-08: GeoDms Version 7.207 for x64 . Added operators: subset_uint8, subset_uint16, subset_uint32 . Fixes minor issues 1319, 1329. ",
    "url": "/docs/geodms-setups.html#versions-of-2020",
    
    "relUrl": "/docs/geodms-setups.html#versions-of-2020"
  },"1204": {
    "doc": "geodms-setups",
    "title": "Archive 2016..2019",
    "content": "Some documented versions of earlier years can be found on the page with Older GeoDMS versions . ",
    "url": "/docs/geodms-setups.html#archive-20162019",
    
    "relUrl": "/docs/geodms-setups.html#archive-20162019"
  },"1205": {
    "doc": "geodms-setups",
    "title": "geodms-setups",
    "content": "Starting from GeoDMS version 8.042, releases/setups can be found at: https://github.com/ObjectVision/GeoDMS/releases . ",
    "url": "/docs/geodms-setups.html",
    
    "relUrl": "/docs/geodms-setups.html"
  },"1206": {
    "doc": "geodmsbuildconfig",
    "title": "syntax",
    "content": ". | GeoDmsBuildConfig() | . ",
    "url": "/docs/geodmsbuildconfig.html#syntax",
    
    "relUrl": "/docs/geodmsbuildconfig.html#syntax"
  },"1207": {
    "doc": "geodmsbuildconfig",
    "title": "definition",
    "content": "GeoDmsBuildConfig() results in a string parameter indicating if the running GeoDMS executable is a Release or Debug version. ",
    "url": "/docs/geodmsbuildconfig.html#definition",
    
    "relUrl": "/docs/geodmsbuildconfig.html#definition"
  },"1208": {
    "doc": "geodmsbuildconfig",
    "title": "since version",
    "content": "7.018 . ",
    "url": "/docs/geodmsbuildconfig.html#since-version",
    
    "relUrl": "/docs/geodmsbuildconfig.html#since-version"
  },"1209": {
    "doc": "geodmsbuildconfig",
    "title": "example",
    "content": "parameter&lt;string&gt; GeoDmsBuildConfig := GeoDmsBuildConfig(); . result: GeoDmsBuildConfig = Release or GeoDmsBuildConfig = Debug . ",
    "url": "/docs/geodmsbuildconfig.html#example",
    
    "relUrl": "/docs/geodmsbuildconfig.html#example"
  },"1210": {
    "doc": "geodmsbuildconfig",
    "title": "geodmsbuildconfig",
    "content": "miscellaneous-functions GeoDmsBuildConfig . ",
    "url": "/docs/geodmsbuildconfig.html",
    
    "relUrl": "/docs/geodmsbuildconfig.html"
  },"1211": {
    "doc": "geodmsmajorversionnumber",
    "title": "syntax",
    "content": ". | GeoDmsMajorVersionNumber() | . ",
    "url": "/docs/geodmsmajorversionnumber.html#syntax",
    
    "relUrl": "/docs/geodmsmajorversionnumber.html#syntax"
  },"1212": {
    "doc": "geodmsmajorversionnumber",
    "title": "definition",
    "content": "GeoDmsMajorVersionNumber() results in a uint32parameter with the GeoDMS major version number. Up until version 8.045 its value was defined as MajorVersion + 0.001 * MinorVersion. Since November 2022 we use semantic versioning, following the format MajorVersion.MinorVersion.PatchNumber. The GeoDmsVersion() is now defined as MajorVersion + 0.01 * MinorVersion + 0.0001 * PatchNumber; . The first semantic version number is 8.5.0 in order to order well with earlier version numbers. In GeoDms v8.5.1, the result of the GeoDmsVersion() is (the Float64 representation of) 8.0501. ",
    "url": "/docs/geodmsmajorversionnumber.html#definition",
    
    "relUrl": "/docs/geodmsmajorversionnumber.html#definition"
  },"1213": {
    "doc": "geodmsmajorversionnumber",
    "title": "example",
    "content": "GeoDmsMajorVersionNumber(): UInt32 GeoDmsMinorVersionNumber(): UInt32 GeoDmsPatchNumber(): UInt32 . parameter&lt;string&gt; GeoDMSVersion := string(GeoDmsMajorVersionNumber()) +'.'+ string(GeoDmsMinorVersionNumber()) +'.'+ string(GeoDmsPatchNumber());` . ",
    "url": "/docs/geodmsmajorversionnumber.html#example",
    
    "relUrl": "/docs/geodmsmajorversionnumber.html#example"
  },"1214": {
    "doc": "geodmsmajorversionnumber",
    "title": "since version",
    "content": "9.0.4 . ",
    "url": "/docs/geodmsmajorversionnumber.html#since-version",
    
    "relUrl": "/docs/geodmsmajorversionnumber.html#since-version"
  },"1215": {
    "doc": "geodmsmajorversionnumber",
    "title": "geodmsmajorversionnumber",
    "content": "miscellaneous-functions GeoDmsMajorVersionNumber . ",
    "url": "/docs/geodmsmajorversionnumber.html",
    
    "relUrl": "/docs/geodmsmajorversionnumber.html"
  },"1216": {
    "doc": "geodmsminorversionnumber",
    "title": "syntax",
    "content": ". | GeoDmsMinorVersionNumber() | . ",
    "url": "/docs/geodmsminorversionnumber.html#syntax",
    
    "relUrl": "/docs/geodmsminorversionnumber.html#syntax"
  },"1217": {
    "doc": "geodmsminorversionnumber",
    "title": "definition",
    "content": "GeoDmsMinorVersionNumber() results in a uint32parameter with the GeoDMS minor version number. Up until version 8.045 its value was defined as MajorVersion + 0.001 * MinorVersion. Since November 2022 we use semantic versioning, following the format MajorVersion.MinorVersion.PatchNumber. The GeoDmsVersion() is now defined as MajorVersion + 0.01 * MinorVersion + 0.0001 * PatchNumber; . The first semantic version number is 8.5.0 in order to order well with earlier version numbers. In GeoDms v8.5.1, the result of the GeoDmsVersion() is (the Float64 representation of) 8.0501. ",
    "url": "/docs/geodmsminorversionnumber.html#definition",
    
    "relUrl": "/docs/geodmsminorversionnumber.html#definition"
  },"1218": {
    "doc": "geodmsminorversionnumber",
    "title": "example",
    "content": "GeoDmsMajorVersionNumber(): UInt32 GeoDmsMinorVersionNumber(): UInt32 GeoDmsPatchNumber(): UInt32 . parameter&lt;string&gt; GeoDMSVersion := string(GeoDmsMajorVersionNumber()) +'.'+ string(GeoDmsMinorVersionNumber()) +'.'+ string(GeoDmsPatchNumber());` . ",
    "url": "/docs/geodmsminorversionnumber.html#example",
    
    "relUrl": "/docs/geodmsminorversionnumber.html#example"
  },"1219": {
    "doc": "geodmsminorversionnumber",
    "title": "since version",
    "content": "9.0.4 . ",
    "url": "/docs/geodmsminorversionnumber.html#since-version",
    
    "relUrl": "/docs/geodmsminorversionnumber.html#since-version"
  },"1220": {
    "doc": "geodmsminorversionnumber",
    "title": "geodmsminorversionnumber",
    "content": "miscellaneous-functions GeoDmsMinorVersionNumber . ",
    "url": "/docs/geodmsminorversionnumber.html",
    
    "relUrl": "/docs/geodmsminorversionnumber.html"
  },"1221": {
    "doc": "geodmspatchnumber",
    "title": "syntax",
    "content": ". | GeoDmsPatchNumber() | . ",
    "url": "/docs/geodmspatchnumber.html#syntax",
    
    "relUrl": "/docs/geodmspatchnumber.html#syntax"
  },"1222": {
    "doc": "geodmspatchnumber",
    "title": "definition",
    "content": "GeoDmsPatchNumber() results in a uint32parameter with the GeoDMS patch number. Up until version 8.045 its value was defined as MajorVersion + 0.001 * MinorVersion. Since November 2022 we use semantic versioning, following the format MajorVersion.MinorVersion.PatchNumber. The GeoDmsVersion() is now defined as MajorVersion + 0.01 * MinorVersion + 0.0001 * PatchNumber; . The first semantic version number is 8.5.0 in order to order well with earlier version numbers. In GeoDms v8.5.1, the result of the GeoDmsVersion() is (the Float64 representation of) 8.0501. ",
    "url": "/docs/geodmspatchnumber.html#definition",
    
    "relUrl": "/docs/geodmspatchnumber.html#definition"
  },"1223": {
    "doc": "geodmspatchnumber",
    "title": "example",
    "content": "GeoDmsMajorVersionNumber(): UInt32 GeoDmsMinorVersionNumber(): UInt32 GeoDmsPatchNumber(): UInt32 . parameter&lt;string&gt; GeoDMSVersion := string(GeoDmsMajorVersionNumber()) +'.'+ string(GeoDmsMinorVersionNumber()) +'.'+ string(GeoDmsPatchNumber());` . ",
    "url": "/docs/geodmspatchnumber.html#example",
    
    "relUrl": "/docs/geodmspatchnumber.html#example"
  },"1224": {
    "doc": "geodmspatchnumber",
    "title": "since version",
    "content": "9.0.4 . ",
    "url": "/docs/geodmspatchnumber.html#since-version",
    
    "relUrl": "/docs/geodmspatchnumber.html#since-version"
  },"1225": {
    "doc": "geodmspatchnumber",
    "title": "geodmspatchnumber",
    "content": "miscellaneous-functions GeoDmsPatchNumber . ",
    "url": "/docs/geodmspatchnumber.html",
    
    "relUrl": "/docs/geodmspatchnumber.html"
  },"1226": {
    "doc": "geodmsplatform",
    "title": "syntax",
    "content": ". | GeoDmsPlatform() | . ",
    "url": "/docs/geodmsplatform.html#syntax",
    
    "relUrl": "/docs/geodmsplatform.html#syntax"
  },"1227": {
    "doc": "geodmsplatform",
    "title": "definition",
    "content": "GeoDmsPlatform() results in a string parameter indicating if the running GeoDMS executable is a Win32 or X64 version. ",
    "url": "/docs/geodmsplatform.html#definition",
    
    "relUrl": "/docs/geodmsplatform.html#definition"
  },"1228": {
    "doc": "geodmsplatform",
    "title": "example",
    "content": "parameter&lt;string&gt; GeoDmsPlatform := GeoDmsPlatform(); . result: GeoDmsPlatform = Win32 or GeoDmsPlatform = X64 . ",
    "url": "/docs/geodmsplatform.html#example",
    
    "relUrl": "/docs/geodmsplatform.html#example"
  },"1229": {
    "doc": "geodmsplatform",
    "title": "geodmsplatform",
    "content": "miscellaneous-functions GeoDmsPlatform . This function is Obsolete since v8.7.0. ",
    "url": "/docs/geodmsplatform.html",
    
    "relUrl": "/docs/geodmsplatform.html"
  },"1230": {
    "doc": "geodmsrun",
    "title": "software",
    "content": "The GeoDMSRun is an executable called: GeoDMSRun.exe, written in C++. The component is part of the GeoDMS software to be installed from the releases section. ",
    "url": "/docs/geodmsrun.html#software",
    
    "relUrl": "/docs/geodmsrun.html#software"
  },"1231": {
    "doc": "geodmsrun",
    "title": "how to use",
    "content": "See user-guide section GeoDMSRun. ",
    "url": "/docs/geodmsrun.html#how-to-use",
    
    "relUrl": "/docs/geodmsrun.html#how-to-use"
  },"1232": {
    "doc": "geodmsrun",
    "title": "geodmsrun",
    "content": "GeoDMSRun.exe is an executable used to update tree items from a command line or batch file. ",
    "url": "/docs/geodmsrun.html",
    
    "relUrl": "/docs/geodmsrun.html"
  },"1233": {
    "doc": "geodmsversion",
    "title": "This function does not work since the new naming convention of GeoDMS 8 and higher.",
    "content": "Instead use a combination of: . GeoDmsMajorVersionNumber(): UInt32 GeoDmsMinorVersionNumber(): UInt32 GeoDmsPatchNumber(): UInt32 parameter&lt;string&gt; GeoDMSVersion := string(GeoDmsMajorVersionNumber()) + '.' + string(GeoDmsMinorVersionNumber()) +'.' + string(GeoDmsPatchNumber()); . ",
    "url": "/docs/geodmsversion.html#this-function-does-not-work-since-the-new-naming-convention-of-geodms-8-and-higher",
    
    "relUrl": "/docs/geodmsversion.html#this-function-does-not-work-since-the-new-naming-convention-of-geodms-8-and-higher"
  },"1234": {
    "doc": "geodmsversion",
    "title": "syntax",
    "content": ". | GeoDMSVersion() | . ",
    "url": "/docs/geodmsversion.html#syntax",
    
    "relUrl": "/docs/geodmsversion.html#syntax"
  },"1235": {
    "doc": "geodmsversion",
    "title": "definition",
    "content": "GeoDmsVersion() results in a float64 parameter with the GeoDMS version number. Up until version 8.045 its value was defined as MajorVersion + 0.001 * MinorVersion. Since November 2022 we use semantic versioning, following the format MajorVersion.MinorVersion.PatchNumber. The GeoDmsVersion() is now defined as MajorVersion + 0.01 * MinorVersion + 0.0001 * PatchNumber; . The first semantic version number is 8.5.0 in order to order well with earlier version numbers. In GeoDms v8.5.1, the result of the GeoDmsVersion() is (the Float64 representation of) 8.0501. ",
    "url": "/docs/geodmsversion.html#definition",
    
    "relUrl": "/docs/geodmsversion.html#definition"
  },"1236": {
    "doc": "geodmsversion",
    "title": "since version",
    "content": "5.61 . ",
    "url": "/docs/geodmsversion.html#since-version",
    
    "relUrl": "/docs/geodmsversion.html#since-version"
  },"1237": {
    "doc": "geodmsversion",
    "title": "example",
    "content": "parameter&lt;float64&gt; GeoDMSVersion := GeoDMSVersion(); . result: GeoDMSVersion = 5.61 . ",
    "url": "/docs/geodmsversion.html#example",
    
    "relUrl": "/docs/geodmsversion.html#example"
  },"1238": {
    "doc": "geodmsversion",
    "title": "see also",
    "content": ". | geodmsmajorversionnumber | geodmsminorversionnumber | geodmspatchnumber | . ",
    "url": "/docs/geodmsversion.html#see-also",
    
    "relUrl": "/docs/geodmsversion.html#see-also"
  },"1239": {
    "doc": "geodmsversion",
    "title": "geodmsversion",
    "content": "miscellaneous-functions GeoDMSVersion . ",
    "url": "/docs/geodmsversion.html",
    
    "relUrl": "/docs/geodmsversion.html"
  },"1240": {
    "doc": "geographic-grid-domain",
    "title": "example",
    "content": "The following picture shows the relevant parameters for the configuration or a geographic grid domain. The following information is needed to configure the grid domain for this example: . | the values-unit for the coordinate system is rdc_m, expressing coordinates in meters | the cardinality is defined by the number or rows (3.250) and number of columns (2.700) | the projection information: . | pixel size in the x-direction (in meter): 100 | pixel size in the y-direction (in meter): -100 | x-coordinate (in meter) of the center of the upper left pixel: 10.000 | y-coordinate (in meter) of the center of the upper left pixel: 625.000 | . | . The GeoDMS supports two ways of configuring this information: . 1) projection and cardinality read from data source . The projection information and cardinality of a geographical domain unit can be read from a data source with a GeoDMS raster storagemanager, see for example geotiff. Use the dialogdata property to relate the unit to the used coordinate system. This way of configuring is easier and less error-prone as the explicit configuration with GeoDMS functions (2). 2) explicit configuration with GeoDMS functions . In two cases it is needed to configure the projection information and cardinality explicitly (2): . | if another geographic domain unit is needed as for which the data is stored in the data source, a selection that can be read from a Tiff source with a ReadData attribute. | if a fixed domain is needed and the source files need to be checked if their projection information and cardinality corresponds with this configured domain. | . The following examples present the configuration of the geographic grid domain for the example. example (default order of Y, X in point functions, see [xy-order](xy-order)): container grid { // configure the units for the coordinate system unit&lt;float32&gt; m:= baseunit('m', float32); unit&lt;fpoint&gt; rdc_meter_base : DialogData = \"ngr_layer\" , SpatialReference1 = \"EPSG:28992\"; unit&lt;fpoint&gt; rdc_meter := range(rdc_meter_base, point(300000[m], 0[m]), point(625000[m],280000[m])); // configure the cardinality for the grid domain parameter&lt;int16&gt; nrofrows := int16(3250); parameter&lt;int16&gt; nrofcols := int16(2700); // configure the grid domain unit&lt;spoint&gt; rdc_100m := range(        gridset(           rdc_meter          ,point(float32(-100), float32(100), rdc_meter)          ,point(float32(625000), float32(10000), rdc_meter)          ,spoint        )        ,point(int16(0), int16(0))        ,point(nrofrows, nrofcols)     ); } 1) before version 8.70, use the property Format in stead of SpatialReference. example (X, Y order in point functions, see [xy-order](xy-order)): container grid { // configure the units for the coordinate system unit&lt;float32&gt; m:= baseunit('m', float32); unit&lt;fpoint&gt; rdc_meter_base : DialogData = \"ngr_layer\" , SpatialReference1 = \"EPSG:28992\"; unit&lt;fpoint&gt; rdc_meter := range(rdc_meter_base, point(0[m], 300000[m]), point(280000[m],625000[m])) // configure the cardinality for the grid domain parameter&lt;int16&gt; nrofrows := int16(3250); parameter&lt;int16&gt; nrofcols := int16(2700); // configure the grid domain unit&lt;spoint&gt; rdc_100m := range( gridset( rdc_meter ,point(float32(100), float32(-100), rdc_meter) ,point(float32(10000), float32(625000), rdc_meter) ,spoint ) ,point(int16(0), int16(0)) ,point(nrofcols, nrofrows) ); } 1) before version 8.70, use the property Format in stead of SpatialReference. explanation: . | The rdc_meter unit defines the unit for the coordinate system (rijksdriehoek coordinates). | The expression for the geographic grid domain consists of two components: | . | a range function resulting in a range of rdc_meter coordinates. The range function has three argument: . | the result of the configured gridset function. | the origin coordinate of the grid, expressed in the local grid coordinates. | the number of columns and number of rows, expressed in the values type of the local grid coordinates. | . | a gridset function, defining the relation from the geographic coordinates to the local grid coordinates. This function has four arguments: . | the unit of the coordinate system, in this example rdc_meter. | the gridsize, in this case 100 meter in both X and Y directions. The gridsize in both directions is configured with a point function in the values typeof the rdc_meter coordinates. | In X direction, the coordinate values are increasing so a positive value of 100 is configured in this direction. | In Y direction, the coordinates values are decreasing so a negative value of -100 is configured in this direction. | . | the LeftTop(origin) coordinate in in the values type of the rdc_meter. | the values type of the resulting gridset, in this case spoint. | . | . Each attribute configured with this rdc_100m unit as domain unit should always have 3,250 rows and 2,700 columns. In the gridset functions, do not use arguments that are read from large primary data files, see the gridset documentation. ",
    "url": "/docs/geographic-grid-domain.html#example",
    
    "relUrl": "/docs/geographic-grid-domain.html#example"
  },"1241": {
    "doc": "geographic-grid-domain",
    "title": "geographic-grid-domain",
    "content": "The GeoDMS calculates and visualizes geographic data. To combine grids with other grid-data or vector-data, they need refer to the same geographical coordinate system. grid-data is related to a geographical coordinate system by it’s domain unit (grid-domain), defining the cardinality (for grid domains the number of rows and columns). Additionally a geographic grid domain needs to be aware of: . | the values-unit of the geographical coordinate-system | projection on how to relate the local grid coordinates to world coordinates, in a specific coordinate system. | . A geographic domain unit is a grid-domain related to a a rectangle part of the world. ",
    "url": "/docs/geographic-grid-domain.html",
    
    "relUrl": "/docs/geographic-grid-domain.html"
  },"1242": {
    "doc": "geography",
    "title": "type of geographic data",
    "content": "The GeoDMS supports both working with . | grid-data | vector-data | . ",
    "url": "/docs/geography.html#type-of-geographic-data",
    
    "relUrl": "/docs/geography.html#type-of-geographic-data"
  },"1243": {
    "doc": "geography",
    "title": "coordinate ordering",
    "content": ". | xy-order | point-order-in-polygons | . ",
    "url": "/docs/geography.html#coordinate-ordering",
    
    "relUrl": "/docs/geography.html#coordinate-ordering"
  },"1244": {
    "doc": "geography",
    "title": "geography",
    "content": "The GeoDMS is developed for geographic (spatial) calculations, modeling and visualization. operators-and-functions are available to calculate with geographic data and the geodms-gui contains a map view to visualize this type of data. More information on this map view can be found in the user-guide. To work with geographic data, coordinates are used expressed in a coordinate-system. ",
    "url": "/docs/geography.html",
    
    "relUrl": "/docs/geography.html"
  },"1245": {
    "doc": "geometric-functions",
    "title": "point",
    "content": ". | point-function - make a point attribute based on an X and Y attribute | point_isnearby - compare if two points are (almost) the same location | pointrow - get the row numbers of a point attribute | pointcol - get the column numbers of a point attribute | dist - calculate the distance between two point sets | sqrdist - calculate the square distance between two arrays of points | bg_buffer_point - creates a buffer polygon for each point in a pointset | . ",
    "url": "/docs/geometric-functions.html#point",
    
    "relUrl": "/docs/geometric-functions.html#point"
  },"1246": {
    "doc": "geometric-functions",
    "title": "polygon",
    "content": ". | area - calculates the surface of each polygon | centroid | centroid_or_mid - the centroid if it is located within a polygon or else a mid-point of a polygon. | poly2grid - a grid representation of polygons | poly2grid_untiled - a grid representation of polygons | lower_bound - the lowest X and Y values of the points in each polygon | upper_bound - the highest X and Y values of the points in each polygon | center_bound - the center X and Y values of the points in each polygon | overlay_polygon-(intersect) - domain unit with the intersecting part of each polygon | split_polygon - domain unit with all single polygons | split_partitioned_union_polygon - combination of split_polygon and partitioned_union_polygon-(dissolve-by-attribute) | polygon-inflated - increases each polygon | polygon-deflated - decreases each polygon | polygon_connectivity - domain unit with the connected polygons | sub-(difference) - a cutout of a polygon in another polygon | mul-(overlap) - the overlap of two arrays of polygons | add-(union) - the element by element union of two polygons | union_polygon-(dissolve) - remove lines of adjacent polygons | partitioned_union_polygon-(dissolve-by-attribute) - remove lines of adjacent polygons, grouped by a relation | bg_simplify_polygon - simplify the geometry of a polygon | bg_simplify_multi_polygon - simplify the geometry of a multi polygon | bg_buffer_multi_polygon - creates a buffer polygon for each polygon | . _Several geometric polygon functions can be combined in a single operator; for the full list of those combinations see polygon-processing-example. ",
    "url": "/docs/geometric-functions.html#polygon",
    
    "relUrl": "/docs/geometric-functions.html#polygon"
  },"1247": {
    "doc": "geometric-functions",
    "title": "points/arcs",
    "content": ". | dyna_point / dyna_point_with_ends - configures a point set for an arc on an equal distance | dyna_segment / dyna_segments_with_ends - configures a segment set for an arc on an equal distance | . ",
    "url": "/docs/geometric-functions.html#pointsarcs",
    
    "relUrl": "/docs/geometric-functions.html#pointsarcs"
  },"1248": {
    "doc": "geometric-functions",
    "title": "points/polygons",
    "content": ". | point_in_polygon - index number of the polygon in which a point is located | point_in_ranked_polygon - index number of the polygon in which a point is located, using a ranking in case a polygon is located in multiple polygons | point_in_all_polygons - relation between index numbers of the polygons in which points are located | sequence2points - all vertices of each arc/polygon as separate points | points2sequence - constructs arc/polygon from vertices | . ",
    "url": "/docs/geometric-functions.html#pointspolygons",
    
    "relUrl": "/docs/geometric-functions.html#pointspolygons"
  },"1249": {
    "doc": "geometric-functions",
    "title": "arc/polygon",
    "content": ". | arc_length | arc2segm - divides an arc/polygon data item into segment | bg_simplify_linestring - simplifies the geometry of an arc | bg_buffer_linestring - creates a buffer polygon for each arc | bg_buffer_multi_point- creates a buffer polygon for each coordinate of the arc/polygon | . ",
    "url": "/docs/geometric-functions.html#arcpolygon",
    
    "relUrl": "/docs/geometric-functions.html#arcpolygon"
  },"1250": {
    "doc": "geometric-functions",
    "title": "points/arcs/polygons",
    "content": "conversion . | rd2latlongwgs84 - converts coordinates from RD to LatLongWgs84 | latlongwgs842rd- converts coordinates from LatLongWgs84 to RD | rd2latlongge- converts coordinates from RD to LatLongGE | rd2latlonged50- converts coordinates from RD to LatLongEd50 | rd2latlong- converts coordinates from RD to LatLong | . ",
    "url": "/docs/geometric-functions.html#pointsarcspolygons",
    
    "relUrl": "/docs/geometric-functions.html#pointsarcspolygons"
  },"1251": {
    "doc": "geometric-functions",
    "title": "geometric-functions",
    "content": "Geometric operators-and-functions calculate with geometries (coordinates) of point, arc or polygon . ",
    "url": "/docs/geometric-functions.html",
    
    "relUrl": "/docs/geometric-functions.html"
  },"1252": {
    "doc": "geometry",
    "title": "origin",
    "content": "With gdal.vect, the geographic data is by default read with the name: geometry. As gdal.vect is our advised storagemanager for vector data, we advice to use geometry as name for primary feature attributes of vector data. ",
    "url": "/docs/geometry.html#origin",
    
    "relUrl": "/docs/geometry.html#origin"
  },"1253": {
    "doc": "geometry",
    "title": "DialogType/DialogData",
    "content": "For vector data domains, the properties dialogtype and dialogdata are in use to make the GeoDMS aware of the feature attribute for the domain-unit. | The DialogType property is configured to Map | The DialogData property is configured to the name of the feature attribute. | . An advantage of naming the feature attribute geometry is that these property do not have to be configured anymore in recent versions of the GeoDMS. The feature attribute geometry needs to be a direct subitem of it’s domain unit. ",
    "url": "/docs/geometry.html#dialogtypedialogdata",
    
    "relUrl": "/docs/geometry.html#dialogtypedialogdata"
  },"1254": {
    "doc": "geometry",
    "title": "geometry",
    "content": "The data item name: geometry is used as naming-conventions for feature-attribute of vector-data. ",
    "url": "/docs/geometry.html",
    
    "relUrl": "/docs/geometry.html"
  },"1255": {
    "doc": "geopackage",
    "title": "Read",
    "content": "Since GeoDMS version 7408, gdal.vect can be used to read geopackages. example: . container snapshot_result :  StorageName     = \"%LocalDataProjDir%/snapshot_gpkg_20220101.gpkg\" ,  StorageType     = \"gdal.vect\" ,  StorageReadOnly = \"True\" ,  SyncMode        = \"allTables\", ,  DialogData      = \"geography/point_rd\"; . This configures a whole geopackage. The SyncMode property indicates all tables are read from the geopackage. All tables become domain-unit and parent-item for all attribute. These attributes can be configured explicitly or are read with a default value-type. The configuration of the dialogdata property informs the GeoDMS the values-unit for all geometry items will be: geography/point_rd. ",
    "url": "/docs/geopackage.html#read",
    
    "relUrl": "/docs/geopackage.html#read"
  },"1256": {
    "doc": "geopackage",
    "title": "Write",
    "content": "Since GeoDMS version 7408, gdalwrite.vect can be used to write geopackages. examples: . 1. single layer: unit&lt;uint32&gt; location := SourceData/location , StorageName = \"%localDataProjDir%/regr_results/test.gpkg\" , StorageType = \"gdalwrite.vect\" , StorageReadOnly = \"False\" { attribute geometry := SourceData/location/geometry; attribute name := SourceData/location/name; } 2. multiple layers: container snapshot_result :  StorageName = \"%LocalDataProjDir%/snapshot_gpkg_20220101.gpkg\" ,  StorageType = \"gdalwrite.vect\" ,  StorageReadOnly = \"False\" { unit&lt;uint32&gt; ligplaats := selectie/ligplaats { attribute&lt;string&gt;         identificatie       := selectie/ligplaats/identificatie; attribute&lt;geometries/rdc&gt; geometry     (poly) := selectie/ligplaats/geometry_mm[geometries/rdc]; attribute&lt;string&gt;         nummeraanduiding_id := selectie/ligplaats/nummeraanduiding_id;       container meta       { attribute&lt;string&gt;      status     (ligplaats)  := selectie/ligplaats/meta/status, DisableStorage = \"True\"; attribute&lt;ligplaats_status_code&gt; statusCode (ligplaats)  := rlookup(Status, ligplaats_status_code/values);       }    } unit&lt;uint32&gt; ligplaats_status_code := unique(ligplaats/meta/status)    {       attribute&lt;uint32&gt; code  := id(.);       attribute&lt;string&gt; label := values;    } ... } &lt;/pre&gt; This example shows a part of the configuration of a BAG snapshot written to a geopackage. All domain units configured become tables in the geopackage, and all direct or indirect [subitem](subitem) with the same domain unit are stored as attributes in these tables. By configuring the [disablestorage](disablestorage) = \"True\" property for the meta status attribute, the attribute is not written to the geopackage. ",
    "url": "/docs/geopackage.html#write",
    
    "relUrl": "/docs/geopackage.html#write"
  },"1257": {
    "doc": "geopackage",
    "title": "geopackage",
    "content": "A geopackage (GPKG) is an open, non-proprietary, platform-independent and standards-based data format for geographic information system implemented as a SQLite database container. The format has become popular lately and is for instance used for basisregistraties such as the BRT. Geopackages can be read and written to with the GeoDMS, an example is the snapshot from the BAG that we make available as geopakacge for the https://geoparaat.nl project. See https://gdal.org/drivers/vector/gpkg.html#vector-gpkg for a full list of all open and creation gdal-options. ",
    "url": "/docs/geopackage.html",
    
    "relUrl": "/docs/geopackage.html"
  },"1258": {
    "doc": "geotiff",
    "title": "Read",
    "content": "The GeoDMS supports two ways of reading (Geo)Tiff files: . | gdal.grid: for most (Geo)Tiff files, we advice to use gdal.grid (see next subparagraph), except for: . | uint2, uint4 and boolean data. | palette based (Geo)Tiff files | . | tiff StorageManager | . gdal.grid . The following example shows how to read a (Geo)Tiff file with gdal.grid. The (GeoTiff) file contains the data of a tile of the AHN, in this case: 26az2.tiff. example . unit&lt;spoint&gt; AHNTile :   StorageName = \"%SourceDataDir%/AHN/26az2.tif\"  ,   StorageType = \"gdal.grid\"  ,   DialogData  = \"Geografie/rdc\"  {        attribute&lt;float32&gt; GridData;        attribute&lt;float32&gt; ReadData (subdomain);  } . The primary data is read from the 26az2.tif file. The projection information can also be read from this file, or from a 26az2.tfw file in the same folder. The DialogData property needs to refer to the how-to-configure-a-coordinate-system (RD, LatLong etc) to inform the GeoDMS on how to relate the projection information from the GeoTiff to the coordinate system of the configuration. The geographic-grid-domain AHNTile is implicitly defined by the projection information and the number of rows/columns of the GeoTiff. The GridData attribute has this AHNTile as domain-unit and is read for the whole grid. The ReadData attribute reads a subset of the data for another domain unit, in the example subdomain. This geographic domain unit needs to be configured and can be used to read for example the AHN data for a building or the land use for a country from a European land use file. If only a (small) selection of a GeoTiff file is needed, using such a ReadData attribute as it is much faster than reading the GridData and making the selection afterwards. Data read from a GeoTiff is automatically tile in the GeoDMS. options . gdal-options can be configured for reading (Geo)Tiff files with gdal.grid. See: https://gdal.org/drivers/raster/gtiff.html#open-options for a full list of all open options. tiff StorageManager . example . The following example shows how to read a (Geo)Tiff file with the tiff storagemanager. The (GeoTiff) file is one tile of the AHN, in this case: 26az2.tiff. unit&lt;spoint&gt; AHNTile :   StorageName = \"%SourceDataDir%/AHN/26az2.tif\"  ,   DialogData  = \"Geografie/rdc\"  {    attribute&lt;float32&gt; GridData;    attribute&lt;float32&gt; ReadData (subdomain);  } . The configuration is quite similar to the gdal.grid variant, only the StorageType does not have to be configured. As gdal does not support sub-byte-element GeoTiff files, we advice to use the Tiff StorageManager to read boolean, uint2 and uint4 data. TrueColor . Both the gdal.vect and the tiff StorageManager can read TrueColor (Geo)Tiff files. The essence of a TrueColor Tiff is that the GridData contains a color value (rgb code) for each grid cell. The GeoDMS supports TrueColor Bitmap/GeoTiff images with 24 bits per pixel (1 byte for red, green and blue values). The value-type for the grid data values in the GeoDMS needs to be: uint32. example: . unit&lt;spoint&gt; referentie_tiff : StorageName = \"%projDir%/data/tif/kaart.tif\" , DialogData  = \"Geography/point_rd\" {    attribute&lt;uint32&gt; GridData: DialogType =\"BrushColor\"; } . The property DialogType = “BrushColor” is configured to inform the GeoDMS the grid values are interpreted as colors and can be used directly to visualise grid cells in the map view. palette based . In this variant the GridData attribute contain index numbers for each grid cell. These index numbers are related to colors in a palette. The palette is also stored in the GeoTiff file. Based on the number of entries in the palette (related to the number of different colors in the file), the griddata of a palette based GeoTiff is usually configured with value type uint4 (for 16 colors) or uint8 (for a maximum of 255 colors). Palette based can at the moment only be read with the tiff StorageManager. example: . unit&lt;uint4&gt; colorindex; {    attribute&lt;uint32&gt; palette := Grid/PaletteData,  DialogType = \"BrushColor\"; } unit&lt;spoint&gt; referentie_tiff :   StorageName = \"%projdir%/data/tiff_pa.tif\" ,   DialogData  = \"Geography/point_rd\"                     {    attribute&lt;colorindex&gt;  GridData;    attribute&lt;units/color&gt; PaletteData (colorindex); } . The subitem named GridData refers to the index numbers. The subitem named PaletteData is an attribute with a domain unit that is unifiable with the values unit of the GridData attribute. The PaletteData is also read from or written to the Tiff file. The property DialogType = “BrushColor” is configured for the palette subitem of the palette domain to inform the GeoDMS that the palette values are to be interpreted as colors when visualizing the grid cells in a map view. Other palettes (not directly read from the Tiff file) can also be used, e.g. defined explicitly in the GeoDMS configuration. SqlString . the SqlString property is in use for (Geo)Tiff files for 2 purposes: . 1) Aggregations If a SqlString = “number” is configured, a relation is made (if possible) between the grid data domain and the result domain based on the configured projection. This relation is used to count the number of occurrences of the configured class number in the original Tiff file for the new desired grid cell. 2) Multiple bands The following example shows how to read multiple bands (only with gdal.grid) . unit&lt;uint32&gt; grid_uint8_nth_band : StorageName = \"%SourceDataDir%/intput/tiff_uint32.tif\" , StorageType = \"gdal.grid\" , DialogData = \"units/point_rd\" , StorageReadOnly = \"True\" { attribute&lt;uint8&gt; Red : SqlString=\"BANDS=1\"; attribute&lt;uint8&gt; Blue : SqlString=\"BANDS=2\"; attribute&lt;uint8&gt; Green : SqlString=\"BANDS=3\"; attribute&lt;uint8&gt; Magenta : SqlString=\"BANDS=4\"; } . ",
    "url": "/docs/geotiff.html#read",
    
    "relUrl": "/docs/geotiff.html#read"
  },"1259": {
    "doc": "geotiff",
    "title": "Write",
    "content": "The GeoDMS supports two ways of writing (Geo)Tiff files: . | gdalwrite.grid: for most (Geo)Tiff files, we advice to use gdalwrite.grid (see next subparagraph), except for: . | uint2, uint4 and boolean data. | palette based (Geo)Tiff files | . | tiff StorageManager | . gdalwrite.grid . !!! We noticed some issues with writing GeoTiff files with gdalwrite.grid. We advices to use the tiff StorageManager instead of gdalwrite.grid at the moment. The following example shows how to write a (Geo)Tiff file with gdalwrite.grid. example . unit&lt;spoint&gt; Export_AHNTile := AHNTile : StorageName = \"%LocalDataProjDir%/AHN/26az2.tif\"  , StorageType = \"gdalwrite.grid\" {    attribute&lt;float32&gt; GridData := AHNTile/Export_AHNTile; } . options . gdal-options can be configured for writing (Geo)Tiff files with gdal.grid. See: https://gdal.org/drivers/raster/gtiff.html#creation-options for a full list of all creation options. tiff StorageManager . The following example shows how to write a (Geo)Tiff file with the tiff. example . unit&lt;spoint&gt; AHNTile : StorageName = \"%LocalDataProjDir%/AHN/26az2.tif\"  {    attribute&lt;float32&gt; GridData:= AHNTile/Export_AHNTile; } . In the same way as with reading, the configuration for writing GeoTiff files is quite similar to the gdalwrite.grid variant, only the StorageType does not have to be configured. As gdal does not support sub-byte-element GeoTiff files, we advice to use the Tiff StorageManager to write boolean, uint2 and uint4 data. palette based . In this variant the GridData attribute contain index numbers for each grid cell. These index numbers are related to colors in a palette. The palette is also stored in the GeoTiff file. Based on the number of entries in the palette (related to the number of different colors in the file), the griddata of a palette based GeoTiff is usually configured with value type uint4 (for 16 colors) or uint8 (for a maximum of 255 colors). Palette based can at the moment only be written with the tiff StorageManager. example: . unit&lt;uint4&gt; colorindex { attribute&lt;units/color&gt; palette := Grid/PaletteData, DialogType = \"BrushColor\"; } unit&lt;spoint&gt; Read: StorageName = \"%projdir%/data/tiff_pa.tif\", DialogData = \"units/point_rd\", StorageReadOnly = \"True\" { attribute&lt;colorindex&gt; GridData; attribute&lt;units/color&gt; PaletteData (colorindex); } container Write: StorageName = \"%localDataProjDir%/regr_results/tiff_pa.tif\", ExplicitSuppliers = \"Read\" { attribute&lt;colorindex&gt; GridData (Grid) := Grid/GridData; attribute&lt;units/color&gt; PaletteData (colorindex) := Grid/PaletteData; } . ",
    "url": "/docs/geotiff.html#write",
    
    "relUrl": "/docs/geotiff.html#write"
  },"1260": {
    "doc": "geotiff",
    "title": "geotiff",
    "content": "The (Geo)Tiff format is our advised format for grid-data, as it: . | is open, widely used, binary(fast) and supports multiple compression types. | allows geo-referencing projection information to be embedded with (in an accompanying .tfw world file in the same folder) or within the GeoTiff file. | . (Geo)Tiff files can be read and written to with the GeoDMS. ",
    "url": "/docs/geotiff.html",
    
    "relUrl": "/docs/geotiff.html"
  },"1261": {
    "doc": "getmetricfactor",
    "title": "syntax",
    "content": ". | GetMetricFactor(values unit) | . ",
    "url": "/docs/getmetricfactor.html#syntax",
    
    "relUrl": "/docs/getmetricfactor.html#syntax"
  },"1262": {
    "doc": "getmetricfactor",
    "title": "definition",
    "content": "GetMetricFactor(values unit) results in a float64 data-item with the factor in the metric of the values-unit argument. ",
    "url": "/docs/getmetricfactor.html#definition",
    
    "relUrl": "/docs/getmetricfactor.html#definition"
  },"1263": {
    "doc": "getmetricfactor",
    "title": "applies to",
    "content": ". | argument values unit with Numeric or Point value-type | . ",
    "url": "/docs/getmetricfactor.html#applies-to",
    
    "relUrl": "/docs/getmetricfactor.html#applies-to"
  },"1264": {
    "doc": "getmetricfactor",
    "title": "since version",
    "content": "5.44 . ",
    "url": "/docs/getmetricfactor.html#since-version",
    
    "relUrl": "/docs/getmetricfactor.html#since-version"
  },"1265": {
    "doc": "getmetricfactor",
    "title": "example",
    "content": "unit&lt;float32&gt;      ha           := 10000.0 * m * m; unit&lt;float32&gt;      per_ha       := 1.0 / ha; parameter&lt;float64&gt; MetricFactor := GetMetricFactor(per_ha); . result: MetricFactor = 0.0001 . ",
    "url": "/docs/getmetricfactor.html#example",
    
    "relUrl": "/docs/getmetricfactor.html#example"
  },"1266": {
    "doc": "getmetricfactor",
    "title": "see also",
    "content": ". | propvalue | . ",
    "url": "/docs/getmetricfactor.html#see-also",
    
    "relUrl": "/docs/getmetricfactor.html#see-also"
  },"1267": {
    "doc": "getmetricfactor",
    "title": "getmetricfactor",
    "content": "unit-functions GetMetricFactor . ",
    "url": "/docs/getmetricfactor.html",
    
    "relUrl": "/docs/getmetricfactor.html"
  },"1268": {
    "doc": "getprojectionbase",
    "title": "syntax",
    "content": ". | GetProjectionBase(gridunit) | . ",
    "url": "/docs/getprojectionbase.html#syntax",
    
    "relUrl": "/docs/getprojectionbase.html#syntax"
  },"1269": {
    "doc": "getprojectionbase",
    "title": "definition",
    "content": "GetProjectionBase(gridunit) results in a reference for the gridunit towards the unit used for the grid-domain (e.g. meters for RD and degrees for LatLong). ",
    "url": "/docs/getprojectionbase.html#definition",
    
    "relUrl": "/docs/getprojectionbase.html#definition"
  },"1270": {
    "doc": "getprojectionbase",
    "title": "applies to",
    "content": ". | unit gridunit with Point value-type of the group CanBeDomainUnit | . ",
    "url": "/docs/getprojectionbase.html#applies-to",
    
    "relUrl": "/docs/getprojectionbase.html#applies-to"
  },"1271": {
    "doc": "getprojectionbase",
    "title": "since version",
    "content": "5.44 . ",
    "url": "/docs/getprojectionbase.html#since-version",
    
    "relUrl": "/docs/getprojectionbase.html#since-version"
  },"1272": {
    "doc": "getprojectionbase",
    "title": "example",
    "content": "unit&lt;fpoint&gt; rdc_meter: range = \"[{300000, 0}, {625000, 280000})\"; unit&lt;spoint&gt; rdc_100 :=    range(       gridset(           rdc_meter          ,point(  -100f,   100f), rdc_meter)          ,point(625000f, 10000f), rdc_meter)          ,'spoint'       ), point(0s,0s), point(3250s, 2700s)    ); unit&lt;fpoint&gt; projBase := GetProjectionBase(rdc_100); . result: The projBase unit will refer to the rdc_meter unit. ",
    "url": "/docs/getprojectionbase.html#example",
    
    "relUrl": "/docs/getprojectionbase.html#example"
  },"1273": {
    "doc": "getprojectionbase",
    "title": "see also",
    "content": ". | getprojectionoffset | getprojectionfactor | . ",
    "url": "/docs/getprojectionbase.html#see-also",
    
    "relUrl": "/docs/getprojectionbase.html#see-also"
  },"1274": {
    "doc": "getprojectionbase",
    "title": "getprojectionbase",
    "content": "unit-functions GetProjectionBase . ",
    "url": "/docs/getprojectionbase.html",
    
    "relUrl": "/docs/getprojectionbase.html"
  },"1275": {
    "doc": "getprojectionfactor",
    "title": "syntax",
    "content": ". | GetProjectionFactor(gridunit) | . ",
    "url": "/docs/getprojectionfactor.html#syntax",
    
    "relUrl": "/docs/getprojectionfactor.html#syntax"
  },"1276": {
    "doc": "getprojectionfactor",
    "title": "definition",
    "content": "GetProjectionFactor(gridunit) results in a parameter with a dpoint value-type, indicating the gridsize in both X and Y directions. The grid size is expressed in the unit of the grid-domain. ",
    "url": "/docs/getprojectionfactor.html#definition",
    
    "relUrl": "/docs/getprojectionfactor.html#definition"
  },"1277": {
    "doc": "getprojectionfactor",
    "title": "description",
    "content": "The GetProjectionFactor function in combination with the getprojectionfactor function was used to calculate grid relation for a set of points. Since GeoDMS version 7.015 this is done with the value function, see configuration-examples Grid. ",
    "url": "/docs/getprojectionfactor.html#description",
    
    "relUrl": "/docs/getprojectionfactor.html#description"
  },"1278": {
    "doc": "getprojectionfactor",
    "title": "applies to",
    "content": ". | unit gridunit with Point value type of the group CanBeDomainUnit | . ",
    "url": "/docs/getprojectionfactor.html#applies-to",
    
    "relUrl": "/docs/getprojectionfactor.html#applies-to"
  },"1279": {
    "doc": "getprojectionfactor",
    "title": "since version",
    "content": "5.44 . ",
    "url": "/docs/getprojectionfactor.html#since-version",
    
    "relUrl": "/docs/getprojectionfactor.html#since-version"
  },"1280": {
    "doc": "getprojectionfactor",
    "title": "example",
    "content": "unit&lt;fpoint&gt; rdc_meter: range = \"[{300000, 0}, {625000, 280000})\"; unit&lt;spoint&gt; rdc_100 :=    range(       gridset(           rdc_meter          ,point(  -100f,   100f), rdc_meter)          ,point(625000f, 10000f), rdc_meter)          ,'spoint'       ), point(0s,0s), point(3250s, 2700s)    ); unit&lt;fpoint&gt; projFactor := GetProjectionFactor(rdc_100); . result: projFactor = [(-100.0, 100.0)]. ",
    "url": "/docs/getprojectionfactor.html#example",
    
    "relUrl": "/docs/getprojectionfactor.html#example"
  },"1281": {
    "doc": "getprojectionfactor",
    "title": "see also",
    "content": ". | getprojectionbase | getprojectionoffset | . ",
    "url": "/docs/getprojectionfactor.html#see-also",
    
    "relUrl": "/docs/getprojectionfactor.html#see-also"
  },"1282": {
    "doc": "getprojectionfactor",
    "title": "getprojectionfactor",
    "content": "unit-functions GetProjectionFactor . ",
    "url": "/docs/getprojectionfactor.html",
    
    "relUrl": "/docs/getprojectionfactor.html"
  },"1283": {
    "doc": "getprojectionoffset",
    "title": "syntax",
    "content": ". | GetProjectionOffset(gridunit) | . ",
    "url": "/docs/getprojectionoffset.html#syntax",
    
    "relUrl": "/docs/getprojectionoffset.html#syntax"
  },"1284": {
    "doc": "getprojectionoffset",
    "title": "definition",
    "content": "GetProjectionOffset(gridunit) results in a parameter with a dpoint value-type, indicating the coordinate of the top left grid cell in the grid-domain. ",
    "url": "/docs/getprojectionoffset.html#definition",
    
    "relUrl": "/docs/getprojectionoffset.html#definition"
  },"1285": {
    "doc": "getprojectionoffset",
    "title": "description",
    "content": "The GetProjectionOffset function, in combination with getprojectionfactor was used to calculate grid relation for a point vector-data domain. Since GeoDMS version 7.015 this is done with the value function, see configuration-examples Grid. ",
    "url": "/docs/getprojectionoffset.html#description",
    
    "relUrl": "/docs/getprojectionoffset.html#description"
  },"1286": {
    "doc": "getprojectionoffset",
    "title": "applies to",
    "content": ". | unit gridunit with Point value type of the group CanBeDomainUnit | . ",
    "url": "/docs/getprojectionoffset.html#applies-to",
    
    "relUrl": "/docs/getprojectionoffset.html#applies-to"
  },"1287": {
    "doc": "getprojectionoffset",
    "title": "since version",
    "content": "5.44 . ",
    "url": "/docs/getprojectionoffset.html#since-version",
    
    "relUrl": "/docs/getprojectionoffset.html#since-version"
  },"1288": {
    "doc": "getprojectionoffset",
    "title": "example",
    "content": "unit&lt;fpoint&gt; rdc_meter: range = \"[{300000, 0}, {625000, 280000})\"; unit&lt;spoint&gt; rdc_100 :=    range(       gridset(           rdc_meter          ,point(  -100f,   100f), rdc_meter)          ,point(625000f, 10000f), rdc_meter)          ,'spoint'       ), point(0s,0s), point(3250s, 2700s)    ); unit&lt;fpoint&gt; projBase := GetProjectionOffset(rdc_100); . result: projOffSet = [(625000.0, 10000.0)]. ",
    "url": "/docs/getprojectionoffset.html#example",
    
    "relUrl": "/docs/getprojectionoffset.html#example"
  },"1289": {
    "doc": "getprojectionoffset",
    "title": "see also",
    "content": ". | getprojectionbase | getprojectionfactor | . ",
    "url": "/docs/getprojectionoffset.html#see-also",
    
    "relUrl": "/docs/getprojectionoffset.html#see-also"
  },"1290": {
    "doc": "getprojectionoffset",
    "title": "getprojectionoffset",
    "content": "unit-functions GetProjectionOffset . ",
    "url": "/docs/getprojectionoffset.html",
    
    "relUrl": "/docs/getprojectionoffset.html"
  },"1291": {
    "doc": "git-or-subversion-server-access",
    "title": "server",
    "content": "Several GeoDMS projects are maintained at github or subversion servers. Contact us if you like to make us of this service for your project. ",
    "url": "/docs/git-or-subversion-server-access.html#server",
    
    "relUrl": "/docs/git-or-subversion-server-access.html#server"
  },"1292": {
    "doc": "git-or-subversion-server-access",
    "title": "client tools",
    "content": "You can download the GeoDMS sourcecode and projects using a github/svn client, for example: TortoiseGit or TortoiseSvn. Tortoise is a client tool, implemented as a Windows shell extension, resulting in some menu options added to the pop-up menu in the Windows Explorer. ",
    "url": "/docs/git-or-subversion-server-access.html#client-tools",
    
    "relUrl": "/docs/git-or-subversion-server-access.html#client-tools"
  },"1293": {
    "doc": "git-or-subversion-server-access",
    "title": "svn",
    "content": "To download a project, first browse in the Windows Explorer to your project folders-and-placeholders. Next Activate the pop up menu option: SVN Checkout and configure the url of the project at the Subversion server in the textbox: URL of repositry, as shown in the next example: . Click OK to download the project in the Checkout directory. After a Checkout, the directory is under version control. This is indicated by colored icons, indicating if the files are consistent with the last updated version. The two most important pop-up menu options available for directories under version control are: . | SVN Update: To update the directory with the latest version(revision) from our SVN server (for some projects you need to be authorized). | SCN Commit: To commit your changes to a new revision at our SVN server (you need to be authorized). | . The pop-up menu option TortoiseSVN offers more options, e.g., comparing your local version with a revision at our server. For more information on these options we refer to the TortoiseSVN manual. organisation . In organizing your svn project, you often find the following concepts: . | branches: forked versions | trunk: latest (mostly untested versions) are maintained here | tags: tagged revisions; revisions are tagged when major versions are made available You can Checkout the latest version from te trunk to for example “c:\\svn\\GeoDMS” or Export a tagged version to any directory | . ",
    "url": "/docs/git-or-subversion-server-access.html#svn",
    
    "relUrl": "/docs/git-or-subversion-server-access.html#svn"
  },"1294": {
    "doc": "git-or-subversion-server-access",
    "title": "git-or-subversion-server-access",
    "content": " ",
    "url": "/docs/git-or-subversion-server-access.html",
    
    "relUrl": "/docs/git-or-subversion-server-access.html"
  },"1295": {
    "doc": "gml_files",
    "title": "gml_files",
    "content": "page about reading GML files to be added . ",
    "url": "/docs/gml_files.html",
    
    "relUrl": "/docs/gml_files.html"
  },"1296": {
    "doc": "gnu-gpl-version-2-license-conditions",
    "title": "GNU GENERAL PUBLIC LICENSE",
    "content": "Version 2, June 1991 Copyright (C) 1989, 1991 Free Software Foundation, Inc. 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA . Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. ",
    "url": "/docs/gnu-gpl-version-2-license-conditions.html#gnu-general-public-license",
    
    "relUrl": "/docs/gnu-gpl-version-2-license-conditions.html#gnu-general-public-license"
  },"1297": {
    "doc": "gnu-gpl-version-2-license-conditions",
    "title": "Preamble",
    "content": "The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software–to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation’s software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Library General Public License instead.) You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software. Also, for each author’s protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors’ reputations. Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone’s free use or not licensed at all. The precise terms and conditions for copying, distribution and modification follow. ",
    "url": "/docs/gnu-gpl-version-2-license-conditions.html#preamble",
    
    "relUrl": "/docs/gnu-gpl-version-2-license-conditions.html#preamble"
  },"1298": {
    "doc": "gnu-gpl-version-2-license-conditions",
    "title": "GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION",
    "content": "0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The “Program”, below, refers to any such program or work, and a “work based on the Program” means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term “modification”.) Each licensee is addressed as “you”. Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does. | You may copy and distribute verbatim copies of the Program’s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program. | . You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. | You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: | . a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program. In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. | You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following: | . a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, . b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, . c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) . The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. | You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it. | Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients’ exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License. | If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program. | . If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. | The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. | . Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and “any later version”, you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation. | If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally. | . ",
    "url": "/docs/gnu-gpl-version-2-license-conditions.html#gnu-general-public-license-terms-and-conditions-for-copying-distribution-and-modification",
    
    "relUrl": "/docs/gnu-gpl-version-2-license-conditions.html#gnu-general-public-license-terms-and-conditions-for-copying-distribution-and-modification"
  },"1299": {
    "doc": "gnu-gpl-version-2-license-conditions",
    "title": "NO WARRANTY",
    "content": "11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. | IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. | . ",
    "url": "/docs/gnu-gpl-version-2-license-conditions.html#no-warranty",
    
    "relUrl": "/docs/gnu-gpl-version-2-license-conditions.html#no-warranty"
  },"1300": {
    "doc": "gnu-gpl-version-2-license-conditions",
    "title": "END OF TERMS AND CONDITIONS",
    "content": "How to Apply These Terms to Your New Programs . If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the “copyright” line and a pointer to where the full notice is found. Copyright (C) . This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA. Also add information on how to contact you by electronic and paper mail. If the program is interactive, make it output a short notice like this when it starts in an interactive mode: . Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w’. This is free software, and you are welcome to redistribute it under certain conditions; type `show c’ for details. The hypothetical commands `show w’ and `show c’ should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w’ and `show c’; they could even be mouse-clicks or menu items–whatever suits your program. You should also get your employer (if you work as a programmer) or your school, if any, to sign a “copyright disclaimer” for the program, if necessary. Here is a sample; alter the names: . Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision’ (which makes passes at compilers) written by James Hacker. , 1 April 1989 Ty Coon, President of Vice . This General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Library General Public License instead of this License. ",
    "url": "/docs/gnu-gpl-version-2-license-conditions.html#end-of-terms-and-conditions",
    
    "relUrl": "/docs/gnu-gpl-version-2-license-conditions.html#end-of-terms-and-conditions"
  },"1301": {
    "doc": "gnu-gpl-version-2-license-conditions",
    "title": "gnu-gpl-version-2-license-conditions",
    "content": " ",
    "url": "/docs/gnu-gpl-version-2-license-conditions.html",
    
    "relUrl": "/docs/gnu-gpl-version-2-license-conditions.html"
  },"1302": {
    "doc": "google4d734633ec7604f7.html",
    "title": "google4d734633ec7604f7.html",
    "content": "google-site-verification: google4d734633ec7604f7.html . ",
    "url": "/docs/google4d734633ec7604f7.html.html",
    
    "relUrl": "/docs/google4d734633ec7604f7.html.html"
  },"1303": {
    "doc": "grid-2-point",
    "title": "since version 7.015",
    "content": "Since GeoDMS 7.015 a value function (example) can be used to convert the index-numbers of a grid-domain to world coordinates. ",
    "url": "/docs/grid-2-point.html#since-version-7015",
    
    "relUrl": "/docs/grid-2-point.html#since-version-7015"
  },"1304": {
    "doc": "grid-2-point",
    "title": "example",
    "content": "// coordinate system  unit&lt;fpoint&gt; rdc_base : format = \"EPSG:28992\", unit&lt;fpoint&gt; rdc      := range(rdc_base, point(300000f,0f), point(625000f,280000f)); // configuration of grid domain, related to the rdc unit&lt;spoint&gt; griddomain := range(       gridset(rdc, point(-100f, 100f, rdc), point(625000f, 10000f, rdc) ,'spoint')      ,point(   0s,    0s)      ,point(3250s, 2700s)   ); attribute&lt;rdc&gt; point_7015_and_later_rel (griddomain) := id(griddomain)[rdc]; . A grid domain is configured, with rdc as coordinate unit. In the bold line the actual conversion to world coordinates is configured. ",
    "url": "/docs/grid-2-point.html#example",
    
    "relUrl": "/docs/grid-2-point.html#example"
  },"1305": {
    "doc": "grid-2-point",
    "title": "grid-2-point",
    "content": "configuration-examples Grid 2 Point . ",
    "url": "/docs/grid-2-point.html",
    
    "relUrl": "/docs/grid-2-point.html"
  },"1306": {
    "doc": "grid-2-polygon-example",
    "title": "explanation",
    "content": "This example results in a set of square polygons for each grid cell with non missing data in the GridData attribute. The selection with the isDefined functions results in a uint32 domain-unit with entries for each defined cell. In this subset also other criteria can be used to make selections of the relevant set of grid cells. The configured pointset domain unit has 5 times the number of entries of the subset domain unit. This pointset domain is used to define for each polygon the topleft, bottomleft, bottomright, topright and again topleft coordinate. With the points2sequence function these points are converted to polygons. The square polygons can be dissolved into large polygons (interior polygon segments are removed), by using the union_polygon-(dissolve) or partitioned_union_polygon-(dissolve-by-attribute) functions. ",
    "url": "/docs/grid-2-polygon-example.html#explanation",
    
    "relUrl": "/docs/grid-2-polygon-example.html#explanation"
  },"1307": {
    "doc": "grid-2-polygon-example",
    "title": "grid-2-polygon-example",
    "content": "configuration-examples Grid 2 polygon . Calculating with grid-data is usually much faster as with vector-data. If it is still useful to transform grid data into polygon, see the following example: . parameter&lt;meter&gt; gridsize := 100[meter]; unit&lt;spoint&gt; griddomain : StorageName = \"%SourceDataDir%/src_grid.tif\" , StorageType = \"gdal.grid\" , DialogData = \"Geografie/rdc\" { attribute&lt;float32&gt; GridData; } unit&lt;uint32&gt; polydomain := select_with_org_rel(IsDefined(griddomain/GridData)) {    attribute&lt;rdc&gt; point_rdc       := org_rel[rdc];    attribute&lt;rdc&gt; geometry (poly) := points2sequence(pointset/point, pointset/sequence, pointset/ordinal);    unit&lt;uint32&gt; pointset := union_unit(.,.,.,.,.)    {        attribute&lt;rdc&gt;    point    := union_data(.           , point_rdc                                         // left top            , point_rdc + point(gridsize, 0[meter], rdc)        // right top            , point_rdc + point(gridsize, -gridsize, rdc)       // right bottom            , point_rdc + point(0[meter], -gridsize, rdc)       // left bottom            , point_rdc                                         // left top         );        attribute&lt;..&gt;     sequence := union_data(., id(..), id(..), id(..), id(..), id(..))[uint32];        attribute&lt;uint32&gt; ordinal  :=  union_data(., const(0,..), const(1,..), const(2,..), const(3,..), const(4,..));     } } . With yx-coord the point-defintion is: attribute&lt;rdc&gt; point := union_data(. , point_rdc , point_rdc + point(0[meter] , gridsize, rdc) , point_rdc + point(-gridsize, gridsize, rdc) , point_rdc + point(-gridsize, 0[meter], rdc) , point_rdc ); . ",
    "url": "/docs/grid-2-polygon-example.html",
    
    "relUrl": "/docs/grid-2-polygon-example.html"
  },"1308": {
    "doc": "grid-data",
    "title": "read/write",
    "content": "Grid data in GeoDMS projects can be read from and or written to the following formats: . | geotiff format (advised format) | BMP (undocumented) | ascii-grid | arc-info-binary-grid | . ",
    "url": "/docs/grid-data.html#readwrite",
    
    "relUrl": "/docs/grid-data.html#readwrite"
  },"1309": {
    "doc": "grid-data",
    "title": "calculations",
    "content": "Most functions in the GeoDMS apply to attributes of both one-dimensional as well as grid domains. The grid-functions apply only to attributes of grid domains, as they calculate with the two-dimensional structure of the data. ",
    "url": "/docs/grid-data.html#calculations",
    
    "relUrl": "/docs/grid-data.html#calculations"
  },"1310": {
    "doc": "grid-data",
    "title": "see also",
    "content": ". | vector-data | . ",
    "url": "/docs/grid-data.html#see-also",
    
    "relUrl": "/docs/grid-data.html#see-also"
  },"1311": {
    "doc": "grid-data",
    "title": "grid-data",
    "content": ". Grid data are numeric or boolean attribute for a grid-domain. In GeoDMS applications, grid data is often spatial, meaning it describes a rectangle of the earth surface. The spatial reference of grid data is derived from the projection information of the domain unit. ",
    "url": "/docs/grid-data.html",
    
    "relUrl": "/docs/grid-data.html"
  },"1312": {
    "doc": "grid-domain",
    "title": "grid functions",
    "content": "Most operators-and-functions in the GeoDMS work on data-item of one (table) of two (grid) dimensional domains. There is group of functions that explicitly use the two-dimensional structure of grid domains, for instance to calculate nearby relations. This group is called grid-functions. ",
    "url": "/docs/grid-domain.html#grid-functions",
    
    "relUrl": "/docs/grid-domain.html#grid-functions"
  },"1313": {
    "doc": "grid-domain",
    "title": "grid-domain",
    "content": ". A grid domain is a two-dimensional domain-unit, each cell is defined by a row and a column number. This implies the value-type of the domain-unit is of type PointGroup. Most grid domains in the GeoDMS are used to describe a part of the world, called geographic-grid-domain. Furthermore, grid domains are also in use to define kernel for potential calcualtions. ",
    "url": "/docs/grid-domain.html",
    
    "relUrl": "/docs/grid-domain.html"
  },"1314": {
    "doc": "grid-functions",
    "title": "grid-functions",
    "content": "Grid operators-and-functions functions are used to calculate with data-item of grid-domain, explicitly using the two-dimensional structure of data in grid, like potential or district. | dist2 - the distances in a grid towards a point data item | griddist - impedance in a grid towards the nearest point in a pointset, summing the resistances of the shortest path to the nearest point | . | potential - a neighborhood operation to sum the values of neighbouring cells in a grid, based on a kernel | proximity - a neighborhood operation to get the maximum value of neighbouring cells in a grid, based on a kernel | diversity - the number of different occurences in the neighbourhood of each cell in a grid | . | district - adjacent (horizontal &amp; vertical, not diagonal) grid cell values with the same values | district_8 - adjacent (horizontal &amp; vertical &amp; diagonal) grid cell values with the same values | . | raster_merge - to merge data from smaller to larger grids, e.g. to combine country grids to a European grid | . ",
    "url": "/docs/grid-functions.html",
    
    "relUrl": "/docs/grid-functions.html"
  },"1315": {
    "doc": "grid-processing-example",
    "title": "download",
    "content": ". | configuration/data | . ",
    "url": "/docs/grid-processing-example.html#download",
    
    "relUrl": "/docs/grid-processing-example.html#download"
  },"1316": {
    "doc": "grid-processing-example",
    "title": "concepts",
    "content": ". | grid/raster analysis | . ",
    "url": "/docs/grid-processing-example.html#concepts",
    
    "relUrl": "/docs/grid-processing-example.html#concepts"
  },"1317": {
    "doc": "grid-processing-example",
    "title": "functions",
    "content": ". | poly2grid | rth_element | proximity | griddist | dist2 | centroid_or_mid | . ",
    "url": "/docs/grid-processing-example.html#functions",
    
    "relUrl": "/docs/grid-processing-example.html#functions"
  },"1318": {
    "doc": "grid-processing-example",
    "title": "grid-processing-example",
    "content": "configuration-examples Grid processing . This script explores different grid processing operations using a case study where for a set of buildings the height is determined from a height grid data set (AHN). Furthermore the grid distance to those buildings is calculated. The study area in this example is the historic center of the city of Hulst in the Netherlands. ",
    "url": "/docs/grid-processing-example.html",
    
    "relUrl": "/docs/grid-processing-example.html"
  },"1319": {
    "doc": "grid",
    "title": "see also",
    "content": ". | grid-domain | geographic-grid-domain | grid-data | base-grid | . ",
    "url": "/docs/grid.html#see-also",
    
    "relUrl": "/docs/grid.html#see-also"
  },"1320": {
    "doc": "grid",
    "title": "grid",
    "content": "A grid is a two-dimensional data structure, representing a rectangular. A grid contains cells, defined by a row and a column number. For images/pictures (think e.g. of bitmaps or png files) usually only local row and column numbers are relevant. In a GIS environment, a grid often represents a rectangle part of the world. In the GeoDMS a grid is defined by a grid-domain. Attributes with characteristics for the cells of the grid are called grid-data. ",
    "url": "/docs/grid.html",
    
    "relUrl": "/docs/grid.html"
  },"1321": {
    "doc": "griddist",
    "title": "syntax",
    "content": ". | griddist(resistance, destpoint_grid_rel, startvalues) | . ",
    "url": "/docs/griddist.html#syntax",
    
    "relUrl": "/docs/griddist.html#syntax"
  },"1322": {
    "doc": "griddist",
    "title": "definition",
    "content": "griddist(resistance, destpoint_grid_rel, startvalues) results in an impedance value for each cell of a grid towards the nearest point in a pointset, summing the resistance of each cell part of the shortest path to the nearest point. The function has three argument: . | resistance, an attribute of a grid-domain with the resistance value for each cell (e.g. based on slope or land use type); | destpoint_grid_rel, a relation from the pointset towards the grid domain. The pointset contains the destination locations, to which impedances are calculated. See point-2-grid for how to configure such a relation. | startvalues, the initial impedance values for the point set. | . The resulting values-unit of the impedance item has a float32 or float64 value-type, based on the value type of the resistance and startvalues arguments. The resulting domain-unit is the domain unit of the resistance argument. ",
    "url": "/docs/griddist.html#definition",
    
    "relUrl": "/docs/griddist.html#definition"
  },"1323": {
    "doc": "griddist",
    "title": "description",
    "content": "The griddist function is often used to calculate off road travel resistances, where e.g. the land use type and the slope have an important influence on the travel time/costs. ",
    "url": "/docs/griddist.html#description",
    
    "relUrl": "/docs/griddist.html#description"
  },"1324": {
    "doc": "griddist",
    "title": "conditions",
    "content": ". | The values unit of the arguments resistance and startvalues must match. | The domain unit of the arguments destpoint_gridid and startvalues must match. | . ",
    "url": "/docs/griddist.html#conditions",
    
    "relUrl": "/docs/griddist.html#conditions"
  },"1325": {
    "doc": "griddist",
    "title": "since version",
    "content": "5.85 . Not Yet Implemented: . | an aspect ratio is required to make griddist useful on a non-square rectangular raster | a row specific aspect ratio is required to make griddist useful on a lat-long raster | a cell specific (2x2) metric is required to make griddist useful on a generic projection | . ",
    "url": "/docs/griddist.html#since-version",
    
    "relUrl": "/docs/griddist.html#since-version"
  },"1326": {
    "doc": "griddist",
    "title": "example",
    "content": "attribute&lt;GridDomain&gt; GridDomain_rel (destination); attribute&lt;float64&gt;    griddist       (GridDomain) := griddist(resistance, GridDomain_rel, const(0.0, destination)); . resistance | | | |-:|-:|-:|-:|-:| 1| 1| 1| 1| 1| 2| 3| 0| 0| 1| 2| 4| 5| 1| 1| 5| 6| 3| 2| 2| 2| 2| 1| 1| 1| . GridDomain, nr of rows = 5, nr of cols = 5 . | GridDomain_rel | . | {1, 1} | . | {1, 3} | . | {4, 1} | . | {4, 4} | . domain destination, nr of rows = 4 . griddist | | | |———-:|———-:|———-:|———-:|———-:| 1.71 | 0.71 | 0.50 | 0.50 | 0.71 | 2.50 | 0 | 0 | 0 | 0.50 | 3.54 | 2.83 | 2.50 | 0.50 | 0.71 | 4.95 | 4 | 3.33 | 2 | 0.71 | 2 | 0 | 1.50 | 1 | 0 | . GridDomain, nr of rows = 5, nr of cols = 5 . ",
    "url": "/docs/griddist.html#example",
    
    "relUrl": "/docs/griddist.html#example"
  },"1327": {
    "doc": "griddist",
    "title": "griddist",
    "content": "grid-functions griddist . ",
    "url": "/docs/griddist.html",
    
    "relUrl": "/docs/griddist.html"
  },"1328": {
    "doc": "gridset",
    "title": "syntax",
    "content": ". | gridset(coordinate_unit, size, offset, valuetype) | . ",
    "url": "/docs/gridset.html#syntax",
    
    "relUrl": "/docs/gridset.html#syntax"
  },"1329": {
    "doc": "gridset",
    "title": "definition",
    "content": "gridset(coordinate_unit, size, offset, valuetype) configures a grid-domain with a projection to a coordinate system. The gridset function has the following arguments: . | the baseunit in which the how-to-configure-a-coordinate-system are expressed; | the size of the grid cells in both X and Y directions, expressed in the base-unit; | the offset, the coordinates of the top left coordinate, expressed in the base unit; | the value-type of the resulting domain-unit (in earlier versions the value type was configured as string, this is not supported anymore). | . ",
    "url": "/docs/gridset.html#definition",
    
    "relUrl": "/docs/gridset.html#definition"
  },"1330": {
    "doc": "gridset",
    "title": "applies to",
    "content": ". | unit baseunit with a Point value type | parameter or literal size is with a Point value type | parameter or literal offset is with a Point value type | valuetype with a Point value type of the group CanBeDomainUnit | . ",
    "url": "/docs/gridset.html#applies-to",
    
    "relUrl": "/docs/gridset.html#applies-to"
  },"1331": {
    "doc": "gridset",
    "title": "conditions",
    "content": "The values-unit of the baseunit, size and offset argument must match. ",
    "url": "/docs/gridset.html#conditions",
    
    "relUrl": "/docs/gridset.html#conditions"
  },"1332": {
    "doc": "gridset",
    "title": "be aware",
    "content": "The evaluation of a gridset, like the baseunit is executed when the meta/scheme information is generated in the geodms-gui. If for this evaluation (large) primary files are read, this becomes times consuming. Expanding tree items in the treeview becomes slow. Therefor we advice to use the contents of large primary data file (or complex calculations) as little as possible in configuring gridsets. If multiple geographic-grid-domain are needed, use the range function with arguments that might result from primary data and a gridset with arguments not dependent on primary data (see example 2). The variable arguments of the range are not part of the meta/scheme information and do not influence the speed in expanding tree items in the GUI. ",
    "url": "/docs/gridset.html#be-aware",
    
    "relUrl": "/docs/gridset.html#be-aware"
  },"1333": {
    "doc": "gridset",
    "title": "example",
    "content": "unit&lt;fpoint&gt; rdc_m := range(fpoint, point(300000f,0f), point(625000f,280000f)) ,  label = \"rijksdriehoekmeting in meters\"; 1. unit&lt;spoint&gt; rdc_100 := range(       gridset(           rdc_m          ,point(  -100f,   100f, rdc_m)          ,point(625000f, 10000f, rdc_m)          ,spoint       )       ,point(   0s,    0s)       ,point(3250s, 2700s)    ); 2. unit&lt;ipoint&gt; ahn_tiles_gridset := gridset( point_rd ,point(-0.5[m], 0.5[m], point_rd) ,point(0f, 0f, point_rd) ,ipoint ); unit&lt;ipoint&gt; ahn_tile_I:= range( ahn_tiles_gridset ,point(bbox/y_max, bbox/x_min, point_rd)[ahn_tiles_gridset] ,point(bbox/y_max, bbox/x_min, point_rd)[ahn_tiles_gridset] + point(nr_rows_int32, nr_cols_int32, ahn_tiles_gridset) ); . ",
    "url": "/docs/gridset.html#example",
    
    "relUrl": "/docs/gridset.html#example"
  },"1334": {
    "doc": "gridset",
    "title": "gridset",
    "content": "unit-functions gridset . ",
    "url": "/docs/gridset.html",
    
    "relUrl": "/docs/gridset.html"
  },"1335": {
    "doc": "group-by-in-table",
    "title": "related issues",
    "content": ". | issue: 790 | . ",
    "url": "/docs/group-by-in-table.html#related-issues",
    
    "relUrl": "/docs/group-by-in-table.html#related-issues"
  },"1336": {
    "doc": "group-by-in-table",
    "title": "group-by-in-table",
    "content": "recent-developments: Group by in Table . A first implementation of the Group by functionality is introduced in version 7.175. This makes it possible to aggregate/group by data directly in the table. The Group by tool can be applied on one or multiple columns, by selecting these columns in the table and activating the tool. The Group by columns are coloured in a palette from green to grey. Other columns are aggregated with a default aggregation type. With the Aggregate By pop up menu option another aggregation type can be chosen. ",
    "url": "/docs/group-by-in-table.html",
    
    "relUrl": "/docs/group-by-in-table.html"
  },"1337": {
    "doc": "gt",
    "title": "syntax",
    "content": ". | gt(a, b) | a &gt; b | . ",
    "url": "/docs/gt.html#syntax",
    
    "relUrl": "/docs/gt.html#syntax"
  },"1338": {
    "doc": "gt",
    "title": "definition",
    "content": "gt(a, b) or a &gt; b results in a boolean data-item indicating if the values of data item a are *greater than ** the corresponding values of data item *b. ",
    "url": "/docs/gt.html#definition",
    
    "relUrl": "/docs/gt.html#definition"
  },"1339": {
    "doc": "gt",
    "title": "description",
    "content": "Each comparison with missing values results in the value false. ",
    "url": "/docs/gt.html#description",
    
    "relUrl": "/docs/gt.html#description"
  },"1340": {
    "doc": "gt",
    "title": "applies to",
    "content": "Data items with Numeric, string or bool value-type . ",
    "url": "/docs/gt.html#applies-to",
    
    "relUrl": "/docs/gt.html#applies-to"
  },"1341": {
    "doc": "gt",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be compared to data items of any domain). | argument must have matching: . | value-type | metric | . | . ",
    "url": "/docs/gt.html#conditions",
    
    "relUrl": "/docs/gt.html#conditions"
  },"1342": {
    "doc": "gt",
    "title": "example",
    "content": "1. attribute&lt;bool&gt; AgtB (CDomain) := gt(A, B); 2. attribute&lt;bool&gt; AgtB (CDomain) := A &gt; B; . | A | B | AgeB | . | 0 | 0 | False | . | 1 | 2 | False | . | 2.5 | 2.5 | False | . | -100 | 100 | False | . | 999 | -999 | True | . | null | 0 | False | . | null | null | False | . | 0 | null | False | . | null | 100 | False | . | 100 | null | False | . CDomain, nr of rows = 10 . ",
    "url": "/docs/gt.html#example",
    
    "relUrl": "/docs/gt.html#example"
  },"1343": {
    "doc": "gt",
    "title": "see also",
    "content": ". | ge | . ",
    "url": "/docs/gt.html#see-also",
    
    "relUrl": "/docs/gt.html#see-also"
  },"1344": {
    "doc": "gt",
    "title": "gt",
    "content": "ordering-functions greater than (&gt;) . ",
    "url": "/docs/gt.html",
    
    "relUrl": "/docs/gt.html"
  },"1345": {
    "doc": "gt_or_rhs_null",
    "title": "syntax",
    "content": ". | gt_or_rhs_null(a,b) | . ",
    "url": "/docs/gt_or_rhs_null.html#syntax",
    
    "relUrl": "/docs/gt_or_rhs_null.html#syntax"
  },"1346": {
    "doc": "gt_or_rhs_null",
    "title": "definition",
    "content": "gt_or_rhs_null(a, b) results in a boolean data-item indicating if the values of data item a are greater than the corresponding values of data item b or if the values of data item a are null. ",
    "url": "/docs/gt_or_rhs_null.html#definition",
    
    "relUrl": "/docs/gt_or_rhs_null.html#definition"
  },"1347": {
    "doc": "gt_or_rhs_null",
    "title": "description",
    "content": "The comparison with missing values in data item a results in the value True (except for null values in data item b). ",
    "url": "/docs/gt_or_rhs_null.html#description",
    
    "relUrl": "/docs/gt_or_rhs_null.html#description"
  },"1348": {
    "doc": "gt_or_rhs_null",
    "title": "applies to",
    "content": "Data items with Numeric, string or bool value-type . ",
    "url": "/docs/gt_or_rhs_null.html#applies-to",
    
    "relUrl": "/docs/gt_or_rhs_null.html#applies-to"
  },"1349": {
    "doc": "gt_or_rhs_null",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be compared to data items of any domain). | argument must have matching: . | value-type | metric | . | . ",
    "url": "/docs/gt_or_rhs_null.html#conditions",
    
    "relUrl": "/docs/gt_or_rhs_null.html#conditions"
  },"1350": {
    "doc": "gt_or_rhs_null",
    "title": "example",
    "content": "attribute&lt;bool&gt; AgtB(CDomain) := gt_or_rhs_null(A, B); . | A | B | AgtB | . | 0 | 0 | False | . | 1 | 2 | False | . | 2.5 | 2.5 | False | . | -100 | 100 | False | . | 999 | -999 | True | . | null | 0 | False | . | null | null | False | . | 0 | null | True | . | null | 100 | False | . | 100 | null | True | . CDomain, nr of rows = 10 . ",
    "url": "/docs/gt_or_rhs_null.html#example",
    
    "relUrl": "/docs/gt_or_rhs_null.html#example"
  },"1351": {
    "doc": "gt_or_rhs_null",
    "title": "see also",
    "content": ". | gt | . ",
    "url": "/docs/gt_or_rhs_null.html#see-also",
    
    "relUrl": "/docs/gt_or_rhs_null.html#see-also"
  },"1352": {
    "doc": "gt_or_rhs_null",
    "title": "gt_or_rhs_null",
    "content": "ordering-functions greater than or right side has null values . ",
    "url": "/docs/gt_or_rhs_null.html",
    
    "relUrl": "/docs/gt_or_rhs_null.html"
  },"1353": {
    "doc": "gui-options-dialog",
    "title": "dialog",
    "content": "The GUI Options dialog can be activated from the Settings main menu option. The following options can be set: . TreeView . | Show hidden items: tree-item can be configured to be hidden in the tree (by configuring the property: isHidden = “True”). If so configured, the option Show hidden items shows or hide these items in the treeview. | Show state colors: By activating this option, colors are used in the TreeView to indicate the status of a tree item. Colors can be selected for the three mentioned statuses. | . Map View . | Background color: The background color (by default white) for the map-view can be set here. | Default classification ramp colors: for default classifications in the Map View, a color ramp is used for which a start and end color can be set. | . Table/Statistics View . | Show thousand separator: A thousand separator in numbers can be set to make (large) numbers easier to read. | . ",
    "url": "/docs/gui-options-dialog.html#dialog",
    
    "relUrl": "/docs/gui-options-dialog.html#dialog"
  },"1354": {
    "doc": "gui-options-dialog",
    "title": "gui-options-dialog",
    "content": "user-guide-geodms-gui - GUI Options dialog . ",
    "url": "/docs/gui-options-dialog.html",
    
    "relUrl": "/docs/gui-options-dialog.html"
  },"1355": {
    "doc": "gui-scripting",
    "title": "gui-scripting",
    "content": "Available gui scripting commands: . | SendApp | SendMain | SendFocus | SendActiveDmsControl | WmCopyActiveDmsControl | DefaultView | ActivateItem | miExportViewPorts | Expand | ExpandAll | ExpandRecursive | ShowDetailPage | SaveDetailPage | miDatagridView | miHistogramView | CascadeSubWindows | TileSubWindows | SaveValueInfo | . requested: . | Goto cell in table | Activate ValueInfo (for active cell in table) | Select Range of Cells | Copy active range to clipboard | . ",
    "url": "/docs/gui-scripting.html",
    
    "relUrl": "/docs/gui-scripting.html"
  },"1356": {
    "doc": "gui-update",
    "title": "Updating current TreeItem",
    "content": "| . Prototype (to be tested) . | EventLog | Options Window | . thumb|GeoDMSGui preview . Busy . | EventLog colors for: error, warning, message, other? | . Todo . | Overall style of GUI | Store users GUI layout in registry | . Feature request . | Mouse 4 and 5 for previous and next TreeItem | Button for releasing selection | Source code editor in GUI evaluating code real-time (Visual Studio IntelliSense-like) | Make clicking on lines in Mapview easier (points, polygons work fine). | Remove specific recently opened files. | Graphs | . Known issues . | (solved) Visually the wrong item is selected when jumping to an item | . Related mantis issues . 0000146, 0000050, 0000187, 0000101, 0000162, 0000112, 0000042 0000282 . ",
    "url": "/docs/gui-update.html#updating-current-treeitem",
    
    "relUrl": "/docs/gui-update.html#updating-current-treeitem"
  },"1357": {
    "doc": "gui-update",
    "title": "gui-update",
    "content": "Completed . | Add GeoDMSGui icons, symbols and font? | TableView | MapView | Update DetailPages, create custom writer to have easier parsing at ImGui side. | Multiple TreeItem update | DetailPages | Current Item Bar | Jump to Item | Treeview | Backend (glfw+opengl) | ",
    "url": "/docs/gui-update.html",
    
    "relUrl": "/docs/gui-update.html"
  },"1358": {
    "doc": "hoe-worden-afstanden-berekend-over-een-wegennetwerk",
    "title": "maak een verbonden netwerk",
    "content": "Om afstanden te berekenen over een netwerk, moet dit verbonden zijn. Met verbonden wordt bedoeld dat herkomst (vaak woningen) en bestemmingslocaties (vaak voorzieningen) via een link aan een wegennetwerk verbonden zijn. De eerste stap in het berekenen van afstanden is daarom dat de herkomst en bestemmingslocaties worden gekoppeld met het bestaande wegennetwerk, geïllustreerd door het volgende voorbeeld : . [ netwerk1.jpg](File:Afs_netwerk1.jpg \"wikilink\") . figuur 1: woonlokaties, voorzieningen, wegen en water . In figuur 1 geven de zwarte huisjes de locaties van woningen aan. De voorzieningen worden gepresteerd door rode vlaggetjes. De zwarte lijnen tonen de wegsegmenten. Voor iedere woning en voorziening wordt een verbinding gemaakt naar het dichtstbijzijnde wegsegment, resulterend in het volgend figuur (zie de connect functie): . [ netwerk2.jpg](File:Afs_netwerk2.jpg \"wikilink\") . figuur 2: verbonden netwerk van woningen, voorzieningen en wegsegmenten . ",
    "url": "/docs/hoe-worden-afstanden-berekend-over-een-wegennetwerk.html#maak-een-verbonden-netwerk",
    
    "relUrl": "/docs/hoe-worden-afstanden-berekend-over-een-wegennetwerk.html#maak-een-verbonden-netwerk"
  },"1359": {
    "doc": "hoe-worden-afstanden-berekend-over-een-wegennetwerk",
    "title": "bereken afstanden over een verbonden netwerk",
    "content": "Met dit verbonden netwerk kunnen afstanden worden berekend van ieder punt naar ieder ander punt. Afstanden worden berekend door de som van de afstanden van af te leggen segmenten bij elkaar op te tellen, zie de volgende figuur: . [ netwerk3.jpg](File:Afs_netwerk3.jpg \"wikilink\") . figuur 3: af te leggen segmenten voor de kortste route van bestemming A naar voorziening B. De afstand van A naar B wordt berekend door de som van het aantal meters te nemen van de af te leggen vijf wegsegmenten (zie de dijkstra functies) . ",
    "url": "/docs/hoe-worden-afstanden-berekend-over-een-wegennetwerk.html#bereken-afstanden-over-een-verbonden-netwerk",
    
    "relUrl": "/docs/hoe-worden-afstanden-berekend-over-een-wegennetwerk.html#bereken-afstanden-over-een-verbonden-netwerk"
  },"1360": {
    "doc": "hoe-worden-afstanden-berekend-over-een-wegennetwerk",
    "title": "hoe-worden-afstanden-berekend-over-een-wegennetwerk",
    "content": " ",
    "url": "/docs/hoe-worden-afstanden-berekend-over-een-wegennetwerk.html",
    
    "relUrl": "/docs/hoe-worden-afstanden-berekend-over-een-wegennetwerk.html"
  },"1361": {
    "doc": "how-to-configure-a-coordinate-system",
    "title": "examples",
    "content": "The following examples shows how to configure the Dutch coordinate system (Rijksdriehoekmeting): . Until 8.7.0 the format property was used instead of SpatialReference. 1) default order of Y, X in point functions, see xy-order: . unit&lt;float32&gt; m := baseunit('m', float32); unit&lt;fpoint&gt; point_rd_base :  DialogData  = \"ngr_layer\" ,  SpatialReference = \"EPSG:28992\"; unit&lt;fpoint&gt; point_rd := range(point_rd_base, point(300000[m],0[m]), point(625000[m],280000[m])); . 2) X, Y order in point functions, see xy-order: . unit&lt;float32&gt; m := baseunit('m', float32); unit&lt;fpoint&gt; point_rd_base :  DialogData  = \"ngr_layer\" ,  SpatialReference = \"EPSG:28992\"; unit&lt;fpoint&gt; point_rd := range(point_rd_base, point(0[m],300000[m]), point(280000[m],625000[m])); . explanation . Three units are configured: . | m: a baseunit for items with as metric: meter. The coordinates in the Rijksdriehoekmeting are expressed in meters. | point_rd_base: the coordinate sytem base unit. The SpatialReference property for this unit refers to EPSG:28992, the EPSG code for the Rijksdriehoekmeting. This SpatialReference property is in use for descriptive purposes and can be used for coordinate transformations. The DialogData property for this unit refers to the background layer, in the case a background-layer. | point_rd: the coordinate system unit configured with an expression, defining the range of allowed values. The first argument of this range function refers to the coordinate system base unit, relating the set of allowed values to the coordinate system used, in this case: Rijksdriehoekmeting. | . If coordinate systems are configured in this way, vector-data with point_rd as values-unit for it’s feature-attribute and grid-data related to point_rd can be combined in the same map view. The GeoDMS supports operators-and-functions for coordinate conversions, especially from and to coordinates in the Rijksdriehoekmeting, see geometric-functions. ",
    "url": "/docs/how-to-configure-a-coordinate-system.html#examples",
    
    "relUrl": "/docs/how-to-configure-a-coordinate-system.html#examples"
  },"1362": {
    "doc": "how-to-configure-a-coordinate-system",
    "title": "how-to-configure-a-coordinate-system",
    "content": "geography coordinate-system are configured with a set of related unit. ",
    "url": "/docs/how-to-configure-a-coordinate-system.html",
    
    "relUrl": "/docs/how-to-configure-a-coordinate-system.html"
  },"1363": {
    "doc": "how-to-model",
    "title": "project",
    "content": "A GeoDMS project usually consists of: . | (a set of) configuration files | source data | documentation | . ",
    "url": "/docs/how-to-model.html#project",
    
    "relUrl": "/docs/how-to-model.html#project"
  },"1364": {
    "doc": "how-to-model",
    "title": "configuration files",
    "content": "The GeoDMS uses a configuration language to configure source data, calculation steps, visualisation styles, export settings and relevant descriptive information. This information is stored in configuration-file. ",
    "url": "/docs/how-to-model.html#configuration-files",
    
    "relUrl": "/docs/how-to-model.html#configuration-files"
  },"1365": {
    "doc": "how-to-model",
    "title": "declarative language",
    "content": "The GeoDMS configuration language is a declarative language. This means you configure what needs to be calculated and how the results needs to be presented. How calculations are performed in an efficient way is encapsulated in the implementation of each operators-and-functions that can be configured in an expression. ",
    "url": "/docs/how-to-model.html#declarative-language",
    
    "relUrl": "/docs/how-to-model.html#declarative-language"
  },"1366": {
    "doc": "how-to-model",
    "title": "topics",
    "content": ". | configuration-basics | unit | data-source | numeric-data-type | expression | geography | relational-model-versus-semantic-arrays | template | classification | visualisation-style | export | naming-conventions | value-type | folders-and-placeholders | property | . ",
    "url": "/docs/how-to-model.html#topics",
    
    "relUrl": "/docs/how-to-model.html#topics"
  },"1367": {
    "doc": "how-to-model",
    "title": "how-to-model",
    "content": "Modelling in GeoDMS terms is the process of writing/editing a (set of) configuration file(s). In these files usually data-source is read and expression are configured. The geodms-gui can be used as a tool in developing your model. It is a good habit to also document your configuration. ",
    "url": "/docs/how-to-model.html",
    
    "relUrl": "/docs/how-to-model.html"
  },"1368": {
    "doc": "id",
    "title": "syntax",
    "content": ". | id(domain-unit) | . ",
    "url": "/docs/id.html#syntax",
    
    "relUrl": "/docs/id.html#syntax"
  },"1369": {
    "doc": "id",
    "title": "definition",
    "content": "id(domain unit) results in an attribute with the index-numbers of the domain unit domain unit. This domain unit argument is both domain unit and values-unit of the resulting attribute. ",
    "url": "/docs/id.html#definition",
    
    "relUrl": "/docs/id.html#definition"
  },"1370": {
    "doc": "id",
    "title": "description",
    "content": "An id(domain unit, relation) function is not implemented. Use the cumulate function to calculate index numbers per partitioning. ",
    "url": "/docs/id.html#description",
    
    "relUrl": "/docs/id.html#description"
  },"1371": {
    "doc": "id",
    "title": "applies to",
    "content": ". | unit with value-type of the group CanBedomain unit | . ",
    "url": "/docs/id.html#applies-to",
    
    "relUrl": "/docs/id.html#applies-to"
  },"1372": {
    "doc": "id",
    "title": "example",
    "content": "unit&lt;uint32&gt; Region: NrofRows = 5; attribute&lt;Region&gt; idRegion (Region) := id(Region); . | idRegion | . | 0 | . | 1 | . | 2 | . | 3 | . | 4 | . domain Region, nr of rows = 5 . ",
    "url": "/docs/id.html#example",
    
    "relUrl": "/docs/id.html#example"
  },"1373": {
    "doc": "id",
    "title": "id",
    "content": "relational-functions id . ",
    "url": "/docs/id.html",
    
    "relUrl": "/docs/id.html"
  },"1374": {
    "doc": "iif",
    "title": "syntax",
    "content": ". | iif(condition, then, else) | condition ? then : else | . ",
    "url": "/docs/iif.html#syntax",
    
    "relUrl": "/docs/iif.html#syntax"
  },"1375": {
    "doc": "iif",
    "title": "definition",
    "content": "iif(condition, then, else) or condition ? then : else results in a data-item with the result of the subexpression then if the condition is true and of else if the condition is false. ",
    "url": "/docs/iif.html#definition",
    
    "relUrl": "/docs/iif.html#definition"
  },"1376": {
    "doc": "iif",
    "title": "description",
    "content": "The iif function results in a data item with the same domain-unit and values-unit as the subexpressions then and else. iif statements can be nested, but it is advised to use the switchcase function for nested statements. In the evaluation of an iif function, both then and else subexpressions are calculated. Use an indirect-expression if the calculation of one of both subexpressions is time consuming or illogical. ",
    "url": "/docs/iif.html#description",
    
    "relUrl": "/docs/iif.html#description"
  },"1377": {
    "doc": "iif",
    "title": "applies to",
    "content": ". | condition data item with bool value-type | subexpressions then and else | . ",
    "url": "/docs/iif.html#applies-to",
    
    "relUrl": "/docs/iif.html#applies-to"
  },"1378": {
    "doc": "iif",
    "title": "conditions",
    "content": ". | The domain unit of condition, subexpressions then and else and the resulting data item must match or be void (literals or parameter can be combined with data items of any domain). | The values unit of subexpressions then and else and the resulting data item must match. | . ",
    "url": "/docs/iif.html#conditions",
    
    "relUrl": "/docs/iif.html#conditions"
  },"1379": {
    "doc": "iif",
    "title": "example",
    "content": "1. attribute&lt;float32&gt; iifAgteB (ADomain) := iif(A &gt;= B, 1f, 0f); 2. attribute&lt;float32&gt; iifAgteB (ADomain) := A &gt;= B ? 1f : 0f; . | A(float32) | B(float32) | iifAgteB | . | 0 | 2 | 0 | . | 1 | 2 | 0 | . | 2 | 2 | 1 | . | 3 | 2 | 1 | . | null | 2 | 0 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/iif.html#example",
    
    "relUrl": "/docs/iif.html#example"
  },"1380": {
    "doc": "iif",
    "title": "see also",
    "content": ". | switchcase | . ",
    "url": "/docs/iif.html#see-also",
    
    "relUrl": "/docs/iif.html#see-also"
  },"1381": {
    "doc": "iif",
    "title": "iif",
    "content": "logical-functions iif ( ? : ) . ",
    "url": "/docs/iif.html",
    
    "relUrl": "/docs/iif.html"
  },"1382": {
    "doc": "imgui",
    "title": "alpha version",
    "content": "Together with GeoDMS version 8.7.0 an Alpha version of this new GUI became available, see: https://github.com/ObjectVision/GeoDMS/releases/tag/v8.7.0 . From 8.7.0 each GeoDMS release also contains a new version of this ImGui, with new functions and improvements. ",
    "url": "/docs/imgui.html#alpha-version",
    
    "relUrl": "/docs/imgui.html#alpha-version"
  },"1383": {
    "doc": "imgui",
    "title": "beta version",
    "content": "For the development of the beta version, see the project: https://github.com/orgs/ObjectVision/projects/4 . ",
    "url": "/docs/imgui.html#beta-version",
    
    "relUrl": "/docs/imgui.html#beta-version"
  },"1384": {
    "doc": "imgui",
    "title": "imgui",
    "content": ". In 2022 we started the development of a new geodms-gui. This new GUI is not longer developed in Delphi, but like the geodms-engine in C++, using the dear ImGui GUI library. Somes issues related to Delphi (like the flickering views) were difficult to solve, the ImGui library offers many interesting functions for improving the current GUI. ",
    "url": "/docs/imgui.html",
    
    "relUrl": "/docs/imgui.html"
  },"1385": {
    "doc": "impedance-additional",
    "title": "additional notes",
    "content": ". | Filtering with cut or limit is an essential tool for limiting the computation effort when modelling network flow due to local traffic with many origins and destinations. The implementation only processes localized data per OrgZone when such filtering is applied, making the computation time per OrgZone independent of the network size after initial initialization. For example, the processing of 4000 PC4 zones (both Origin and Destination) on the OpenStreetMap network of the Netherlands with boundary extensions took 10 minutes when cut was set to 1800[sec], resulting in an OD set of 750.000 pairs, thus approximately an average of 175 destinations per origin (of the 4000 potential destinations), whereas processing all od-pairs took several hours. The generation of Link_flow (Network Assignment) from the 4000 PC4 origins to all 5.000.000 nodes as destinations with a cut of 5 minutes took approximately 1 minute to produce. See: | one can model constrained supply by iteratively adjusting wj with Cjßj-1 with ßj as the supply elasticity parameter. | one can model a congested network equilibrium by iterative application of the network assignment by implementing a feedback loop (http://en.wikipedia.org/wiki/Transportation_forecasting) on the link impedances. | by assigning a heterogeneous set of transport users (mode, income, trip purpose, etc.) in slices of, say 10% per slice, one can also obtain a balanced load of the network and the choice of startPoints. | by using shortcuts for interactions between many small zones and larger cuts for interactions between a smaller number of larger zones, one can obtain a balanced load of the network within a reasonable amount of computation time. | one can generate route counts per link with interaction(v_i,w_j,dist_decay,OrgZone_alpha):D_i,C_j,Link_flow by setting vi = wj = ai = 1.0 and γ= 0.0. The resulting Di and Cj are total route counts per origin and destination. | one can generate link counts per od-pair with alternative(link_impedance):alt_imp by providing 1.0 as alternative link impedance | . ",
    "url": "/docs/impedance-additional.html#additional-notes",
    
    "relUrl": "/docs/impedance-additional.html#additional-notes"
  },"1386": {
    "doc": "impedance-additional",
    "title": "Alonso’s General Theory of Movements (GTM)",
    "content": "see: Alonso’s General Theory of Movement: Advances in Spatial Interaction Modeling, de Vries, Nijkamp and Rietveld. The changed notation can be reverted by applying the following rewrite rules: Tij -&gt; Mij; Fij-&gt;tij; Oi -&gt; Mix; Dj -&gt; Mxj; Ai -&gt; Di-1; Bj -&gt; Cj-1;Vi -&gt; vi; Wj -&gt; wj;cij -&gt; dij; γ1 -&gt; γ . ",
    "url": "/docs/impedance-additional.html#alonsos-general-theory-of-movements-gtm",
    
    "relUrl": "/docs/impedance-additional.html#alonsos-general-theory-of-movements-gtm"
  },"1387": {
    "doc": "impedance-additional",
    "title": "see also",
    "content": ". | impedance-general-(formerly-known-as-dijkstra) | impedance-key-entities | impedance-functions | impedance-options | impedance-warning | impedance-interaction-potential | impedance-future | impedance-links | . ",
    "url": "/docs/impedance-additional.html#see-also",
    
    "relUrl": "/docs/impedance-additional.html#see-also"
  },"1388": {
    "doc": "impedance-additional",
    "title": "impedance-additional",
    "content": "network-functions Impedance additional . ",
    "url": "/docs/impedance-additional.html",
    
    "relUrl": "/docs/impedance-additional.html"
  },"1389": {
    "doc": "impedance-example-origin-to-nearest-destination",
    "title": "syntax",
    "content": ". | impedance_table(bidirectional;startPoint(Node_rel), Impedance, Network/F1, Network/F2, nr_destnode); | . ",
    "url": "/docs/impedance-example-origin-to-nearest-destination.html#syntax",
    
    "relUrl": "/docs/impedance-example-origin-to-nearest-destination.html#syntax"
  },"1390": {
    "doc": "impedance-example-origin-to-nearest-destination",
    "title": "definition",
    "content": "This example describes how a impedance-functions can be used to calculate the impedance per origin to the nearest destination. The function results in an attribute with the values-unit of the impedance argument and the domain-unit of the nodeset used. This variant requires four arguments: . | impedance: a data-item with the impedance of the links in the linkset; | F1: relation to the first node of a linkset; | F2: relation to the last node of a linkset; | nr_destnode: relation to the destination node in the destination domain unit. | . ",
    "url": "/docs/impedance-example-origin-to-nearest-destination.html#definition",
    
    "relUrl": "/docs/impedance-example-origin-to-nearest-destination.html#definition"
  },"1391": {
    "doc": "impedance-example-origin-to-nearest-destination",
    "title": "description",
    "content": "The function results in an impedance for the nodes in the nodeset. Use the lookup function to relate these impedances to a set of destinations (see example). ",
    "url": "/docs/impedance-example-origin-to-nearest-destination.html#description",
    
    "relUrl": "/docs/impedance-example-origin-to-nearest-destination.html#description"
  },"1392": {
    "doc": "impedance-example-origin-to-nearest-destination",
    "title": "options",
    "content": "Different options are available for this impedance variant. They are configured with extra options in the first argument, for instance: . | flow calculations: Use as first argument: ‘bidirectional;startPoint(Node_rel);node:TraceBack’. The function now also results in an attribute named: traceback, indicating for each node which link brings it back one step further back towards the nearest start node, used to calculate flows. | directed graph: The option bidirectional in the first argument is used to apply the dijkstra algorithm in an undirected graph. All links can be traversed in both directions. Use as first argument: ‘directed;startPoint(Node_rel); for directed graphs. | maximum impedance: A maximum impedance can be configured if distances above a threshold are not relevant for instance to increase the calculation speed. To configure a maximum impedance, configure as first argument: ‘bidirectional;startPoint(Node_rel);cut(OrgZone_max_imp)’ and as fifth argument a parameter with the values unit of the impedance argument and the cut value. All resulting values for the nodeset above the maximum impedance will get the maximum value for the value type of the impedance argument. | . ",
    "url": "/docs/impedance-example-origin-to-nearest-destination.html#options",
    
    "relUrl": "/docs/impedance-example-origin-to-nearest-destination.html#options"
  },"1393": {
    "doc": "impedance-example-origin-to-nearest-destination",
    "title": "applies to",
    "content": ". | data item impedance with float32 or float64 value-type | data items F1, F2 and nr_destnode with unit32 value type | . ",
    "url": "/docs/impedance-example-origin-to-nearest-destination.html#applies-to",
    
    "relUrl": "/docs/impedance-example-origin-to-nearest-destination.html#applies-to"
  },"1394": {
    "doc": "impedance-example-origin-to-nearest-destination",
    "title": "conditions",
    "content": "The domain-unit of attributes impedance, F1 and F2 must match. ",
    "url": "/docs/impedance-example-origin-to-nearest-destination.html#conditions",
    
    "relUrl": "/docs/impedance-example-origin-to-nearest-destination.html#conditions"
  },"1395": {
    "doc": "impedance-example-origin-to-nearest-destination",
    "title": "since version",
    "content": "7.115 . ",
    "url": "/docs/impedance-example-origin-to-nearest-destination.html#since-version",
    
    "relUrl": "/docs/impedance-example-origin-to-nearest-destination.html#since-version"
  },"1396": {
    "doc": "impedance-example-origin-to-nearest-destination",
    "title": "example",
    "content": "attribute&lt;meter&gt; dist_nodeset (nodeset):= impedance_table(        'bidirectional;startPoint(node_rel)'       , LinkSet/length       , Network/F1       , Network/F2       , destnoder_rel    ); attribute&lt;meter&gt; distance (origin) := dist_nodeset[network/OrgNode_rel]; . | length | F1 | F2 | . | 92.66 | 8 | 7 | . | 88.72 | 1 | 4 | . | 190.76 | 16 | 15 | . | 79.42 | 2 | 3 | . | 131.01 | 5 | 4 | . | 63.08 | 6 | 7 | . | 56.50 | 9 | 10 | . | 119.52 | 12 | 11 | . | 220.47 | 14 | 15 | . | 180.79 | 18 | 20 | . | 610.39 | 19 | 17 | . | 18.67 | 3 | 0 | . | 782.38 | 4 | 11 | . | 909.26 | 7 | 1 | . | 688.6 | 10 | 3 | . | 26.78 | 11 | 13 | . | 2161.49 | 13 | 17 | . | 2048.6 | 15 | 10 | . | 41.71 | 20 | 21 | . | 137.24 | 17 | 20 | . domain linkset, nr of rows = 19 . | destnoder_rel | . | 14 | . | 6 | . | 2 | . | 9 | . domain Destination, nr of rows = 4 . | dist_nodeset | . | 98.09 | . | 972.34 | . | 0 | . | 79.43 | . | 1061.05 | . | 1192.06 | . | 0 | . | 63.08 | . | 155.74 | . | 824.54 | . | 768.03 | . | 1843.44 | . | 1962.96 | . | 1870.21 | . | 0 | . | 220.47 | . | 411.23 | . | 610.39 | . | 928.43 | . | 0 | . | 747.63 | . | 789.34 | . domain nodeset, nr of rows = 21 . | distance | . | 0 | . | 1962.96 | . | 824.54 | . | 928.43 | . | 1192.06 | . domain origin, nr of rows = 5 . ",
    "url": "/docs/impedance-example-origin-to-nearest-destination.html#example",
    
    "relUrl": "/docs/impedance-example-origin-to-nearest-destination.html#example"
  },"1397": {
    "doc": "impedance-example-origin-to-nearest-destination",
    "title": "impedance-example-origin-to-nearest-destination",
    "content": "network-functions Impedance example: origin to nearest destination . ",
    "url": "/docs/impedance-example-origin-to-nearest-destination.html",
    
    "relUrl": "/docs/impedance-example-origin-to-nearest-destination.html"
  },"1398": {
    "doc": "impedance-functions",
    "title": "phased out variants",
    "content": ". | dijkstra_s(…) to be replaced by impedance_table(…) | dijkstra_m(…) to be replaced by impedance_matrix(…) | dijkstra_m64(…) to be replaced by impedance_matrix_od64(…) | . ",
    "url": "/docs/impedance-functions.html#phased-out-variants",
    
    "relUrl": "/docs/impedance-functions.html#phased-out-variants"
  },"1399": {
    "doc": "impedance-functions",
    "title": "see also",
    "content": ". | impedance-general-(formerly-known-as-dijkstra) | impedance-key-entities | impedance-options | impedance-warning | impedance-interaction-potential | impedance-additional | impedance-future | impedance-links | . ",
    "url": "/docs/impedance-functions.html#see-also",
    
    "relUrl": "/docs/impedance-functions.html#see-also"
  },"1400": {
    "doc": "impedance-functions",
    "title": "impedance-functions",
    "content": "network-functions Impedance functions . There are three preferred Impedance operations: . | impedance_table(…): when all given startPoints have to be considered as a single origin zone, resulting in: . | an attribute DstZone-&gt;Impedance with the lowest route Impedance per destination zone. | optional attributes as sub-items depending on the used options. | so the result is a table with for each origin the impedance to the nearest destination. | . | impedance_matrix(…) when startPoints can relate to multiple origin zones, resulting in . | a unit&lt;uint32&gt; reflecting the set of all or all found od-pairs | optional attributes as sub-items depending on the used options. | . | impedance_matrix_od64(…), similar to impedance_matrix_od(…), but resulting in a unit&lt;uint64&gt; in order to accommodate more than $2^{32} − 2$ od-pairs. | . All these operations require at least the following four arguments: . | options : {∅} → String, a String parameter indicating function options, described below. | impedance : Link → Impedance, a Measure (Float32 or Float64) attribute of Links with the Impedance per Link. | f1 : Link → Node, a Node attribute of Link indicating the from node of each link. | f2 : Link → Node, a Node attribute of Link indicating the to node of each link. | . Note that Impedance functions can run different OrgZones in parallel, up to the number of cores of the running machine, as their tree growth is independent. This does not affect impedance_table, as that only grows one tree. ",
    "url": "/docs/impedance-functions.html",
    
    "relUrl": "/docs/impedance-functions.html"
  },"1401": {
    "doc": "impedance-future",
    "title": "possible extensions",
    "content": ". | Log-logistic distance decay: d -&gt; 1/(1+ea+blnd) = 1 / (1+eadb). | . ",
    "url": "/docs/impedance-future.html#possible-extensions",
    
    "relUrl": "/docs/impedance-future.html#possible-extensions"
  },"1402": {
    "doc": "impedance-future",
    "title": "possible speedup optimizations",
    "content": ". | Parallel processing of different OrgZones, as most time is now spent in growing trees, which can be done per origin zone separately, a speedup factor is expected close to the number of available cores. | Pre-processing, overview: http://algo2.iti.kit.edu/schultes/hwy/dynamic.pdf using: . | highway hierarchies along the lines of http://algo2.iti.kit.edu/schultes/hwy/distTable.pdf, and http://algo2.iti.kit.edu/schultes/hwy/esaHwyHierarchiesSlides.pdf | edge reduction | transit node routing and separators | A* methods, geometric containment and goal direction search, useful only for individual OD-pairs. | . | . ",
    "url": "/docs/impedance-future.html#possible-speedup-optimizations",
    
    "relUrl": "/docs/impedance-future.html#possible-speedup-optimizations"
  },"1403": {
    "doc": "impedance-future",
    "title": "see also",
    "content": ". | impedance-general-(formerly-known-as-dijkstra) | impedance-key-entities | impedance-functions | impedance-options | impedance-warning | impedance-interaction-potential | impedance-additional | impedance-links | . ",
    "url": "/docs/impedance-future.html#see-also",
    
    "relUrl": "/docs/impedance-future.html#see-also"
  },"1404": {
    "doc": "impedance-future",
    "title": "impedance-future",
    "content": "network-functions Impedance future . ",
    "url": "/docs/impedance-future.html",
    
    "relUrl": "/docs/impedance-future.html"
  },"1405": {
    "doc": "impedance-general-(formerly-known-as-dijkstra)",
    "title": "Dijkstra algorithm",
    "content": "The dijkstra algorithm determines the minimum impedance of the routes through a network/graph of nodes and links with given link-impedance for each combination of given origins and destinations. ",
    "url": "/docs/impedance-general-(formerly-known-as-dijkstra).html#dijkstra-algorithm",
    
    "relUrl": "/docs/impedance-general-(formerly-known-as-dijkstra).html#dijkstra-algorithm"
  },"1406": {
    "doc": "impedance-general-(formerly-known-as-dijkstra)",
    "title": "Impedance functions in the GeoDMS",
    "content": "In the GeoDMS a impedance-functions is implemented using this algorithm to find the minimum impedance in a network/graph. These functions are used to calculate shortest paths in directed/bidirectional graphs, OD matrices, and multiple impedances, with or without filters. The user can filter the set of origin-destination combinations (further: od-pairs) in two ways: . | by setting a maximum impedance (per origin) and/or | a maximum amount of visited destination mass per origin. | . Furthermore, the user can specify the production of additional results per origin, destination, link, or od-pair such as: . | the specification of an alternative link impedance measure, to be aggregated over the found routes. | interaction results: trip generation, distribution, and network flow assignment, following Alonso’s Theory of Movements. | . Origin and destination zones can be specified as a set of start points or endpoints that relate to the network nodes with an optional additional impedance per start point and/or endpoint. When no od-pair-related output is requested, the memory usage remains proportional to the memory size of the given network and calculation time remains proportional to the number of actually visited nodes (plus some initialization time proportional to the size of the network). ",
    "url": "/docs/impedance-general-(formerly-known-as-dijkstra).html#impedance-functions-in-the-geodms",
    
    "relUrl": "/docs/impedance-general-(formerly-known-as-dijkstra).html#impedance-functions-in-the-geodms"
  },"1407": {
    "doc": "impedance-general-(formerly-known-as-dijkstra)",
    "title": "see also",
    "content": ". | impedance-key-entities | impedance-functions | impedance-options | impedance-warning | impedance-interaction-potential | impedance-additional | impedance-future | impedance-links | . ",
    "url": "/docs/impedance-general-(formerly-known-as-dijkstra).html#see-also",
    
    "relUrl": "/docs/impedance-general-(formerly-known-as-dijkstra).html#see-also"
  },"1408": {
    "doc": "impedance-general-(formerly-known-as-dijkstra)",
    "title": "impedance-general-(formerly-known-as-dijkstra)",
    "content": "network-functions Impedance general . ",
    "url": "/docs/impedance-general-(formerly-known-as-dijkstra).html",
    
    "relUrl": "/docs/impedance-general-(formerly-known-as-dijkstra).html"
  },"1409": {
    "doc": "impedance-interaction-potential",
    "title": "interaction potential",
    "content": "In order to get tij and Mij, the calculated interaction potential and trip flow per od-pair, one can recalculate them from the results available from od:impedance,OrgZone_rel,DstZone_rel . | When no alternative link impedance is given, define it as an extra sub-item of the resulting od-pair unit: | . attribute&lt;float32&gt; t_ij := impedance &gt;= 1e+38f ? 0f : distDecay == 0f   ? 1f   : impedance^-distDecay; . Note that tij &gt;=max_dist only for od-pairs without available route, which only appears in results when no filtering option was used. If filtering was used and it is known that distDecay is non-zero, the above can be simplified to . attribute&lt;float32&gt; t_ij := impedance^-distDecay; . | When alternative(link_imp):alt_imp is used, use: | . attribute&lt;float32&gt; t_ij := !IsDefined(alt_imp)    ? 0f    : distDecay == 0f       ? 1f       : alt_imp^-distDecay; . When OrgZone_min or DstZone_min were specified, replace the last impedance measure (impedance or alt_imp) by . | max_elem(impedance, min_imp[OrgZone_rel]) when min_imp is given per origin zone, | max_elem(impedance, min_imp[DstZone_rel]) when min_imp is given per destination zone, or just | max_elem(impedance, min_imp) when it is a single value parameter, applied for all od-pairs. | . The Mij can then be calculated with . attribute&lt;float32&gt; M_ij := D_i[OrgZone_rel] &lt;= 0f ? 0f : t_ij * D_i[OrgZone_rel]^(demand_alpha - 1.0f); . if the demand for each zone i is assumed to be inelastic, i.e. demand_alpha == 0f, this can be simplified to . attribute&lt;float32&gt; M_ij := D_i[OrgZone_rel] &lt;= 0f   ? 0f   : t_ij * (1f / D_i)[OrgZone_rel]; . ",
    "url": "/docs/impedance-interaction-potential.html#interaction-potential",
    
    "relUrl": "/docs/impedance-interaction-potential.html#interaction-potential"
  },"1410": {
    "doc": "impedance-interaction-potential",
    "title": "see also",
    "content": ". | impedance-general-(formerly-known-as-dijkstra) | impedance-key-entities | impedance-functions | impedance-options | impedance-warning | impedance-additional | impedance-future | impedance-links | . ",
    "url": "/docs/impedance-interaction-potential.html#see-also",
    
    "relUrl": "/docs/impedance-interaction-potential.html#see-also"
  },"1411": {
    "doc": "impedance-interaction-potential",
    "title": "impedance-interaction-potential",
    "content": "network-functions Impedance interaction potential . ",
    "url": "/docs/impedance-interaction-potential.html",
    
    "relUrl": "/docs/impedance-interaction-potential.html"
  },"1412": {
    "doc": "impedance-key-entities",
    "title": "see also",
    "content": ". | impedance-general-(formerly-known-as-dijkstra) | impedance-functions | impedance-options | impedance-warning | impedance-interaction-potential | impedance-additional | impedance-future | impedance-links | . ",
    "url": "/docs/impedance-key-entities.html#see-also",
    
    "relUrl": "/docs/impedance-key-entities.html#see-also"
  },"1413": {
    "doc": "impedance-key-entities",
    "title": "impedance-key-entities",
    "content": "Key entities of the argument and results of the Impedance functions are: . Node: a set of abstract locations, connected by links. In graph theory a node is often called a vertex. Link: a set of connections between nodes identified by two mappings, f1 : Link → Node, and f2 : Link → Node indicating the start and end node for each link.In graph theory a link is often called an edge . OrgZone: a set of origins . DstZone: a set of destinations . startPoint: a set of combinations of origins and nodes (thus allowing multiple nodes per origin and multiple origins per node). endPoint: a set of combinations of destinations and nodes (thus allowing multiple nodes per destination and multiple destinations per node). Depending on the given arguments, it may well be that these entities are not distinctive, for example, OrgZone may be equal to DstZone. Relevant values-unit are: . Impedance: a non-negative numerical expression of travel resistance for which comparison and addition make sense. Impedance2: a non-negative numerical expression of an alternative travel resistance for which addition makes sense. If no alternative impedance is given, Impedance2 is set equal to Impedance. Mass: a non-negative numerical expression of OrgZone-related demand or DstZone-related supply . ",
    "url": "/docs/impedance-key-entities.html",
    
    "relUrl": "/docs/impedance-key-entities.html"
  },"1414": {
    "doc": "impedance-links",
    "title": "links",
    "content": ". | For a discussion of Alonso’s General Theory of Movements (GTM), see: . | Alonso’s General Theory of Movement: Advances in Spatial Interaction Modeling, de Vries, Nijkamp and Rietveld. The changed notation can be reverted by applying the following rewrite rules:Tij → Mij; Fij → tij; Oi → Mix; Dj → Mxj; Ai → Di−1; Bj → Cj−1; Vi → vi; Wj → wj; cij → dij; γ1 → γ | . | more basic (and contrived) examples can be found in the GeoDMS test project, more specifically: in the Network section of: operator/cfg/operator.dms . | . ",
    "url": "/docs/impedance-links.html#links",
    
    "relUrl": "/docs/impedance-links.html#links"
  },"1415": {
    "doc": "impedance-links",
    "title": "see also",
    "content": ". | impedance-general-(formerly-known-as-dijkstra) | impedance-key-entities | impedance-functions | impedance-options | impedance-warning | impedance-interaction-potential | impedance-additional | impedance-future | . ",
    "url": "/docs/impedance-links.html#see-also",
    
    "relUrl": "/docs/impedance-links.html#see-also"
  },"1416": {
    "doc": "impedance-links",
    "title": "impedance-links",
    "content": "network-functions Impedance links . ",
    "url": "/docs/impedance-links.html",
    
    "relUrl": "/docs/impedance-links.html"
  },"1417": {
    "doc": "impedance-obsolete-dijkstra-directed",
    "title": "syntax",
    "content": ". | dijkstra_directed(impedance: LinkSet-&gt;Measure, F1: LinkSet-&gt;NodeSet, F2: LinkSet-&gt;NodeSet, startNodes: startNode-&gt;NodeSet) | . ",
    "url": "/docs/impedance-obsolete-dijkstra-directed.html#syntax",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra-directed.html#syntax"
  },"1418": {
    "doc": "impedance-obsolete-dijkstra-directed",
    "title": "definition",
    "content": "The dijkstra_directed function is a variant of the impedance-obsolete-dijkstra. It is used to apply the Dijkstra algorithm in a directed graph. impedance are calculated taken into account the direction of the links. The F1 argument defines the start index number for each link, the F2 argument the end index-numbers. To apply the dijkstra algorithm in an undirected graph, use the dijkstra obsolete: dijkstra. ",
    "url": "/docs/impedance-obsolete-dijkstra-directed.html#definition",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra-directed.html#definition"
  },"1419": {
    "doc": "impedance-obsolete-dijkstra-directed",
    "title": "description",
    "content": "Undirected links in a directed graph should be added twice to the linkset, in both directions. The connect function to add new nodes to the network is at the moment not supported for directed graphs. Previous users have partially surpassed this problem by first connecting to an undirected version of the graph before directing the graph for the dijkstra_directed function. ",
    "url": "/docs/impedance-obsolete-dijkstra-directed.html#description",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra-directed.html#description"
  },"1420": {
    "doc": "impedance-obsolete-dijkstra-directed",
    "title": "impedance-obsolete-dijkstra-directed",
    "content": "network-functions obsolete: dijkstra_directed . Starting from GeoDMS version 7.115, a new set of dijkstra functions replace the ones described below. The documentation of the old versions is still available for backward compatibility, the old functions will become obsolete in future versions. ",
    "url": "/docs/impedance-obsolete-dijkstra-directed.html",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra-directed.html"
  },"1421": {
    "doc": "impedance-obsolete-dijkstra-od",
    "title": "syntax",
    "content": ". | dijkstra_od(link_impedance,link_node1_rel, lin_node2_rel, originloc_node_rel, originloc_impedance, originloc_origin_rel,destloc_node, destloc_impedance, destloc_dest_rel) . | dijkstra_od_maxdist(link_impedance,link_node1_rel, lin_node2_rel,originloc_node_rel, originloc_impedance, originloc_origin_rel,destloc_node, destloc_impedance, destloc_dest_rel,origin_impedance_max) . | . ",
    "url": "/docs/impedance-obsolete-dijkstra-od.html#syntax",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra-od.html#syntax"
  },"1422": {
    "doc": "impedance-obsolete-dijkstra-od",
    "title": "definition",
    "content": "The dijkstra_od functions apply the dijkstra algorithm to calculate the shortest network impedance from a set of origin points to a set of destination points.The result is an O(rigin) D(estination) matrix, in Dutch: Herkomst/Bestemmingsmatrix. | dijkstra_od(link_impedance,link_node1_rel, lin_node2_rel,originloc_node_rel, originloc_impedance, originloc_origin_rel,destloc_node, destloc_impedance, destloc_dest_rel) | . or . | dijkstra_od_maxdist(link_impedance,link_node1_rel, lin_node2_rel,originloc_node_rel, originloc_impedance, originloc_origin_rel,destloc_node, destloc_impedance, destloc_dest_rel,origin_impedance_max) | . with: . | link_impedance: a data-item with the impedance of the links of a linkset; link_node1_rel: a relation to the first node of a link set; | link_node2_rel: a relation to the last node of a link set; . | originloc_node_rel: a relation to the origin nodes; | originloc_impedance: start impedance for each origin, from the startpoint to the startnode; | originloc_origin_rel: a relation to each origin; . | destloc_node: a relation to destination node; | destloc_impedance: end impedance for each destination, from the endnode to the end point; | destloc_dest_rel: a relation to each destination; . | origin_impedance_max: maximum impedance for the resulting sparse matrix of od_pairs | . ",
    "url": "/docs/impedance-obsolete-dijkstra-od.html#definition",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra-od.html#definition"
  },"1423": {
    "doc": "impedance-obsolete-dijkstra-od",
    "title": "description",
    "content": "To apply any dijkstra function, first configure a nodeset (based on the origin and destination points) and a linkset (based on the segments in an arc set, usually with roads). These variants of the dijkstra function result in a new domain-unit with a subitem called impedance. This subitem indicates the impedance from each origin point towards each destination point. The values-unit is the values unit of the three impedance argument. The cardinality of the new domain unit is the product of the cardinality of the origin and destination domain units. The relations the to origin(originn_nr) and destination(destination_nr) domain units can be configured with the expression presented in the example. ",
    "url": "/docs/impedance-obsolete-dijkstra-od.html#description",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra-od.html#description"
  },"1424": {
    "doc": "impedance-obsolete-dijkstra-od",
    "title": "applies to",
    "content": ". | attribute impedance_link, impedance_origin and impedance_destination with float32 or float64 value-type | attributes F1, F2, nr_originnode, nr_destnode, indexnumber_origin and indexnumber_destination with uint32 value type | . ",
    "url": "/docs/impedance-obsolete-dijkstra-od.html#applies-to",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra-od.html#applies-to"
  },"1425": {
    "doc": "impedance-obsolete-dijkstra-od",
    "title": "conditions",
    "content": ". | The domain unit of arguments impedance_link, F1 and F2 must match. | The domain unit of arguments nr_originnode, impedance_origin and indexnumber_origin must match. | The domain unit of arguments nr_destnode, impedance_destination and indexnumber_destination must match. | The values unit of arguments impedance_link, impedance_origin and impedance_destination must match. | . ",
    "url": "/docs/impedance-obsolete-dijkstra-od.html#conditions",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra-od.html#conditions"
  },"1426": {
    "doc": "impedance-obsolete-dijkstra-od",
    "title": "since version",
    "content": "5.95 . ",
    "url": "/docs/impedance-obsolete-dijkstra-od.html#since-version",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra-od.html#since-version"
  },"1427": {
    "doc": "impedance-obsolete-dijkstra-od",
    "title": "example",
    "content": "unit&lt;uint32&gt; od := dijkstra_od(dist, F1, F2 , nr_OrgNode, const(0, ODomain, m), id(ODomain) , nr_DestNode, const(0, DDomain, m), id(DDomain) ); // replace this obsolete syntax to unit&lt;uint32&gt; odd := dijkstra_m( 'bidirectional;startPoint(Node_rel);endPoint(Node_rel);od:impedance ,OrgZone_rel,DstZone_rel , dist , F1 , F2 , network/nr_OrgNode , network/nr_DestNode ) { attribute&lt;ODomain&gt; originn_nr := id(OD) / #DDomain; attribute&lt;DDomain&gt; destination_rel := mod(id(OD) , #DDomain); } . | dist | F1 | F2 | . | 713.44 | 9 | 10 | . | 907.33 | 0 | 3 | . | 1913.96 | 3 | 19 | . | 1907.31 | 19 | 26 | . | .. | .. | .. | . | .. | .. | .. | . domain Linkset, nr of rows = 34 . | nr_orgnode | . | 22 | . | 17 | . | 14 | . | 29 | . | 8 | . domain ODomain, nr of rows = 5 . | nr_destnode | . | 22 | . | 13 | . | 6 | . | 30 | . domain Destination, nr of rows = 4 . | Impedance | origin_nr | destination_nr | . | 0 | 0 | 0 | . | 5093.28 | 0 | 1 | . | 5596.24 | 0 | 2 | . | 5410 | 0 | 3 | . | 5896.14 | 1 | 0 | . | 1383.17 | 1 | 1 | . | 5272.83 | 1 | 2 | . | 5086.39 | 1 | 3 | . | 4901.69 | 2 | 0 | . | 3775.21 | 2 | 1 | . | 1393.9 | 2 | 2 | . | 4091.94 | 2 | 3 | . | 6181.57 | 3 | 0 | . | 5055.09 | 3 | 1 | . | 5558.26 | 3 | 2 | . | 1457.7 | 3 | 3 | . | 5956.03 | 4 | 0 | . | 1443.05 | 4 | 1 | . | 5332.71 | 4 | 2 | . | 5146.27 | 4 | 3 | . domain OD, nr of rows = 20 . ",
    "url": "/docs/impedance-obsolete-dijkstra-od.html#example",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra-od.html#example"
  },"1428": {
    "doc": "impedance-obsolete-dijkstra-od",
    "title": "impedance-obsolete-dijkstra-od",
    "content": "network-functions obsolete: Dijkstra OD . Starting from GeoDMS version 7.115, a new set of dijkstra functions replace the ones described below. The documentation of the old versions is still available for backward compatibility, the old functions will become obsolete in future versions. ",
    "url": "/docs/impedance-obsolete-dijkstra-od.html",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra-od.html"
  },"1429": {
    "doc": "impedance-obsolete-dijkstra",
    "title": "syntax",
    "content": ". | dijkstra(impedance: LinkSet-&gt;Measure, F1: LinkSet-&gt;NodeSet, F2: LinkSet-&gt;NodeSet, startNodes: startNode-&gt;NodeSet) | . ",
    "url": "/docs/impedance-obsolete-dijkstra.html#syntax",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra.html#syntax"
  },"1430": {
    "doc": "impedance-obsolete-dijkstra",
    "title": "definition",
    "content": "The dijkstra(impedance, F1, F2, startNodes) function results in the minimum impedance for each node with which a route is available from any of the given startNodes through a network that is defined by the dual link to node relations: F1 and F2. For this, the dijkstra algorithm is applied. To apply the dijkstra function, first configure a nodeset (based on the origin and destination points) and a linkset (usually based on the segments in an arc set, usually with roads). The dijkstra function requires four argument: . | impedance: a data-item with the impedance of the links in the linkset; | F1: relation to the first node of a link set; | F2: relation to the last node of a link set; | nr_destnode: relation to the destination node in the destination domain unit. | . ",
    "url": "/docs/impedance-obsolete-dijkstra.html#definition",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra.html#definition"
  },"1431": {
    "doc": "impedance-obsolete-dijkstra",
    "title": "description",
    "content": "The function results in an impedance for the nodes in the nodeset. Use the lookup function to relate these impedances to a set of destinations (see example). The dijkstra function result also contains a subitem] named traceback which indicates for each node which link brings it back one step further back towards the nearest start-node. This traceback item can be used to calculate a flow. Use the trace_back function for this purpose. The dijkstra function is used to apply the dijkstra algorithm in a undirected graph. All links can be traversed in both directions. Use the dijkstra_directed function for directed graphs. ",
    "url": "/docs/impedance-obsolete-dijkstra.html#description",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra.html#description"
  },"1432": {
    "doc": "impedance-obsolete-dijkstra",
    "title": "applies to",
    "content": ". | data item impedance with float32 or float64 value-type | data items F1, F2 and nr_destnode with unit32 value type | . ",
    "url": "/docs/impedance-obsolete-dijkstra.html#applies-to",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra.html#applies-to"
  },"1433": {
    "doc": "impedance-obsolete-dijkstra",
    "title": "conditions",
    "content": "The domain units of attributes impedance, F1 and F2 must match. ",
    "url": "/docs/impedance-obsolete-dijkstra.html#conditions",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra.html#conditions"
  },"1434": {
    "doc": "impedance-obsolete-dijkstra",
    "title": "example",
    "content": "attribute&lt;meter&gt; dist_nodeset (nodeset) := dijkstra(dist ,F1 ,F2, DestNode_rel); // replace this obsolete syntax for the new dijkstra functions to: // dijkstra_s( // 'bidirectional;startPoint(Node_rel);node:TraceBack' // , LinkSet/length, Network/F1, Network/F2, destnoder_rel // ) attribute&lt;meter&gt; distance (origin) := dist_nodeset[network/OrgNode_rel]; . | length | F1 | F2 | . | 92.66 | 8 | 7 | . | 88.72 | 1 | 4 | . | 190.76 | 16 | 15 | . | 79.42 | 2 | 3 | . | 131.01 | 5 | 4 | . | 63.08 | 6 | 7 | . | 56.50 | 9 | 10 | . | 119.52 | 12 | 11 | . | 220.47 | 14 | 15 | . | 180.79 | 18 | 20 | . | 610.39 | 19 | 17 | . | 18.67 | 3 | 0 | . | 782.38 | 4 | 11 | . | 909.26 | 7 | 1 | . | 688.6 | 10 | 3 | . | 26.78 | 11 | 13 | . | 2161.49 | 13 | 17 | . | 2048.6 | 15 | 10 | . | 41.71 | 20 | 21 | . | 137.24 | 17 | 20 | . domain linkset, nr of rows = 19 . | destnoder_rel | . | 14 | . | 6 | . | 2 | . | 9 | . domain destination, nr of rows = 4 . | dist_nodeset | . | 98.09 | . | 972.34 | . | 0 | . | 79.43 | . | 1061.05 | . | 1192.06 | . | 0 | . | 63.08 | . | 155.74 | . | 824.54 | . | 768.03 | . | 1843.44 | . | 1962.96 | . | 1870.21 | . | 0 | . | 220.47 | . | 411.23 | . | 610.39 | . | 928.43 | . | 0 | . | 747.63 | . | 789.34 | . domain nodeset, nr of rows = 21 . | distance | . | 0 | . | 1962.96 | . | 824.54 | . | 928.43 | . | 1192.06 | . domain origin, nr of rows = 5 . ",
    "url": "/docs/impedance-obsolete-dijkstra.html#example",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra.html#example"
  },"1435": {
    "doc": "impedance-obsolete-dijkstra",
    "title": "impedance-obsolete-dijkstra",
    "content": "*network-functions obsolete: dijkstra * . Starting from GeoDMS version 7.115, a new set of dijkstra functions replace the ones described below. The documentation of the old versions is still available for backward compatibility, the old functions will become obsolete in future versions. ",
    "url": "/docs/impedance-obsolete-dijkstra.html",
    
    "relUrl": "/docs/impedance-obsolete-dijkstra.html"
  },"1436": {
    "doc": "impedance-options",
    "title": "options specification",
    "content": "The options parameter indicates how to calculate routes, which additional argument are given and which results are to be produced. Each section is separated by a ‘;’, starts with a label and indicates comma-separated extra arguments between ‘(‘ and ‘)’. Optional results are specified by name after a ‘:’. All sections, extra arguments and products must be specified in the order of the following description. All labels and names are case-sensitive and no intermediate spaces are allowed. ",
    "url": "/docs/impedance-options.html#options-specification",
    
    "relUrl": "/docs/impedance-options.html#options-specification"
  },"1437": {
    "doc": "impedance-options",
    "title": "link direction",
    "content": "The first section is obligatory and indicates the allowed traversal direction of each link (directed versus indirected graphs). It can be: . | directed: only routes from a start point to an endpoint that traverses each link forward from node f1 to node f2 are considered and not vice versa. | bidirectional: also backward traversal is considered through each link, from node f2 to node f1. | bidirectional(link_flag): indicates an additional argument Link → Bool, a boolean attribute of Link, that indicates for each link if it is to be considered as bidirectional. False indicates forward traversal only. | . ",
    "url": "/docs/impedance-options.html#link-direction",
    
    "relUrl": "/docs/impedance-options.html#link-direction"
  },"1438": {
    "doc": "impedance-options",
    "title": "startPoints",
    "content": "The optional startPoint(Node_rel,impedance,OrgZone_rel):max_imp specifies a set of origin zones. options: - the **Node_rel**, optional for **impedance_matrix_od**, indicates the presence of an additional argument: startPoint → Node, a Node attribute of startPoint in order to select a subset of nodes as startPoints. Required for the **impedance_table** function. Default: when omitted with the **impedance_matrix** function, all Nodes are considered as startPoints and **startPoint** := **Node**. - the optional **impedance** indicates the presence of an additional argument: startPoint → Impedance, as departure impedance attribute of startPoint, useful mainly when origin zones contain multiple startPoints with specific departure impedances. Default value when omitted: zero. - the **OrgZone_rel**, optional for **impedance_matrix** and not allowed for **impedance_table**, indicates the presence of an additional argument: startPoint → OrgZone, an origin zone attribute of startPoint, in order to define multiple startPoints per origin zone. The default for the **impedance_matrix** function when omitted: all startPoints are considered as separate origin zones. This option is not allowed with the **impedance_table**, where all startPoints are assumed to belong to the same origin zone. - the optional **max_imp**, indicates the production of a [subitem](subitem) OrgZone → Imp, an Imp attribute of OrgZone, named **MaxImp** that contains the maximum impedance for each OrgZone for all connected DstZones. This is especially useful in combination with the **limit(OrgZone_max_mass,DstZone_mass)** option with which one can produce the distance to the n-th unit of a DstZone specific quantity. When all Nodes are considered as separate OrgZones, one can specify **startPoints:max_imp**. This option is available in GeoDMS 7.168 and later versions. - when no additional arguments are indicated, this section should be omitted; **startPoint()** is a non-allowed syntax. - when no startPoints are specified (not allowed with **impedance_matrix_s**), all Nodes are considered as separate origin zones. ",
    "url": "/docs/impedance-options.html#startpoints",
    
    "relUrl": "/docs/impedance-options.html#startpoints"
  },"1439": {
    "doc": "impedance-options",
    "title": "endPoints",
    "content": "The optional endPoint(Node_rel,impedance,DstZone_rel) specifies a set of destination zones. options: - the optional **Node_rel** indicates the presence of an additional argument **endPoint → Node**, a Node attribute of endPoint in order to select a subset of nodes as endPoints. Default: all Nodes are considered as separate endPoints - the optional **impedance** indicates the presence of an additional argument **endPoint → MeasureType**, an arrival impedance attribute of endPoint, useful mainly for when Destination Zones contain multiple endPoints. - the optional **DstZone_rel** indicates the presence of an additional argument **endPoint → DstZone**, a destination zone per endPoint, in order to define multiple endPoints per DstZone. Default: each endPoint is considered as a separate destination. - when no additional arguments are indicated, this section should be omitted; **endPoint()** is a non-allowed syntax. - when no endPoints are specified, all Nodes are considered as separate destination zones. ",
    "url": "/docs/impedance-options.html#endpoints",
    
    "relUrl": "/docs/impedance-options.html#endpoints"
  },"1440": {
    "doc": "impedance-options",
    "title": "filters",
    "content": "Optional filters can be applied to limit the resulting set. options: - The optional **cut(OrgZone_max_imp)** specifies that a maximum route impedance will limit the route search, which requires an additional argument: OrgZone → Impedance, an impedance attribute of the origin zones or a single impedance limit parameter that is applied for all origin zones. - The optional **limit(OrgZone_max_mass,DstZone_mass)** specifies that a maximum amount of destinations per origin zone will limit the route development, which requires two additional arguments: - **OrgZone → Mass or {∅} → Mass** (must have the same [value-type](value-type) as **Impedance**), a Mass attribute of OrgZone or a single Mass parameter, that sets a maximum on the amount of Mass to be reached at the DstZones. - **DstZone → Mass or {∅} → Mass** (must have the same value type as **Impedance**), a Mass attribute of DstZone or a single Mass parameter, that indicates a Mass for each DstZone, which is accumulated until the limit is reached for each OrgZone. ",
    "url": "/docs/impedance-options.html#filters",
    
    "relUrl": "/docs/impedance-options.html#filters"
  },"1441": {
    "doc": "impedance-options",
    "title": "euclidean distance filter",
    "content": "The optional euclid(maxSqrDist) specifies the maximum Euclean search distance for destinations. The specified parameter is the search distance squared. ",
    "url": "/docs/impedance-options.html#euclidean-distance-filter",
    
    "relUrl": "/docs/impedance-options.html#euclidean-distance-filter"
  },"1442": {
    "doc": "impedance-options",
    "title": "alternative impedance",
    "content": "The optional alternative(link_imp):alt_imp specifies that an alternative link impedance is to be used to calculate an impedance per od-pair for further use in the interaction potential calculation. options: - This requires an additional argument: **Links → Impedance2**, an alternative impedance per link, where Impedance2 must have the same value type as the original impedance, but may have a different [metric](metric). - the optional product **alt_imp** indicates the production of an Impedance2 attribute of the resulting od-pair entity named **alt_imp** with the total alternative impedance of the found routes for each od-pair. - when this section is omitted, the original Impedance is used in the interaction calculation and the unit Impedance2 is set to be equal to Impedance. - when no filtering applies, some od-pairs may represent combinations without connecting routes. The impedance is MAX_VALUE&lt;ImpType&gt; there but the alt_imp is [null](null) there. Both values will not be taken into account in an interaction distribution. ",
    "url": "/docs/impedance-options.html#alternative-impedance",
    
    "relUrl": "/docs/impedance-options.html#alternative-impedance"
  },"1443": {
    "doc": "impedance-options",
    "title": "interaction",
    "content": "The optional interaction(OrgZone_min,DstZone_min,v_i,w_j,dist_decay,dist_logit(alpha,beta,gamma),OrgZone_alpha): D_i,M_ix,C_j,M_xj,Link_flow indicates the application of a free or origin constrained interaction model following the thoughts and notation of Alonso’s General Theory of Movement (GTM) with a fixed supply elasticity per destination of 1 (thus βj = 1.0; no constraint on the destination side). Based on De Vries, Nijkamp &amp; Rietveld (2000). theory: This describes the theory of a free or origin-constrained interaction model following the thoughts and notation of Alonso's General Theory of Movement (GTM) with a fixed supply elasticity per destination of 1 (thus $β_j = 1.0$; no constraint on the destination side). - $M_{ij} = (v_i \\\\cdot w_j \\\\cdot t_{ij}) / D_i^{α-1}$ in which: - $M_{ij}$ = potential interaction between i and j - $v_i$ = trip generation weight per origin - $w_j$ = trip distribution weight per destination - $t_{ij}$ = facility of movement between i and j - $t_{ij} = d_{ij}^{-γ}$, in case of a normal distance decay specification. - $t_{ij} = (1+exp(alpha)⋅d_{ij}^{beta}⋅exp(d_{ij})^{gamma})^{−1}$, in case of a log-logistic distance decay specification. - $d_{ij}$ = impedance (e.g. distance or travel time) from i to j - $γ$ = distance decay factor, and in the case of the log-logistic specification there are the $alpha$, $beta$, and $gamma$ parameters. Summations: - $D_i = \\\\sum\\\\limits_{j} w_j \\\\cdot t_{ij}$ - $M_{ix} = v_i \\\\cdot\\\\ D_i^α = \\\\sum\\\\limits_{j} v_i \\\\cdot w_j \\\\cdot t_{ij} \\\\cdot D_i^{α-1}$ = summation of decayed impedances from origin $i$. - $C_j = \\\\sum\\\\limits_{i} v_i \\\\cdot t_{ij} \\\\cdot D_i^{(α-1)}$ - $M_{xj} = w_j \\\\cdot C_j$ = summation of decayed impedances to destination $j$. - $LF_l = \\\\sum\\\\limits_{l \\\\in i \\\\rightarrow j} v_i \\\\cdot w_j \\\\cdot t_{ij} \\\\cdot D_i^{α-1}$ = link flow over link $l$. options: - impedance within the interaction is alt_imp if defined. The first impedance is used for route decisions, while the alt impedance will be used to aggregate the interaction calculations. - the optional **OrgZone_min** indicates an additional argument: **OrgZone → Impedance2**, which can also be a single value ([void](void)), indicating a minimum (alternative) impedance to be used for each destination to avoid infinite auto interaction potential for each origin. The default value is 0. - the optional **DstZone_min** indicates an additional argument: **DstZone → Impedance2**, which can also be a single value, indicating a minimum (alternative) impedance to be used for each origin to a void infinite auto interaction potential for each destination. The default value is 0. - From this we define the distance measure to be $d_{ij} := max(impedance_{ij}, OrgZone min_i, DstZone min_j)$. - the obligatory **v_i** indicates an additional argument: **OrgZone → Mass** which can also be a single value, indicating a trip generation weight per origin, aka *v**i*. The value type should match the value type of the impedance. - the obligatory $w_j$ indicates an additional argument: **DstZone → Mass** which can also be a single value, indicating a trip distribution weight per destination, aka $w_j$. The value type should match the value type of the impedance. - the optional **dist_decay** indicates an additional argument *gamma* : Float64 that indicates the rate of distance decay. The used interaction potential $t_{ij}$ is calculated as $t_{ij} := d_{ij}^{−gamma}$. - $gamma = 1.0$ thus indicates $t_{ij} = 1/d_{ij}$ - If no route exists from *i* to *j* (which can be visible in the results when no filtering was applied), $t_{ij}$ is set to 0. - $gamma = 0.0$ indicates $t_{ij} = 1$, even when $d_{ij} ≤ 0$, except when no route exists. - $gamma = − 1.0$ indicates $t_{ij} = d_{ij}$ - when $d_{ij} ≤ 0$ and gamma ≠ 0.0, $t_{ij}$ is set to zero, to avoid incorporating infinite potentials when no minimum impedances nor departure or arrival impedances were specified. Auto-interaction is then excluded but included when gamma = 0.0. - the optional **dist_logit(alpha,beta,gamma)** indicates three additional arguments that can be used to alternatively define $t_{ij}$ as a log-logistic distance decay function of $d_{ij}$: - $t_{ij} := (1+exp(alpha+beta⋅ln(d_{ij})+gamma⋅d_{ij}))^{−1} = (1+exp(alpha)⋅d_{ij}^{beta}⋅exp(d_{ij})^{gamma})^{−1}$ - The value type of all parameters should be float64. - note that either **dist_decay** or **dist_logit(alpha,beta,gamma)** must be specified in an interaction section. - note that we name the parameters by Latin characters instead of Greek characters. Since this alternative definition of $t_{ij}$ uses the same parameter names as in the other interaction definitions. So to avoid confusion, we use the Latin characters for the distance decay parameters. - the optional **OrgZone_alpha** indicates an additional argument: **OrgZone −  &gt; Float64** which can also be a single value, indicating the elasticity of the origin's supply for the number of demand alternatives. $α = 1.0$ indicates an elastic model; $α = 0.0$ indicates a push model with fixed supply $v_i$ per origin. The default value is 0. Calculated products (at least one should be specified): - the optional **D_i**, indicates the production of a subitem **OrgZone → Mass**, a Mass attribute of OrgZone, named D_i, defined as $D_i:= \\\\sum\\\\limits_{j} w_j \\\\cdot t_{ij}$. - the optional **M_ix**, indicates the production of a subitem **OrgZone → Mass**, a Mass attribute of OrgZone, named M_ix, defined as $M_{ix} := v_i \\\\cdot\\\\ D_i^α = \\\\sum\\\\limits_{j} v_i \\\\cdot w_j \\\\cdot t_{ij} \\\\cdot D_i^{(α-1)}$ - Note that when $D_i = 0$, $D_i^α$ and $M_{ix}$ are assumed to be zero, even if $α = 0$, in order to respect the fact that if there is no demand potential at all, it cannot be raised to a set demand whatever the elasticity. - the optional **C_j**, indicates the production of a subitem DstZone → Mass, a Mass attribute of DstZone, named C_j, defined as $C_j := \\\\sum\\\\limits_{i} v_i \\\\cdot t_{ij} \\\\cdot D_i^{(α-1)}$. - the optional **M_xj**, indicates the production of a subitem DstZone → Mass, a Mass attribute of DstZone, named M_xj, defined as $M_{xj}:= w_j \\\\cdot C_j = \\\\sum\\\\limits_{i} v_i \\\\cdot w_j \\\\cdot t_{ij} \\\\cdot D_i^{(α-1)}$. - the optional **Link_flow**, indicates the production of a traffic flow network assignment, a subitem Link → Mass, a Mass attribute of Link, named **Link_flow**, defined as **$LF_l := \\\\sum\\\\limits_{l \\\\in i \\\\rightarrow j} v_i \\\\cdot w_j \\\\cdot t_{ij} \\\\cdot D_i^{(α-1)}$**. ",
    "url": "/docs/impedance-options.html#interaction",
    
    "relUrl": "/docs/impedance-options.html#interaction"
  },"1444": {
    "doc": "impedance-options",
    "title": "traceback production",
    "content": "options: - The optional **node:TraceBack** (only available for **impedance_matrix_s**) produces a subitem TraceBack : Node → Link, a Node attribute of Node, indicating for each node which Link of the grown tree(s) traces back to the origin of startPoint Node(s). For the **impedance_matrix_od** function, producing this info is complicated by the fact that a traceback would be available for each origin. ",
    "url": "/docs/impedance-options.html#traceback-production",
    
    "relUrl": "/docs/impedance-options.html#traceback-production"
  },"1445": {
    "doc": "impedance-options",
    "title": "od-pair specification and attribute production",
    "content": "the optional od:impedance,OrgZone_rel,DstZone_rel,LinkSet, indicates the production of a specific kind of od-paid entity and related attributes. options: - the optional **impedance** indicates the production of a subitem **impedance : OD → Impedance**, an attribute with the lowest route impedance per found od-pair. This impedance includes startPoint(impedance) and endPoint(impedance) but not OrgZone_min nor DstZone_min. - the optional **OrgZone_rel** indicates the production of a subitem **OrgZone_rel : OD → OrgZone**, an attribute with the OrgZone of each od-pair. - the optional **DstZone_rel** indicates the production of a subitem **DstZone_rel : OD → DstZone**, an attribute with the DstZone of each od-pair. - the optional **LinkSet** indicates the production of a subitem **LinkSet : OD → Link-sequence**, an attribute with the sequence of Links of each od-pair route. When no od-pair-related products are requested (including no **alt_imp**), the memory footprint of the operation will be greatly reduced as intermediate potentials and route flows per od-pair are produced per OrgZone and directly aggregated to the OrgZone, DstZone, and/or Link level and no storage is required per od-pair simultaneously for different OrgZones. ",
    "url": "/docs/impedance-options.html#od-pair-specification-and-attribute-production",
    
    "relUrl": "/docs/impedance-options.html#od-pair-specification-and-attribute-production"
  },"1446": {
    "doc": "impedance-options",
    "title": "production of t_ij and M_ij",
    "content": "In order to get $t_{ij}$ and $M_{ij}$, the calculated interaction potential and trip flow per od-pair, one can recalculate them from the results available from od:impedance,OrgZone_rel,DstZone_rel . | When no alternative link impedance is given, defined as an extra subitem of the resulting od-pair unit: | . attribute&lt;float32&gt; t_ij := impedance &gt;= 1e+38f ? 0.0f : distDecay == 0.0f ? 1.0f : impedance^-distDecay; . Note that $t_{ij} &gt;= max_dist$ only for od-pairs without available route, which only appears in results when no filtering option was used. If filtering was used and it is known that distDecay is non-zero, the above can be simplified to . attribute&lt;float32&gt; t_ij := impedance^-distDecay; . | When alternative(link_imp):alt_imp is used, use: | . attribute&lt;float32&gt; t_ij := !IsDefined(alt_imp) ? 0.0f : distDecay == 0.0f ? 1.0f : alt_imp^-distDecay; . | When OrgZone_min or DstZone_min were specified , replace the last impedance measure (impedance or alt_imp) by . | max_elem(impedance, min_imp[OrgZone_rel]) when min_imp is given per origin zone, | max_elem(impedance, min_imp[DstZone_rel]) when min_imp is given per destination zone, or just | max_elem(impedance, min_imp) when it is a single value parameter, applied for all od-pairs. | . | The &lt;/B&gt;Mij&lt;/B&gt; can then be calculated with | . attribute&lt;float32&gt; M_ij := D_i[OrgZone_rel] &lt;= 0.0f ? 0.0f : t_ij*D_i[OrgZone_rel]^(demand_alpha-1.0f); . | if the demand for each zone i is assumed to be inelastic, i.e. demand_alpha == 0f, this can be simplified to | . attribute&lt;float32&gt; M_ij := D_i[OrgZone_rel] &lt;= 0.0f ? 0.0f : t_ij*(1.0f / D_i)[OrgZone_rel]; . An example of this can be found in the operator test configuration at /Network/UnTiled/dijkstra_all_interaction. ",
    "url": "/docs/impedance-options.html#production-of-t_ij-and-m_ij",
    
    "relUrl": "/docs/impedance-options.html#production-of-t_ij-and-m_ij"
  },"1447": {
    "doc": "impedance-options",
    "title": "see also",
    "content": ". | impedance-general-(formerly-known-as-dijkstra) | impedance-key-entities | impedance-functions | impedance-warning | impedance-interaction-potential | impedance-additional | impedance-future | impedance-links | . ",
    "url": "/docs/impedance-options.html#see-also",
    
    "relUrl": "/docs/impedance-options.html#see-also"
  },"1448": {
    "doc": "impedance-options",
    "title": "impedance-options",
    "content": "network-functions Impedance options . ",
    "url": "/docs/impedance-options.html",
    
    "relUrl": "/docs/impedance-options.html"
  },"1449": {
    "doc": "impedance-warning",
    "title": "memory and disk issues",
    "content": "The od variants of the Impedance functions result in a domain-unit that is a subset of the cartesian product of the origin and destination domain units, further: the set of od-pairs. Be aware that this subset could be very large, causing memory and disk issues. Be aware of the cardinality of the resulting domain unit when the result specification includes attributes of the set of od-pairs. For full symmetric od matrices, keep the number of elements of the origin/destination domain units limited (we do have experience with domains of more than 10.000 elements, but calculation time and memory usage for the results increase with the number of od-pairs), use filters to cut the route search, or consider asymmetric variants with a lower number of origin zones. One could also try to avoid storing od-pair related attributes by using the results from available aggregations per origin and/or destination that can be updated during the processing of all destinations for each origin. See also https://github.com/ObjectVision/GeoDMS/issues/514 . ",
    "url": "/docs/impedance-warning.html#memory-and-disk-issues",
    
    "relUrl": "/docs/impedance-warning.html#memory-and-disk-issues"
  },"1450": {
    "doc": "impedance-warning",
    "title": "see also",
    "content": ". | impedance-general-(formerly-known-as-dijkstra) | impedance-key-entities | impedance-functions | impedance-options | impedance-interaction-potential | impedance-additional | impedance-future | impedance-links | . ",
    "url": "/docs/impedance-warning.html#see-also",
    
    "relUrl": "/docs/impedance-warning.html#see-also"
  },"1451": {
    "doc": "impedance-warning",
    "title": "impedance-warning",
    "content": "network-functions Impedance warning . ",
    "url": "/docs/impedance-warning.html",
    
    "relUrl": "/docs/impedance-warning.html"
  },"1452": {
    "doc": "impedance",
    "title": "GeoDMS implementation",
    "content": "The impedance is implemented as a data-item with a set of links as domain-unit and a (additive, non-negative) resistance measure as its values-unit, like meter or second. ",
    "url": "/docs/impedance.html#geodms-implementation",
    
    "relUrl": "/docs/impedance.html#geodms-implementation"
  },"1453": {
    "doc": "impedance",
    "title": "functions",
    "content": "Impedances are argument of the impedance-obsolete-dijkstra. ",
    "url": "/docs/impedance.html#functions",
    
    "relUrl": "/docs/impedance.html#functions"
  },"1454": {
    "doc": "impedance",
    "title": "impedance",
    "content": "The impedance is a resistance measure for travelling a network and/or it’s parts. The impedance can e.g. indicate: . | the distance of the link(s) (the arc_length function can be used to calculate the length af an arc); | the travel time; | the travel costs. | . In Dutch the word reisweerstand is used for impedance. ",
    "url": "/docs/impedance.html",
    
    "relUrl": "/docs/impedance.html"
  },"1455": {
    "doc": "include",
    "title": "syntax",
    "content": "Include statements are not configured as property of tree-item, but as separate statements. Use the keyword include, preceded by a # character and the configuration file, name between the less than(&lt;) and greater than(&gt;) characters for each included file, see example. ",
    "url": "/docs/include.html#syntax",
    
    "relUrl": "/docs/include.html#syntax"
  },"1456": {
    "doc": "include",
    "title": "example",
    "content": "container LandUseAllocationProject {    #include &lt;Units.dms&gt;    #include &lt;Classifications.dms&gt;    #include &lt;SourceData.dms&gt;    #include &lt;ScenarioComponents.dms&gt; } . ",
    "url": "/docs/include.html#example",
    
    "relUrl": "/docs/include.html#example"
  },"1457": {
    "doc": "include",
    "title": "include",
    "content": "To structure a GeoDMS configuration, we advise to organise configuration-file thematically. Logical parts of the configuration unit, classification, geography are configured in separate configuration files. With the Include statement a branch of the tree, stored in a separate configuration file is added to the configuration. The hierarchical structure of the included files need to correspond with the subfolder structure on disk. A configuration file with units, included in the root level of a project configuration, needs to be located in the subfolder with the name of the root configuration file) (excluding the extension .dms). Configuration files at lower levels in the configuration need to be located in subsubfolders. ",
    "url": "/docs/include.html",
    
    "relUrl": "/docs/include.html"
  },"1458": {
    "doc": "index-attribute",
    "title": "index-attribute",
    "content": "An index attribute is an attribute containing as values the ordinal numbers. An index attribute can contain ordinals for the same domain, e.g. often with the id function. It can also contain index numbers of another domain, a so-called relation. ",
    "url": "/docs/index-attribute.html",
    
    "relUrl": "/docs/index-attribute.html"
  },"1459": {
    "doc": "index-numbers",
    "title": "id function",
    "content": "Index numbers can be calculated with the id function. The values-unit of an index number is the domain-unit for which the index numbers are calculated. ",
    "url": "/docs/index-numbers.html#id-function",
    
    "relUrl": "/docs/index-numbers.html#id-function"
  },"1460": {
    "doc": "index-numbers",
    "title": "index-numbers",
    "content": "GeoDMS operations work on arrays that contain the values of an attribute for each element of the domain of that attribute. Each domain element is identified by an ordinal, which identifies the position of the value for that element in each array for that domain. This ordinal can be a number and is then usually zero-based or a (row, col) raster-point identification (or (col, row), depending on the [ConfigPointColRow] setting in the config.ini. By default the GeoDMS uses zero based numbers (both one- and two-dimensional) for index numbers. The start and end position can be overruled with the range function . Index numbers are used in relation. ",
    "url": "/docs/index-numbers.html",
    
    "relUrl": "/docs/index-numbers.html"
  },"1461": {
    "doc": "index",
    "title": "syntax",
    "content": ". | index(a) | . ",
    "url": "/docs/#syntax",
    
    "relUrl": "/docs/#syntax"
  },"1462": {
    "doc": "index",
    "title": "definition",
    "content": "index(a) results in an index attribute based on the sort order of the values in attribute a. If two values are identical in attribute a, the first occurring value receives the lowest index-numbers. ",
    "url": "/docs/#definition",
    
    "relUrl": "/docs/#definition"
  },"1463": {
    "doc": "index",
    "title": "applies to",
    "content": ". | attribute a with Numeric, Point, uint2, uint4, bool or string value-type | . ",
    "url": "/docs/#applies-to",
    
    "relUrl": "/docs/#applies-to"
  },"1464": {
    "doc": "index",
    "title": "examples",
    "content": "1. defining the index . attribute&lt;Region&gt; indexTemp (Region) := index(Temperature); . | Temperature | indexTemp | . | 12 | 2 | . | 11 | 5 | . | null | 1 | . | 11 | 3 | . | 14 | 0 | . | null | 4 | . | 14 | 6 | . domain Region, nr of rows = 7 . 2. using the index to sort an attribute: . attribute&lt;degrees&gt; Temperature_sorted (Region) := Temperature[indexTemp]; . | Temperature | indexTemp | Temperature_sorted | . | 12 | 2 | null | . | 11 | 5 | null | . | null | 1 | 11 | . | 11 | 3 | 11 | . | 14 | 0 | 12 | . | null | 4 | 14 | . | 14 | 6 | 14 | . domain Region, nr of rows = 7 . 3. using index and unique to make a new sorted domain: . unit&lt;uint32&gt; Region: nrofrows = 7 { attribute&lt;degrees&gt; Temperature :[12,11,null,11,14,null,14]; attribute&lt;.&gt; indexTemp := index(Temperature); } unit&lt;uint32v Region_sorted := unique(Region/indexTemp ) { attribute&lt;float32&gt; Temperature:= (Region/Temperature [Region/indexTemp])[values]; } . | Values | Temperature | . | 0 | null | . | 1 | null | . | 2 | 11 | . | 3 | 11 | . | 4 | 12 | . | 5 | 14 | . | 9 | 14 | . domain Region_sorted, nr of rows = 7 . ",
    "url": "/docs/#examples",
    
    "relUrl": "/docs/#examples"
  },"1465": {
    "doc": "index",
    "title": "index",
    "content": "relational-functions index . ",
    "url": "/docs/",
    
    "relUrl": "/docs/"
  },"1466": {
    "doc": "home",
    "title": "features",
    "content": "The GeoDMS has added value in: . | Fast calculations and calculations with large datasets (grid, vector and attribute data) | Scenario analyses, comparisons between multiple alternatives | Modelling with (geographic data): scripting, repeatability, transparency and quality control | Discrete allocation under capacity restrictions, accessibility and network assignments | High resolution mapping | . ",
    "url": "/#features",
    
    "relUrl": "/#features"
  },"1467": {
    "doc": "home",
    "title": "sections",
    "content": "Tools to process the BAG can be downloaded and are documented here. The GeoDMS academy is available to help you learn how to use the GeoDMS. ",
    "url": "/#sections",
    
    "relUrl": "/#sections"
  },"1468": {
    "doc": "home",
    "title": "home",
    "content": "Welcome to the documentation of the GeoDMS. Use the sidebar (at the right) to navigate to the relevant sections of the documentation. The GeoDMS is a software framework for (spatial) modelling, used for: . | Land Use modelling | Accessibility modelling | Energy modelling | Visualisation and projection of target groups | . ",
    "url": "/",
    
    "relUrl": "/"
  },"1469": {
    "doc": "indirect-expression-file-foldername",
    "title": "configuration",
    "content": "container in_direct_expressions { parameter&lt;string&gt; date := '2022'; parameter&lt;bool&gt; isDate2022 := date == '2022'; parameter&lt;string&gt; folder_direct_expression := isDate2022 ? '20220101' : '20230101'; parameter&lt;string&gt; folder_indirect_expression := = isDate2022 ? '''20220101''' : '''20230101'''; unit&lt;uint32&gt; bag_pand_direct_expression : StorageName = \"= 'D:/SourceData/BAG20/snapshots/' + folder_direct_expression + '/pand.fss'\" { attribute&lt;string&gt; identificatie; } unit&lt;uint32&gt; bag_pand_indirect_expression : StorageName = \"= 'D:/SourceData/BAG20/snapshots/' + folder_indirect_expression + '/pand.fss'\" { attribute&lt;string&gt; identificatie; } } . ",
    "url": "/docs/indirect-expression-file-foldername.html#configuration",
    
    "relUrl": "/docs/indirect-expression-file-foldername.html#configuration"
  },"1470": {
    "doc": "indirect-expression-file-foldername",
    "title": "indirect-expression-file-foldername",
    "content": "configuration-examples Indirect expression file/foldername . The following example shows how to configure a direct or indirect-expression to make a foldername, that can be used to read e.g. multiple files from a data source like the BAG. The main difference between the configuration of the item folder_direct_expression versus folder_indirect_expression is that the calculation rule for the folder_indirect_expression is evaluated first to a direct expression, before the actual data is calculated. In the geodms-gui the resulting direct calculation rule is presented, in this case just the string: ‘20220101’. The advantage of the indirect expression is that the then or else part of the if function does not have to be evaluated/calculated as it is not a part of the resulting direct expression anymore. This is mainly an advantage if the calculation of this part is time or memory consuming. ",
    "url": "/docs/indirect-expression-file-foldername.html",
    
    "relUrl": "/docs/indirect-expression-file-foldername.html"
  },"1471": {
    "doc": "indirect-expression",
    "title": "syntax",
    "content": "attribute&lt;bool&gt; total (rdc_100l) := ='or('+asItemList(ggEndogenous/Name)+')'; . An indirect expression always starts with an equals sign (=) character. In these expressions two elements are distinguished: . | fixed, non generated elements, configured between single quotes. In the example the or function will be part of the evaluated expression. | generated elements, that need to result in a string. In the example the function asItemList will be evaluated and the results of this evaluation will be part of the evaluated expression. | . ",
    "url": "/docs/indirect-expression.html#syntax",
    
    "relUrl": "/docs/indirect-expression.html#syntax"
  },"1472": {
    "doc": "indirect-expression",
    "title": "two step processing",
    "content": "An indirect expression is processed in two steps: . | First the indirect expression is evaluated to a direct expression. In the example this evaluation results in the expression: “or(woon_bc, woon_cd,…, agr_kweekerij)”. Evaluated expressions are visible in the geodms-gui, Detail Page &gt; General &gt; CalculationRule. | The direct expression is calculated. | . Indirect expressions are a powerful feature for the configuration of generic modelling logic. But be cautious with the indirect expressions, as they tend to make configurations more difficult to understand and to debug (see also error-tracking-in-indirect-expressions) . ",
    "url": "/docs/indirect-expression.html#two-step-processing",
    
    "relUrl": "/docs/indirect-expression.html#two-step-processing"
  },"1473": {
    "doc": "indirect-expression",
    "title": "use in conditions",
    "content": "Indirect expressions can be used to configure a condition (iif function) with the following advantages: . | In the evaluation of an iif function, both the then and else subexpression are calculated. If an indirect expression is used, the resulting expression will only contain the then or else subexpression, the other statement does not have to be calculated. | Some functions like geodmsversion are session-specific. This means all results of expressions directly or indirectly using the results of an expression in which these functions is used, will not be stored persistently and need to be recalculated each time the application is rerun. | . ",
    "url": "/docs/indirect-expression.html#use-in-conditions",
    
    "relUrl": "/docs/indirect-expression.html#use-in-conditions"
  },"1474": {
    "doc": "indirect-expression",
    "title": "be aware",
    "content": "The evaluation of indirect expressions is executed when the meta/scheme information is generated in the geodms-gui. If for this evaluation (large) primary files are read, this becomes times consuming. Expanding tree items in the treeview becomes slow. Therefor we advice to use the contents of large primary data file (or complex calculations) as little as possible in indirect expressions. ",
    "url": "/docs/indirect-expression.html#be-aware",
    
    "relUrl": "/docs/indirect-expression.html#be-aware"
  },"1475": {
    "doc": "indirect-expression",
    "title": "indirect-expression",
    "content": "In modelling the same modelling logic is often applied to different (sets of) parameters. A model might for instance be calculated for multiple years, regions etc. In these cases you would like to configure the model logic once. For this purpose, the GeoDMS uses the concept of meta modelling, with indirect expression. An indirect expression is defined as an expression in which one or more elements are based on the contents of other items in the configuration. The resulting direct expressions are generated using the indirect expression logic and the items used in the configuration. ",
    "url": "/docs/indirect-expression.html",
    
    "relUrl": "/docs/indirect-expression.html"
  },"1476": {
    "doc": "infeasible-solution",
    "title": "infeasible-solution",
    "content": "A solution is infeasible if it fails to meet all of the constraints of a optimization problem. Therefore it is not a solution. ",
    "url": "/docs/infeasible-solution.html",
    
    "relUrl": "/docs/infeasible-solution.html"
  },"1477": {
    "doc": "inherited_propvalues",
    "title": "syntax",
    "content": ". | Inherited_PropValues(item, property) | Inherited_PropValues(item, attribute) | . ",
    "url": "/docs/inherited_propvalues.html#syntax",
    
    "relUrl": "/docs/inherited_propvalues.html#syntax"
  },"1478": {
    "doc": "inherited_propvalues",
    "title": "definition",
    "content": ". | Inherited_PropValues(item, property) results in a new uint32 domain-unit with a string attribute containing the property values of the direct subitem of the item argument and of all referred items in the namespace. The name of this attribute is the name of the property. | Inherited_PropValues(item, attribute) results in a new uint32 domain unit with a set of string attributes containing multiple property values of the direct subitems of the item argument and of all referred items in the namespace. The names of the resulting attributes are the names of the properties. | . ",
    "url": "/docs/inherited_propvalues.html#definition",
    
    "relUrl": "/docs/inherited_propvalues.html#definition"
  },"1479": {
    "doc": "inherited_propvalues",
    "title": "applies to",
    "content": ". | argument tree-item can be any tree item. | argument property needs to be a valid property name, the list of all properties can be found here. | argument attribute needs to a string data-item. | . ",
    "url": "/docs/inherited_propvalues.html#applies-to",
    
    "relUrl": "/docs/inherited_propvalues.html#applies-to"
  },"1480": {
    "doc": "inherited_propvalues",
    "title": "since version",
    "content": "7.102 . ",
    "url": "/docs/inherited_propvalues.html#since-version",
    
    "relUrl": "/docs/inherited_propvalues.html#since-version"
  },"1481": {
    "doc": "inherited_propvalues",
    "title": "example",
    "content": "1. unit&lt;uint32&gt; Region: nrofrows = 5; { attribute&lt;uint32&gt; RegionNr : [0,1,2,3,4]; attribute&lt;string&gt; MetaScriptName : ['NH','ZH','UT','NB','GE']; attribute&lt;uint32&gt; sumNrInhabitants : [550,1025,300,200,0]; attribute&lt;string&gt; RegionLabel : ['hs: Ams','hs: DB','hs: Ut','hs:DH',null]; attribute&lt;string&gt; RegionDescr : ['Texel..Gooi','Carnaval','Dom',null,null]; } unit&lt;uint32&gt; PropValueSource := Region { parameter&lt;string&gt; label : ['ABC']; parameter&lt;uint32&gt; sumNrInhabitants : [2,5,3,2,0]; unit&lt;uint32&gt; domainA: nrofrows = 9; unit&lt;float64&gt; valuesB := baseunit('b', float64); container sublevel { attribute&lt;uint32&gt; meanNrInhabitants (PropValueSource): [1,2,1,1,0]; } } unit&lt;uint32&gt; name := Inherited_PropValues(PropValueSource,'name'); unit&lt;uint32&gt; expr := Inherited_PropValues(PropValueSource,'expr'); . 2. unit&lt;uint32&gt; property : nrofrows = 2 { parameter&lt;string&gt; name: ['name','expr']; } unit&lt;uint32&gt; name_and_expr := Inherited_PropValues(PropValueSource, property/name); . | name | . | label | . | sumNrInhabitants | . | domainA | . | valuesB | . | sublevel | . | RegionNr | . | MetaScriptName | . | sumNrInhabitants | . | RegionLabel | . | RegionDescr | . domain name, nr of rows = 10 . | expr | . |   | . |   | . |   | . | baseunit(‘b’,float64) | . |   | . |   | . |   | . |   | . |   | . |   | . domain expr, nr of rows = 10 . | name | expr | . | label |   | . | sumNrInhabitants |   | . | domainA |   | . | valuesB | baseunit(‘b’,float64) | . | sublevel |   | . | RegionNr |   | . | MetaScriptName |   | . | sumNrInhabitants |   | . | RegionLabel |   | . | RegionDescr |   | . domain name_and_expr, nr of rows = 10 . ",
    "url": "/docs/inherited_propvalues.html#example",
    
    "relUrl": "/docs/inherited_propvalues.html#example"
  },"1482": {
    "doc": "inherited_propvalues",
    "title": "See Also",
    "content": ". | propvalue | subitem_propvalues | subtree_propvalues | . ",
    "url": "/docs/inherited_propvalues.html#see-also",
    
    "relUrl": "/docs/inherited_propvalues.html#see-also"
  },"1483": {
    "doc": "inherited_propvalues",
    "title": "inherited_propvalues",
    "content": "metascript-functions Inherited_PropValues . ",
    "url": "/docs/inherited_propvalues.html",
    
    "relUrl": "/docs/inherited_propvalues.html"
  },"1484": {
    "doc": "initfile",
    "title": "syntax",
    "content": ". | InitFile(source_filename, target_filename) | . ",
    "url": "/docs/initfile.html#syntax",
    
    "relUrl": "/docs/initfile.html#syntax"
  },"1485": {
    "doc": "initfile",
    "title": "definition",
    "content": "InitFile(source_filename, target_filename) copies the source_filename to the target_filename. If the target_filename already exists, it will not be overwritten (the copyfile function does overwrite an existing target_filename) . ",
    "url": "/docs/initfile.html#definition",
    
    "relUrl": "/docs/initfile.html#definition"
  },"1486": {
    "doc": "initfile",
    "title": "description",
    "content": "In the GeoDMS use forward slashes(/) in path names in stead of backward slashes. ",
    "url": "/docs/initfile.html#description",
    
    "relUrl": "/docs/initfile.html#description"
  },"1487": {
    "doc": "initfile",
    "title": "applies to",
    "content": "data-item or literal source_filename and target_filename with string value-type . ",
    "url": "/docs/initfile.html#applies-to",
    
    "relUrl": "/docs/initfile.html#applies-to"
  },"1488": {
    "doc": "initfile",
    "title": "conditions",
    "content": "The source_filename must exist, if not an error is generated. The folder of the target_filename to which the file is copied will be created, if it did not already exists. ",
    "url": "/docs/initfile.html#conditions",
    
    "relUrl": "/docs/initfile.html#conditions"
  },"1489": {
    "doc": "initfile",
    "title": "example",
    "content": "parameter&lt;string&gt; InitFile := InitFile('c:/tmp/test.txt', 'd:/tmp/test.txt'); . result: updating this item copies the source file c:/tmp/test.txt to the target file d:/tmp/test.txt if this targetfile does not yet exists. ",
    "url": "/docs/initfile.html#example",
    
    "relUrl": "/docs/initfile.html#example"
  },"1490": {
    "doc": "initfile",
    "title": "see also",
    "content": ". | createfile | copyfile | . ",
    "url": "/docs/initfile.html#see-also",
    
    "relUrl": "/docs/initfile.html#see-also"
  },"1491": {
    "doc": "initfile",
    "title": "initfile",
    "content": "file,-folder-and-read-functions InitFile . ",
    "url": "/docs/initfile.html",
    
    "relUrl": "/docs/initfile.html"
  },"1492": {
    "doc": "installation-instructions",
    "title": "Download and install the GeoDMS software",
    "content": "To install the GeoDMS (GUI and dll’s) see the releases page. Win32 or X64 GeoDMS versions are available for 32 bits and 64 bits platforms. For Windows 32 bits operating systems, always install a GeoDMS version for a Win32 platform. For Windows 64 bits operating systems, both Win32 and X64 bits versions can be installed. In general it is advised to use a GeoDMS version for the 64 bits platform on a 64 bits operating systems, as it can address much larger data items. There is one exception to this rule, if a project uses ODBC sources (to read for instance .mdb or .xls files) and on the local machine a 32 bits version of MsOffice is installed.. After downloading, activate the setup program and follow the instructions. The software will be installed by default in a %ProgramFies%/ObjectVision/GeoDMS&lt;versionnr&gt; directory. After installing the software on some 64 bits platforms, the Program Compatibility Assistant might pop up. In these cases choose the option: This program installed correctly. If you notice problems with the installation afterwards, please inform us. ",
    "url": "/docs/installation-instructions.html#download-and-install-the-geodms-software",
    
    "relUrl": "/docs/installation-instructions.html#download-and-install-the-geodms-software"
  },"1493": {
    "doc": "installation-instructions",
    "title": "Obtain and organise the project specific (original) configuration, data and documentation",
    "content": "The project specific files can be obtained from an archive file, e.g. zip or rar. Extract all files from the archive file, including the directory structure, in a free to choose base directory for your project. This directory is called the project directory. The source for the project specific files can also be our or any (git or svn) server. In that case an git or svn client such as Tortoise can be used to download a specific version of these project files. After extracting and or downloading, the project directory consists of subdirectories with the configuration, the data and the documentation files. Temporary calculation results and export are stored in subdirectoires of the localDataProjDir. For more information on the these directories, see folders-and-placeholders. ",
    "url": "/docs/installation-instructions.html#obtain-and-organise-the-project-specific-original-configuration-data-and-documentation",
    
    "relUrl": "/docs/installation-instructions.html#obtain-and-organise-the-project-specific-original-configuration-data-and-documentation"
  },"1494": {
    "doc": "installation-instructions",
    "title": "Performance Configuration",
    "content": "Telling MS Windows what to do and not to do with SourceData and LocalData can make a significant difference in performance. read more MsMpEng.exe and other virus protection programs are known to scan intermediate data files stored in LocalData and therewith spending more CPU time than the GeoDMS that produced them and sometimes even cause data-missing errors by quarantaining data files during a calculation process. SouceData, such as _C:\\SourceData_ - Activate Disk Compression by View Folder Properties-&gt;Advanced Attributes and check \"Compress contents to save disk space\". - Disable Indexing service by View Folder Properties-&gt;Advanced Attributes and clear \"Allow files in this folder to have contents indexed ... \" LocalData folders, such as _C:\\LocalData_ - Exclude from Indexing service(s): View Folder Properties-&gt;Advanced Attributes and clear \"Allow files in this folder to have contents indexed ... \" - Exclude from virus scanners, such as in Settings-&gt; Update &amp; Security -&gt; Virus and threat protection-&gt;Virus and threat protection settings-&gt;Exclusions-&gt;Add C:\\\\LocalData. To avoid memory allocation errors during calculations, set the initial size of the Pagefiles to a substantial amount, such as 2x available RAM. - Windows 10: - Windows Settings-&gt;System-&gt;About (in left menu)-&gt;Advanced system settings (in right menu)-&gt;Tab Advanced -&gt; click on \\[Settings...\\] under \"Performance\" -&gt; Tab Advanced -&gt; click on \\[Change...\\] under \"Virtual memory\", select any fast drive (preferably a SSD) and select Custom size with a large Initial size Furthermore, - Go to GeoDmsGui -&gt; Main Menu -&gt;Tools-&gt;Options-&gt;Advanced and set \"Minimum size for ... swapfiles in CalcCache\" to 2000000000 bytes (2\\*10^9) and Threshold for Memory Flushing wait to 95%. ",
    "url": "/docs/installation-instructions.html#performance-configuration",
    
    "relUrl": "/docs/installation-instructions.html#performance-configuration"
  },"1495": {
    "doc": "installation-instructions",
    "title": "Installation Issues",
    "content": "Microsoft Defender SmartScreen Protection . Since GeoDMS version 7.315, valid setup execurtables are EV code-signed with Verified Publisher: Object Vision B.V. When executing setups for GeoDms versions prior to 7.315, Windows may prompt you with the following warning: . First, check that the setup was downloaded directly from the https://github.com/ObjectVision/GeoDMS domain which provides a htpps protection that downloads originate from Object Vision’s server. Then, click the “More info” link. For versions prior to 7.314, you should see: . For 7.314, you should see: Verified Publisher: Open Source Developer, Martinus Hilferink . Click the “Run anyway” button for installing the software. In case you are still unable to install GeoDMS, this might be related to anti-virus and/or firewall related software, either add an exception yourself, or contact your system administrator. missing dlls . After installing and starting the GeoDMS, errors relating to missing dlls may occur, see: known-issues. ",
    "url": "/docs/installation-instructions.html#installation-issues",
    
    "relUrl": "/docs/installation-instructions.html#installation-issues"
  },"1496": {
    "doc": "installation-instructions",
    "title": "installation-instructions",
    "content": "Before Installing, make sure your system meets the system-requirements. Installing a GeoDMS application is performed in two steps: . | Download and install the geodms-setups. | Obtain and organise the project specific (original) configuration, data and documentation. | . ",
    "url": "/docs/installation-instructions.html",
    
    "relUrl": "/docs/installation-instructions.html"
  },"1497": {
    "doc": "int16",
    "title": "concept",
    "content": ". | int16 is a 16 bits (2 bytes) signed integer value-type. | int16() is a function converting data-item or unit of other value types to the int16 value type. | . This page describes the int16() function. ",
    "url": "/docs/int16.html#concept",
    
    "relUrl": "/docs/int16.html#concept"
  },"1498": {
    "doc": "int16",
    "title": "syntax",
    "content": ". | int16(a) | literals | . ",
    "url": "/docs/int16.html#syntax",
    
    "relUrl": "/docs/int16.html#syntax"
  },"1499": {
    "doc": "int16",
    "title": "definition",
    "content": "int16(a) results in a 16 bits(2 bytes) signed integer tree-item converted from item a. The function results for: . | integer data items | data item: the integer value is interpreted as int16 value, if the value exceeds the allowed value range for the int16 value type, the resulting value will be null; | . | float32/64 data items: the value before the decimal point (so 1.9 will be rounded off to 1 and 2.0 to 2). If the value exceeds the allowed value range for the int16 value type, the resulting value will be null; | boolean data items: 1 for True values and 0 for False values; | string data items, if the value starts with an allowed numeric value for the value type, this value is converted to a int16 value type. Other characters after the numeric values are ignored. If the string does not start with an allowed numeric value for the value type, the resulting value will be null; | units, a 16 bits(2 bytes) signed integer unit of the converted unit. | . ",
    "url": "/docs/int16.html#definition",
    
    "relUrl": "/docs/int16.html#definition"
  },"1500": {
    "doc": "int16",
    "title": "applies to",
    "content": ". | data item or unit with Numeric, uint2, uint4, bool or string value type | . ",
    "url": "/docs/int16.html#applies-to",
    
    "relUrl": "/docs/int16.html#applies-to"
  },"1501": {
    "doc": "int16",
    "title": "since version",
    "content": ". | 5.15 | s suffix: since 7.105 | . ",
    "url": "/docs/int16.html#since-version",
    
    "relUrl": "/docs/int16.html#since-version"
  },"1502": {
    "doc": "int16",
    "title": "example",
    "content": "1. parameter&lt;int16&gt; int16Numeric1 := int16(1); 2. parameter&lt;int16&gt; int16Numeric1 := 1s; 3. attribute&lt;int16&gt; int16A (ADomain) := int16(A); 4. attribute&lt;int16&gt; int16B (ADomain) := int16(B); . | A(float32) | B(string) | int16A | int16B | . | 0 | ‘Hello’ | 0 | null | . | 1 | ‘Test’ | 1 | null | . | 1000000 | null | null | null | . | -2.5 | ‘Two words’ | -2 | null | . | 99.9 | ‘88a’ | 99 | 88 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/int16.html#example",
    
    "relUrl": "/docs/int16.html#example"
  },"1503": {
    "doc": "int16",
    "title": "int16",
    "content": "conversion-functions int16 . ",
    "url": "/docs/int16.html",
    
    "relUrl": "/docs/int16.html"
  },"1504": {
    "doc": "int16seq",
    "title": "syntax",
    "content": ". | int16Seq(a) | . ",
    "url": "/docs/int16seq.html#syntax",
    
    "relUrl": "/docs/int16seq.html#syntax"
  },"1505": {
    "doc": "int16seq",
    "title": "definition",
    "content": "int16Seq(a) results in a sequence of 16 bits signed integers derived from string data-item a. The syntax for string argument a need to be: {10: 41 9999 42 10 600 1 7 116 0 110}. In this string: . | The curly brackets {..} indicate the start and end of the sequence. | The first number (10) indicates the number of elements of the sequence followed by a colon. The elements of the sequence follow this colon, separated by spaces. | . The composition need to be configured to poly. The sequence2points function can be used to make a pointset domain. ",
    "url": "/docs/int16seq.html#definition",
    
    "relUrl": "/docs/int16seq.html#definition"
  },"1506": {
    "doc": "int16seq",
    "title": "applies to",
    "content": ". | data-item a with a string value-type | . ",
    "url": "/docs/int16seq.html#applies-to",
    
    "relUrl": "/docs/int16seq.html#applies-to"
  },"1507": {
    "doc": "int16seq",
    "title": "since version",
    "content": "7.130 . ",
    "url": "/docs/int16seq.html#since-version",
    
    "relUrl": "/docs/int16seq.html#since-version"
  },"1508": {
    "doc": "int16seq",
    "title": "example",
    "content": "parameter&lt;string&gt; param := '{10: 41 9999 42 10 600 1 7 116 0 110}'; parameter&lt;int16&gt; param_int16 (poly) := int16Seq(source/param); . | param_int16 | . | {10: 41 9999 42 10 600 7 116 0 110} | . ",
    "url": "/docs/int16seq.html#example",
    
    "relUrl": "/docs/int16seq.html#example"
  },"1509": {
    "doc": "int16seq",
    "title": "int16seq",
    "content": "sequence-functions int16Seq . ",
    "url": "/docs/int16seq.html",
    
    "relUrl": "/docs/int16seq.html"
  },"1510": {
    "doc": "int32",
    "title": "concept",
    "content": ". | int32 is a 32 bits (4 bytes) signed integer value-type. | int32() is a function converting data-item or unit of other value types to the int32 value type. | . This page describe the int32() function. ",
    "url": "/docs/int32.html#concept",
    
    "relUrl": "/docs/int32.html#concept"
  },"1511": {
    "doc": "int32",
    "title": "syntax",
    "content": ". | int32(a) | literali | . ",
    "url": "/docs/int32.html#syntax",
    
    "relUrl": "/docs/int32.html#syntax"
  },"1512": {
    "doc": "int32",
    "title": "definition",
    "content": "int32(a) results in a 32 bits(2 bytes) signed integer tree-item converted from item a. The function results for: . | integer data items: the integer value is interpreted as int32 value, if the value exceeds the allowed value range for the int32 value-type, the resulting value will be null; | float32/64 data items: the value before the decimal point (so 1.9 will be rounded off to 1 and 2.0 to 2). If the value exceeds the allowed value range for the int32 value type, the resulting value will be null; | boolean data items: 1 for True values and 0 for False values; | string data items, if the value starts with an allowed numeric value for the value type, this value is converted to a int32 value type. Other characters after the numeric values are ignored. If the string does not start with an allowed numeric value for the value type, the resulting value will be null; | units, a 32 bits(4 bytes) signed integer unit of the converted unit. | . ",
    "url": "/docs/int32.html#definition",
    
    "relUrl": "/docs/int32.html#definition"
  },"1513": {
    "doc": "int32",
    "title": "applies to",
    "content": ". | data item or unit with Numeric, uint2, uint4, bool or string value type | . ",
    "url": "/docs/int32.html#applies-to",
    
    "relUrl": "/docs/int32.html#applies-to"
  },"1514": {
    "doc": "int32",
    "title": "since version",
    "content": ". | 5.15 | i suffix: since 7.105 | . ",
    "url": "/docs/int32.html#since-version",
    
    "relUrl": "/docs/int32.html#since-version"
  },"1515": {
    "doc": "int32",
    "title": "example",
    "content": "1. parameter&lt;int32&gt; int32Numeric1 := int32(1); 2. parameter&lt;int32&gt; int32Numeric1 := 1i; 3. attribute&lt;int32&gt; int32A (ADomain) := int32(A); 4. attribute&lt;int32&gt; int32B (ADomain) := int32(B); . | A(float32) | B(string) | int32A | int32B | . | 0 | ‘Hello’ | 0 | null | . | 1 | ‘Test’ | 1 | null | . | 1000000 | null | 1000000 | null | . | -2.5 | ‘Two words’ | -2 | null | . | 99.9 | ‘88a’ | 99 | 88 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/int32.html#example",
    
    "relUrl": "/docs/int32.html#example"
  },"1516": {
    "doc": "int32",
    "title": "int32",
    "content": "conversion-functions int32 . ",
    "url": "/docs/int32.html",
    
    "relUrl": "/docs/int32.html"
  },"1517": {
    "doc": "int32seq",
    "title": "syntax",
    "content": ". | int32Seq(a) | . ",
    "url": "/docs/int32seq.html#syntax",
    
    "relUrl": "/docs/int32seq.html#syntax"
  },"1518": {
    "doc": "int32seq",
    "title": "definition",
    "content": "int32Seq(a) results in a sequence of 32 bits signed integers derived from string data-item a. The syntax for string argument a need to be: {10: 41 9999 42 10 600 1 7 116 0 110}. In this string: . | The curly brackets {..} indicate the start and end of the sequence. | The first number (10) indicates the number of elements of the sequence followed by a colon. The elements of the sequence follow this colon, separated by spaces. | . The composition need to be configured to poly. The sequence2points function can be used to make a pointset domain. ",
    "url": "/docs/int32seq.html#definition",
    
    "relUrl": "/docs/int32seq.html#definition"
  },"1519": {
    "doc": "int32seq",
    "title": "applies to",
    "content": ". | data-item a with a string value-type | . ",
    "url": "/docs/int32seq.html#applies-to",
    
    "relUrl": "/docs/int32seq.html#applies-to"
  },"1520": {
    "doc": "int32seq",
    "title": "since version",
    "content": "7.130 . ",
    "url": "/docs/int32seq.html#since-version",
    
    "relUrl": "/docs/int32seq.html#since-version"
  },"1521": {
    "doc": "int32seq",
    "title": "example",
    "content": "parameter&lt;string&gt; param := '{10: 41 9999 42 10 600 1 7 116 0 110}'; parameter&lt;int32&gt; param_int32 (poly) := int32Seq(source/param); . | param_int32 | . | {10: 41 9999 42 10 600 7 116 0 110} | . ",
    "url": "/docs/int32seq.html#example",
    
    "relUrl": "/docs/int32seq.html#example"
  },"1522": {
    "doc": "int32seq",
    "title": "int32seq",
    "content": "sequence-functions int32Seq . ",
    "url": "/docs/int32seq.html",
    
    "relUrl": "/docs/int32seq.html"
  },"1523": {
    "doc": "int64",
    "title": "concept",
    "content": ". | int64 is a 64 bits (8 bytes) signed integer value-type. | int64() is a function converting data-item or unit of other value types to the int64 value type. | . This page describes the int64() function. ",
    "url": "/docs/int64.html#concept",
    
    "relUrl": "/docs/int64.html#concept"
  },"1524": {
    "doc": "int64",
    "title": "syntax",
    "content": ". | int64(a) | literali64 | . ",
    "url": "/docs/int64.html#syntax",
    
    "relUrl": "/docs/int64.html#syntax"
  },"1525": {
    "doc": "int64",
    "title": "definition",
    "content": "int64(a) results in a 64 bits(8 bytes) signed integer tree-item converted from item a. The function results for: . | integer data items: the integer value is interpreted as int64 value, if the value exceeds the allowed value range for the int64 value type, the resulting value will be null; | float32/64 data items: the value before the decimal point (so 1.9 will be rounded off to 1 and 2.0 to 2). If the value exceeds the allowed value range for the int64 value type, the resulting value will be null; | boolean data items: 1 for True values and 0 for False values; | string data items, if the value starts with an allowed numeric value for the value type, this value is converted to a int64 value type. Other characters after the numeric values are ignored. If the string does not start with an allowed numeric value for the value type, the resulting value will be null; | units, a 64 bits(8 bytes) signed integer unit of the converted unit. | . ",
    "url": "/docs/int64.html#definition",
    
    "relUrl": "/docs/int64.html#definition"
  },"1526": {
    "doc": "int64",
    "title": "applies to",
    "content": ". | data item or unit with Numeric, uint2, uint4, bool or string value type | . ",
    "url": "/docs/int64.html#applies-to",
    
    "relUrl": "/docs/int64.html#applies-to"
  },"1527": {
    "doc": "int64",
    "title": "since version",
    "content": ". | 5.15 | i64 suffix: since 7.105 | . ",
    "url": "/docs/int64.html#since-version",
    
    "relUrl": "/docs/int64.html#since-version"
  },"1528": {
    "doc": "int64",
    "title": "example",
    "content": "1. parameter&lt;int64&gt; int64Numeric1 := int64(1); 2. parameter&lt;int64&gt; int64Numeric1 := 1i64; 3. attribute&lt;int64&gt; int64A (ADomain) := int64(A); 4. attribute&lt;int64&gt; int64B (ADomain) := int64(B); . | A(float32) | B(string) | int64A | int64B | . | 0 | ‘Hello’ | 0 | null | . | 1 | ‘Test’ | 1 | null | . | 1000000 | null | 1000000 | null | . | -2.5 | ‘Two words’ | -2 | null | . | 99.9 | ‘88a’ | 99 | 88 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/int64.html#example",
    
    "relUrl": "/docs/int64.html#example"
  },"1529": {
    "doc": "int64",
    "title": "int64",
    "content": "conversion-functions int64 . ",
    "url": "/docs/int64.html",
    
    "relUrl": "/docs/int64.html"
  },"1530": {
    "doc": "int64seq",
    "title": "syntax",
    "content": ". | int64Seq(a) | . ",
    "url": "/docs/int64seq.html#syntax",
    
    "relUrl": "/docs/int64seq.html#syntax"
  },"1531": {
    "doc": "int64seq",
    "title": "definition",
    "content": "int64Seq(a) results in a sequence of 64 bits signed integers derived from string data-item a. The syntax for string argument a need to be: {10: 41 9999 42 10 600 1 7 116 0 110}. In this string: . | The curly brackets {..} indicate the start and end of the sequence. | The first number (10) indicates the number of elements of the sequence followed by a colon. The elements of the sequence follow this colon, separated by spaces. | . The composition need to be configured to poly. The sequence2points function can be used to make a pointset domain. ",
    "url": "/docs/int64seq.html#definition",
    
    "relUrl": "/docs/int64seq.html#definition"
  },"1532": {
    "doc": "int64seq",
    "title": "applies to",
    "content": ". | data-item a with a string value-type | . ",
    "url": "/docs/int64seq.html#applies-to",
    
    "relUrl": "/docs/int64seq.html#applies-to"
  },"1533": {
    "doc": "int64seq",
    "title": "since version",
    "content": "7.130 . ",
    "url": "/docs/int64seq.html#since-version",
    
    "relUrl": "/docs/int64seq.html#since-version"
  },"1534": {
    "doc": "int64seq",
    "title": "example",
    "content": "parameter&lt;string&gt; param := '{10: 41 9999 42 10 600 1 7 116 0 110}'; parameter&lt;int64&gt; param_int64 (poly) := int64Seq(source/param); . | param_int64 | . | {10: 41 9999 42 10 600 7 116 0 110} | . ",
    "url": "/docs/int64seq.html#example",
    
    "relUrl": "/docs/int64seq.html#example"
  },"1535": {
    "doc": "int64seq",
    "title": "int64seq",
    "content": "sequence-functions int64Seq . ",
    "url": "/docs/int64seq.html",
    
    "relUrl": "/docs/int64seq.html"
  },"1536": {
    "doc": "int8",
    "title": "concept",
    "content": ". | int8 is a 8 bits (1 byte) signed integer value-type. | int8() is a function converting data-item or unit of other value types to the int8 value type. | . This page describes the int8() function. ",
    "url": "/docs/int8.html#concept",
    
    "relUrl": "/docs/int8.html#concept"
  },"1537": {
    "doc": "int8",
    "title": "syntax",
    "content": ". | int8(a) | literalc | . ",
    "url": "/docs/int8.html#syntax",
    
    "relUrl": "/docs/int8.html#syntax"
  },"1538": {
    "doc": "int8",
    "title": "definition",
    "content": "int8(a) results in a 8 bits(1 byte) signed integer tree-item converted from item a. The function results for: . | integer data items: the integer value is interpreted as int8 value, if the value exceeds the allowed value range for the int8 value type, the resulting value will be null; | float32/64 data items: the value before the decimal point (so 1.9 will be rounded off to 1 and 2.0 to 2). If the value exceeds the allowed value range for the int8 value type, the resulting value will be null; | boolean data items: 1 for True values and 0 for False values; | string data items, if the value starts with an allowed numeric value for the value type, this value is converted to a int8 value type. Other characters after the numeric values are ignored. If the string does not start with an allowed numeric value for the value type, the resulting value will be null; | units, a 8 bits(1 byte) signed integer unit of the converted unit. | . ",
    "url": "/docs/int8.html#definition",
    
    "relUrl": "/docs/int8.html#definition"
  },"1539": {
    "doc": "int8",
    "title": "applies to",
    "content": ". | data item or unit with Numeric, uint2, uint4, bool or string value type | . ",
    "url": "/docs/int8.html#applies-to",
    
    "relUrl": "/docs/int8.html#applies-to"
  },"1540": {
    "doc": "int8",
    "title": "since version",
    "content": ". | 5.15 | c suffix: since 7.105 | . ",
    "url": "/docs/int8.html#since-version",
    
    "relUrl": "/docs/int8.html#since-version"
  },"1541": {
    "doc": "int8",
    "title": "example",
    "content": "1. parameter&lt;int8&gt; int8Numeric1 := int8(1); 2. parameter&lt;int8&gt; int8Numeric1 := 1c; 3. attribute&lt;int8&gt; int8A (ADomain) := int8(A); 4. attribute&lt;int8&gt; int8B (ADomain) := int8(B); . | A(float32) | B(string) | int8A | int8B | . | 0 | ‘Hello’ | 0 | null | . | 1 | ‘Test’ | 1 | null | . | 1000000 | null | null | null | . | -2.5 | ‘Two words’ | -2 | null | . | 99.9 | ‘88a’ | 99 | 88 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/int8.html#example",
    
    "relUrl": "/docs/int8.html#example"
  },"1542": {
    "doc": "int8",
    "title": "int8",
    "content": "conversion-functions int8 . ",
    "url": "/docs/int8.html",
    
    "relUrl": "/docs/int8.html"
  },"1543": {
    "doc": "int8seq",
    "title": "syntax",
    "content": ". | int8Seq(a) | . ",
    "url": "/docs/int8seq.html#syntax",
    
    "relUrl": "/docs/int8seq.html#syntax"
  },"1544": {
    "doc": "int8seq",
    "title": "definition",
    "content": "int8Seq(a) results in a sequence of 8 bits signed integers derived from string data-item a. The syntax for string argument a need to be: {10: 41 9999 42 10 600 1 7 116 0 110}. In this string: . | The curly brackets {..} indicate the start and end of the sequence. | The first number (10) indicates the number of elements of the sequence followed by a colon. The elements of the sequence follow this colon, separated by spaces. | . The composition need to be configured to poly. The sequence2points function can be used to make a pointset domain. ",
    "url": "/docs/int8seq.html#definition",
    
    "relUrl": "/docs/int8seq.html#definition"
  },"1545": {
    "doc": "int8seq",
    "title": "applies to",
    "content": ". | data-item a with a string value-type | . ",
    "url": "/docs/int8seq.html#applies-to",
    
    "relUrl": "/docs/int8seq.html#applies-to"
  },"1546": {
    "doc": "int8seq",
    "title": "since version",
    "content": "7.130 . ",
    "url": "/docs/int8seq.html#since-version",
    
    "relUrl": "/docs/int8seq.html#since-version"
  },"1547": {
    "doc": "int8seq",
    "title": "example",
    "content": "parameter&lt;string&gt; param := '{10: 41 9999 42 10 600 1 7 116 0 110}'; parameter&lt;int8&gt; param_int8 (poly) := int8Seq(source/param); . | param_int8 | . | {10: 41 null 42 10 null 7 116 0 110} | . ",
    "url": "/docs/int8seq.html#example",
    
    "relUrl": "/docs/int8seq.html#example"
  },"1548": {
    "doc": "int8seq",
    "title": "int8seq",
    "content": "sequence-functions int8Seq . ",
    "url": "/docs/int8seq.html",
    
    "relUrl": "/docs/int8seq.html"
  },"1549": {
    "doc": "integritycheck",
    "title": "examples",
    "content": "No missing data . attribute&lt;city&gt; city_rel (neighborhood) := rlookup(city_code, regions/city/city_code) , IntegrityCheck = \"isDefined(city_rel)\"; . The attribute uses the rlookup function to find the relation to the regions/city domain-unit. The configured IntegrityCheck checks if for each neighborhood a city is found. In such an IntegrityCheck it is allowed to refer to the item for which the IntegrityCheck is configured, the GeoDMS has a workaround to work with such self references. Recent version . container root: IntegrityCheck = \"GeoDmsVersion() &gt;= 7.123\" . This IntegrityCheck at the root container of the configuration checks if the configuration is opened in a GeoDMS version 7.123 or later. see also . | an integrity check can also be used in a for_each loop. | . ",
    "url": "/docs/integritycheck.html#examples",
    
    "relUrl": "/docs/integritycheck.html#examples"
  },"1550": {
    "doc": "integritycheck",
    "title": "integritycheck",
    "content": "In modelling, especially when complexity rises, errors are easily made. The GeoDMS contains ways of assisting modeller’s on tracking down and solving errors, think for instance on unit-metric-consistency. Another useful feature is the configuration of integrity checks for data-item. An IntegrityCheck is used to check if an (intermediate) result meets certain requirements, for instance that all values need to be within a certain range or that no missing data may occur. if an IntegrityCheck fails, the data of the resulting items can usually still be requested in a table view, in order to find out what is wrong. The data can not be exported. If you write an expression in the IntegrityCheck, you can use ‘this’ to refer to itself. This is preferred. container ReadOpbrengsten_perOP := for_each_neidv(OP/name , 'ReadOpbrengsten_perOP_UNCHECKED/'+OP/name , '(all(IsNull(this)))' , AdminDomain , EUR ); . ",
    "url": "/docs/integritycheck.html",
    
    "relUrl": "/docs/integritycheck.html"
  },"1551": {
    "doc": "interpolate_linear",
    "title": "syntax",
    "content": ". | interpolate_linear(new, org, a) | . ",
    "url": "/docs/interpolate_linear.html#syntax",
    
    "relUrl": "/docs/interpolate_linear.html#syntax"
  },"1552": {
    "doc": "interpolate_linear",
    "title": "definition",
    "content": "interpolate_linear(new, org, a) interpolates the values of attribute a towards the domain-unit of attribute new. Attribute org contains a reference to values (often timestamps) for which attribute a is known. Attribute new contains values in the same range as the org attribute. The attribute a will be interpolated towards these new values. The resulting attribute has the same values-unit as attribute a and the same domain-unit as attribute new. ",
    "url": "/docs/interpolate_linear.html#definition",
    
    "relUrl": "/docs/interpolate_linear.html#definition"
  },"1553": {
    "doc": "interpolate_linear",
    "title": "applies to",
    "content": "attributes new, org and a with Numeric value-type . ",
    "url": "/docs/interpolate_linear.html#applies-to",
    
    "relUrl": "/docs/interpolate_linear.html#applies-to"
  },"1554": {
    "doc": "interpolate_linear",
    "title": "conditions",
    "content": "The domain units of attribute org and a must match. ",
    "url": "/docs/interpolate_linear.html#conditions",
    
    "relUrl": "/docs/interpolate_linear.html#conditions"
  },"1555": {
    "doc": "interpolate_linear",
    "title": "since version",
    "content": "5.55 . ",
    "url": "/docs/interpolate_linear.html#since-version",
    
    "relUrl": "/docs/interpolate_linear.html#since-version"
  },"1556": {
    "doc": "interpolate_linear",
    "title": "example",
    "content": "attribute&lt;float32&gt; Quantity (Output) := interpolate_linear(Output/Yr, Decades/TimeStamp, Decades/Quantity); . | Output/Yr | Quantity | . | 2000 | 15763 | . | 2001 | 15573.6 | . | 2002 | 15384.2 | . | 2003 | 15194.8 | . | 2004 | 15005.3 | . | 2005 | 14815.9 | . | 2006 | 14626.5 | . | 2007 | 14437.1 | . | 2008 | 14247.7 | . | 2009 | 14058.3 | . | 2010 | 13868.9 | . domain Output, nr of rows = 11 . | Decades/TimeStamp | Decades/Quantity | . | 2000 | 15763 | . | 2010 | 13868.9 | . domain Decades, nr of rows = 2 . ",
    "url": "/docs/interpolate_linear.html#example",
    
    "relUrl": "/docs/interpolate_linear.html#example"
  },"1557": {
    "doc": "interpolate_linear",
    "title": "interpolate_linear",
    "content": "rescale-functions interpolate_linear . ",
    "url": "/docs/interpolate_linear.html",
    
    "relUrl": "/docs/interpolate_linear.html"
  },"1558": {
    "doc": "invert",
    "title": "syntax",
    "content": ". | invert(relation) | . ",
    "url": "/docs/invert.html#syntax",
    
    "relUrl": "/docs/invert.html#syntax"
  },"1559": {
    "doc": "invert",
    "title": "definition",
    "content": "invert(a) inverts the relation argument. Inverting means the resulting attribute has as domain-unit the values-unit and as values unit the domain unit of the relation argument. ",
    "url": "/docs/invert.html#definition",
    
    "relUrl": "/docs/invert.html#definition"
  },"1560": {
    "doc": "invert",
    "title": "applies to",
    "content": ". | attribute relation with value-type of the group CanBeDomainUnit | . ",
    "url": "/docs/invert.html#applies-to",
    
    "relUrl": "/docs/invert.html#applies-to"
  },"1561": {
    "doc": "invert",
    "title": "example",
    "content": "attribute&lt;Region&gt; invertRegion_rel (Region) := invert(City/Region_rel); . | City/Region_rel | . | 0 | . | 1 | . | 2 | . | 1 | . | 3 | . | null | . | 3 | . domain City, nr of rows = 7 . | InvertRegion_rel | . | 1 | . | 4 | . | 3 | . | 7 | . | null | . domain Region, nr of rows = 5 . ",
    "url": "/docs/invert.html#example",
    
    "relUrl": "/docs/invert.html#example"
  },"1562": {
    "doc": "invert",
    "title": "invert",
    "content": "relational-functions invert . ",
    "url": "/docs/invert.html",
    
    "relUrl": "/docs/invert.html"
  },"1563": {
    "doc": "ipoint",
    "title": "concept",
    "content": ". | ipoint is a Point(Group) value-type with two coordinates of the 32 bits (4 bytes) signed integer value type: int32. | ipoint() is a function converting other point data-item or unit to the ipoint value type. | . This page describes the ipoint() function. ",
    "url": "/docs/ipoint.html#concept",
    
    "relUrl": "/docs/ipoint.html#concept"
  },"1564": {
    "doc": "ipoint",
    "title": "syntax",
    "content": ". | ipoint(a) | . ",
    "url": "/docs/ipoint.html#syntax",
    
    "relUrl": "/docs/ipoint.html#syntax"
  },"1565": {
    "doc": "ipoint",
    "title": "definition",
    "content": "ipoint(a) converts the coordinates of a point tree-item a to the ipoint (int32 coordinates) value type. ",
    "url": "/docs/ipoint.html#definition",
    
    "relUrl": "/docs/ipoint.html#definition"
  },"1566": {
    "doc": "ipoint",
    "title": "applies to",
    "content": ". | data item or unit with PointGroup value type | . ",
    "url": "/docs/ipoint.html#applies-to",
    
    "relUrl": "/docs/ipoint.html#applies-to"
  },"1567": {
    "doc": "ipoint",
    "title": "example",
    "content": "attribute&lt;ipoint&gt; ipointA (ADomain) := ipoint(A); . | A(fpoint) | ipointA | . | {0,0} | {0,0} | . | {1,1} | {1,1} | . | {1000000,10000000} | {1000000,10000000} | . | {-2.5, 2.5} | {-2, 2} | . | {99.9, 99.9} | {99,99} | . ADomain, nr of rows = 5 . ",
    "url": "/docs/ipoint.html#example",
    
    "relUrl": "/docs/ipoint.html#example"
  },"1568": {
    "doc": "ipoint",
    "title": "ipoint",
    "content": "conversion-functions ipoint . ",
    "url": "/docs/ipoint.html",
    
    "relUrl": "/docs/ipoint.html"
  },"1569": {
    "doc": "ipolygon",
    "title": "syntax",
    "content": ". | ipolygon(a) | . ",
    "url": "/docs/ipolygon.html#syntax",
    
    "relUrl": "/docs/ipolygon.html#syntax"
  },"1570": {
    "doc": "ipolygon",
    "title": "definition",
    "content": "ipolygon(a) converts the coordinates of a point tree-item a with a sequence of points (arc or polygon) to the ipoint (int32 coordinates) value-type. ",
    "url": "/docs/ipolygon.html#definition",
    
    "relUrl": "/docs/ipolygon.html#definition"
  },"1571": {
    "doc": "ipolygon",
    "title": "applies to",
    "content": ". | data item with Point value type and composition arc or polygon | . ",
    "url": "/docs/ipolygon.html#applies-to",
    
    "relUrl": "/docs/ipolygon.html#applies-to"
  },"1572": {
    "doc": "ipolygon",
    "title": "example",
    "content": "attribute&lt;spoint&gt; ipolygonA (SDomain, polygon) := ipolygon(A); . | A(fpolygon) | ipolygonA | . | {2:{0,0},{1,1}} | {2:{0,0},{1,1}} | . | {3: {1E+007,1E+007},{-2.5,-2.5},{99.9,99.9}} | {3: {9999999,9999999},{-2,-2},{99,99}} | . ",
    "url": "/docs/ipolygon.html#example",
    
    "relUrl": "/docs/ipolygon.html#example"
  },"1573": {
    "doc": "ipolygon",
    "title": "ipolygon",
    "content": "conversion-functions ipolygon . ",
    "url": "/docs/ipolygon.html",
    
    "relUrl": "/docs/ipolygon.html"
  },"1574": {
    "doc": "isdefined",
    "title": "syntax",
    "content": ". | IsDefined(a) | . ",
    "url": "/docs/isdefined.html#syntax",
    
    "relUrl": "/docs/isdefined.html#syntax"
  },"1575": {
    "doc": "isdefined",
    "title": "definition",
    "content": "IsDefined(a) results in a boolean data-item with values True for non null and False for null values of data item a. ",
    "url": "/docs/isdefined.html#definition",
    
    "relUrl": "/docs/isdefined.html#definition"
  },"1576": {
    "doc": "isdefined",
    "title": "applies to",
    "content": ". | data item with Numeric, Point or string value-type | . ",
    "url": "/docs/isdefined.html#applies-to",
    
    "relUrl": "/docs/isdefined.html#applies-to"
  },"1577": {
    "doc": "isdefined",
    "title": "example",
    "content": "attribute&lt;bool&gt; IsDefinedA (ADomain) := IsDefined(A); . | A(float32) | IsDefinedA | . | 0 | True | . | null | False | . | 1000000 | True | . | -2.5 | True | . | 99.9 | True | . ADomain, nr of rows = 5 . ",
    "url": "/docs/isdefined.html#example",
    
    "relUrl": "/docs/isdefined.html#example"
  },"1578": {
    "doc": "isdefined",
    "title": "see also",
    "content": ". | makedefined | isnull | . ",
    "url": "/docs/isdefined.html#see-also",
    
    "relUrl": "/docs/isdefined.html#see-also"
  },"1579": {
    "doc": "isdefined",
    "title": "isdefined",
    "content": "predicates-functions IsDefined . ",
    "url": "/docs/isdefined.html",
    
    "relUrl": "/docs/isdefined.html"
  },"1580": {
    "doc": "isnegative",
    "title": "syntax",
    "content": ". | IsNegative(a) | . ",
    "url": "/docs/isnegative.html#syntax",
    
    "relUrl": "/docs/isnegative.html#syntax"
  },"1581": {
    "doc": "isnegative",
    "title": "definition",
    "content": "IsNegative(a) results in a boolean data-item with values True for negative and False for postive and zero values of data item a. ",
    "url": "/docs/isnegative.html#definition",
    
    "relUrl": "/docs/isnegative.html#definition"
  },"1582": {
    "doc": "isnegative",
    "title": "applies to",
    "content": ". | data item with Numeric value-type | . ",
    "url": "/docs/isnegative.html#applies-to",
    
    "relUrl": "/docs/isnegative.html#applies-to"
  },"1583": {
    "doc": "isnegative",
    "title": "example",
    "content": "attribute&lt;bool&gt; IsNegative (ADomain) := IsNegative(A); . | A(float32) | IsNegativeA | . | 0 | False | . | null | False | . | 1000000 | False | . | -2.5 | True | . | 99.9 | False | . ADomain, nr of rows = 5 . ",
    "url": "/docs/isnegative.html#example",
    
    "relUrl": "/docs/isnegative.html#example"
  },"1584": {
    "doc": "isnegative",
    "title": "see also",
    "content": ". | ispositive | iszero | . ",
    "url": "/docs/isnegative.html#see-also",
    
    "relUrl": "/docs/isnegative.html#see-also"
  },"1585": {
    "doc": "isnegative",
    "title": "isnegative",
    "content": "predicates-functions IsNegative . ",
    "url": "/docs/isnegative.html",
    
    "relUrl": "/docs/isnegative.html"
  },"1586": {
    "doc": "isnull",
    "title": "syntax",
    "content": ". | IsNull(a) | . ",
    "url": "/docs/isnull.html#syntax",
    
    "relUrl": "/docs/isnull.html#syntax"
  },"1587": {
    "doc": "isnull",
    "title": "definition",
    "content": "IsNull(a) results in a boolean data-item with values True for null and False for non null values of data item a. ",
    "url": "/docs/isnull.html#definition",
    
    "relUrl": "/docs/isnull.html#definition"
  },"1588": {
    "doc": "isnull",
    "title": "applies to",
    "content": ". | data item with Numeric, Point or string value-type | . ",
    "url": "/docs/isnull.html#applies-to",
    
    "relUrl": "/docs/isnull.html#applies-to"
  },"1589": {
    "doc": "isnull",
    "title": "example",
    "content": "attribute&lt;bool&gt; IsNullA (ADomain) := IsNull(A); . | A(float32) | IsNullA | . | 0 | False | . | null | True | . | 1000000 | False | . | -2.5 | False | . | 99.9 | False | . ADomain, nr of rows = 5 . ",
    "url": "/docs/isnull.html#example",
    
    "relUrl": "/docs/isnull.html#example"
  },"1590": {
    "doc": "isnull",
    "title": "see also",
    "content": ". | isdefined | . ",
    "url": "/docs/isnull.html#see-also",
    
    "relUrl": "/docs/isnull.html#see-also"
  },"1591": {
    "doc": "isnull",
    "title": "isnull",
    "content": "predicates-functions IsNull . ",
    "url": "/docs/isnull.html",
    
    "relUrl": "/docs/isnull.html"
  },"1592": {
    "doc": "ispositive",
    "title": "syntax",
    "content": ". | IsPositive(a) | . ",
    "url": "/docs/ispositive.html#syntax",
    
    "relUrl": "/docs/ispositive.html#syntax"
  },"1593": {
    "doc": "ispositive",
    "title": "definition",
    "content": "IsPositive(a) results in a boolean data-item with values True for positive and False for negative and zero values of data item a. ",
    "url": "/docs/ispositive.html#definition",
    
    "relUrl": "/docs/ispositive.html#definition"
  },"1594": {
    "doc": "ispositive",
    "title": "applies to",
    "content": ". | data item with Numeric value-type | . ",
    "url": "/docs/ispositive.html#applies-to",
    
    "relUrl": "/docs/ispositive.html#applies-to"
  },"1595": {
    "doc": "ispositive",
    "title": "example",
    "content": "attribute&lt;bool&gt; IsPositive (ADomain) := IsPositive(A); . | A(float32) | IsPositiveA | . | 0 | False | . | null | False | . | 1000000 | True | . | -2.5 | False | . | 99.9 | True | . ADomain, nr of rows = 5 . ",
    "url": "/docs/ispositive.html#example",
    
    "relUrl": "/docs/ispositive.html#example"
  },"1596": {
    "doc": "ispositive",
    "title": "see also",
    "content": ". | isnegative | iszero | . ",
    "url": "/docs/ispositive.html#see-also",
    
    "relUrl": "/docs/ispositive.html#see-also"
  },"1597": {
    "doc": "ispositive",
    "title": "ispositive",
    "content": "predicates-functions IsPositive . ",
    "url": "/docs/ispositive.html",
    
    "relUrl": "/docs/ispositive.html"
  },"1598": {
    "doc": "iszero",
    "title": "syntax",
    "content": ". | IsZero(a) | . ",
    "url": "/docs/iszero.html#syntax",
    
    "relUrl": "/docs/iszero.html#syntax"
  },"1599": {
    "doc": "iszero",
    "title": "definition",
    "content": "IsZero(a) results in a boolean data-item with values True for zero and False for all other values of data item a. ",
    "url": "/docs/iszero.html#definition",
    
    "relUrl": "/docs/iszero.html#definition"
  },"1600": {
    "doc": "iszero",
    "title": "applies to",
    "content": ". | data item with Numeric value-type | . ",
    "url": "/docs/iszero.html#applies-to",
    
    "relUrl": "/docs/iszero.html#applies-to"
  },"1601": {
    "doc": "iszero",
    "title": "example",
    "content": "attribute&lt;bool&gt; IsZero (ADomain) := IsZero(A); . | A(float32) | IsZeroA | . | 0 | True | . | null | False | . | 1000000 | False | . | -2.5 | False | . | 99.9 | False | . ADomain, nr of rows = 5 . ",
    "url": "/docs/iszero.html#example",
    
    "relUrl": "/docs/iszero.html#example"
  },"1602": {
    "doc": "iszero",
    "title": "see also",
    "content": ". | ispositive | isnegative | . ",
    "url": "/docs/iszero.html#see-also",
    
    "relUrl": "/docs/iszero.html#see-also"
  },"1603": {
    "doc": "iszero",
    "title": "iszero",
    "content": "predicates-functions IsZero . ",
    "url": "/docs/iszero.html",
    
    "relUrl": "/docs/iszero.html"
  },"1604": {
    "doc": "iterative-proportional-fitting",
    "title": "applications of IPF",
    "content": ". | Doubly Constrained Gravity Models of Spatial Interaction | Trip Distribution in Transport modelling is often modelled as doubly constrained gravity model | Continuous Allocation where land units are sources and claims for land use are destinations. | . ",
    "url": "/docs/iterative-proportional-fitting.html#applications-of-ipf",
    
    "relUrl": "/docs/iterative-proportional-fitting.html#applications-of-ipf"
  },"1605": {
    "doc": "iterative-proportional-fitting",
    "title": "more Links",
    "content": "-http://www.pbl.nl/publicaties/2000/Iteratief_Proportioneel_Fitten__Methodiek_en_toepassing_voor_de_woonruimteverdeling_in_Geografische_Informatiesystemen_voor_de_Vijfde_Nota_Ruimtelijke_Ordening IPF] RIVM/PBL paper (in Dutch) . | LAND USE SCANNER: An integrated GIS based model for long term projections of land use in urban and rural areas, Maarten Hilferink and Piet Rietveld Article on SpringerLink describing the Continuous Allocation in the Land Use Scanner | . ",
    "url": "/docs/iterative-proportional-fitting.html#more-links",
    
    "relUrl": "/docs/iterative-proportional-fitting.html#more-links"
  },"1606": {
    "doc": "iterative-proportional-fitting",
    "title": "iterative-proportional-fitting",
    "content": "Iterative Proportional Fitting (IPF) are disaggregation methods to obtain doubly constrained matrix cell values Xij proportional to a given strictly positive interaction measure (aka proxy) Cij given restrictions on row an column totals Ti. and T.j. We introduce ai and bj to express Xij as aibjCij. It follows that: . $a_i := \\over \\sum\\limits_{j}{b_j C_{ij}}}$ and $b_j := \\over \\sum\\limits_{i}{a_i C_{ij}}}$ . An IPF is used to solve the Continuous Allocation of the earlier versions of the Land Use Scanner by using eβ**si**j as proxy. ",
    "url": "/docs/iterative-proportional-fitting.html",
    
    "relUrl": "/docs/iterative-proportional-fitting.html"
  },"1607": {
    "doc": "join_equal_values",
    "title": "syntax",
    "content": ". | join_equal_values(first_rel, second_rel) | . ",
    "url": "/docs/join_equal_values.html#syntax",
    
    "relUrl": "/docs/join_equal_values.html#syntax"
  },"1608": {
    "doc": "join_equal_values",
    "title": "definition",
    "content": "join_equal_values(first_rel, second_rel) results in a new uint32 domain-unit with entries for each combinations of all equal values of first_rel and second_rel. The functions results in three subitems: . | nr_1_rel: the index-numbers of the combination of equal values in the domain unit of the first argument | nr_2_rel: the index-numbers of the combination of equal values in the domain unit of the second argument | nr_X_rel: the equal value in the combination | . The explicit: join_equal_values_uint64, join_equal_values_uint32,join_equal_values_uint16 and join_equal_values_uint8 functions can be used in the same manner as the join_equal_values function, to create a new domain unit with an explicit value-type. ",
    "url": "/docs/join_equal_values.html#definition",
    
    "relUrl": "/docs/join_equal_values.html#definition"
  },"1609": {
    "doc": "join_equal_values",
    "title": "applies to",
    "content": ". | first_rel: a uint32 relation | second_rel: a uint32 relation | . ",
    "url": "/docs/join_equal_values.html#applies-to",
    
    "relUrl": "/docs/join_equal_values.html#applies-to"
  },"1610": {
    "doc": "join_equal_values",
    "title": "conditions",
    "content": ". | The values-unit of the argument: first_rel and second_rel must match. | The domain unit of arguments: first_rel and second_rel must be zero based. | . ",
    "url": "/docs/join_equal_values.html#conditions",
    
    "relUrl": "/docs/join_equal_values.html#conditions"
  },"1611": {
    "doc": "join_equal_values",
    "title": "see also",
    "content": ". | https://en.wikipedia.org/wiki/Pullback_(category_theory) | https://www.w3schools.com/sql/sql_join_inner.asp | . ",
    "url": "/docs/join_equal_values.html#see-also",
    
    "relUrl": "/docs/join_equal_values.html#see-also"
  },"1612": {
    "doc": "join_equal_values",
    "title": "example",
    "content": "unit&lt;uint32&gt; RegionCity := join_equal_values(region/country_rel, city/country_rel); . | nr_1_rel | nr_2_rel | nr_X_rel | . | 0 | 1 | 0 | . | 1 | 1 | 0 | . | 2 | 0 | 1 | . | 3 | 0 | 1 | . | 4 | 2 | 2 | . domain CityRegionCombinations , nr of rows = 5 . | region/country_rel | . | 0 | . | 0 | . | 1 | . | 1 | . | 2 | . domain region, nr of rows = 5 . | city/country_rel | . | 1 | . | 0 | . | 2 | . domain city, nr of rows = 3 . ",
    "url": "/docs/join_equal_values.html#example",
    
    "relUrl": "/docs/join_equal_values.html#example"
  },"1613": {
    "doc": "join_equal_values",
    "title": "see also",
    "content": ". | join_equal_values_uint8_16_32_64 | . ",
    "url": "/docs/join_equal_values.html#see-also-1",
    
    "relUrl": "/docs/join_equal_values.html#see-also-1"
  },"1614": {
    "doc": "join_equal_values",
    "title": "join_equal_values",
    "content": "relational-functions join_equal_values . ",
    "url": "/docs/join_equal_values.html",
    
    "relUrl": "/docs/join_equal_values.html"
  },"1615": {
    "doc": "join_equal_values_uint8_16_32_64",
    "title": "syntax",
    "content": ". | join_equal_values_uint8(first_rel, second_rel) | join_equal_values_uint16(first_rel, second_rel) | join_equal_values_uint32(first_rel, second_rel) | join_equal_values_uint64(first_rel, second_rel) | . ",
    "url": "/docs/join_equal_values_uint8_16_32_64.html#syntax",
    
    "relUrl": "/docs/join_equal_values_uint8_16_32_64.html#syntax"
  },"1616": {
    "doc": "join_equal_values_uint8_16_32_64",
    "title": "definition",
    "content": "These functions work in the same way as the join_equal_values function, only they result in domain-unit of respectively uint8, uint16, uint32 or uint64 value-type. ",
    "url": "/docs/join_equal_values_uint8_16_32_64.html#definition",
    
    "relUrl": "/docs/join_equal_values_uint8_16_32_64.html#definition"
  },"1617": {
    "doc": "join_equal_values_uint8_16_32_64",
    "title": "join_equal_values_uint8_16_32_64",
    "content": "relational-functions join_equal_values_uint8, join_equal_values_uint16, join_equal_values_uint32, join_equal_values_uint64 . ",
    "url": "/docs/join_equal_values_uint8_16_32_64.html",
    
    "relUrl": "/docs/join_equal_values_uint8_16_32_64.html"
  },"1618": {
    "doc": "kernel",
    "title": "basic",
    "content": "The following kernel is also used in the potential-with-kernel example. container kernel {    unit&lt;uint32&gt; Dist2Range;    unit&lt;spoint&gt; pot50km := range(spoint, point(-50s, -50s), point(51s, 51s))    {       attribute&lt;Dist2Range&gt; distMatr  := dist2(point(0s, 0s, .), Dist2Range);       attribute&lt;float32&gt;    AbsWeight := distMatr &lt;= 2500 ? 1f : 0f;    } } . This basic kernel defines a grid with 101 * 101 = 10.201 cells. The distrMatr attribute calculates the square distances from each cell towards the center cell of the grid. The AbsWeight attribute gets the value one for each cell at a distance of less than or equal to 50 cells and a value of zero for cells at a distance of more than 50 cells from the center. This AbsWeight attribute is shown in the next figure: . As in this AbsWeight attribute only the values 0 and 1 occur, potentials functions with such an attribute have no distance decay weight. Each cell in the kernel has the same weight. ",
    "url": "/docs/kernel.html#basic",
    
    "relUrl": "/docs/kernel.html#basic"
  },"1619": {
    "doc": "kernel",
    "title": "distance decay",
    "content": "The next example shows the configuration of an weight attribute with a distance decay function, in which the weights diminish as a function of the distance: . attribute&lt;float32&gt; AbsWeightDistDecay := distMatr &lt;= 2500 ? 1f / float32(distMatr) : 0f; . As the distMatr attribute calculates square distances, this function models a distance decay function with an exponent of 2. Like the basic kernel, all cells with a distance of more than 50 cells towards the center cell will get a zero value. This AbsWeightDistDecay attribute is shown in the next figure: . ",
    "url": "/docs/kernel.html#distance-decay",
    
    "relUrl": "/docs/kernel.html#distance-decay"
  },"1620": {
    "doc": "kernel",
    "title": "relative weights",
    "content": "If a potential function is used to spread a certain amount over a region, it is often desirable to keep the sum of the spreaded out amount the same as the sum of the original amount. To achieve this, the sum of the weight values need to sum up to the value 1. This can be achieved with a relative weight attribute as configured in the next example. attribute&lt;float32&gt; RelWeight := scalesum(AbsWeightDistDecay, 1f); . ",
    "url": "/docs/kernel.html#relative-weights",
    
    "relUrl": "/docs/kernel.html#relative-weights"
  },"1621": {
    "doc": "kernel",
    "title": "kernel",
    "content": "Kernels are used to define the size and weight of the neighborhood used in a neighbourhood-potential calculation. A kernel in the GeoDMS consists of a non geographic grid-domain with a weight attribute for this domain. This weight attribute is used as second argument in the potential function. Kernels are usually configured in the GeoDMS configurations. ",
    "url": "/docs/kernel.html",
    
    "relUrl": "/docs/kernel.html"
  },"1622": {
    "doc": "known-issues",
    "title": "disabled items not greyed out, look like enabled",
    "content": "This can happen if the ‘dark mode’ is enabled in Windows 11. Reconsider using the ‘dark mode’. ",
    "url": "/docs/known-issues.html#disabled-items-not-greyed-out-look-like-enabled",
    
    "relUrl": "/docs/known-issues.html#disabled-items-not-greyed-out-look-like-enabled"
  },"1623": {
    "doc": "known-issues",
    "title": "clear the CalcCache",
    "content": "For GeoDMS versions prior to the 8 serie, if an error occurs with a running a GeoDMS project or re-opening a current configuration, we first advice to clear the CalcCache folder. ",
    "url": "/docs/known-issues.html#clear-the-calccache",
    
    "relUrl": "/docs/known-issues.html#clear-the-calccache"
  },"1624": {
    "doc": "known-issues",
    "title": "memory issues",
    "content": "In case your computer runs out of (virtual) memory, the user can adapt their Windows OS settings of virtual-memory in order to deal with memory issues. Alternatively, as secondary option disabling Multi Tasking option 2 (From the GUI go to Tools &gt; Options &gt; Advanced) can be unchecked. Be aware that calculations that make use of multiple threads will become slower. ",
    "url": "/docs/known-issues.html#memory-issues",
    
    "relUrl": "/docs/known-issues.html#memory-issues"
  },"1625": {
    "doc": "known-issues",
    "title": "other issues",
    "content": ". | msvcp110_win.dll missing | vcruntime140-1-dll-missing | api-ms-win-crt-runtime-i1-1-0.dll-is-missing | red-items-when-opening-a-configuration | windowssystem-error-createfilehandleforrwview-errorcode-32… | error-in-delayed-loading-a-dll | notepad—command-line-parameters-not-working | . ",
    "url": "/docs/known-issues.html#other-issues",
    
    "relUrl": "/docs/known-issues.html#other-issues"
  },"1626": {
    "doc": "known-issues",
    "title": "known-issues",
    "content": " ",
    "url": "/docs/known-issues.html",
    
    "relUrl": "/docs/known-issues.html"
  },"1627": {
    "doc": "label-visualisation",
    "title": "description",
    "content": ". | LabelText: a data-item with value-type string and as expression the labels to be visualised. | LabelColor: a data item with value type uint32 and as expression a (set) of rgb values, used to configure the color of the text. | LabelBackColor: a data item with value type uint32 and as expression a (set) of rgb values, used to configure to background frame color around the text. | LabelSize: a data item with value type float32 and as expression a (set) of values indicating the fontsize in pixels | LabelWorldSize: a data item with the same values unit as the values unit of the base unit for the how-to-configure-a-coordinate-system. The LabelWorldSize specifies a size in e.g. meters, which is dependent on the zoom level in the map view. With this property a zoom dependent size can be configured. | LabelFont: a data item with value type string and as expression the font to be used. | . ",
    "url": "/docs/label-visualisation.html#description",
    
    "relUrl": "/docs/label-visualisation.html#description"
  },"1628": {
    "doc": "label-visualisation",
    "title": "label-visualisation",
    "content": "For point and polygon data, labels can be visualised in the map view. Available visualisation-style subitem for labels: . parameter&lt;string&gt;  LabelText      := 'Netherlands'   , DialogType = \"LabelText\"; parameter&lt;uint32&gt;  LabelColor     := rgb(255,0,0)    , DialogType = \"LabelColor\"; parameter&lt;uint32&gt;  LabelBackColor := rgb(255,255,0)  , DialogType = \"LabelBackColor\"; parameter&lt;float32&gt; LabelSize      := 8f              , DialogType = \"LabelSize\" parameter&lt;meter&gt;   LabelWorldSize := 10[meter]       , DialogType = \"LabelWorldSize\"; parameter&lt;string&gt;  LabelFont      := 'Arial'         , DialogType = \"LabelFont\"; . ",
    "url": "/docs/label-visualisation.html",
    
    "relUrl": "/docs/label-visualisation.html"
  },"1629": {
    "doc": "landunitdomain",
    "title": "definition",
    "content": "LandUnitDomain is the second argument of the discrete_alloc function. LandUnitDomain is the domain-unit of the set of land units to be allocated, usually a grid domain. ",
    "url": "/docs/landunitdomain.html#definition",
    
    "relUrl": "/docs/landunitdomain.html#definition"
  },"1630": {
    "doc": "landunitdomain",
    "title": "description",
    "content": "The LandUnitDomain is often configured as a subset of a land use map grid domain (see the example). The selection criteria specifies if a land unit will be allocated (free land cells) or not as it is e.g. not located in the study area or exogeneous land use like water. If the number of free land cells is substantial less than the number of cells of the original land use grid domain, it is advised to configure the LandUnitDomain as a subset. This increases the performance of the discrete_alloc function. ",
    "url": "/docs/landunitdomain.html#description",
    
    "relUrl": "/docs/landunitdomain.html#description"
  },"1631": {
    "doc": "landunitdomain",
    "title": "applies to",
    "content": ". | unit LandUnitDomain with value-type group: CanBeDomainUnit | . ",
    "url": "/docs/landunitdomain.html#applies-to",
    
    "relUrl": "/docs/landunitdomain.html#applies-to"
  },"1632": {
    "doc": "landunitdomain",
    "title": "conditions",
    "content": "The LandUnitDomain needs to match with the resulting attribute of the discrete_alloc function called landuse. All SuitabilityMaps need to have the LandUnitDomain as domain unit. The AtomicRegionMap need to have the LandUnitDomain as domain unit. ",
    "url": "/docs/landunitdomain.html#conditions",
    
    "relUrl": "/docs/landunitdomain.html#conditions"
  },"1633": {
    "doc": "landunitdomain",
    "title": "example",
    "content": "attribute&lt;boolean&gt; FreeLand (GridDomain) := InRegio; unit&lt;uint32&gt;       ADomain               := Subset(FreeLand), label = \"allocation domain\"; . ",
    "url": "/docs/landunitdomain.html#example",
    
    "relUrl": "/docs/landunitdomain.html#example"
  },"1634": {
    "doc": "landunitdomain",
    "title": "landunitdomain",
    "content": "allocation-functions, argument 2: LandUnitDomain . ",
    "url": "/docs/landunitdomain.html",
    
    "relUrl": "/docs/landunitdomain.html"
  },"1635": {
    "doc": "last",
    "title": "syntax",
    "content": ". | last(a) | last(a, relation) | . ",
    "url": "/docs/last.html#syntax",
    
    "relUrl": "/docs/last.html#syntax"
  },"1636": {
    "doc": "last",
    "title": "definition",
    "content": ". | last(a) results in a parameter with the last of the non null values of attribute a. | last(a, relation) results in an attribute with the last of the non null values of attribute a, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | . ",
    "url": "/docs/last.html#definition",
    
    "relUrl": "/docs/last.html#definition"
  },"1637": {
    "doc": "last",
    "title": "applies to",
    "content": ". | attribute a with Numeric, Point, string or bool value-type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/last.html#applies-to",
    
    "relUrl": "/docs/last.html#applies-to"
  },"1638": {
    "doc": "last",
    "title": "conditions",
    "content": ". | The values unit of the resulting data-item should match with regard to value type and metric with the values unit of attribute a. | The domain of argument a and relation must match. | . ",
    "url": "/docs/last.html#conditions",
    
    "relUrl": "/docs/last.html#conditions"
  },"1639": {
    "doc": "last",
    "title": "example",
    "content": "parameter&lt;uint32&gt; lastNrInh    := last(City/NrInhabitants);  result = 175 parameter&lt;string&gt; lastCityName := last(City/CityName);       result = ‘Haarlem’ parameter&lt;bool&gt;   lastIsCap    := last(City/IsCapital);      result = False attribute&lt;uint32&gt; lastNrInhRegion    (Region):= last(City/NrInhabitants, City/Region_rel); attribute&lt;string&gt; lastCityNameRegion (Region):= last(City/CityName,      City/Region_rel); attribute&lt;bool&gt;   lastIsCapital      (Region):= last(City/IsCapital,     City/Region_rel); . | City/NrInhabitants | City/CityName | IsCapital | City/Region_rel | . | 550 | Amsterdam | True | 0 | . | 525 | Rotterdam | False | 1 | . | 300 | Utrecht | False | 2 | . | 500 | DenHaag | False | 1 | . | 200 | Eindhoven | False | 3 | . | 175 | Haarlem | False | null | . | null | null | False | 3 | . domain City, nr of rows = 7 . | lastNrInhRegion | lastCityNameRegion | lastIsCapitalRegion | . | 550 | Amsterdam | True | . | 500 | DenHaag | False | . | 300 | Utrecht | False | . | 200 | Eindhoven | False | . | null | null | False | . domain Region, nr of rows = 5 . ",
    "url": "/docs/last.html#example",
    
    "relUrl": "/docs/last.html#example"
  },"1640": {
    "doc": "last",
    "title": "see also",
    "content": ". | first | . ",
    "url": "/docs/last.html#see-also",
    
    "relUrl": "/docs/last.html#see-also"
  },"1641": {
    "doc": "last",
    "title": "last",
    "content": "aggregation-functions last . ",
    "url": "/docs/last.html",
    
    "relUrl": "/docs/last.html"
  },"1642": {
    "doc": "last_node",
    "title": "syntax",
    "content": ". | last_node(arc_polygon_dataitem) | . ",
    "url": "/docs/last_node.html#syntax",
    
    "relUrl": "/docs/last_node.html#syntax"
  },"1643": {
    "doc": "last_node",
    "title": "definition",
    "content": "last_node(arc_polygon_dataitem) results in a point data-item with the coordinates of the last point of an arc or polygon of argument arc_polygon_dataitem. ",
    "url": "/docs/last_node.html#definition",
    
    "relUrl": "/docs/last_node.html#definition"
  },"1644": {
    "doc": "last_node",
    "title": "description",
    "content": "Use the arc2segm function to split an arc in segment. ",
    "url": "/docs/last_node.html#description",
    
    "relUrl": "/docs/last_node.html#description"
  },"1645": {
    "doc": "last_node",
    "title": "applies to",
    "content": "data item arc_polygon_dataitem with fpoint or dpoint value-type and composition arc or polygon. ",
    "url": "/docs/last_node.html#applies-to",
    
    "relUrl": "/docs/last_node.html#applies-to"
  },"1646": {
    "doc": "last_node",
    "title": "example",
    "content": "attribute&lt;fpoint&gt; last_node (Road) := last_node(road/geometry); . | road/geometry | last_node | . | {2 {399246, 112631}{398599, 111866}} | {398599, 111866} | . | {3 {398599, 111866}{399495, 111924} {401801, 111524}} | {401801, 111524} | . | {2 {401529, 114921}{398584, 114823}} | {398584, 114823} | . domain Road, nr of rows = 3 . ",
    "url": "/docs/last_node.html#example",
    
    "relUrl": "/docs/last_node.html#example"
  },"1647": {
    "doc": "last_node",
    "title": "see also",
    "content": ". | first_node | . ",
    "url": "/docs/last_node.html#see-also",
    
    "relUrl": "/docs/last_node.html#see-also"
  },"1648": {
    "doc": "last_node",
    "title": "last_node",
    "content": "network-functions last node . ",
    "url": "/docs/last_node.html",
    
    "relUrl": "/docs/last_node.html"
  },"1649": {
    "doc": "latlongwgs842rd",
    "title": "syntax",
    "content": ". | LatLongWgs842RD(geometry, value type) | . ",
    "url": "/docs/latlongwgs842rd.html#syntax",
    
    "relUrl": "/docs/latlongwgs842rd.html#syntax"
  },"1650": {
    "doc": "latlongwgs842rd",
    "title": "definition",
    "content": "LatLongWgs842RD(geometry, value type) converts the geometry argument, expressed in the LatLong coordinate system towards the Dutch RD coordinate system . The second optional argument is the value-type of the resulting data-item. ",
    "url": "/docs/latlongwgs842rd.html#definition",
    
    "relUrl": "/docs/latlongwgs842rd.html#definition"
  },"1651": {
    "doc": "latlongwgs842rd",
    "title": "applies to",
    "content": "data item geometry with Point value type . ",
    "url": "/docs/latlongwgs842rd.html#applies-to",
    
    "relUrl": "/docs/latlongwgs842rd.html#applies-to"
  },"1652": {
    "doc": "latlongwgs842rd",
    "title": "since version",
    "content": "5.44 . ",
    "url": "/docs/latlongwgs842rd.html#since-version",
    
    "relUrl": "/docs/latlongwgs842rd.html#since-version"
  },"1653": {
    "doc": "latlongwgs842rd",
    "title": "example",
    "content": "attribute&lt;dpoint&gt; district_rd (DDomain, polygon) := LatLongWgs842RD(district_LatLong, dpoint); . | district_LatLong | district_rd | . | {21: {51.6145901, 4.7924961}{51 | {21: {403025, 113810}{4 | . | {17: {51.5962592, 4.7849284}{51 | {17: {400990, 113269}{4 | . | {19: {51.5986213, 4.8113099}{51 | {19: {401238, 115099}{4 | . DDomain, nr of rows = 3 . ",
    "url": "/docs/latlongwgs842rd.html#example",
    
    "relUrl": "/docs/latlongwgs842rd.html#example"
  },"1654": {
    "doc": "latlongwgs842rd",
    "title": "see also",
    "content": ". | rd2latlongwgs84 | rd2latlongge | rd2latlonged50 | rd2latlong | . ",
    "url": "/docs/latlongwgs842rd.html#see-also",
    
    "relUrl": "/docs/latlongwgs842rd.html#see-also"
  },"1655": {
    "doc": "latlongwgs842rd",
    "title": "latlongwgs842rd",
    "content": "geometric-functions LatLongWgs842RD . ",
    "url": "/docs/latlongwgs842rd.html",
    
    "relUrl": "/docs/latlongwgs842rd.html"
  },"1656": {
    "doc": "le",
    "title": "syntax",
    "content": ". | le(a, b) | a &lt;= b | . ",
    "url": "/docs/le.html#syntax",
    
    "relUrl": "/docs/le.html#syntax"
  },"1657": {
    "doc": "le",
    "title": "definition",
    "content": "le(a, b) or a &lt; b results in a boolean data-item indicating if the values of data item a are less than or equal to the corresponding values of data item b. ",
    "url": "/docs/le.html#definition",
    
    "relUrl": "/docs/le.html#definition"
  },"1658": {
    "doc": "le",
    "title": "description",
    "content": "Each comparison with missing values results in the value False. ",
    "url": "/docs/le.html#description",
    
    "relUrl": "/docs/le.html#description"
  },"1659": {
    "doc": "le",
    "title": "applies to",
    "content": "Data items with Numeric, string or bool value-type . ",
    "url": "/docs/le.html#applies-to",
    
    "relUrl": "/docs/le.html#applies-to"
  },"1660": {
    "doc": "le",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be compared to data items of any domain). | argument must have matching: . | value-type | metric | . | . ",
    "url": "/docs/le.html#conditions",
    
    "relUrl": "/docs/le.html#conditions"
  },"1661": {
    "doc": "le",
    "title": "example",
    "content": "1. attribute&lt;bool&gt; AleB (CDomain) := le(A, B); 2. attribute&lt;bool&gt; AleB (CDomain) := A &lt;= B; . | A | B | AltB | . | 0 | 0 | True | . | 1 | 2 | True | . | 2.5 | 2.5 | True | . | -100 | 100 | True | . | 999 | -999 | False | . | null | 0 | False | . | null | null | False | . | 0 | null | False | . | null | 100 | False | . | 100 | null | False | . CDomain, nr of rows = 10 . ",
    "url": "/docs/le.html#example",
    
    "relUrl": "/docs/le.html#example"
  },"1662": {
    "doc": "le",
    "title": "see also",
    "content": ". | le_or_lhs_null | . ",
    "url": "/docs/le.html#see-also",
    
    "relUrl": "/docs/le.html#see-also"
  },"1663": {
    "doc": "le",
    "title": "le",
    "content": "ordering-functions less than or equals (&lt;=) . ",
    "url": "/docs/le.html",
    
    "relUrl": "/docs/le.html"
  },"1664": {
    "doc": "le_or_lhs_null",
    "title": "syntax",
    "content": ". | le_or_lhs_null(a, b) | . ",
    "url": "/docs/le_or_lhs_null.html#syntax",
    
    "relUrl": "/docs/le_or_lhs_null.html#syntax"
  },"1665": {
    "doc": "le_or_lhs_null",
    "title": "definition",
    "content": "le_or_lhs_null(a, b) results in a boolean data-item indicating if the values of data item a are less than or equals the corresponding values of data item b or if the values of data item a are null. ",
    "url": "/docs/le_or_lhs_null.html#definition",
    
    "relUrl": "/docs/le_or_lhs_null.html#definition"
  },"1666": {
    "doc": "le_or_lhs_null",
    "title": "description",
    "content": "The comparison with missing values in data item a results in the value True (except for null values in data item b). ",
    "url": "/docs/le_or_lhs_null.html#description",
    
    "relUrl": "/docs/le_or_lhs_null.html#description"
  },"1667": {
    "doc": "le_or_lhs_null",
    "title": "applies to",
    "content": "Data items with Numeric, string or bool value-type . ",
    "url": "/docs/le_or_lhs_null.html#applies-to",
    
    "relUrl": "/docs/le_or_lhs_null.html#applies-to"
  },"1668": {
    "doc": "le_or_lhs_null",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be compared to data items of any domain). | argument must have matching: . | value-type | metric | . | . ",
    "url": "/docs/le_or_lhs_null.html#conditions",
    
    "relUrl": "/docs/le_or_lhs_null.html#conditions"
  },"1669": {
    "doc": "le_or_lhs_null",
    "title": "example",
    "content": "attribute&lt;bool&gt; AltB (CDomain) := le_or_lhs_null(A, B); . | A | B | AltB | . | 0 | 0 | True | . | 1 | 2 | True | . | 2.5 | 2.5 | True | . | -100 | 100 | True | . | 999 | -999 | False | . | null | 0 | True | . | null | null | False | . | 0 | null | False | . | null | 100 | True | . | 100 | null | False | . CDomain, nr of rows = 10 . ",
    "url": "/docs/le_or_lhs_null.html#example",
    
    "relUrl": "/docs/le_or_lhs_null.html#example"
  },"1670": {
    "doc": "le_or_lhs_null",
    "title": "see also",
    "content": ". | le (&lt;=) | . ",
    "url": "/docs/le_or_lhs_null.html#see-also",
    
    "relUrl": "/docs/le_or_lhs_null.html#see-also"
  },"1671": {
    "doc": "le_or_lhs_null",
    "title": "le_or_lhs_null",
    "content": "ordering-functions less than or equals to or left side has null values . ",
    "url": "/docs/le_or_lhs_null.html",
    
    "relUrl": "/docs/le_or_lhs_null.html"
  },"1672": {
    "doc": "left",
    "title": "syntax",
    "content": ". | left(string_dataitem, length) | . ",
    "url": "/docs/left.html#syntax",
    
    "relUrl": "/docs/left.html#syntax"
  },"1673": {
    "doc": "left",
    "title": "definition",
    "content": "left(string_dataitem, length) results in a substring of string_dataitem with the number of characters of the length argument, starting from the left of the string_dataitem. ",
    "url": "/docs/left.html#definition",
    
    "relUrl": "/docs/left.html#definition"
  },"1674": {
    "doc": "left",
    "title": "description",
    "content": "left(A, 3) is synonym for substr(A, 0, 3). ",
    "url": "/docs/left.html#description",
    
    "relUrl": "/docs/left.html#description"
  },"1675": {
    "doc": "left",
    "title": "applies to",
    "content": ". | data-item string_dataitem with string value-type | literal or parameter length with uint32 value type | . ",
    "url": "/docs/left.html#applies-to",
    
    "relUrl": "/docs/left.html#applies-to"
  },"1676": {
    "doc": "left",
    "title": "since version",
    "content": "7.155 . ",
    "url": "/docs/left.html#since-version",
    
    "relUrl": "/docs/left.html#since-version"
  },"1677": {
    "doc": "left",
    "title": "example",
    "content": "attribute&lt;string&gt; leftA (ADomain) := left(A, 3); . | A | leftA | . | ‘Test’ | ‘Tes’ | . | ‘88hallo99’ | ‘88h’ | . | ’+)’ | ’’’’’‘’+)’‘ | . | ‘twee woorden’ | ‘twe’ | . | ’ test met spatie’ | ’ te’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/left.html#example",
    
    "relUrl": "/docs/left.html#example"
  },"1678": {
    "doc": "left",
    "title": "see also",
    "content": ". | right | substr | . ",
    "url": "/docs/left.html#see-also",
    
    "relUrl": "/docs/left.html#see-also"
  },"1679": {
    "doc": "left",
    "title": "left",
    "content": "string-functions left . ",
    "url": "/docs/left.html",
    
    "relUrl": "/docs/left.html"
  },"1680": {
    "doc": "license",
    "title": "copyright notice and license conditions",
    "content": "Object Vision BV provides you with a non-exclusive license to use, copy, and modify the GeoDMS software under gnu-gpl-version-2-license-conditions. These conditions imply that you and third parties are allowed to use, copy, and modify the system provided that: . | you leave copyright notices unchanged; | that derived work, when distributed to other parties, will also be made available under GNU-GPL conditions and will be distributed with source code of the derived work. | . When you make derived work available to other parties, we kindly request you to provide us with a copy of that work, or keep us informed. ",
    "url": "/docs/license.html#copyright-notice-and-license-conditions",
    
    "relUrl": "/docs/license.html#copyright-notice-and-license-conditions"
  },"1681": {
    "doc": "license",
    "title": "disclaimer",
    "content": "Object Vision can take no responsibility for the correctness of input data, calculation rules and results, neither for loss of data as a result of using this software, unless otherwise agreed upon. You remain responsible for checking input data, model specifications and results. Also, you remain responsible for appropriate measures to prevent loss of data (such as making backups regularly). In case of doubt about the usability of the software or any result of a (demo) project, please contact Object Vision. ",
    "url": "/docs/license.html#disclaimer",
    
    "relUrl": "/docs/license.html#disclaimer"
  },"1682": {
    "doc": "license",
    "title": "license",
    "content": " ",
    "url": "/docs/license.html",
    
    "relUrl": "/docs/license.html"
  },"1683": {
    "doc": "local-machine-options-dialog",
    "title": "dialog",
    "content": "The Local machine Options dialog can be activated from the Settings main menu option. The settings in this dialog are related to the interface between the GeoDms and the local machine/computer. The following options can be set: . Paths . | Local Data: The folder configured here is used as the base folder for (temporary) results. See folders-and-placeholders for more information on directories and placeholders in the GeoDMS. The default setting for the Local Data is C:\\LocalData. This default setting can be overruled here. | Source Data: The folder configured here is used as the base folder for source data that is often used in multiple projects. See folders-and-placeholders for more information on directories and placeholders in the GeoDMS. The default setting for the Source Dir is C:\\SourceData. This default setting can be overruled here. | . Configuration File Editor . | Application: The path to an external text editor, used to view or edit configuration files. This configuration-file-editor is opened with the Edit &gt; Open in Editor menu option. In order to open the editor with the relevant configuration file on the relevant line, set the Parameters option | Parameters: Parameters are needed to open the Configuration File Editor with the relevant configuration file on the relevant line. The following parameters can be set (see also the blue button with the i): . | %F: file, “” are needed for paths with spaces | -n%L: line number in the file | . | Set default parameters for the editor: For Notepad ++ and Crimson Editor we have an advised set of parameters that can be set with this button. Based on the chosen application the correct set of parameters is chosen. | . Parallel Processing Parallel processing is a type of computation in which many calculations are carried out simultaneously by using multiple cores that perform tasks in separate threads. The current options are: . | Suspend view update to favor gui: keeps the GUI responsive by suspending further calculation steps whenever user events are queued, and resume these when idle. | Data-segment production as separate tasks: split up operations into separate tasks per data-segment. | Multiple operations simultaneously:performs multiple operations simultaneously. | Pipelined operations: pipeline data-segment processing by delaying data-segment production to the tasks that requests such segments. | . It is advised to use the default settings in most cases. For specific configurations/machines it might be useful to deviate from these setting. Treshold for memory flushing wait procedure If your machine is using (almost) all it’s memory, it becomes less responsive. With this treshold you can set a percentage of the total memory used at which the GeoDMS starts flushing the memory to stay responsive. In general if you increase the value, the GeoDMS calculates faster, but becomes less responsive for calculations with large datasets. In most cases we advice to use a value between 80% and 90%. Logging . | Write TraceLog file: This option activates the generation of a log file (called trace.log) by the GeoDms. The trace.log file logs information about the calculation processes and can be used for debugging purposes. The log file is saved in the project specific subfolder of the configured Local Data placeholder. | . ",
    "url": "/docs/local-machine-options-dialog.html#dialog",
    
    "relUrl": "/docs/local-machine-options-dialog.html#dialog"
  },"1684": {
    "doc": "local-machine-options-dialog",
    "title": "local-machine-options-dialog",
    "content": "user-guide-geodms-gui - Local machine Options dialog . The Local machine Options dialog can be activated from the Settings main menu option. ",
    "url": "/docs/local-machine-options-dialog.html",
    
    "relUrl": "/docs/local-machine-options-dialog.html"
  },"1685": {
    "doc": "localdatadir",
    "title": "localdatadir",
    "content": "The LocalDataDir is the root folder for (temporary) results. Before the GeoDMS 8 serie is was also used for the CalcCache. You can adjust the path on your local machine for the LocalDataDir from the geodms-gui with the menu option: Tools &gt; Options &gt; Advanced Tab. In your configuration you can use the folders-and-placeholders %LocalDataDir% to refer to this folder. ",
    "url": "/docs/localdatadir.html",
    
    "relUrl": "/docs/localdatadir.html"
  },"1686": {
    "doc": "logarithm",
    "title": "syntax",
    "content": ". | log(a) | . ",
    "url": "/docs/logarithm.html#syntax",
    
    "relUrl": "/docs/logarithm.html#syntax"
  },"1687": {
    "doc": "logarithm",
    "title": "definition",
    "content": "log(a) is defined as ln(a) or elog a (natural logarithm). log(a) results in null values for negative or zero values of data-item a. ",
    "url": "/docs/logarithm.html#definition",
    
    "relUrl": "/docs/logarithm.html#definition"
  },"1688": {
    "doc": "logarithm",
    "title": "applies to",
    "content": ". | data item with float32 or float64 value type | . ",
    "url": "/docs/logarithm.html#applies-to",
    
    "relUrl": "/docs/logarithm.html#applies-to"
  },"1689": {
    "doc": "logarithm",
    "title": "example",
    "content": "attribute&lt;float32&gt; lnA (ADomain) := log(A); . | A | lnA | . | 1 | 0 | . | 2 | 0.69 | . | 3.5 | 1.25 | . | 5 | 1.61 | . | 10 | 2.30 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/logarithm.html#example",
    
    "relUrl": "/docs/logarithm.html#example"
  },"1690": {
    "doc": "logarithm",
    "title": "logarithm",
    "content": "transcendental-functions logarithm . ",
    "url": "/docs/logarithm.html",
    
    "relUrl": "/docs/logarithm.html"
  },"1691": {
    "doc": "logical-functions",
    "title": "logical-functions",
    "content": "Logical operators-and-functions are used to provide basic comparisons, returning in boolean data-item like iif or and . | iif ( ? : ) - if .. then .. else | and (&amp;&amp;) | or (||) | not (!) | switchcase- combine multiple if .. then .. else statements | . | bitand - bitwise and operator | bitor- bitwise or operator | complement - bitwise not operator | . ",
    "url": "/docs/logical-functions.html",
    
    "relUrl": "/docs/logical-functions.html"
  },"1692": {
    "doc": "logit-regression",
    "title": "observed data",
    "content": "Observed choices Yi**j are assumed to be drawn from a repreated Bernoulli experiment with probabilites P(i→j). Thus $P(Y) = \\prod\\limits_{ij} {N_i ! \\times P(i \\to j)^{Y_{ij}} \\over Y_{ij}! }$ with $N_i := \\sum\\limits_{j} Y_{ij}$. Thus L(Y) := log(P(Y)) \\(\\\\begin{align} &amp;= log \\\\prod\\\\limits_{ij} {N_i ! \\\\times P(i \\\\to j)^{Y_{ij}} \\\\over Y_{ij}! } \\\\\\\\ &amp;= C + \\\\sum\\\\limits_{ij} (Y_{ij} \\\\times log(P_{ij})) \\\\\\\\ &amp;= C + \\\\sum\\\\limits_{i} \\\\left\\[{ \\\\sum\\\\limits_{j}Y_{ij} \\\\times L(i \\\\to j)}\\\\right\\] \\\\\\\\ &amp;= C + \\\\sum\\\\limits_{i} \\\\left\\[{ \\\\sum\\\\limits_{j}Y_{ij} \\\\times \\\\left( v_{ij} - log \\\\sum\\\\limits_{j'}w_{ij'}\\\\right)}\\\\right\\] \\\\\\\\ &amp;= C + \\\\sum\\\\limits_{i} \\\\left\\[{ \\\\left( \\\\sum\\\\limits_{j}Y_{ij} \\\\times v_{ij} \\\\right) - N_i \\\\times log \\\\sum\\\\limits_{j}w_{ij}}\\\\right\\] \\\\end{align}\\) with $C = \\sum\\limits_{i} C_i$ and $C_i := [log (N_i!) - \\sum\\limits_{j} log (Y_{ij}!)]$, which is independent of Pi**j and βj. Note that: Ni = 1 ⟹ Ci = 0 . ",
    "url": "/docs/logit-regression.html#observed-data",
    
    "relUrl": "/docs/logit-regression.html#observed-data"
  },"1693": {
    "doc": "logit-regression",
    "title": "specification",
    "content": "The presented form vi**j := βp * Xi**jp (using Einstein notation from here) is more generic than known implementations of logistic regression (such as in SPSS and R), where Xiq, a set of q = 1..#q data values given for each i (Xi0 is set t 1 to represent the incident for each j) and (k−1) * (#q+1) parameters are to be estimated, thus vi**j := βj**q * Xiq for j = 2..k which requires a different beta for each alternative choice and data set, causing unnecessary large parameter space. The latter specification can be reduced to the more generic form by: . | assigning a unique p to each jq combination, represented by Aj**qp. | defining Xi**jp := Aj**qp * Xiq for j = 2..k, thus creating redundant and zero data values. | . However, a generical model cannot be reduced to a specification with different β’s for each alternative choice unless the latter parameter space can be restricted to contain no more dimensions than a generic form. With large n and k, the set of data values X_{ijk} can be huge. To mitigate the data size, the following tricks can be applied: . | limit the set of combinations of i and j to the most probable or near j’s for each i and/or cluster the other j’s. | use only a sample from the set of possible i’s. | support specific forms of data: | . | # | form | reduction | description | . | 0 | βpXi**jp |   | general form of p factors specific for each i and j | . | 1 | βpAj**qpXiq | Xi**jp := Aj**qpXiq | q factors that vary with i but not with j. | . | 2 | βpXipXjp | Xi**jp := XjpXip | p specific factors in simple multiplicative form | . | 3 | βj**qXiq |   | q factors that vary with j but not with i. | . | 4 | βpXjp | Xi**jp := Xjp | state constants Dj | . | 5 | βj |   | state dependent intercept | . | 6 | βp(Jip==j) |   | usage of a recorded preference | . ",
    "url": "/docs/logit-regression.html#specification",
    
    "relUrl": "/docs/logit-regression.html#specification"
  },"1694": {
    "doc": "logit-regression",
    "title": "regression",
    "content": "The βp’s are found by maximizing the likelihood L(Y|β) which is equivalent to finding the maximum of $\\sum\\limits_{i} \\left[{ \\sum\\limits_{j}Y_{ij} \\times v_{ij} - N_i \\times log \\sum\\limits_{j}w_{ij}}\\right]$ . First order conditions, for each p: $0 = { \\partial L \\over \\partial\\beta_p } = \\sum\\limits_{i} \\left[{ \\sum\\limits_{j}Y_{ij} \\times { \\partial v_{ij} \\over \\partial \\beta_p } - N_i \\times { \\partial log \\sum\\limits_{j}w_{ij} \\over \\partial \\beta_p }} \\right]$ . Thus, for each p: $\\sum\\limits_{ij} Y_{ij} \\times X_{ijp} = \\sum\\limits_{ij} N_i \\times P_{ij} \\times X_{ijp}$ as ${ \\partial v_{ij} \\over \\partial \\beta_p } = X^p_{ij}$ and \\( { \\partial log \\sum\\limits_{j}w_{ij} \\over \\partial \\beta_p } . ",
    "url": "/docs/logit-regression.html#regression",
    
    "relUrl": "/docs/logit-regression.html#regression"
  },"1695": {
    "doc": "logit-regression",
    "title": "{ \\sum\\limits_{j} {\\partial w_{ij} / \\partial \\beta_p } \\over \\sum\\limits_{j}w_{ij} }",
    "content": "{ \\sum\\limits_{j} {w_{ij} \\times \\partial v_{ij} / \\partial \\beta_p } \\over \\sum\\limits_{j}w_{ij} } . ",
    "url": "/docs/logit-regression.html#-sumlimits_j-partial-w_ij--partial-beta_p--over-sumlimits_jw_ij-",
    
    "relUrl": "/docs/logit-regression.html#-sumlimits_j-partial-w_ij--partial-beta_p--over-sumlimits_jw_ij-"
  },"1696": {
    "doc": "logit-regression",
    "title": "{ \\sum\\limits_{j} {w_{ij} \\times X_{ijp} } \\over \\sum\\limits_{j}w_{ij} }",
    "content": "\\sum\\limits_{j} P_{ij} \\times X_{ijp} \\) . ",
    "url": "/docs/logit-regression.html#-sumlimits_j-w_ij-times-x_ijp--over-sumlimits_jw_ij-",
    
    "relUrl": "/docs/logit-regression.html#-sumlimits_j-w_ij-times-x_ijp--over-sumlimits_jw_ij-"
  },"1697": {
    "doc": "logit-regression",
    "title": "example",
    "content": "logit regression of rehousing. ",
    "url": "/docs/logit-regression.html#example",
    
    "relUrl": "/docs/logit-regression.html#example"
  },"1698": {
    "doc": "logit-regression",
    "title": "logit-regression",
    "content": "If one assumes that the probability P(i→j) that actor i = 1..n chooses alternative j = 1..k is proportional (within the set of alternative choices) to the exponent of a linear combination of p = 1..#p data values Xijp related to i and j, one arrives at the logit model, or more formally: . Assume \\(\\\\begin{align} P(i \\\\to j) &amp;\\\\sim w_{ij} \\\\\\\\ w_{ij} &amp;:=exp(v_{ij}) \\\\\\\\ v_{ij} &amp;:= \\\\sum\\\\limits_{p} \\\\beta_p X_{ijp} \\\\end{align}\\) . Thus L(i→j) := log(P(i→j)) ∼ vi**j. Consequently, wi**j &gt; 0 and $P(i \\to j) := { w_{ij} \\over \\sum\\limits_{j’}w_{ij’}}$, since $\\sum\\limits_{j}P_{ij}$ must be 1. Note that: . | vi**j is a linear combination of Xijp with weights βp as logit model parameters. | the odds ratio $P(i \\to j) \\over P(i \\to j’)$ of choice j against alternative j′ is equal to ${w_{ij} \\over w_{ij’}} = exp( v_{ij} - v_{ij’} ) = exp \\sum\\limits_{p} \\beta_p \\left( X_{ijp}- X_{ij’p} \\right)$ | this formulation does not require a separate beta index (aka parameter space dimension) per alternative choice j for each exogenous variable. | . ",
    "url": "/docs/logit-regression.html",
    
    "relUrl": "/docs/logit-regression.html"
  },"1699": {
    "doc": "lookup",
    "title": "syntax",
    "content": ". | lookup(relation, values) | values[relation] | relation -&gt; values | . ",
    "url": "/docs/lookup.html#syntax",
    
    "relUrl": "/docs/lookup.html#syntax"
  },"1700": {
    "doc": "lookup",
    "title": "definition",
    "content": "lookup(relation,values) or values[relation] or relation -&gt; values results in a data-item with the values of the argument values for the domain-unit of the relation attribute. The relation argument defines which values are looked up in the domain unit of the values attribute. The resulting data item has the same values-unit as the values argument and the same domain unit as the relation argument. ",
    "url": "/docs/lookup.html#definition",
    
    "relUrl": "/docs/lookup.html#definition"
  },"1701": {
    "doc": "lookup",
    "title": "applies to",
    "content": ". | relation: data-item with the index-numbers of the domain unit of the values attribute. | values: attribute with the requested values to be looked up. | . ",
    "url": "/docs/lookup.html#applies-to",
    
    "relUrl": "/docs/lookup.html#applies-to"
  },"1702": {
    "doc": "lookup",
    "title": "description",
    "content": "The relation towards the domain unit of argument values can de derived from any foreign key attribute with the rlookup function. The rjoin function can be used to relate on foreign key attributes, without the explicit use of index numbers. ",
    "url": "/docs/lookup.html#description",
    
    "relUrl": "/docs/lookup.html#description"
  },"1703": {
    "doc": "lookup",
    "title": "example",
    "content": "attribute&lt;degrees&gt; LTemp (City) := lookup(City/Region_rel, Region/Temp); attribute&lt;degrees&gt; LTemp (City) := Region/Temp[City/Region_rel]; attribute&lt;degrees&gt; LTemp (City) := City/Region_rel -&gt; Region/Temp; . | City/Region_rel | LTemp | . | 0 | 12 | . | 1 | 11 | . | 2 | null | . | 1 | 11 | . | 3 | 14 | . | null | null | . | 3 | 14 | . domain City, nr of rows = 7 . | Region/Temp | . | 12 | . | 11 | . | null | . | 14 | . | 13 | . domain Region, nr of rows = 5 . ",
    "url": "/docs/lookup.html#example",
    
    "relUrl": "/docs/lookup.html#example"
  },"1704": {
    "doc": "lookup",
    "title": "see also",
    "content": ". | rlookup | rjoin | . ",
    "url": "/docs/lookup.html#see-also",
    
    "relUrl": "/docs/lookup.html#see-also"
  },"1705": {
    "doc": "lookup",
    "title": "lookup",
    "content": "relational-functions lookup . ",
    "url": "/docs/lookup.html",
    
    "relUrl": "/docs/lookup.html"
  },"1706": {
    "doc": "loop",
    "title": "syntax",
    "content": ". | loop(template, number) | . ",
    "url": "/docs/loop.html#syntax",
    
    "relUrl": "/docs/loop.html#syntax"
  },"1707": {
    "doc": "loop",
    "title": "definition",
    "content": "loop(template, number) results in a set of instantiated template. The number of instantiations is specified by the number argument. This number is a maximum, a stop condition could result in less instantiations. A currvalue and nextvalue item need to be configured within the template. ",
    "url": "/docs/loop.html#definition",
    
    "relUrl": "/docs/loop.html#definition"
  },"1708": {
    "doc": "loop",
    "title": "description",
    "content": "Optional a stop condition can be configured. This condition need to be configured as a parameter with the name stop and an expression with a boolean condition. If the condition becomes true, the loop will not continue. The loop function is used for dynamic modelling. ",
    "url": "/docs/loop.html#description",
    
    "relUrl": "/docs/loop.html#description"
  },"1709": {
    "doc": "loop",
    "title": "example",
    "content": "template LoopTemplate {    parameter&lt;uint32&gt; NrIter;    container currValue;    container nextValue;`    container results    { parameter&lt;uint16&gt; LoopWaarde := NrIter;    }    container loop := loop(LoopTemplate, 5); } . ",
    "url": "/docs/loop.html#example",
    
    "relUrl": "/docs/loop.html#example"
  },"1710": {
    "doc": "loop",
    "title": "loop",
    "content": "metascript-functions loop . ",
    "url": "/docs/loop.html",
    
    "relUrl": "/docs/loop.html"
  },"1711": {
    "doc": "looproutes",
    "title": "looproutes",
    "content": "Met een dijkstra functie kan voor iedere herkomstlocatie de reisweerstand (afstand, reistijd, ook wel Impedance genoemd) hier naar de dichtstbijzijnde bestemmingslocatie worden berekend. Gebruikmakend van deze analyse, kan per wegsegment worden geteld in hoeveel van deze routes het segment voorkomt. Zo ontstaat een beeld van de (belangrijkste) routes. Onderstaande figuur geeft een beeld van de (loop)routes van woningen naar scholen. Indien uit bijvoorbeeld de leerlingenadministratie van een gemeente bekend is naar welke scholen deze leerlingen feitelijk gaan, kunnen ook de (loop)routes naar de feitelijk gekozen scholen in beeld gebracht worden. [](File:Routes.png \"wikilink\") . figuur 1, looproutes van woningen naar scholen . In het voorbeeld zijn de wegsegmenten ingekleurd en met een bepaalde dikte weergegeven. Naarmate het segment donkerder en breder wordt weergegeven, betekent dit dat het segment door meer kinderen belopen wordt. Analyses van looproutes zijn van belang voor bijvoorbeeld: . | het prioriteren van verkeersveiligheidsmaatregelen. Voor scholieren kan zo een goed beeld gegeven van de belangrijkste wegsegmenten. Deze informatie, zeker ook in relatie met meldingen van de politie over ongevallen, kan een belangrijke bron zijn voor het prioriteren van maatregelen om de verkeersveiligheid te bevorderen. | het prioriteren van maatregelen om de openbare ruimte beter toegankelijk te maken. | . ",
    "url": "/docs/looproutes.html",
    
    "relUrl": "/docs/looproutes.html"
  },"1712": {
    "doc": "lower_bound",
    "title": "syntax",
    "content": ". | lower_bound(polygon_data_item) | . ",
    "url": "/docs/lower_bound.html#syntax",
    
    "relUrl": "/docs/lower_bound.html#syntax"
  },"1713": {
    "doc": "lower_bound",
    "title": "definition",
    "content": "lower_bound(polygon_data_item) results in a point data-item with the lowest X and Y value of the points in the polygon_data_item. In the Dutch RD coordinate system, the lower_bound is the bottom left coordinate. ",
    "url": "/docs/lower_bound.html#definition",
    
    "relUrl": "/docs/lower_bound.html#definition"
  },"1714": {
    "doc": "lower_bound",
    "title": "applies to",
    "content": "data item polygon_data_item with fpoint or dpoint value-type and composition polygon . ",
    "url": "/docs/lower_bound.html#applies-to",
    
    "relUrl": "/docs/lower_bound.html#applies-to"
  },"1715": {
    "doc": "lower_bound",
    "title": "example",
    "content": "attribute&lt;point_rd&gt; lb (district) := lower_bound(district/geometry); . | district/geometry | lb | . | {21 {403025, 113810}{4 | {402428, 112312} | . | {17 {400990, 113269}{4 | {400817, 112176} | . | {19 {401238, 115099}{4 | {400888, 112888} | . domain district, nr of rows = 3 . ",
    "url": "/docs/lower_bound.html#example",
    
    "relUrl": "/docs/lower_bound.html#example"
  },"1716": {
    "doc": "lower_bound",
    "title": "see also",
    "content": ". | upper_bound | center_bound | . ",
    "url": "/docs/lower_bound.html#see-also",
    
    "relUrl": "/docs/lower_bound.html#see-also"
  },"1717": {
    "doc": "lower_bound",
    "title": "lower_bound",
    "content": "geometric-functions lower_bound . ",
    "url": "/docs/lower_bound.html",
    
    "relUrl": "/docs/lower_bound.html"
  },"1718": {
    "doc": "lowerbound",
    "title": "syntax",
    "content": ". | lowerbound(unit) | . ",
    "url": "/docs/lowerbound.html#syntax",
    
    "relUrl": "/docs/lowerbound.html#syntax"
  },"1719": {
    "doc": "lowerbound",
    "title": "definition",
    "content": "lowerbound(unit) results in the minimum allowed value for the unit argument. If a range is configured for a unit, the lowerbound function results in the minimum value of this range. If not, the lowerbound results in the default minimum value for the value-type of the unit. ",
    "url": "/docs/lowerbound.html#definition",
    
    "relUrl": "/docs/lowerbound.html#definition"
  },"1720": {
    "doc": "lowerbound",
    "title": "applies to",
    "content": ". | unit unit with Numeric or Point value type | . ",
    "url": "/docs/lowerbound.html#applies-to",
    
    "relUrl": "/docs/lowerbound.html#applies-to"
  },"1721": {
    "doc": "lowerbound",
    "title": "example",
    "content": "unit&lt;float32&gt; unit_defined            := range(float32, 2.0, 7.5); unit&lt;float32&gt; lowerbound_unit_defined := lowerbound(unit_defined); . result lowerbound_unit_defined = 2.0 . ",
    "url": "/docs/lowerbound.html#example",
    
    "relUrl": "/docs/lowerbound.html#example"
  },"1722": {
    "doc": "lowerbound",
    "title": "see also",
    "content": ". | upperbound | boundcenter | boundrange | . ",
    "url": "/docs/lowerbound.html#see-also",
    
    "relUrl": "/docs/lowerbound.html#see-also"
  },"1723": {
    "doc": "lowerbound",
    "title": "lowerbound",
    "content": "unit-functions lowerbound . ",
    "url": "/docs/lowerbound.html",
    
    "relUrl": "/docs/lowerbound.html"
  },"1724": {
    "doc": "lowercase",
    "title": "syntax",
    "content": ". | LowerCase(string_dataitem) | . ",
    "url": "/docs/lowercase.html#syntax",
    
    "relUrl": "/docs/lowercase.html#syntax"
  },"1725": {
    "doc": "lowercase",
    "title": "definition",
    "content": "LowerCase(string_dataitem) translates all uppercase characters of data-item string_dataitem to lowercases. ",
    "url": "/docs/lowercase.html#definition",
    
    "relUrl": "/docs/lowercase.html#definition"
  },"1726": {
    "doc": "lowercase",
    "title": "applies to",
    "content": "data item string_dataitem with string value-type . ",
    "url": "/docs/lowercase.html#applies-to",
    
    "relUrl": "/docs/lowercase.html#applies-to"
  },"1727": {
    "doc": "lowercase",
    "title": "since version",
    "content": "5.90 . ",
    "url": "/docs/lowercase.html#since-version",
    
    "relUrl": "/docs/lowercase.html#since-version"
  },"1728": {
    "doc": "lowercase",
    "title": "example",
    "content": "attribute&lt;string&gt; LowerCaseA (ADomain) := LowerCase(A); . | A | LowerCaseA | . | ‘Test’ | ‘test’ | . | ‘88hallo99’ | ‘88hallo99’ | . | ’+)’ | ’+)’ | . | ‘twee woorden’ | ‘twee woorden’ | . | ’ test met spatie’ | ’ test met spatie’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/lowercase.html#example",
    
    "relUrl": "/docs/lowercase.html#example"
  },"1729": {
    "doc": "lowercase",
    "title": "see also",
    "content": ". | uppercase | . ",
    "url": "/docs/lowercase.html#see-also",
    
    "relUrl": "/docs/lowercase.html#see-also"
  },"1730": {
    "doc": "lowercase",
    "title": "lowercase",
    "content": "string-functions LowerCase . ",
    "url": "/docs/lowercase.html",
    
    "relUrl": "/docs/lowercase.html"
  },"1731": {
    "doc": "lt",
    "title": "syntax",
    "content": ". | lt(a, b) | a &lt; b | . ",
    "url": "/docs/lt.html#syntax",
    
    "relUrl": "/docs/lt.html#syntax"
  },"1732": {
    "doc": "lt",
    "title": "definition",
    "content": "lt(a, b) or a &lt; b results in a boolean data-item indicating if the values of data item a are less than the corresponding values of data item b. ",
    "url": "/docs/lt.html#definition",
    
    "relUrl": "/docs/lt.html#definition"
  },"1733": {
    "doc": "lt",
    "title": "description",
    "content": "Each comparison with missing values results in the value False. ",
    "url": "/docs/lt.html#description",
    
    "relUrl": "/docs/lt.html#description"
  },"1734": {
    "doc": "lt",
    "title": "applies to",
    "content": "Data items with Numeric, string or bool value-type . ",
    "url": "/docs/lt.html#applies-to",
    
    "relUrl": "/docs/lt.html#applies-to"
  },"1735": {
    "doc": "lt",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be compared to data items of any domain). | argument must have matching: . | value-type | metric | . | . ",
    "url": "/docs/lt.html#conditions",
    
    "relUrl": "/docs/lt.html#conditions"
  },"1736": {
    "doc": "lt",
    "title": "example",
    "content": "1. attribute&lt;bool&gt; AltB (CDomain) := lt(A, B); 2. attribute&lt;bool&gt; AltB (CDomain) := A &lt; B; . | A | B | AltB | . | 0 | 0 | False | . | 1 | 2 | True | . | 2.5 | 2.5 | False | . | -100 | 100 | True | . | 999 | -999 | False | . | null | 0 | False | . | null | null | False | . | 0 | null | False | . | null | 100 | False | . | 100 | null | False | . CDomain, nr of rows = 10 . ",
    "url": "/docs/lt.html#example",
    
    "relUrl": "/docs/lt.html#example"
  },"1737": {
    "doc": "lt",
    "title": "see also",
    "content": ". | lt_or_lhs_null | . ",
    "url": "/docs/lt.html#see-also",
    
    "relUrl": "/docs/lt.html#see-also"
  },"1738": {
    "doc": "lt",
    "title": "lt",
    "content": "ordering-functions less than (&lt;) . ",
    "url": "/docs/lt.html",
    
    "relUrl": "/docs/lt.html"
  },"1739": {
    "doc": "lt_or_lhs_null",
    "title": "syntax",
    "content": ". | lt_or_lhs_null(a,b) | . ",
    "url": "/docs/lt_or_lhs_null.html#syntax",
    
    "relUrl": "/docs/lt_or_lhs_null.html#syntax"
  },"1740": {
    "doc": "lt_or_lhs_null",
    "title": "definition",
    "content": "lt_or_lhs_null(a, b) results in a boolean data-item indicating if the values of data item a are less than the corresponding values of data item b or if the values of data item a are null. ",
    "url": "/docs/lt_or_lhs_null.html#definition",
    
    "relUrl": "/docs/lt_or_lhs_null.html#definition"
  },"1741": {
    "doc": "lt_or_lhs_null",
    "title": "description",
    "content": "The comparison with missing values in data item a results in the value True (except for null values in data item b). ",
    "url": "/docs/lt_or_lhs_null.html#description",
    
    "relUrl": "/docs/lt_or_lhs_null.html#description"
  },"1742": {
    "doc": "lt_or_lhs_null",
    "title": "applies to",
    "content": "Data items with Numeric, string or bool value-type . ",
    "url": "/docs/lt_or_lhs_null.html#applies-to",
    
    "relUrl": "/docs/lt_or_lhs_null.html#applies-to"
  },"1743": {
    "doc": "lt_or_lhs_null",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be compared to data items of any domain). | argument must have matching: . | value-type | metric | . | . ",
    "url": "/docs/lt_or_lhs_null.html#conditions",
    
    "relUrl": "/docs/lt_or_lhs_null.html#conditions"
  },"1744": {
    "doc": "lt_or_lhs_null",
    "title": "example",
    "content": "attribute&lt;bool&gt; AltB (CDomain) := lt_or_lhs_null(A, B); . | A | B | AltB | . | 0 | 0 | False | . | 1 | 2 | True | . | 2.5 | 2.5 | False | . | -100 | 100 | True | . | 999 | -999 | False | . | null | 0 | True | . | null | null | False | . | 0 | null | False | . | null | 100 | True | . | 100 | null | False | . CDomain, nr of rows = 10 . ",
    "url": "/docs/lt_or_lhs_null.html#example",
    
    "relUrl": "/docs/lt_or_lhs_null.html#example"
  },"1745": {
    "doc": "lt_or_lhs_null",
    "title": "see also",
    "content": ". | lt | . ",
    "url": "/docs/lt_or_lhs_null.html#see-also",
    
    "relUrl": "/docs/lt_or_lhs_null.html#see-also"
  },"1746": {
    "doc": "lt_or_lhs_null",
    "title": "lt_or_lhs_null",
    "content": "ordering-functions less than or left side has null values . ",
    "url": "/docs/lt_or_lhs_null.html",
    
    "relUrl": "/docs/lt_or_lhs_null.html"
  },"1747": {
    "doc": "ltrim",
    "title": "syntax",
    "content": ". | ltrim(string_dataitem) | . ",
    "url": "/docs/ltrim.html#syntax",
    
    "relUrl": "/docs/ltrim.html#syntax"
  },"1748": {
    "doc": "ltrim",
    "title": "definition",
    "content": "ltrim(string_dataitem) removes space characters before the first non space character in string_dataitem. ",
    "url": "/docs/ltrim.html#definition",
    
    "relUrl": "/docs/ltrim.html#definition"
  },"1749": {
    "doc": "ltrim",
    "title": "applies to",
    "content": "data-item string_dataitem with string value-type . ",
    "url": "/docs/ltrim.html#applies-to",
    
    "relUrl": "/docs/ltrim.html#applies-to"
  },"1750": {
    "doc": "ltrim",
    "title": "example",
    "content": "attribute&lt;string&gt; ltrimA (ADomain) := ltrim(A); . | A | ltrimA | . | ‘Test’ | ‘Test’ | . | ‘88hallo99’ | ‘88hallo99’ | . | ’+)’ | ’+)’ | . | ‘twee woorden’ | ‘twee woorden’ | . | ’ test met spatie’ | ‘test met spatie’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/ltrim.html#example",
    
    "relUrl": "/docs/ltrim.html#example"
  },"1751": {
    "doc": "ltrim",
    "title": "see also",
    "content": ". | trim | rtrim | . ",
    "url": "/docs/ltrim.html#see-also",
    
    "relUrl": "/docs/ltrim.html#see-also"
  },"1752": {
    "doc": "ltrim",
    "title": "ltrim",
    "content": "string-functions ltrim . ",
    "url": "/docs/ltrim.html",
    
    "relUrl": "/docs/ltrim.html"
  },"1753": {
    "doc": "luisa",
    "title": "characteristics",
    "content": ". | European scale: 100 meter grid level (approximately 2.700.000.000 cells) or 1000 meter grid level (approximately 24.000.000 cells) | Land Use Types for urban, nature, argicultural and water | Claims at nuts2 or aggregated levels, resulting from other models (Leitap, Image). | LandUse, Environmental and Socio Economic indicators | . ",
    "url": "/docs/luisa.html#characteristics",
    
    "relUrl": "/docs/luisa.html#characteristics"
  },"1754": {
    "doc": "luisa",
    "title": "allocation",
    "content": "The discrete allocation method is used to generate an allocation with maximum total suitability within the constraints of the regional land use claims. The method is applied in small time steps of one year, taking into account both static and dynamic factors in order to model (long term) investments and natural succession processes. ",
    "url": "/docs/luisa.html#allocation",
    
    "relUrl": "/docs/luisa.html#allocation"
  },"1755": {
    "doc": "luisa",
    "title": "partners",
    "content": "The EUClueScanner has been developed  in two projects, commissioned by: . | DG Environment of the European Commission | JRC-IES in Ispra | . ",
    "url": "/docs/luisa.html#partners",
    
    "relUrl": "/docs/luisa.html#partners"
  },"1756": {
    "doc": "luisa",
    "title": "links",
    "content": ". | LUISA | . ",
    "url": "/docs/luisa.html#links",
    
    "relUrl": "/docs/luisa.html#links"
  },"1757": {
    "doc": "luisa",
    "title": "luisa",
    "content": "left . == introduction == The EUClueScanner, based on the Land Use Scanner and the Clue model, is a framework for Land Use Modelling at a European scale. It is available as part of the Land-Use-based Integrated Sustainability Assessment Modelling (LUISA), formerly known as Land Use Modeling Plantform (LUMP). ",
    "url": "/docs/luisa.html",
    
    "relUrl": "/docs/luisa.html"
  },"1758": {
    "doc": "main-menu",
    "title": "Introduction",
    "content": "The main menu is used for generic functions like opening a configuration or tiling the viewer windows or to active viewers for active tree-items. In this page all the menu options are briefly described. ",
    "url": "/docs/main-menu.html#introduction",
    
    "relUrl": "/docs/main-menu.html#introduction"
  },"1759": {
    "doc": "main-menu",
    "title": "File",
    "content": ". | Open Configuration (Ctrl-O): Open a file dialog to select a new configuration. The current configuration is closed. | Reopen current Configuration (Alt-R): Reopen the current configuration with the same items expanded. | Quit: Exit the application. | Recent configurations: The recently opened configurations are presented as separate menu items. Select a configuration with the mouse or by pressing the number on the keyboard. The number of configurations in this list is not limited. With the right mouse click a pop-up menu can be activated with the following two options: . | pin (in the future it will become possible to pin a configuration, not yet implemented) | remove: removes the configuration from the the recent Recent configurations menu options. | . | . ",
    "url": "/docs/main-menu.html#file",
    
    "relUrl": "/docs/main-menu.html#file"
  },"1760": {
    "doc": "main-menu",
    "title": "Edit",
    "content": ". | Open in Editor: Open the current item in the configuration-file-editor as configured in the Settings &gt; Local machine options dialog, section Configuration File Editor. This option is also available from the pop-up menu of the treeview. | . ",
    "url": "/docs/main-menu.html#edit",
    
    "relUrl": "/docs/main-menu.html#edit"
  },"1761": {
    "doc": "main-menu",
    "title": "View",
    "content": ". | Default: Activate the default viewer for the active data-item (the option is only enabled for data items). The default viewer for all data that can be visualized in a map is the map view. For all other data items, the default viewer is the Table view. The icon in the treeview indicates the default viewer. | Table: Activate the table-view for the active data item. The option becomes enabled if the tree item can be visualized in a table. | Map: Activate the map-view for the active data item. The option becomes enabled if the tree item can be visualized in a map. | Statistics: Activate a Window with general statistics for the active data item. The option becomes enabled for data items. The results in the Statistics view can differ slightly from calculated aggregated values. The Statistics view calculates all present values in a float64 format. If an aggregation is performed on a float32 data item, the results are round off after the calculations to a float32 format. | Calculation times: Activate a Window with the calculation times and memory usage of the last task that took more than 1 second to complete. This option becomes enabled if such tasks are available. | List of loaded Configuration Files: Activate a Window with the currently loaded configuration files, including their read data &amp; time. | Toggle component: Toggles the component on or off. | . ",
    "url": "/docs/main-menu.html#view",
    
    "relUrl": "/docs/main-menu.html#view"
  },"1762": {
    "doc": "main-menu",
    "title": "Tools",
    "content": ". | Code analysis: Four options to find out if the item configured is used in calculating results (This option is also available from the pop-up menu of the treeview): . | set source: set the item as source item to be analysed | set target: set the item as target item for the calculation process | add target: add the item as target item for the calculation process | clear target: clear the item as target item for the calculation process | . | Eventlog filter: Activate the filter to select the eventlog messages. | Open the root configuration file: Opens the root item in the configuration-file-editor as configured in the Settings &gt; Local machine options dialog, section Configuration File Editor. This option is available here, as the root item can not be activated in the treeview. | Expand all items in the treeview: This options expand a full configuration in the TreeView (can be time consuming). The option is mainly relevant for debugging purposes. | . ",
    "url": "/docs/main-menu.html#tools",
    
    "relUrl": "/docs/main-menu.html#tools"
  },"1763": {
    "doc": "main-menu",
    "title": "Settings",
    "content": ". | GUI Options: Activate a dialog to gui-options-dialog. | Local machine Options: Activate a dialog to local-machine-options-dialog. | Config Options: Activate a dialog to config-options-dialog on the Local machine. | . ",
    "url": "/docs/main-menu.html#settings",
    
    "relUrl": "/docs/main-menu.html#settings"
  },"1764": {
    "doc": "main-menu",
    "title": "Window",
    "content": ". | Tile Windows: Tile the currently opened data viewers. The tab presentation is changed to the standard Windows visualization. The area for the primary data views is fully used by the viewers. | Cascade: Cascade the currently opened data viewers. The tab presentation is changed to the standard Windows visualization. | Close: Close the active view. | Close all: Close all currently opened data views. | Close all but this: Close all opened data viewers except the currently active data view | Views: All opened data views are presented as separate menu items. The active view is presented with a blue background color in the icon. Each view can be selected from this list. | . ",
    "url": "/docs/main-menu.html#window",
    
    "relUrl": "/docs/main-menu.html#window"
  },"1765": {
    "doc": "main-menu",
    "title": "Help",
    "content": ". | About GeoDms: Open the About GeoDms box for information on the GeoDMS version and the used components. | About Qt: Opens the About Qt box for information on the Qt version used to develop the GUI | Wiki : Opens the Wiki page of the GeoDms with documentation on how to use the GeoDMS | . ",
    "url": "/docs/main-menu.html#help",
    
    "relUrl": "/docs/main-menu.html#help"
  },"1766": {
    "doc": "main-menu",
    "title": "main-menu",
    "content": "user-guide-geodms-gui - main menu . ",
    "url": "/docs/main-menu.html",
    
    "relUrl": "/docs/main-menu.html"
  },"1767": {
    "doc": "makedefined",
    "title": "syntax",
    "content": ". | MakeDefined(a, value) | . ",
    "url": "/docs/makedefined.html#syntax",
    
    "relUrl": "/docs/makedefined.html#syntax"
  },"1768": {
    "doc": "makedefined",
    "title": "definition",
    "content": "MakeDefined(a, value) defines the argument value (often zero) for the null values in data-item a. ",
    "url": "/docs/makedefined.html#definition",
    
    "relUrl": "/docs/makedefined.html#definition"
  },"1769": {
    "doc": "makedefined",
    "title": "applies to",
    "content": ". | data items with Numeric, Point or string value-type | . ",
    "url": "/docs/makedefined.html#applies-to",
    
    "relUrl": "/docs/makedefined.html#applies-to"
  },"1770": {
    "doc": "makedefined",
    "title": "conditions",
    "content": ". | The values-unit of the arguments a and value must match. | The domain-unit of the arguments must match or be void (literals or parameter can be calculated with data items of any domain). | . ",
    "url": "/docs/makedefined.html#conditions",
    
    "relUrl": "/docs/makedefined.html#conditions"
  },"1771": {
    "doc": "makedefined",
    "title": "example",
    "content": "attribute&lt;float32&gt; MakeDefinedA (ADomain) := MakeDefined(A, 0f); . | A(float32) | MakeDefinedA | . | 0 | 0 | . | null | 0 | . | 1000000 | 1000000 | . | -2.5 | -2.5 | . | 99.9 | 99.9 | . ",
    "url": "/docs/makedefined.html#example",
    
    "relUrl": "/docs/makedefined.html#example"
  },"1772": {
    "doc": "makedefined",
    "title": "see also",
    "content": ". | isdefined | . ",
    "url": "/docs/makedefined.html#see-also",
    
    "relUrl": "/docs/makedefined.html#see-also"
  },"1773": {
    "doc": "makedefined",
    "title": "makedefined",
    "content": "predicates-functions MakeDefined . ",
    "url": "/docs/makedefined.html",
    
    "relUrl": "/docs/makedefined.html"
  },"1774": {
    "doc": "makedir",
    "title": "syntax",
    "content": ". | MakeDir(target_foldername) | . ",
    "url": "/docs/makedir.html#syntax",
    
    "relUrl": "/docs/makedir.html#syntax"
  },"1775": {
    "doc": "makedir",
    "title": "definition",
    "content": "MakeDir(target_foldername) creates a new folder target_foldername, if it does not yet exists. ",
    "url": "/docs/makedir.html#definition",
    
    "relUrl": "/docs/makedir.html#definition"
  },"1776": {
    "doc": "makedir",
    "title": "description",
    "content": "In the GeoDMS use forward slashes(/) in path names in stead of backward slashes. ",
    "url": "/docs/makedir.html#description",
    
    "relUrl": "/docs/makedir.html#description"
  },"1777": {
    "doc": "makedir",
    "title": "applies to",
    "content": "data-item or literal target_foldername with string value-type . ",
    "url": "/docs/makedir.html#applies-to",
    
    "relUrl": "/docs/makedir.html#applies-to"
  },"1778": {
    "doc": "makedir",
    "title": "example",
    "content": "parameter&lt;string&gt; MakeDir := MakeDir('c:/tmp'); . result: updating this parameter creates a new folder: c:\\tmp. ",
    "url": "/docs/makedir.html#example",
    
    "relUrl": "/docs/makedir.html#example"
  },"1779": {
    "doc": "makedir",
    "title": "makedir",
    "content": "file,-folder-and-read-functions MakeDir(ectory) . ",
    "url": "/docs/makedir.html",
    
    "relUrl": "/docs/makedir.html"
  },"1780": {
    "doc": "management-of-dependencies",
    "title": "management-of-dependencies",
    "content": "The GeoDMS controls dependencies in calculations. In an expression like A = B + C, items B and C are called suppliers. To calculate item A, first all suppliers (B and C) need to be calculated. An administration of the suppliers in calculations is essential for reliable results. In this administration also status information is managed. If a supplier is already valid (calculated earlier and the input for the supplier is not changed), it does not have to be recalculated. This improves the efficiency in calculating. ",
    "url": "/docs/management-of-dependencies.html",
    
    "relUrl": "/docs/management-of-dependencies.html"
  },"1781": {
    "doc": "map-view-layers",
    "title": "layers",
    "content": "A map view consists of one or multiple layers, with coordinates expressed in the same coordinate system. In the GeoDMS a distinction can be made in the following layer types: . ",
    "url": "/docs/map-view-layers.html#layers",
    
    "relUrl": "/docs/map-view-layers.html#layers"
  },"1782": {
    "doc": "map-view-layers",
    "title": "geodms data layers",
    "content": "Layers use to present data related to a geographic-grid-domain. Such a domain can be visualised in a map view with grid (for grid-domain), polygon, arc or point (for one-dimensional-domain) as in the following example: . examples of data layers with grid, polygons, arcs and points data . In these layers, the grid cell, polygons, arcs and/or points are visualized with one or multiple visualisation-style (colors, symbols, size etc.). The possible styles are dependent on the layer type. The following data layers can be distinguished: . geographic layers . feature-attribute of one-dimensional-domain can be directly drawn in a mapview, with a default or preconfigured visualisation-style. thematic layers . Thematic layers present a theme, usually a numeric data item, in a map. For numeric-data-type data, an distinction need to be made in numerical and categorical data. Categorical data can often be directly visualised, with a visualisation-style for each category/class (default or preconfigured). Numerical data need to be classified first in a limited set of classes. Such a classification, and it’s visualisation styles, can also be a a preconfigured or a default default-classification-scheme. More information on how to configure a classification scheme van be found in the classification section. The GUI also contains a classification-and-palette-editor to edit class breaks and color visualisation styles. label layers . string data items, with as feature type point or polygon, are by default visualised as label layer, see example . examples of label data layers for polygon and point data . Also numeric values for these feature types can visualized as label layer, from the legend menu on the numeric layer, option Select Sublayer &gt; Label &gt; Visible. For arc and grid layers, label layers are not (yet) implemented. String data items of an arc layer are presented as geographic layer. ",
    "url": "/docs/map-view-layers.html#geodms-data-layers",
    
    "relUrl": "/docs/map-view-layers.html#geodms-data-layers"
  },"1783": {
    "doc": "map-view-layers",
    "title": "background layers",
    "content": "A background-layer is visualized automatically when a view for the coordinate system for which this layer is configured is created. The background layer is used as a reference and is usually a WMTS layer. ",
    "url": "/docs/map-view-layers.html#background-layers",
    
    "relUrl": "/docs/map-view-layers.html#background-layers"
  },"1784": {
    "doc": "map-view-layers",
    "title": "active layer",
    "content": ". Each map view has one active layer, shown in the title of the map view. The active layer is the layer on which the layer-specific (toolbar) functions are executed. A layer can be activated from the legend. In this legend the active layer is indicated by a blue background color in the title as in the figure. The user can switch between active layers by clicking on the layer title. By default, the last layer added to the map view becomes the active layer. ",
    "url": "/docs/map-view-layers.html#active-layer",
    
    "relUrl": "/docs/map-view-layers.html#active-layer"
  },"1785": {
    "doc": "map-view-layers",
    "title": "map-view-layers",
    "content": "user-guide-geodms-gui - map-view layers . ",
    "url": "/docs/map-view-layers.html",
    
    "relUrl": "/docs/map-view-layers.html"
  },"1786": {
    "doc": "map-view-legend",
    "title": "overview",
    "content": "The upper part of the legend presents an overview with a zoomed out extent of the contents of the configured background-layer. With the Toggle buttons ( ), the overview and and legend view can be made (in)visible. ",
    "url": "/docs/map-view-legend.html#overview",
    
    "relUrl": "/docs/map-view-legend.html#overview"
  },"1787": {
    "doc": "map-view-legend",
    "title": "legend",
    "content": "example of a legend with three layers . The legend of the map view has two functions: . | to inform the user on the layers in the map view, including classification and palette and the value of a highlighted element in the map. In the example the colors are used to indiciate each class. The two squares in each colored box indicates the layer is a grid layer. For polygon layers, two circles are used. For arc layers, a line symbol and for point layer the configured or default symbol (house) is used. | to activate layer specific functionality of the layers in the map view. | . With the right mouse click on a layer, a pop-up menu is activated: . menu . The following options are available: . | Hide LayerControl for layer The layer is not visualized in the legend (e.g. background layers can be made hidden when exporting a legend). A right mouse click on the layer control on an empty area offers the option to make the hidden layers visible again. | Set LayerControl Font: Three options are available for the size of the layer font in the legend. The default option is small. The user can set the font size to medium or large. | Bring z-Position of Layer: The sequence of layers in the legend corresponds to the drawing order in the map view. This order can be changed with the four submenu options. Grid layers drawn above other layers are visualized transparently. Only the relevant submenu actions are enabled for the user: . | To Top: The layer will be drawn above all other layers. In the legend, the layer is moved to the top. The option is only available in case the layer is not yet the top layer in the drawing order. | To Bottom: All other layers will be drawn above this layer. In the legend, the layer is moved to the bottom. The option is only available in case the layer is not yet the last layer in the drawing order. | Up: The layer is positioned one step higher in the draw order. In the legend, the layer is moved one place higher. The option is only available in case the layer is not yet the top layer in the drawing order. | Down: The layer is positioned one step lower in the draw order. In the legend, the layer is moved one place lower. The option is only available in case the layer is not yet the last layer in the drawing order. The sequence can also be adapted for dragging and dropping the layer. | . | Remove layer: The layer is removed from the map view. | . Based on the type of layer some additional layer specific options are available: . | Show Statistics on layer: presents a Windows with the same statistics as presented in the Statistics Window from the View menu. | Classify …: if one or more classifications are available for the data-item in the layer, these are presented here. The user can select from the relevant classifications. | Activate TreeItem of Layer Aspect: for each aspect the corresponding tree-item with the thematic data and, if used, class breaks and aspect values can be activated in the treeview. The submenu’s present the items with relevant aspects and items and their parents. With a left mouse click, the requested item becomes activated. | Select SubLayer(s), (not for grid layers); the different style aspects used to draw a layer can be activated separately. The style aspects differ for the different layers types. Therefore, the set of submenu options differ per layer type. A indicates a style aspect is active (visible). For polygon and point layers, labels can be activated with the Select SubLayer &gt; Label &gt; Visible menu option. | Zoom 1 Grid to 1 Pixel (only for grid layers): The layer is zoomed to the level at which each grid cell corresponds to one pixel. This is often the most elegant level to present a grid. For background-layer this option can be used to zoom to the level at which the layer is rendered. | Show Palette (only in case a palette item is used for visualization): This option toggles between showing and hiding the palette and label information in the legend of the classification scheme used for the data item. A checkmark before the menu option indicates the information is shown. | Edit Palette This option activates the classification-and-palette-editor to edit the classification/palette used to draw the layer. | . ",
    "url": "/docs/map-view-legend.html#legend",
    
    "relUrl": "/docs/map-view-legend.html#legend"
  },"1788": {
    "doc": "map-view-legend",
    "title": "map-view-legend",
    "content": "user-guide-geodms-gui - map-view legend . ",
    "url": "/docs/map-view-legend.html",
    
    "relUrl": "/docs/map-view-legend.html"
  },"1789": {
    "doc": "map-view-tools",
    "title": "tools",
    "content": "| tool | description | . | | exports the active viewport to one or a set of bitmaps, using the export settings and current roi. | . | | copies the full contents of the legend to the clipboard. | . | | copy the visible contents of map view to the clipboard. | . |   |   | . | | make the extent of all layers fit in the map view. | . | | make the extent of the active layers fit in the map view. | . | | zoom in the map view by drawing a rectangle. | . | | zoom out in the map view by clicking on a location. | . |   |   | . | | make the extent of the selected elements fit in the map view. | . | | select elements in the active layer by left mouse-click (use Shift to add, Ctrl to deselect). | . | | select elements in the active layer by drawing a rectangle (use Shift to add, Ctrl to deselect). | . | | select elements in the active layer by drawing a circle (use Shift to add, Ctrl to deselect). | . | | select elements in the active layer by drawing a polygon (use Shift to add, Ctrl to deselect). | . | | select contiguous regions in the active layer by clicking on them (use Shift to add, Ctrl to deselect). | . | | select all elements in the active layer. | . | | deselect all elements in the active layer. | . | | show only selected elements. | . |   |   | . | | toggle between three layout options of the map view. By default, the legend and the overview map are visible in each map view. With the toggle layout tool, the user can select between three options: - legend and overview map visible (default) - no legend and no overview map visible - only legend visible, no overview map. The tool presents a picture of the layout that will be presented if the tool is activated. | . | | toggle between three options of showing/hiding palette information the legend. By default, palette information is presented in the legend if the number of entries in the palette is less or equal than 32. With the toggle palette tool, the user can select between three options:- show palette information for each layer with palette information in the legend- show palette information for the active layer with palette information in the legend- show no palette information for each layer in the legend Activate the button to select the next option. The picture of this button will not change. | . | | toggle between showing and hiding a horizontal and vertical grid line, called a needle controller. | . | | toggle between showing and hiding a scale bar in the bottom right corner of the map view. | . ",
    "url": "/docs/map-view-tools.html#tools",
    
    "relUrl": "/docs/map-view-tools.html#tools"
  },"1790": {
    "doc": "map-view-tools",
    "title": "map-view-tools",
    "content": "user-guide-geodms-gui - map-view tools . When a map view is then activated, the set of specific map view tool buttons is presented in the toolbar. This toolbar consists of the following tools: . ",
    "url": "/docs/map-view-tools.html",
    
    "relUrl": "/docs/map-view-tools.html"
  },"1791": {
    "doc": "map-view",
    "title": "introduction",
    "content": "The map view presents data-item that can be geographically located. Each map view has a projection, indicating a coordinate system. For instance in Dutch applications usually the “Rijks Driehoek (RD)” coordinate system is used. EPSG codes are used as identifiers for the most common coordinate systems. The EPSG code is shown in the title of each map view, if configured as spatialreference property for the base unit of the how-to-configure-a-coordinate-system. A map view consists of layers, each layer is related to one or more data items. All geographically related data items using the same projection can be combined in the same map view window. They can also be opened in multiple separate map views. The number of opened map views is not limited. By double clicking on an element, a valueinfo window appears. ",
    "url": "/docs/map-view.html#introduction",
    
    "relUrl": "/docs/map-view.html#introduction"
  },"1792": {
    "doc": "map-view",
    "title": "activate map view",
    "content": "To view data in a map view, first activate a tree-item that can be geographically related (indicated with a map icon ). A new map can be created or a layer can be added to an existing map by activating one of the following actions listed in the table. | action | no active map view | active map view | . | double click on active item | new map window | added to active map view with same coordinate system | . | main/pop-up menu option default view | new map window | added to active map view with same coordinate system | . | main/pop-up menu option map view | new map window | new map window | . | Ctrl-M on active item | new map window | new map window | . | drag and drop to view | new map window | added to active map view with same coordinate system | . ",
    "url": "/docs/map-view.html#activate-map-view",
    
    "relUrl": "/docs/map-view.html#activate-map-view"
  },"1793": {
    "doc": "map-view",
    "title": "topics",
    "content": ". | map-view-layers | map-view-tools | map-view-legend | . ",
    "url": "/docs/map-view.html#topics",
    
    "relUrl": "/docs/map-view.html#topics"
  },"1794": {
    "doc": "map-view",
    "title": "map-view",
    "content": "user-guide-geodms-gui - map view . ",
    "url": "/docs/map-view.html",
    
    "relUrl": "/docs/map-view.html"
  },"1795": {
    "doc": "mapping",
    "title": "syntax",
    "content": ". | mapping(SrcUnit, DstUnit) | . ",
    "url": "/docs/mapping.html#syntax",
    
    "relUrl": "/docs/mapping.html#syntax"
  },"1796": {
    "doc": "mapping",
    "title": "definition",
    "content": "mapping(SrcUnit, DstUnit) results in a relation with the index-numbers of the domain-unit DstUnit. The resulting attribute has as values-unit DstUnit and as domain unit SrcUnit. ",
    "url": "/docs/mapping.html#definition",
    
    "relUrl": "/docs/mapping.html#definition"
  },"1797": {
    "doc": "mapping",
    "title": "description",
    "content": "mapping(SrcUnit, DstUnit) is equivalent with convert(id (SrcUnit), DstUnit), but requires less memory. ",
    "url": "/docs/mapping.html#description",
    
    "relUrl": "/docs/mapping.html#description"
  },"1798": {
    "doc": "mapping",
    "title": "applies to",
    "content": ". | SrcUnit, DstUnit unit with value-type of the group CanBeDomainUnit | . ",
    "url": "/docs/mapping.html#applies-to",
    
    "relUrl": "/docs/mapping.html#applies-to"
  },"1799": {
    "doc": "mapping",
    "title": "since version",
    "content": "7.119 . ",
    "url": "/docs/mapping.html#since-version",
    
    "relUrl": "/docs/mapping.html#since-version"
  },"1800": {
    "doc": "mapping",
    "title": "example",
    "content": "unit&lt;uint32&gt; RegionSrc: nrofrows = 5; unit&lt;uint32&gt; RegionDst: nrofrows = 5; attribute&lt;Region&gt; RegionDst_rel (RegionSrc) := mapping(RegionSrc, RegionDst); . | RegionDst_rel | . | 0 | . | 1 | . | 2 | . | 3 | . | 4 | . domain RegionSrc, nr of rows = 5 . ",
    "url": "/docs/mapping.html#example",
    
    "relUrl": "/docs/mapping.html#example"
  },"1801": {
    "doc": "mapping",
    "title": "see also",
    "content": ". | mapping_count | . ",
    "url": "/docs/mapping.html#see-also",
    
    "relUrl": "/docs/mapping.html#see-also"
  },"1802": {
    "doc": "mapping",
    "title": "mapping",
    "content": "relational-functions mapping . ",
    "url": "/docs/mapping.html",
    
    "relUrl": "/docs/mapping.html"
  },"1803": {
    "doc": "mapping_count",
    "title": "syntax",
    "content": ". | mapping_count(orgGridUnit, destGridUnit, value-type) | . ",
    "url": "/docs/mapping_count.html#syntax",
    
    "relUrl": "/docs/mapping_count.html#syntax"
  },"1804": {
    "doc": "mapping_count",
    "title": "definition",
    "content": ". | mapping_count(orgGridUnit, destGridUnit, value type) is defined as the count of the number of cells of the orgGridUnit domain-unit in the destGridUnit domain, expressed in the value-type argument. | . ",
    "url": "/docs/mapping_count.html#definition",
    
    "relUrl": "/docs/mapping_count.html#definition"
  },"1805": {
    "doc": "mapping_count",
    "title": "description",
    "content": "The mapping_count(orgGridUnit, destGridUnit, uint32) function is synonym for pcount (mapping(orgGridUnit,destGridUnit)). Use the mapping_count function if the number of cells in the orgGridUnit is very large (the mapping function would than also result in a large data-item). The explicit configuration of the value type argument is also useful to limit the size of the resulting data item. ",
    "url": "/docs/mapping_count.html#description",
    
    "relUrl": "/docs/mapping_count.html#description"
  },"1806": {
    "doc": "mapping_count",
    "title": "applies to",
    "content": "Domain units orgGridUnit and destGridUnit with a Point value type of the group CanBeDomainUnit. ",
    "url": "/docs/mapping_count.html#applies-to",
    
    "relUrl": "/docs/mapping_count.html#applies-to"
  },"1807": {
    "doc": "mapping_count",
    "title": "since version",
    "content": "7.160 . ",
    "url": "/docs/mapping_count.html#since-version",
    
    "relUrl": "/docs/mapping_count.html#since-version"
  },"1808": {
    "doc": "mapping_count",
    "title": "example",
    "content": "attribute&lt;uint16&gt; countNr15Cells (GridDomain3000) := mapping_count(GridDomain15, GridDomain3000, uint16); . | countNr15Cells | . | 40000 | . | 40000 | . | 40000 | . | 40000 | . | 40000 | . | 40000 | . | 40000 | . | 40000 | . | 40000 | . domain GridDomain3000, nr of rows = 9 . ",
    "url": "/docs/mapping_count.html#example",
    
    "relUrl": "/docs/mapping_count.html#example"
  },"1809": {
    "doc": "mapping_count",
    "title": "see also",
    "content": ". | mapping | . ",
    "url": "/docs/mapping_count.html#see-also",
    
    "relUrl": "/docs/mapping_count.html#see-also"
  },"1810": {
    "doc": "mapping_count",
    "title": "mapping_count",
    "content": "aggregation-functions mapping_count . ",
    "url": "/docs/mapping_count.html",
    
    "relUrl": "/docs/mapping_count.html"
  },"1811": {
    "doc": "mapview-gui-toolbar-changes",
    "title": "mapview-gui-toolbar-changes",
    "content": "recent-developments: MapView GUI Toolbar Changes . MapView Toolbar is trimmed by implementing the following mouse gestures: . | 1 click: Value info in LayerControl | Double clicks: Value Info in DetailPage | Draw rect from topleft to bottomright: ZoomIn | Draw rect from bottomright to topleft: ZoomOut | . ",
    "url": "/docs/mapview-gui-toolbar-changes.html",
    
    "relUrl": "/docs/mapview-gui-toolbar-changes.html"
  },"1812": {
    "doc": "matrix-covariance",
    "title": "syntax",
    "content": ". | matr_var(point_att, result_domain) | . ",
    "url": "/docs/matrix-covariance.html#syntax",
    
    "relUrl": "/docs/matrix-covariance.html#syntax"
  },"1813": {
    "doc": "matrix-covariance",
    "title": "definition",
    "content": "The matr_var(point_att, result_domain) function calculates the covariance matrix of the point_att, with as resulting domain: result_domain. The value-type of the resulting attribute is the same as the value type of the point_att. ",
    "url": "/docs/matrix-covariance.html#definition",
    
    "relUrl": "/docs/matrix-covariance.html#definition"
  },"1814": {
    "doc": "matrix-covariance",
    "title": "applies to",
    "content": ". | attribute point_att with float32 or float64 value type | . ",
    "url": "/docs/matrix-covariance.html#applies-to",
    
    "relUrl": "/docs/matrix-covariance.html#applies-to"
  },"1815": {
    "doc": "matrix-covariance",
    "title": "conditions",
    "content": ". | The value type of point_att and of the result attribute need to match. | The domain-unit of the point_att attribute must be a Point value type of the group CanBeDomainUnit. | The result_domain argument must be a unit of with a Point value type of the group CanBeDomainUnit and match with the result of the matrix covariance calculation in terms of number or rows/columns. | . ",
    "url": "/docs/matrix-covariance.html#conditions",
    
    "relUrl": "/docs/matrix-covariance.html#conditions"
  },"1816": {
    "doc": "matrix-covariance",
    "title": "since version",
    "content": "7.184 . ",
    "url": "/docs/matrix-covariance.html#since-version",
    
    "relUrl": "/docs/matrix-covariance.html#since-version"
  },"1817": {
    "doc": "matrix-covariance",
    "title": "example",
    "content": "attribute&lt;float32&gt; covariance (GridDomain) := matr_var(src, GridDomain); . src | |–:|–:| 1 | 2 | 3 | 4 | . GridDomain, nr of rows = 2, nr of cols = 2 . covariance | |——-:|——–:| 10 | 14 | 14 | 200 | . GridDomain, nr of rows = 2, nr of cols = 2 . ",
    "url": "/docs/matrix-covariance.html#example",
    
    "relUrl": "/docs/matrix-covariance.html#example"
  },"1818": {
    "doc": "matrix-covariance",
    "title": "matrix-covariance",
    "content": "matrix-functions matr(ix)_(co)var(iance) . ",
    "url": "/docs/matrix-covariance.html",
    
    "relUrl": "/docs/matrix-covariance.html"
  },"1819": {
    "doc": "matrix-functions",
    "title": "matrix-functions",
    "content": "Matrix operators-and-functions are used to perform matrix calculations, like matrix-multiplication or matrix-inverse . | matrix-multiplication | matrix-inverse | matrix-covariance | . ",
    "url": "/docs/matrix-functions.html",
    
    "relUrl": "/docs/matrix-functions.html"
  },"1820": {
    "doc": "matrix-inverse",
    "title": "syntax",
    "content": ". | matr_inv(point_att) | . ",
    "url": "/docs/matrix-inverse.html#syntax",
    
    "relUrl": "/docs/matrix-inverse.html#syntax"
  },"1821": {
    "doc": "matrix-inverse",
    "title": "definition",
    "content": "The matr_inv(point_att) function calculates the invertible matrix of the point_att argument with the same resulting domain-unit as of the point_att argument. The value-type of the resulting attribute is the same as the value type of the point_att argument. ",
    "url": "/docs/matrix-inverse.html#definition",
    
    "relUrl": "/docs/matrix-inverse.html#definition"
  },"1822": {
    "doc": "matrix-inverse",
    "title": "applies to",
    "content": ". | attribute point_att with float32 or float64 value type | . ",
    "url": "/docs/matrix-inverse.html#applies-to",
    
    "relUrl": "/docs/matrix-inverse.html#applies-to"
  },"1823": {
    "doc": "matrix-inverse",
    "title": "conditions",
    "content": ". | The value type of point_att and of the resulting attribute need to match. | The domain unit of point_att and the resulting attribute must match and be a Point value type of the group CanBeDomainUnit. | . ",
    "url": "/docs/matrix-inverse.html#conditions",
    
    "relUrl": "/docs/matrix-inverse.html#conditions"
  },"1824": {
    "doc": "matrix-inverse",
    "title": "since version",
    "content": "7.184 . ",
    "url": "/docs/matrix-inverse.html#since-version",
    
    "relUrl": "/docs/matrix-inverse.html#since-version"
  },"1825": {
    "doc": "matrix-inverse",
    "title": "example",
    "content": "attribute&lt;float32&gt; invertible (GridDomain) := matr_inv(src); . src | |–:|–:| 1 | 2 | 3 | 4 | . GridDomain, nr of rows = 2, nr of cols = 2 . invertible | |——–:|———:| -2 | 1 | 1.5 | -0.5 | . GridDomain, nr of rows = 2, nr of cols = 2 . ",
    "url": "/docs/matrix-inverse.html#example",
    
    "relUrl": "/docs/matrix-inverse.html#example"
  },"1826": {
    "doc": "matrix-inverse",
    "title": "matrix-inverse",
    "content": "matrix-functions matr(ix)_inv(erse) . ",
    "url": "/docs/matrix-inverse.html",
    
    "relUrl": "/docs/matrix-inverse.html"
  },"1827": {
    "doc": "matrix-multiplication",
    "title": "syntax",
    "content": ". | matr_mul(left_att, right_att, result_domain) | . ",
    "url": "/docs/matrix-multiplication.html#syntax",
    
    "relUrl": "/docs/matrix-multiplication.html#syntax"
  },"1828": {
    "doc": "matrix-multiplication",
    "title": "definition",
    "content": "The matr_mul(left_att, right_att, result_domain) function calculates the matrix product of the left_att and right_att attribute with as resulting domain-unit: result_domain. The value-type of the resulting attribute is the the value type of left_att and right_att argument. ",
    "url": "/docs/matrix-multiplication.html#definition",
    
    "relUrl": "/docs/matrix-multiplication.html#definition"
  },"1829": {
    "doc": "matrix-multiplication",
    "title": "applies to",
    "content": ". | attributes left_att and right_att with float32 or float64 value type | . ",
    "url": "/docs/matrix-multiplication.html#applies-to",
    
    "relUrl": "/docs/matrix-multiplication.html#applies-to"
  },"1830": {
    "doc": "matrix-multiplication",
    "title": "conditions",
    "content": ". | The value type of left_att, right_att and resulting attribute need to match. | The domain unit of the left_att, right_att attribute must be a Point value type of the group CanBeDomainUnit. | The result_domain argument must be a unit of with a Point value type of the group CanBeDomainUnit and match with the result of the matrix product calculation in terms of number or rows/columns. | . ",
    "url": "/docs/matrix-multiplication.html#conditions",
    
    "relUrl": "/docs/matrix-multiplication.html#conditions"
  },"1831": {
    "doc": "matrix-multiplication",
    "title": "since version",
    "content": "7.184 . ",
    "url": "/docs/matrix-multiplication.html#since-version",
    
    "relUrl": "/docs/matrix-multiplication.html#since-version"
  },"1832": {
    "doc": "matrix-multiplication",
    "title": "example",
    "content": "attribute&lt;float32&gt; product (GridDomain) := matr_mul(left, right, GridDomain); . left | |–:|–:| 1 | 2 | 3 | 4 | . GridDomain, nr of rows = 2, nr of cols = 2 . right | |—-:|—-:| 100 | 200 | 300 | 400 | . GridDomain, nr of rows = 2, nr of cols = 2 . product | |———————————:|———————————:| 700 (1 * 100 + 2 * 300) | 1.000 (1 * 200 + 2 * 400) | 1.500 (3 * 100 + 4 * 300) | 2.200 (3 * 200 + 4 * 400) | . GridDomain, nr of rows = 2, nr of cols = 2 . ",
    "url": "/docs/matrix-multiplication.html#example",
    
    "relUrl": "/docs/matrix-multiplication.html#example"
  },"1833": {
    "doc": "matrix-multiplication",
    "title": "matrix-multiplication",
    "content": "matrix-functions matr(ix)_mul(tiplication) . ",
    "url": "/docs/matrix-multiplication.html",
    
    "relUrl": "/docs/matrix-multiplication.html"
  },"1834": {
    "doc": "max",
    "title": "syntax",
    "content": ". | max(a) | max(a, relation) | . ",
    "url": "/docs/max.html#syntax",
    
    "relUrl": "/docs/max.html#syntax"
  },"1835": {
    "doc": "max",
    "title": "definition",
    "content": ". | max(a) results in a parameter with the maximum of the non null values of attribute a. | max(a, relation) results in an attribute with the maximum of the non null values of attribute a, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | . ",
    "url": "/docs/max.html#definition",
    
    "relUrl": "/docs/max.html#definition"
  },"1836": {
    "doc": "max",
    "title": "description",
    "content": "The max function is not defined for boolean data-item, use the all function instead. If there are no values to be aggregated for a group, the resulting value will be the minimum value for the value-type of attribute a (in the example: 0, the minimum value for the value type: uint32). ",
    "url": "/docs/max.html#description",
    
    "relUrl": "/docs/max.html#description"
  },"1837": {
    "doc": "max",
    "title": "applies to",
    "content": ". | attribute a with Numeric, Point or string value type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/max.html#applies-to",
    
    "relUrl": "/docs/max.html#applies-to"
  },"1838": {
    "doc": "max",
    "title": "conditions",
    "content": ". | The values unit of the resulting data item should match with regard to value type and metric with the values unit of attribute a. | The domain of argument a and relation must match. | . ",
    "url": "/docs/max.html#conditions",
    
    "relUrl": "/docs/max.html#conditions"
  },"1839": {
    "doc": "max",
    "title": "example",
    "content": "parameter&lt;uint32&gt; maxNrInh := max(City/NrInhabitants); result = 550 parameter&lt;uint32&gt; maxCity  := max(City/CityName)     ; result = ‘Utrecht’ attribute&lt;uint32&gt; maxNrInhRegion    (Region) := max(City/NrInhabitants, City/Region_rel); attribute&lt;uint32&gt; maxCityNameRegion (Region) := max(City/CityName, City/Region_rel); . | City/NrInhabitants | City/CityName | City/Region_rel | . | 550 | Amsterdam | 0 | . | 525 | Rotterdam | 1 | . | 300 | Utrecht | 2 | . | 500 | DenHaag | 1 | . | 200 | Eindhoven | 3 | . | 175 | Haarlem | null | . | null | null | 3 | . domain City, nr of rows = 7 . | maxNrInhRegion | maxCityNameRegion | . | 550 | Amsterdam | . | 525 | Rotterdam | . | 300 | Utrecht | . | 200 | Eindhoven | . | 0 |   | . domain Region, nr of rows = 5 . ",
    "url": "/docs/max.html#example",
    
    "relUrl": "/docs/max.html#example"
  },"1840": {
    "doc": "max",
    "title": "see also",
    "content": ". | min | max_index | . ",
    "url": "/docs/max.html#see-also",
    
    "relUrl": "/docs/max.html#see-also"
  },"1841": {
    "doc": "max",
    "title": "max",
    "content": "aggregation-functions max(imum) . ",
    "url": "/docs/max.html",
    
    "relUrl": "/docs/max.html"
  },"1842": {
    "doc": "max_elem",
    "title": "syntax",
    "content": ". | max_elem(a, b, .. , n) | . ",
    "url": "/docs/max_elem.html#syntax",
    
    "relUrl": "/docs/max_elem.html#syntax"
  },"1843": {
    "doc": "max_elem",
    "title": "definition",
    "content": "max_elem(a, b, .. , n) results in a data-item with the highest value of the argument in the element-by-element comparison. The domain-unit of the resulting item is the same as the domain units of all arguments of the function. The values-unit of the resulting item is the values unit of the of all arguments of the function. ",
    "url": "/docs/max_elem.html#definition",
    
    "relUrl": "/docs/max_elem.html#definition"
  },"1844": {
    "doc": "max_elem",
    "title": "applies to",
    "content": "Data items with Numeric or string value type . ",
    "url": "/docs/max_elem.html#applies-to",
    
    "relUrl": "/docs/max_elem.html#applies-to"
  },"1845": {
    "doc": "max_elem",
    "title": "conditions",
    "content": ". | Domain of the arguments must match or be void. | Arguments must have matching: . | value-type | metric | . | . ",
    "url": "/docs/max_elem.html#conditions",
    
    "relUrl": "/docs/max_elem.html#conditions"
  },"1846": {
    "doc": "max_elem",
    "title": "example",
    "content": "attribute&lt;uint32&gt; max_elemABC (MDomain) := max_elem(A, B, C); . | A(int32) | B(int32) | C(int32) | max_elemABC | . | 0 | 1 | 2 | 2 | . | 1 | -1 | 4 | 4 | . | -2 | 2 | 2 | 2 | . | 4 | 0 | 7 | 7 | . | 999 | 111 | -5 | 999 | . | 2 | null | 1 | 0 | . | 0 | 1 | null | 0 | . | null | 1 | 2 | 0 | . | null | null | null | null | . MDomain, nr of rows = 9 . In earlier versions (before 7.202) a null value in one of the arguments could result in a null value of the resulting data item. This now only occurs if all arguments have null values. ",
    "url": "/docs/max_elem.html#example",
    
    "relUrl": "/docs/max_elem.html#example"
  },"1847": {
    "doc": "max_elem",
    "title": "see also",
    "content": ". | max_elem_alldefined | max_elem_ifdefined | min_elem | argmin | . ",
    "url": "/docs/max_elem.html#see-also",
    
    "relUrl": "/docs/max_elem.html#see-also"
  },"1848": {
    "doc": "max_elem",
    "title": "max_elem",
    "content": "ordering-functions maximum element . ",
    "url": "/docs/max_elem.html",
    
    "relUrl": "/docs/max_elem.html"
  },"1849": {
    "doc": "max_elem_alldefined",
    "title": "syntax",
    "content": ". | max_elem_alldefined(a, b, .. , n) | . ",
    "url": "/docs/max_elem_alldefined.html#syntax",
    
    "relUrl": "/docs/max_elem_alldefined.html#syntax"
  },"1850": {
    "doc": "max_elem_alldefined",
    "title": "definition",
    "content": "max_elem_alldefined(a, b, .. , n) is a variant of the max_elem function resulting in defined values if all values of the argument for an entry in the domain-unit are defined. If any argument contains null values, the resulting value for that entry will be become null. ",
    "url": "/docs/max_elem_alldefined.html#definition",
    
    "relUrl": "/docs/max_elem_alldefined.html#definition"
  },"1851": {
    "doc": "max_elem_alldefined",
    "title": "since version",
    "content": "8.6.5 . ",
    "url": "/docs/max_elem_alldefined.html#since-version",
    
    "relUrl": "/docs/max_elem_alldefined.html#since-version"
  },"1852": {
    "doc": "max_elem_alldefined",
    "title": "example",
    "content": "attribute&lt;uint32&gt; max_elem_alldefinedABC (MDomain) := max_elem_alldefined(A, B, C); . | A(int32 | B(int32) | C(int32) | max_elem_alldefinedABC | . | 0 | 1 | 2 | 2 | . | 1 | -1 | 4 | 4 | . | -2 | 2 | 2 | 2 | . | 4 | 0 | 7 | 7 | . | 999 | 111 | -5 | 999 | . | 2 | null | 1 | null | . | 0 | 1 | null | null | . | null | 1 | 2 | null | . | null | null | null | null | . MDomain, nr of rows = 9 . ",
    "url": "/docs/max_elem_alldefined.html#example",
    
    "relUrl": "/docs/max_elem_alldefined.html#example"
  },"1853": {
    "doc": "max_elem_alldefined",
    "title": "see also",
    "content": ". | max_elem_ifdefined | max_elem | argmax | . ",
    "url": "/docs/max_elem_alldefined.html#see-also",
    
    "relUrl": "/docs/max_elem_alldefined.html#see-also"
  },"1854": {
    "doc": "max_elem_alldefined",
    "title": "max_elem_alldefined",
    "content": "ordering-functions maximum element alldefined . ",
    "url": "/docs/max_elem_alldefined.html",
    
    "relUrl": "/docs/max_elem_alldefined.html"
  },"1855": {
    "doc": "max_elem_ifdefined",
    "title": "syntax",
    "content": ". | max_elem_ifdefined(a, b, .. , n) | . ",
    "url": "/docs/max_elem_ifdefined.html#syntax",
    
    "relUrl": "/docs/max_elem_ifdefined.html#syntax"
  },"1856": {
    "doc": "max_elem_ifdefined",
    "title": "definition",
    "content": "max_elem_ifdefined(a, b, .. , n) is a variant of the max_elem function resulting in defined values if any value of the argument for an entry in the domain-unit is defined. If all arguments contains null values, the resulting value for that entry will be become null. ",
    "url": "/docs/max_elem_ifdefined.html#definition",
    
    "relUrl": "/docs/max_elem_ifdefined.html#definition"
  },"1857": {
    "doc": "max_elem_ifdefined",
    "title": "since version",
    "content": "8.6.5 . ",
    "url": "/docs/max_elem_ifdefined.html#since-version",
    
    "relUrl": "/docs/max_elem_ifdefined.html#since-version"
  },"1858": {
    "doc": "max_elem_ifdefined",
    "title": "example",
    "content": "attribute&lt;uint32&gt; max_elem_ifdefinedABC (MDomain) := max_elem_ifdefined(A, B, C); . | A(int32) | B(int32) | C(int32) | max_elem_ifdefinedABC | . | 0 | 1 | 2 | 2 | . | 1 | -1 | 4 | 4 | . | -2 | 2 | 2 | 2 | . | 4 | 0 | 7 | 7 | . | 999 | 111 | -5 | 999 | . | 2 | null | 1 | 2 | . | 0 | 1 | null | 1 | . | null | 1 | 2 | 2 | . | null | null | null | null | . MDomain, nr of rows = 9 . ",
    "url": "/docs/max_elem_ifdefined.html#example",
    
    "relUrl": "/docs/max_elem_ifdefined.html#example"
  },"1859": {
    "doc": "max_elem_ifdefined",
    "title": "see also",
    "content": ". | max_elem_alldefined | max_elem | argmax | . ",
    "url": "/docs/max_elem_ifdefined.html#see-also",
    
    "relUrl": "/docs/max_elem_ifdefined.html#see-also"
  },"1860": {
    "doc": "max_elem_ifdefined",
    "title": "max_elem_ifdefined",
    "content": "ordering-functions maximum element ifdefined . ",
    "url": "/docs/max_elem_ifdefined.html",
    
    "relUrl": "/docs/max_elem_ifdefined.html"
  },"1861": {
    "doc": "max_index",
    "title": "syntax",
    "content": ". | max_index(a) | max_index(a, relation) | . ",
    "url": "/docs/max_index.html#syntax",
    
    "relUrl": "/docs/max_index.html#syntax"
  },"1862": {
    "doc": "max_index",
    "title": "definition",
    "content": ". | max_index(a) results in a parameter with the index-numbers of the maximum value of the non null values of attribute a. | max_index(a, relation) results in an attribute with the index numbers of the maximum values of the non null values of attribute a, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | . ",
    "url": "/docs/max_index.html#definition",
    
    "relUrl": "/docs/max_index.html#definition"
  },"1863": {
    "doc": "max_index",
    "title": "description",
    "content": "The max_index function is not defined for string data-item. ",
    "url": "/docs/max_index.html#description",
    
    "relUrl": "/docs/max_index.html#description"
  },"1864": {
    "doc": "max_index",
    "title": "applies to",
    "content": ". | attribute a with Numeric, Point or boolean value type. | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/max_index.html#applies-to",
    
    "relUrl": "/docs/max_index.html#applies-to"
  },"1865": {
    "doc": "max_index",
    "title": "conditions",
    "content": "The values unit of the resulting data item should be the domain unit of argument a. ",
    "url": "/docs/max_index.html#conditions",
    
    "relUrl": "/docs/max_index.html#conditions"
  },"1866": {
    "doc": "max_index",
    "title": "since version",
    "content": "7.184 . ",
    "url": "/docs/max_index.html#since-version",
    
    "relUrl": "/docs/max_index.html#since-version"
  },"1867": {
    "doc": "max_index",
    "title": "example",
    "content": "parameter&lt;City&gt; max_index_NrInh := max_index(City/NrInhabitants); result = 0 attribute&lt;City&gt; max_index_NrInhRegion (Region) := max_index(City/NrInhabitants, City/Region_rel); . | City/NrInhabitants | City/Region_rel | . | 550 | 0 | . | 525 | 1 | . | 300 | 2 | . | 500 | 1 | . | 200 | 3 | . | 175 | null | . | null | 3 | . domain City, nr of rows = 7 . | max_index_NrInhRegion | . | 0 | . | 1 | . | 2 | . | 4 | . | null | . domain Region, nr of rows = 5 . ",
    "url": "/docs/max_index.html#example",
    
    "relUrl": "/docs/max_index.html#example"
  },"1868": {
    "doc": "max_index",
    "title": "see also",
    "content": ". | min_index | max | . ",
    "url": "/docs/max_index.html#see-also",
    
    "relUrl": "/docs/max_index.html#see-also"
  },"1869": {
    "doc": "max_index",
    "title": "max_index",
    "content": "aggregation-functions max_index . ",
    "url": "/docs/max_index.html",
    
    "relUrl": "/docs/max_index.html"
  },"1870": {
    "doc": "maxclaims",
    "title": "definition",
    "content": "MaxClaims is the ninth argument of the discrete_alloc function. This argument needs to refer to a container with as subitem attribute for each land use type. These attributes define the maximal amount of land units that need to be allocated for the land use type per region. The values-unit for these attributes is the number of land units. The domain-unit of these attributes are the domain units of the regions for which the claims are available. ",
    "url": "/docs/maxclaims.html#definition",
    
    "relUrl": "/docs/maxclaims.html#definition"
  },"1871": {
    "doc": "maxclaims",
    "title": "applies",
    "content": "The values unit of the each MaxClaim attribute with value-type: uint32 . ",
    "url": "/docs/maxclaims.html#applies",
    
    "relUrl": "/docs/maxclaims.html#applies"
  },"1872": {
    "doc": "maxclaims",
    "title": "conditions",
    "content": "The names of the MaxClaims attributes need to match with the values of the TypeNames argument. ",
    "url": "/docs/maxclaims.html#conditions",
    
    "relUrl": "/docs/maxclaims.html#conditions"
  },"1873": {
    "doc": "maxclaims",
    "title": "example",
    "content": "container region {    unit&lt;uint8&gt; p1: nrofrows = 1;    unit&lt;uint8&gt; p2: nrofrows = 2; } container claim_source {    unit&lt;float32&gt;      Meter      := BaseUnit('m', float32);    unit&lt;float32&gt;      Ha         := 10000.0 * Meter * Meter;    parameter&lt;float32&gt; nrHaPerCel := 1[claim_sources/Ha];        container p1    {       attribute&lt;Ha&gt; Nature_min (region/p1): [12];       attribute&lt;Ha&gt; Living_min (region/p1): [5];    }    container p2    {        attribute&lt;Ha&gt; Working_min (regionMaps/p2): [6,2];    }  } container claims_max: Using = \"claim_source\"  {     attribute&lt;uint32&gt; Living  (region/p1) := uint32(p1/Living_min  / nrHaPerCel);     attribute&lt;uint32&gt; Working (region/p2) := uint32(p2/Working_min / nrHaPerCel);     attribute&lt;uint32&gt; Nature  (region/p1) := uint32(p1/Nature_min  / nrHaPerCel); } . ",
    "url": "/docs/maxclaims.html#example",
    
    "relUrl": "/docs/maxclaims.html#example"
  },"1874": {
    "doc": "maxclaims",
    "title": "maxclaims",
    "content": "allocation-functions, argument 9: MaxClaims . ",
    "url": "/docs/maxclaims.html",
    
    "relUrl": "/docs/maxclaims.html"
  },"1875": {
    "doc": "mean",
    "title": "syntax",
    "content": ". | mean(a) | mean(a, relation) | . ",
    "url": "/docs/mean.html#syntax",
    
    "relUrl": "/docs/mean.html#syntax"
  },"1876": {
    "doc": "mean",
    "title": "definition",
    "content": ". | mean(a) results in a parameter with the average of the non null values of attribute a. | mean(a, relation) results in a an attribute with the average of the non null values of attribute a, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | . ",
    "url": "/docs/mean.html#definition",
    
    "relUrl": "/docs/mean.html#definition"
  },"1877": {
    "doc": "mean",
    "title": "applies to",
    "content": ". | attribute a with Numeric value-type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/mean.html#applies-to",
    
    "relUrl": "/docs/mean.html#applies-to"
  },"1878": {
    "doc": "mean",
    "title": "conditions",
    "content": ". | The values unit of the resulting data-item should match with regard to value type and metric with the values unit of attribute a. | The domain unit of argument a and relation must match. | . ",
    "url": "/docs/mean.html#conditions",
    
    "relUrl": "/docs/mean.html#conditions"
  },"1879": {
    "doc": "mean",
    "title": "example",
    "content": "parameter&lt;uint32&gt; meanNrInh := mean(City/NrInhabitants); result = 375 attribute&lt;uint32&gt; meanNrInhRegion (Region) := mean(City/NrInhabitants, City/Region_rel); . | City/NrInhabitants | City/Region_rel | . | 550 | 0 | . | 525 | 1 | . | 300 | 2 | . | 500 | 1 | . | 200 | 3 | . | 175 | null | . | null | 3 | . domain City, nr of rows = 7 . | meanNrInhRegion | . | 550 | . | 512 | . | 300 | . | 200 | . | null | . domain Region, nr of rows = 5 . ",
    "url": "/docs/mean.html#example",
    
    "relUrl": "/docs/mean.html#example"
  },"1880": {
    "doc": "mean",
    "title": "mean",
    "content": "aggregation-functions mean . ",
    "url": "/docs/mean.html",
    
    "relUrl": "/docs/mean.html"
  },"1881": {
    "doc": "median",
    "title": "definition",
    "content": "The median of an attribute in the GeoDMS can be calculated with the rth_element function, with as second argument the value 0.5. The median function in the GeoDMS calculates the middle value for each row of three given attributes. Thus median(a, b, c) := . median(a, interval(min_elem(b, c), max_elem(b, c))) := a &lt; min_elem(b, c)     ? min_elem(b, c)     : max_elem(b, c) &lt; a        ? max_elem(b, c)        : a . This can be used to bind a to a given range of allowed values. ",
    "url": "/docs/median.html#definition",
    
    "relUrl": "/docs/median.html#definition"
  },"1882": {
    "doc": "median",
    "title": "syntax",
    "content": ". | median(a, b, c) | . ",
    "url": "/docs/median.html#syntax",
    
    "relUrl": "/docs/median.html#syntax"
  },"1883": {
    "doc": "median",
    "title": "conditions",
    "content": ". | the domain-unit arguments a, b, and c must match or be void. | the values-unit of arguments a, b, and c must match. | b is known to be not larger than c. | . ",
    "url": "/docs/median.html#conditions",
    
    "relUrl": "/docs/median.html#conditions"
  },"1884": {
    "doc": "median",
    "title": "since version",
    "content": "since 2008 . ",
    "url": "/docs/median.html#since-version",
    
    "relUrl": "/docs/median.html#since-version"
  },"1885": {
    "doc": "median",
    "title": "example",
    "content": "attribute&lt;uint32&gt; medianABC (ADomain) := median(A, B, C); . | A(int32) | B(int32) | C(int32) | medianABC | . | 0 | 1 | 2 | 1 | . | 1 | -1 | 4 | 1 | . | -2 | 2 | 2 | 2 | . | 4 | 0 | 7 | 4 | . | 999 | 111 | -5 | 111 | . | null | 0 | 0 | 0 | . | 0 | null | 0 | 0 | . | 0 | 0 | null | 0 | . | null | 0 | null | 0 | . | null | null | null | null | . ADomain, nr of rows = 10 . In earlier versions (before 7.202) a null value in one of the arguments could result in a null value of the resulting data item. This now only occurs if all arguments have null values. This is a results of the implementation of min_elem and max_elem as functions that since then return the minimum defined value of each row. ",
    "url": "/docs/median.html#example",
    
    "relUrl": "/docs/median.html#example"
  },"1886": {
    "doc": "median",
    "title": "median",
    "content": "ordering-functions median . ",
    "url": "/docs/median.html",
    
    "relUrl": "/docs/median.html"
  },"1887": {
    "doc": "merge",
    "title": "syntax",
    "content": ". | merge(option,valuesunit, option1values, .. , optionnvalues) | . ",
    "url": "/docs/merge.html#syntax",
    
    "relUrl": "/docs/merge.html#syntax"
  },"1888": {
    "doc": "merge",
    "title": "definition",
    "content": "merge(option, valuesunit, option1values, .. , optionnvalues) results in a data-item with the domain-unit of data items: . | option, option1values, .. , optionnvalues and as | valuesunit the second argument: valuesunit. | . The resulting values are the one of the values of the set: option1values, .. , optionnvalues. The first argument (option) indicates from which optionvalue attribute the values are selected. So an option of 0 means the values are selected from the option1values attribute and an option of 2 means they are selected from the option3values attribute. ",
    "url": "/docs/merge.html#definition",
    
    "relUrl": "/docs/merge.html#definition"
  },"1889": {
    "doc": "merge",
    "title": "applies to",
    "content": ". | data-item with Numeric or value types | . ",
    "url": "/docs/merge.html#applies-to",
    
    "relUrl": "/docs/merge.html#applies-to"
  },"1890": {
    "doc": "merge",
    "title": "conditions",
    "content": ". | option attribute with uint8 value-type | domain units of all data items must match or be void. | all optionvalues arguments must have matching: . | value type | metric | . | . ",
    "url": "/docs/merge.html#conditions",
    
    "relUrl": "/docs/merge.html#conditions"
  },"1891": {
    "doc": "merge",
    "title": "since version",
    "content": "7.184 . ",
    "url": "/docs/merge.html#since-version",
    
    "relUrl": "/docs/merge.html#since-version"
  },"1892": {
    "doc": "merge",
    "title": "example",
    "content": "unit&lt;float32&gt; eur; attribute&lt;eur&gt; TransportCosts (ADomain) := merge(TransportOption, eur, car, public, bike); . | TransportOption | car(eur),sequencenr: 0 | public(eur),sequencenr: 1 | bike(eur),sequencenr: 2 | Transport Costs |   | . |   | 0 | 18 | 15 | 12 | 18 | . |   | 2 | 28 | 25 | 22 | 22 | . |   | 1 | 38 | 35 | 32 | 35 | . |   | null | 48 | 45 | 42 | null | . |   | 1 | 58 | 55 | 52 | 55 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/merge.html#example",
    
    "relUrl": "/docs/merge.html#example"
  },"1893": {
    "doc": "merge",
    "title": "See Also",
    "content": ". | raster_merge | . ",
    "url": "/docs/merge.html#see-also",
    
    "relUrl": "/docs/merge.html#see-also"
  },"1894": {
    "doc": "merge",
    "title": "merge",
    "content": "relational-functions merge . ",
    "url": "/docs/merge.html",
    
    "relUrl": "/docs/merge.html"
  },"1895": {
    "doc": "metadata-(url-property)-in-external-browser",
    "title": "related issues",
    "content": ". | issue 1325 | issue 1360 | issue 1441 | . ",
    "url": "/docs/metadata-(url-property)-in-external-browser.html#related-issues",
    
    "relUrl": "/docs/metadata-(url-property)-in-external-browser.html#related-issues"
  },"1896": {
    "doc": "metadata-(url-property)-in-external-browser",
    "title": "metadata-(url-property)-in-external-browser",
    "content": "planned-developments: Metadata (url property) in external browser . In current versions of the GeoDMS the documents/url’s configured with the url property are presented in the MetaData Detail Page. The Detail Page component used is based on an Internet Explorer component, which for multiple reasons is not future proof. We plan to make the MetaData configured for a tree-item available in an external browser. ",
    "url": "/docs/metadata-(url-property)-in-external-browser.html",
    
    "relUrl": "/docs/metadata-(url-property)-in-external-browser.html"
  },"1897": {
    "doc": "metascript-functions",
    "title": "metascript-functions",
    "content": "Metascript operators-and-functions are used to generate script (like for_each) or request information on tree-item like subitem_propvalues . | for_each_ind - generate a set of items for each element of a domain, new variant | for_each - generate a set of items for each element of a domain | loop - instantiate a templates untill a stop condition is met | . | subitem_propvalues - a domain unit with a string attribute containing the property values of the direct subitems | inherited_propvalues - a domain unit with a string attribute containing the property values of the direct subitems of the item argument and of all referred items in the namespace. | subtree_propvalues - a domain unit with a string attribute containing the property values of all subitems | . ",
    "url": "/docs/metascript-functions.html",
    
    "relUrl": "/docs/metascript-functions.html"
  },"1898": {
    "doc": "metric",
    "title": "without metric",
    "content": "Except from data items describing quantities, the GeoDMS also supports data items with index-numbers, numeric codes, string values or booleans. These data items also need values units, but usually no metric. For these units there are two options: . Example 1: Explicitly configured values unit . unit&lt;uint32&gt;        CityCode: cdf = \"ProvinceClass/ClassBreaks\"; attribute&lt;CityCode&gt; DutchCityCodes (City); . Example 2: Value type as values unit . attribute&lt;string&gt; Name (City); . In the first example, a values unit is configured explicitly, without an expression. This option is useful if, although the unit has no metric, it is still relevant to configure the unit because of other relevant properties. In the example a cdf property is configured for the values unit, see also classifications. In the second example, a value type is used directly as values unit. This option is advised if there is no need to configure a values unit explicitly as it contains no relevant characteristics. Boolean and string items are often configured this way. ",
    "url": "/docs/metric.html#without-metric",
    
    "relUrl": "/docs/metric.html#without-metric"
  },"1899": {
    "doc": "metric",
    "title": "metric",
    "content": "Metric in the GeoDMS relates to the units of measurement known from Physics. The International System of Units (SI) comprises a coherent system built around seven base units, an indeterminate number of unnamed coherent derived units, and a set of prefixes that act as decimal-based multipliers. values-unit in the GeoDMS can be configured as base-unit or derived-unit by using expression. The metric of the unit is derived from the configured expression and is presented in the geodms-gui &gt; Detail Pages &gt; General. In calculations with data-item, base units and derived units can be used in the same manner. The metric is useful to inform how values of data items need to be interpreted, but also to check inconsistencies in calculations. For example, a data item expressed in meters can not meaningfully be summed with a data item expressed in seconds. This also apply to another data_item expressed in kilometers, although this item could be summed with the data item expressed in meters, if it was first divided by 1.000 meter per kilometer. For data items defining quantities it is strongly advised (although not obligatory) to configure expressions for unit, resulting in a metric. Although considered a little new in the beginning, it is key function of the GeoDMS to manage and check the metric of (in between) results. Consistency in dealing with the metric of units in calculations is a key issue in good modeling. ",
    "url": "/docs/metric.html",
    
    "relUrl": "/docs/metric.html"
  },"1900": {
    "doc": "mid",
    "title": "syntax",
    "content": ". | mid(polygon_data_item) | . ",
    "url": "/docs/mid.html#syntax",
    
    "relUrl": "/docs/mid.html#syntax"
  },"1901": {
    "doc": "mid",
    "title": "definition",
    "content": "mid(polygon_data_item) results in a point data-item with the middle of the polygon_data_item argument. ",
    "url": "/docs/mid.html#definition",
    
    "relUrl": "/docs/mid.html#definition"
  },"1902": {
    "doc": "mid",
    "title": "description",
    "content": "The middle of a polygon is determined by selecting a horizontal scan-line that separates 50% of the area of that polygon above and below that scan-line, and on that scan-line, the 50% percentile of a set of evenly distributed points on that scan-line that are within that polygon. If the scan line does not contain any points within the polygon (for example on a hourglass-shaped polygon with an zero-sided waist), other scan-lines are tried until a point is found for which point_in_polygon would result in true. ",
    "url": "/docs/mid.html#description",
    
    "relUrl": "/docs/mid.html#description"
  },"1903": {
    "doc": "mid",
    "title": "applies to",
    "content": ". | data-item polygon_data_item with fpoint or dpoint value-type and composition polygon | . ",
    "url": "/docs/mid.html#applies-to",
    
    "relUrl": "/docs/mid.html#applies-to"
  },"1904": {
    "doc": "mid",
    "title": "implementation details:",
    "content": ". For more info on SelectRow and GetScanPoint, see: . | https://github.com/ObjectVision/GeoDMS/blob/v13/rtc/dll/src/geo/SelectPoint.h | https://github.com/ObjectVision/GeoDMS/blob/v13/rtc/dll/src/geo/CalcWidth.h | . ",
    "url": "/docs/mid.html#implementation-details",
    
    "relUrl": "/docs/mid.html#implementation-details"
  },"1905": {
    "doc": "mid",
    "title": "mid",
    "content": "geometric-functions mid . ",
    "url": "/docs/mid.html",
    
    "relUrl": "/docs/mid.html"
  },"1906": {
    "doc": "min",
    "title": "syntax",
    "content": ". | min(a) | min(a, relation) | . ",
    "url": "/docs/min.html#syntax",
    
    "relUrl": "/docs/min.html#syntax"
  },"1907": {
    "doc": "min",
    "title": "definition",
    "content": ". | min(a) results in a parameter with the minimum of the non null values of attribute a. | min(a, relation) results in an attribute with the minimum of the non null values of attribute a, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | . ",
    "url": "/docs/min.html#definition",
    
    "relUrl": "/docs/min.html#definition"
  },"1908": {
    "doc": "min",
    "title": "description",
    "content": "The min function is not defined for boolean data-item, use the any function instead. If there are no values to be aggregated for a group, the resulting value will be the maximum value for the value-type of attribute a (in the example: 4294967294, the maximum value for the value type: uint32). ",
    "url": "/docs/min.html#description",
    
    "relUrl": "/docs/min.html#description"
  },"1909": {
    "doc": "min",
    "title": "applies to",
    "content": ". | attribute a with Numeric, Point or string value type | relation with value ype of the group CanBeDomainUnit | . ",
    "url": "/docs/min.html#applies-to",
    
    "relUrl": "/docs/min.html#applies-to"
  },"1910": {
    "doc": "min",
    "title": "conditions",
    "content": ". | The values unit of the resulting data item should match with regard to value ype and metric with the values unit of attribute a. | The domain of argument a and relation must match. | . ",
    "url": "/docs/min.html#conditions",
    
    "relUrl": "/docs/min.html#conditions"
  },"1911": {
    "doc": "min",
    "title": "example",
    "content": "parameter&lt;uint32&gt; minNrInh := min(City/NrInhabitants); result = 175 parameter&lt;string&gt; minCity  := min(City/CityName);      result = ‘Amsterdam’ attribute&lt;uint32&gt; minNrInhRegion    (Region) := min(City/NrInhabitants, City/Region_rel); attribute&lt;string&gt; minCityNameRegion (Region) := min(City/CityName, City/Region_rel); . | City/NrInhabitants | City/CityName | City/Region_rel | . | 550 | Amsterdam | 0 | . | 525 | Rotterdam | 1 | . | 300 | Utrecht | 2 | . | 500 | DenHaag | 1 | . | 200 | Eindhoven | 3 | . | 175 | Haarlem | null | . | null | null | 3 | . domain City, nr of rows = 7 . | minNrInhRegion | minCityNameRegion | . | 550 | Amsterdam | . | 500 | DenHaag | . | 300 | Utrecht | . | 200 | Eindhoven | . | 4294967294 | ÿÿÿÿ1 | . domain Region, nr of rows = 5 . 1) ÿÿÿÿ represents the max value for strings . ",
    "url": "/docs/min.html#example",
    
    "relUrl": "/docs/min.html#example"
  },"1912": {
    "doc": "min",
    "title": "see also",
    "content": ". | max | min_index | . ",
    "url": "/docs/min.html#see-also",
    
    "relUrl": "/docs/min.html#see-also"
  },"1913": {
    "doc": "min",
    "title": "min",
    "content": "aggregation-functions min(imum) . ",
    "url": "/docs/min.html",
    
    "relUrl": "/docs/min.html"
  },"1914": {
    "doc": "min_elem",
    "title": "syntax",
    "content": ". | min_elem(a, b, .. , n) | . ",
    "url": "/docs/min_elem.html#syntax",
    
    "relUrl": "/docs/min_elem.html#syntax"
  },"1915": {
    "doc": "min_elem",
    "title": "definition",
    "content": "min_elem(a, b, .. , n) results in a data-item with the lowest value of the argument in the element-by-element comparison. The domain-unit of the resulting item is the same as the domain units of all arguments of the function. The values-unit of the resulting item is the values unit of the of all arguments of the function. ",
    "url": "/docs/min_elem.html#definition",
    
    "relUrl": "/docs/min_elem.html#definition"
  },"1916": {
    "doc": "min_elem",
    "title": "applies to",
    "content": "Data items with Numeric or string value type . ",
    "url": "/docs/min_elem.html#applies-to",
    
    "relUrl": "/docs/min_elem.html#applies-to"
  },"1917": {
    "doc": "min_elem",
    "title": "conditions",
    "content": ". | Domain of the arguments must match or be void. | Arguments must have matching: . | value-type | metric | . | . ",
    "url": "/docs/min_elem.html#conditions",
    
    "relUrl": "/docs/min_elem.html#conditions"
  },"1918": {
    "doc": "min_elem",
    "title": "example",
    "content": "attribute&lt;uint32&gt; min_elemABC (MDomain) := min_elem(A, B, C); . | A(int32) | B(int32) | C(int32) | min_elemABC | . | 0 | 1 | 2 | 0 | . | 1 | -1 | 4 | -1 | . | -2 | 2 | 2 | -2 | . | 4 | 0 | 7 | 0 | . | 999 | 111 | -5 | -5 | . | 2 | null | 1 | 0 | . | 0 | 1 | null | 0 | . | null | 1 | 2 | 0 | . | null | null | null | null | . MDomain, nr of rows = 9 . In earlier versions (before 7.202) a null value in one of the arguments could result in a null value of the resulting data item. This now only occurs if all arguments have null values. ",
    "url": "/docs/min_elem.html#example",
    
    "relUrl": "/docs/min_elem.html#example"
  },"1919": {
    "doc": "min_elem",
    "title": "see also",
    "content": ". | min_elem_alldefined | min_elem_ifdefined | argmin | max_elem | . ",
    "url": "/docs/min_elem.html#see-also",
    
    "relUrl": "/docs/min_elem.html#see-also"
  },"1920": {
    "doc": "min_elem",
    "title": "min_elem",
    "content": "ordering-functions minimum element . ",
    "url": "/docs/min_elem.html",
    
    "relUrl": "/docs/min_elem.html"
  },"1921": {
    "doc": "min_elem_alldefined",
    "title": "syntax",
    "content": ". | min_elem_alldefined(a, b, .. , n) | . ",
    "url": "/docs/min_elem_alldefined.html#syntax",
    
    "relUrl": "/docs/min_elem_alldefined.html#syntax"
  },"1922": {
    "doc": "min_elem_alldefined",
    "title": "definition",
    "content": "min_elem_alldefined(a, b, .. , n) is a variant of the min_elem function resulting in defined values if any value of the argument for an entry in the domain-unit is defined. If all argument contains a null value, the resulting value for that entry will be become null. ",
    "url": "/docs/min_elem_alldefined.html#definition",
    
    "relUrl": "/docs/min_elem_alldefined.html#definition"
  },"1923": {
    "doc": "min_elem_alldefined",
    "title": "since version",
    "content": "8.6.5 . ",
    "url": "/docs/min_elem_alldefined.html#since-version",
    
    "relUrl": "/docs/min_elem_alldefined.html#since-version"
  },"1924": {
    "doc": "min_elem_alldefined",
    "title": "example",
    "content": "attribute&lt;uint32&gt; min_elem_alldefinedABC (MDomain) := min_elem_alldefined(A, B, C); . | A(int32) | B(int32) | C(int32) | min_elem_alldefinedABC | . | 0 | 1 | 2 | 0 | . | 1 | -1 | 4 | -1 | . | -2 | 2 | 2 | -2 | . | 4 | 0 | 7 | 0 | . | 999 | 111 | -5 | -5 | . | 2 | null | 1 | null | . | 0 | 1 | null | null | . | null | 1 | 2 | null | . | null | null | null | null | . MDomain, nr of rows = 9 . ",
    "url": "/docs/min_elem_alldefined.html#example",
    
    "relUrl": "/docs/min_elem_alldefined.html#example"
  },"1925": {
    "doc": "min_elem_alldefined",
    "title": "see also",
    "content": ". | min_elem_ifdefined | min_elem | argmin | . ",
    "url": "/docs/min_elem_alldefined.html#see-also",
    
    "relUrl": "/docs/min_elem_alldefined.html#see-also"
  },"1926": {
    "doc": "min_elem_alldefined",
    "title": "min_elem_alldefined",
    "content": "ordering-functions minimum element alldefined . ",
    "url": "/docs/min_elem_alldefined.html",
    
    "relUrl": "/docs/min_elem_alldefined.html"
  },"1927": {
    "doc": "min_elem_ifdefined",
    "title": "syntax",
    "content": ". | min_elem_ifdefined(a, b, .. , n) | . ",
    "url": "/docs/min_elem_ifdefined.html#syntax",
    
    "relUrl": "/docs/min_elem_ifdefined.html#syntax"
  },"1928": {
    "doc": "min_elem_ifdefined",
    "title": "definition",
    "content": "min_elem_ifdefined(a, b, .. , n) is a variant of the min_elem function resulting in defined values if any value of the argument for an entry in the domain-unit is defined. If all arguments contains null values, the resulting value for that entry will be become null. ",
    "url": "/docs/min_elem_ifdefined.html#definition",
    
    "relUrl": "/docs/min_elem_ifdefined.html#definition"
  },"1929": {
    "doc": "min_elem_ifdefined",
    "title": "since version",
    "content": "8.6.5 . ",
    "url": "/docs/min_elem_ifdefined.html#since-version",
    
    "relUrl": "/docs/min_elem_ifdefined.html#since-version"
  },"1930": {
    "doc": "min_elem_ifdefined",
    "title": "example",
    "content": "attribute&lt;uint32&gt; min_elem_ifdefinedABC (MDomain) := min_elem_ifdefined(A, B, C); . | A(int32) | B(int32) | C(int32) | min_elem_ifdefinedABC | . | 0 | 1 | 2 | 0 | . | 1 | -1 | 4 | -1 | . | -2 | 2 | 2 | -2 | . | 4 | 0 | 7 | 0 | . | 999 | 111 | -5 | -5 | . | 2 | null | 1 | 1 | . | 0 | 1 | null | 0 | . | null | 1 | 2 | 1 | . | null | null | null | null | . MDomain, nr of rows = 9 . ",
    "url": "/docs/min_elem_ifdefined.html#example",
    
    "relUrl": "/docs/min_elem_ifdefined.html#example"
  },"1931": {
    "doc": "min_elem_ifdefined",
    "title": "see also",
    "content": ". | min_elem_alldefined | min_elem | argmin | . ",
    "url": "/docs/min_elem_ifdefined.html#see-also",
    
    "relUrl": "/docs/min_elem_ifdefined.html#see-also"
  },"1932": {
    "doc": "min_elem_ifdefined",
    "title": "min_elem_ifdefined",
    "content": "ordering-functions minimum element ifdefined . ",
    "url": "/docs/min_elem_ifdefined.html",
    
    "relUrl": "/docs/min_elem_ifdefined.html"
  },"1933": {
    "doc": "min_index",
    "title": "syntax",
    "content": ". | min_index(a) | min_index(a, relation) | . ",
    "url": "/docs/min_index.html#syntax",
    
    "relUrl": "/docs/min_index.html#syntax"
  },"1934": {
    "doc": "min_index",
    "title": "definition",
    "content": ". | min_index(a) results in a parameter with the index-numbers of the minimum value of the non null values of attribute a. | min_index(a, relation) results in an attribute with the index numbers of the minimum values of the non null values of attribute a, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation attribute. | . ",
    "url": "/docs/min_index.html#definition",
    
    "relUrl": "/docs/min_index.html#definition"
  },"1935": {
    "doc": "min_index",
    "title": "description",
    "content": "The min_index function is not defined for string data-item. ",
    "url": "/docs/min_index.html#description",
    
    "relUrl": "/docs/min_index.html#description"
  },"1936": {
    "doc": "min_index",
    "title": "applies to",
    "content": ". | attribute a with Numeric, Point or boolean value-type | relation with value-type of the group CanBeDomainUnit | . ",
    "url": "/docs/min_index.html#applies-to",
    
    "relUrl": "/docs/min_index.html#applies-to"
  },"1937": {
    "doc": "min_index",
    "title": "conditions",
    "content": "The values-unit of the resulting data item should be the domain unit of argument a. ",
    "url": "/docs/min_index.html#conditions",
    
    "relUrl": "/docs/min_index.html#conditions"
  },"1938": {
    "doc": "min_index",
    "title": "since version",
    "content": "7.184 . ",
    "url": "/docs/min_index.html#since-version",
    
    "relUrl": "/docs/min_index.html#since-version"
  },"1939": {
    "doc": "min_index",
    "title": "example",
    "content": "parameter&lt;City&gt; min_index_NrInh := min_index(City/NrInhabitants); result = 5 attribute&lt;City&gt; min_index_NrInhRegion (Region) := min_index(City/NrInhabitants, City/Region_rel); . | City/NrInhabitants | City/Region_rel | . | 550 | 0 | . | 525 | 1 | . | 300 | 2 | . | 500 | 1 | . | 200 | 3 | . | 175 | null | . | null | 3 | . domain City, nr of rows = 7 . | min_index_NrInhRegion | . | 0 | . | 3 | . | 2 | . | 4 | . | null | . domain Region, nr of rows = 5 . ",
    "url": "/docs/min_index.html#example",
    
    "relUrl": "/docs/min_index.html#example"
  },"1940": {
    "doc": "min_index",
    "title": "see also",
    "content": ". | max_index | min | . ",
    "url": "/docs/min_index.html#see-also",
    
    "relUrl": "/docs/min_index.html#see-also"
  },"1941": {
    "doc": "min_index",
    "title": "min_index",
    "content": "aggregation-functions min_index . ",
    "url": "/docs/min_index.html",
    
    "relUrl": "/docs/min_index.html"
  },"1942": {
    "doc": "minclaims",
    "title": "definition",
    "content": "MinClaims is the eigth argument of the discrete_alloc function. This argument needs to refer to a container with as subitem attribute for each land use type. These attributes define the minimal amount of land units that need to be allocated for the land use type per region. The values-unit for these attributes is the number of land units. The domain-unit of these attributes are the domain units of the regions for which the claims are available. ",
    "url": "/docs/minclaims.html#definition",
    
    "relUrl": "/docs/minclaims.html#definition"
  },"1943": {
    "doc": "minclaims",
    "title": "applies to",
    "content": "The values unit of the each MinClaim attribute with value-type: uint32 . ",
    "url": "/docs/minclaims.html#applies-to",
    
    "relUrl": "/docs/minclaims.html#applies-to"
  },"1944": {
    "doc": "minclaims",
    "title": "conditions",
    "content": "The names of the MinClaims attributes need to match with the values of the TypeNames argument. ",
    "url": "/docs/minclaims.html#conditions",
    
    "relUrl": "/docs/minclaims.html#conditions"
  },"1945": {
    "doc": "minclaims",
    "title": "example",
    "content": "container region {    unit&lt;uint8&gt; p1: nrofrows = 1;    unit&lt;uint8&gt; p2: nrofrows = 2; } container claim_source {    unit&lt;float32&gt;      Meter      := BaseUnit('m', float32);    unit&lt;float32&gt;      Ha         := 10000.0 * Meter * Meter;    parameter&lt;float32&gt; nrHaPerCel := 1[claim_sources/Ha];        container p1    {       attribute&lt;Ha&gt; Nature_min (region/p1) : [12];       attribute&lt;Ha&gt; Living_min (region/p1) :  [5];    }    container p2    {        attribute&lt;Ha&gt; Working_min (regionMaps/p2): [6,2];    }  }  container claims_min: Using = \"claim_source\"  {     attribute&lt;uint32&gt; Living  (region/p1) := uint32(p1/Living_min  / nrHaPerCel);     attribute&lt;uint32&gt; Working (region/p2) := uint32(p2/Working_min / nrHaPerCel);     attribute&lt;uint32&gt; Nature  (region/p1) := uint32(p1/Nature_min  / nrHaPerCel); } . ",
    "url": "/docs/minclaims.html#example",
    
    "relUrl": "/docs/minclaims.html#example"
  },"1946": {
    "doc": "minclaims",
    "title": "minclaims",
    "content": "allocation-functions, argument 8: MinClaims . ",
    "url": "/docs/minclaims.html",
    
    "relUrl": "/docs/minclaims.html"
  },"1947": {
    "doc": "miscellaneous-functions",
    "title": "miscellaneous-functions",
    "content": "Miscellaneous operators-and-functions are functions not categorized in the other function groups. | regex_match - boolean data item indicating if the source data item matches the syntax expressed by the syntax argument | regex_search - string data item with a substring of the source argument that meets the searchsyntax argument. | regex_replace - string data item in which the substrings of the source argument that meet the syntax argument are replaced by the newvalues argument. | . | propvalue - string parameter with the value of the property | subitem_propvalues | subtree_propvalues | inherited_propvalues | . | rnd_uniform - data item with pseudo random values | rnd_permutation - random permutation of the index numbers of domainunit argument | . | subitem - reference to the subitem of a parent item | . | geodmsversion - parameter with the GeoDMS version number, function has become obsolete | geodmsmajorversionnumber - parameter with the GeoDMS major version number | geodmsminorversionnumber - parameter with the GeoDMS minor version number | geodmspatchnumber - parameter with the GeoDMS patch number | . | geodmsbuildconfig - parameter indicating if the running GeoDMS executable is a Release or Debug version | geodmsplatform - parameter indicating if the running GeoDMS executable is a Win32 or X64 version . | fencecontainer - * * | . ",
    "url": "/docs/miscellaneous-functions.html",
    
    "relUrl": "/docs/miscellaneous-functions.html"
  },"1948": {
    "doc": "mod",
    "title": "syntax",
    "content": ". | mod(a, b) | a % b | . ",
    "url": "/docs/mod.html#syntax",
    
    "relUrl": "/docs/mod.html#syntax"
  },"1949": {
    "doc": "mod",
    "title": "definition",
    "content": "mod(a, b) or a % b is defined as a modulo b. The function results in the element-by-element remainder of division of the values of data-item a by the corresponding values of data item b. ",
    "url": "/docs/mod.html#definition",
    
    "relUrl": "/docs/mod.html#definition"
  },"1950": {
    "doc": "mod",
    "title": "applies to",
    "content": "Data items with Numeric value-type . ",
    "url": "/docs/mod.html#applies-to",
    
    "relUrl": "/docs/mod.html#applies-to"
  },"1951": {
    "doc": "mod",
    "title": "conditions",
    "content": ". | Domain unit of the argument must match or be void (literals or parameter can be calculated with data items of any domain). | Arguments must have matching: . | value-type | . | . ",
    "url": "/docs/mod.html#conditions",
    
    "relUrl": "/docs/mod.html#conditions"
  },"1952": {
    "doc": "mod",
    "title": "example",
    "content": "1. attribute&lt;float32&gt; AmodB (ADomain) := mod(A, B); 2. attribute&lt;float32&gt; AmodB (ADomain) := A % B; . | A | B | AmodB | . | 0 | 1 | 0 | . | 1 | 1 | 0 | . | 4 | 2 | 0 | . | 7 | 3 | 1 | . | -5 | -2 | -1 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/mod.html#example",
    
    "relUrl": "/docs/mod.html#example"
  },"1953": {
    "doc": "mod",
    "title": "mod",
    "content": "arithmetic-functions modulo (%) . ",
    "url": "/docs/mod.html",
    
    "relUrl": "/docs/mod.html"
  },"1954": {
    "doc": "mode",
    "title": "mode",
    "content": "The [GeoDMS GUI] can run in two modes: . | User Mode: a mode for the less experienced user, presenting on the items for which the IsHidden property is not configured to True. The idea is that the modeler can configure which tree-item are less relevant for the user, making the configuration less complex. | Administrator mode: a mode for the (more) experienced user, presenting always all items. | . ",
    "url": "/docs/mode.html",
    
    "relUrl": "/docs/mode.html"
  },"1955": {
    "doc": "modus",
    "title": "syntax",
    "content": ". | modus(a) | modus(a, relation) | . ",
    "url": "/docs/modus.html#syntax",
    
    "relUrl": "/docs/modus.html#syntax"
  },"1956": {
    "doc": "modus",
    "title": "definition",
    "content": ". | modus(a) results in a parameter with the most occurring non null value of attribute a. | modus(a, relation) results in an attribute with the most occurring non null value of attribute a, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | . ",
    "url": "/docs/modus.html#definition",
    
    "relUrl": "/docs/modus.html#definition"
  },"1957": {
    "doc": "modus",
    "title": "description",
    "content": "An attribute might contain multiple most occurring non null values. In these cases, the modus function results in the lowest most occurring non null value, independent from the sequence of the values in the attribute, see also example 2. ",
    "url": "/docs/modus.html#description",
    
    "relUrl": "/docs/modus.html#description"
  },"1958": {
    "doc": "modus",
    "title": "applies to",
    "content": ". | attribute a with uint2, uint4, uint8, uint16, uint32 or bool value-type | relation with value type of the goup CanBeDomainUnit | . ",
    "url": "/docs/modus.html#applies-to",
    
    "relUrl": "/docs/modus.html#applies-to"
  },"1959": {
    "doc": "modus",
    "title": "conditions",
    "content": ". | The values unit of the resulting data-item should match with regard to value type and metric with the values unit of attribute a. | The domain of argument a and relation must match. | . ",
    "url": "/docs/modus.html#conditions",
    
    "relUrl": "/docs/modus.html#conditions"
  },"1960": {
    "doc": "modus",
    "title": "example 1",
    "content": "parameter&lt;uint32&gt; modusLifeStyleCode                      := modus(City/LifeStyleCode); result = 1 attribute&lt;uint32&gt; modusLifeStyleCodeRegion (RegionDomain) := modus(City/LifeStyleCode, City/Region_rel); . | City/LifeStyleCode | City/Region_rel | . | 2 | 0 | . | 0 | 1 | . | 1 | 2 | . | 0 | 1 | . | 1 | 3 | . | 1 | null | . | null | 3 | . domain City, nr of rows = 7 . | modusLifeStyleCode | . | 2 | . | 0 | . | 1 | . | 1 | . | null | . domain Region, nr of rows = 5 . ",
    "url": "/docs/modus.html#example-1",
    
    "relUrl": "/docs/modus.html#example-1"
  },"1961": {
    "doc": "modus",
    "title": "example 2",
    "content": "parameter&lt;uint32&gt; modusSeqA := modus(City/SeqA); result = 1 parameter&lt;uint32&gt; modusSeqB := modus(City/SeqB); result = 1 parameter&lt;uint32&gt; modusSeqC := modus(City/SeqC); result = 1 parameter&lt;uint32&gt; modusSeqD := modus(City/SeqD); result = 1 . | City/LifeStyleCode | City/Region_rel | . | 2 | 0 | . | 0 | 1 | . | 1 | 2 | . | 0 | 1 | . | 1 | 3 | . | 1 | null | . | null | 3 | . domain City, nr of rows = 7 . | modusLifeStyleCode | . | 2 | . | 0 | . | 1 | . | 1 | . | null | . domain Region, nr of rows = 5 . ",
    "url": "/docs/modus.html#example-2",
    
    "relUrl": "/docs/modus.html#example-2"
  },"1962": {
    "doc": "modus",
    "title": "see also",
    "content": ". | modus_weighted | . ",
    "url": "/docs/modus.html#see-also",
    
    "relUrl": "/docs/modus.html#see-also"
  },"1963": {
    "doc": "modus",
    "title": "modus",
    "content": "aggregation-functions modus . ",
    "url": "/docs/modus.html",
    
    "relUrl": "/docs/modus.html"
  },"1964": {
    "doc": "modus_weighted",
    "title": "syntax",
    "content": ". | modus_weighted(a, weight) | modus_weighted(a, weight, relation) | . ",
    "url": "/docs/modus_weighted.html#syntax",
    
    "relUrl": "/docs/modus_weighted.html#syntax"
  },"1965": {
    "doc": "modus_weighted",
    "title": "definition",
    "content": ". | modus_weighted(a, weight) results in the parameter with the value of attribute a for the maximum sum of the values of the weight attribute. | modus_weighted(a, weight, relation) results in an attribute with the values of attribute a for the maximum sum of the values of the weight attribute, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | . ",
    "url": "/docs/modus_weighted.html#definition",
    
    "relUrl": "/docs/modus_weighted.html#definition"
  },"1966": {
    "doc": "modus_weighted",
    "title": "applies to",
    "content": ". | attribute a with uint2, uint4, uint8, uint16, uint32 or bool value-type | attribute weight with Numeric value type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/modus_weighted.html#applies-to",
    
    "relUrl": "/docs/modus_weighted.html#applies-to"
  },"1967": {
    "doc": "modus_weighted",
    "title": "conditions",
    "content": ". | The values unit of the resulting data-item should match with regard to value type and metric with the values unit of attribute a. | The domain unit of argument a, weight and relation must match. | . ",
    "url": "/docs/modus_weighted.html#conditions",
    
    "relUrl": "/docs/modus_weighted.html#conditions"
  },"1968": {
    "doc": "modus_weighted",
    "title": "example",
    "content": "1. parameter&lt;uint32&gt; modus_wLifeStyleCode := modus_weighted(City/LifeStyleCode, City/NrInhabitants); result = 0 2. attribute&lt;uint32&gt; modus_wLifeStyleCodeRegion (Region) := modus_weighted( City/LifeStyleCode , City/NrInhabitants , City/Region_rel ); . | City/LifeStyleCode | City/NrInhabitants | City/Region_rel | . | 2 | 550 | 0 | . | 0 | 525 | 1 | . | 1 | 300 | 2 | . | 0 | 500 | 1 | . | 1 | 200 | 3 | . | 1 | 175 | null | . | null | null | 3 | . domain City, nr of rows = 7 . | modus_wLifeStyleCode | . | 2 | . | 0 | . | 1 | . | 1 | . | null | . domain Region, nr of rows = 5 . ",
    "url": "/docs/modus_weighted.html#example",
    
    "relUrl": "/docs/modus_weighted.html#example"
  },"1969": {
    "doc": "modus_weighted",
    "title": "see also",
    "content": ". | modus | . ",
    "url": "/docs/modus_weighted.html#see-also",
    
    "relUrl": "/docs/modus_weighted.html#see-also"
  },"1970": {
    "doc": "modus_weighted",
    "title": "modus_weighted",
    "content": "aggregation-functions modus_weighted . ",
    "url": "/docs/modus_weighted.html",
    
    "relUrl": "/docs/modus_weighted.html"
  },"1971": {
    "doc": "mondaine",
    "title": "project goal",
    "content": "To enable Vesta to be used in the Mondaine Suite. Part of the larger MONDAINE project, wherein we use ESDL as the language to make different energy models talk to each other. The required interfaces/ coupling, required for the MONDAINE use cases are: . | Read Vesta input from ESDL, more specifically: Heat Sources, New Buildings, and Area Measures. | Translate Vesta Leidraad output into ESDL, using a python module. | . ",
    "url": "/docs/mondaine.html#project-goal",
    
    "relUrl": "/docs/mondaine.html#project-goal"
  },"1972": {
    "doc": "mondaine",
    "title": "working with Vesta in the MONDAINE Suite",
    "content": "Within the MONDAINE project we have edited the Vesta model to used within the MONDAINE suite. This means that it can be used for several use cases and has output that can be converted into the ESDL-language and then be used in other energy transition models. How that works is described on the following pages: . | Downloading and installing MONDAINE Vesta | Using MONDAINE Vesta | Converting MONDAINE Vesta output into ESDL and uploading it to the MONDAINE hub | . ",
    "url": "/docs/mondaine.html#working-with-vesta-in-the-mondaine-suite",
    
    "relUrl": "/docs/mondaine.html#working-with-vesta-in-the-mondaine-suite"
  },"1973": {
    "doc": "mondaine",
    "title": "mondaine",
    "content": " ",
    "url": "/docs/mondaine.html",
    
    "relUrl": "/docs/mondaine.html"
  },"1974": {
    "doc": "msaccess",
    "title": "MsAccess Database",
    "content": "Example: . container DataBase :  StorageName  = \"%projDir%/data/DB.mdb\" ,  SyncMode     = \"None\" {    unit&lt;uint32&gt; Table: SqlString = \"SELECT * FROM TestTable ORDER BY ID\"    {       attribute&lt;int32&gt;   IntegerAtt;       attribute&lt;float32&gt; FloatAtt;       attribute&lt;bool&gt;    BoolAtt;       attribute&lt;string&gt;  StringAtt;    } } . With the storagename property the database name is configured for the DataBase container. The GeoDMS recognises the .mdb extension as an MsAccess database and uses the odbc to read the data. In the DataBase container, domain-unit are configured for each relevant table and or view/query in the database. The number of elements of these units is derived from the number of records in the data source. ",
    "url": "/docs/msaccess.html#msaccess-database",
    
    "relUrl": "/docs/msaccess.html#msaccess-database"
  },"1975": {
    "doc": "msaccess",
    "title": "msaccess",
    "content": " ",
    "url": "/docs/msaccess.html",
    
    "relUrl": "/docs/msaccess.html"
  },"1976": {
    "doc": "msexcel",
    "title": "MsExcel Range",
    "content": "Example: . unit&lt;uint32&gt; Range :   StorageName = \"DRIVER={Microsoft Excel Driver (*.xls)};DBQ=%projDir%/data/Sheet.xls\" ,   StorageType = \"ODBC\" ,   SqlString   = \"SELECT * FROM ImportSection ORDER BY ID\" ,   SyncMode    = \"All\" {       attribute&lt;int32&gt;   IntegerAtt;       attribute&lt;float32&gt; FloatAtt;       attribute&lt;bool&gt;    BoolAtt;       attribute&lt;string&gt;  StringAtt; } . Data can be read from a named range of a Sheet in an Ms Excel file. See the MsExcel help for how to name a range. The name of the range is used in the FROM statement in the sqlstring property (ImportSection in the example). For MsExcel sheets, the storagename is directly configured to the domain-unit for the imported range. The configuration of the DRIVER in the StorageName property and storagetype = “ODBC” is needed for the GeoDMS to recognise the file as an MsExcel ODBC source. The configured attribute read the columns from the named range. ",
    "url": "/docs/msexcel.html#msexcel-range",
    
    "relUrl": "/docs/msexcel.html#msexcel-range"
  },"1977": {
    "doc": "msexcel",
    "title": "msexcel",
    "content": " ",
    "url": "/docs/msexcel.html",
    
    "relUrl": "/docs/msexcel.html"
  },"1978": {
    "doc": "mul-(overlap)",
    "title": "syntax",
    "content": ". | mul(polygon_data_itemA, polygon_data_itemB) | polygon_data_itemA * polygon_data_itemB | . ",
    "url": "/docs/mul-(overlap).html#syntax",
    
    "relUrl": "/docs/mul-(overlap).html#syntax"
  },"1979": {
    "doc": "mul-(overlap)",
    "title": "definition",
    "content": "mul(polygon_data_itemA, polygon_data_itemB) or polygon_data_itemA * polygon_data_itemB results in a new polygon data-item with the overlap of the polygon_data_itemA and polygon_data_itemB. The left part of the figure illustrates the argument: polygon_data_itemA and polygon_data_itemA. The resulting polygon (right side of the image) is the overlap of the original square (polygon_data_itemA) and the ditstricts polygon_data_itemB. ",
    "url": "/docs/mul-(overlap).html#definition",
    
    "relUrl": "/docs/mul-(overlap).html#definition"
  },"1980": {
    "doc": "mul-(overlap)",
    "title": "description",
    "content": "Use the polygon_connectivity function to find out which polygons are connected. Use the area function on the results of the multiplied polygons to find out the size of the overlap. ",
    "url": "/docs/mul-(overlap).html#description",
    
    "relUrl": "/docs/mul-(overlap).html#description"
  },"1981": {
    "doc": "mul-(overlap)",
    "title": "applies to",
    "content": "data items polygon_data_itemA and polygon_data_itemB with an ipoint or spoint value-type. ",
    "url": "/docs/mul-(overlap).html#applies-to",
    
    "relUrl": "/docs/mul-(overlap).html#applies-to"
  },"1982": {
    "doc": "mul-(overlap)",
    "title": "conditions",
    "content": ". | The composition type of the arguments needs to be polygon. | The domain-unit of the arguments must match or be void. | . ",
    "url": "/docs/mul-(overlap).html#conditions",
    
    "relUrl": "/docs/mul-(overlap).html#conditions"
  },"1983": {
    "doc": "mul-(overlap)",
    "title": "since version",
    "content": "7.112 . ",
    "url": "/docs/mul-(overlap).html#since-version",
    
    "relUrl": "/docs/mul-(overlap).html#since-version"
  },"1984": {
    "doc": "mul-(overlap)",
    "title": "example",
    "content": "parameter&lt;ipoint&gt; geometry (poly) := square/geometry[0] * union_polygon/geometry; . ",
    "url": "/docs/mul-(overlap).html#example",
    
    "relUrl": "/docs/mul-(overlap).html#example"
  },"1985": {
    "doc": "mul-(overlap)",
    "title": "see also",
    "content": ". | sub-(difference) | mul | . ",
    "url": "/docs/mul-(overlap).html#see-also",
    
    "relUrl": "/docs/mul-(overlap).html#see-also"
  },"1986": {
    "doc": "mul-(overlap)",
    "title": "mul-(overlap)",
    "content": "geometric-functions mul (overlap) . ",
    "url": "/docs/mul-(overlap).html",
    
    "relUrl": "/docs/mul-(overlap).html"
  },"1987": {
    "doc": "mul",
    "title": "syntax",
    "content": ". | mul(a, b, …) | a * b * … | . ",
    "url": "/docs/mul.html#syntax",
    
    "relUrl": "/docs/mul.html#syntax"
  },"1988": {
    "doc": "mul",
    "title": "definition",
    "content": "mul(a,b, …) or a * b * … results in the element-by-element multiplication of corresponding values of the data-item: a, b, … . If the result of the multiplication exceeds the MinValue or MaxValue of the value type, an error is generated. Use the mul_or_null function if a null value is requested in these cases. ",
    "url": "/docs/mul.html#definition",
    
    "relUrl": "/docs/mul.html#definition"
  },"1989": {
    "doc": "mul",
    "title": "applies to",
    "content": "Data items with Numeric or Point value-type . unit with Numeric Value Type . ",
    "url": "/docs/mul.html#applies-to",
    
    "relUrl": "/docs/mul.html#applies-to"
  },"1990": {
    "doc": "mul",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be added to data items of any domain). | Arguments must have matching: . | value-type | . | . ",
    "url": "/docs/mul.html#conditions",
    
    "relUrl": "/docs/mul.html#conditions"
  },"1991": {
    "doc": "mul",
    "title": "example",
    "content": "1. attribute&lt;float32&gt; mulABC (ADomain) := mul(A, B, C) 2. attribute&lt;float32&gt; mulABC (ADomain) := A * B * C; . | A | B | C | mulABC | . | 0 | 1 | 0 | 0 | . | 1 | -1 | 1 | -1 | . | -2 | 2 | 4 | -16 | . | 3.6 | 1.44 | 7 | 36.29 | . | 999 | 111 | -5 | 554,445 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/mul.html#example",
    
    "relUrl": "/docs/mul.html#example"
  },"1992": {
    "doc": "mul",
    "title": "see also",
    "content": ". | mul_or_null | mul-(overlap) | . ",
    "url": "/docs/mul.html#see-also",
    
    "relUrl": "/docs/mul.html#see-also"
  },"1993": {
    "doc": "mul",
    "title": "mul",
    "content": "arithmetic-functions multiplication ()* . ",
    "url": "/docs/mul.html",
    
    "relUrl": "/docs/mul.html"
  },"1994": {
    "doc": "mul_or_null",
    "title": "syntax",
    "content": ". | mul_or_null(a, b) | . ",
    "url": "/docs/mul_or_null.html#syntax",
    
    "relUrl": "/docs/mul_or_null.html#syntax"
  },"1995": {
    "doc": "mul_or_null",
    "title": "definition",
    "content": "mul_or_null(a, b) results in the element-by-element multiplication of corresponding values of the data-item: a and b. If the result of the multiplication exceeds the MinValue or MaxValue of the value-type, the mul_or_null function results in the value null. ",
    "url": "/docs/mul_or_null.html#definition",
    
    "relUrl": "/docs/mul_or_null.html#definition"
  },"1996": {
    "doc": "mul_or_null",
    "title": "applies to",
    "content": "Data items with Numeric, Point, or String value-type. ",
    "url": "/docs/mul_or_null.html#applies-to",
    
    "relUrl": "/docs/mul_or_null.html#applies-to"
  },"1997": {
    "doc": "mul_or_null",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void, (literals or parameter can be added to data items of any domain). | Arguments must have matching: . | value type | metric | . | . ",
    "url": "/docs/mul_or_null.html#conditions",
    
    "relUrl": "/docs/mul_or_null.html#conditions"
  },"1998": {
    "doc": "mul_or_null",
    "title": "example",
    "content": "1. attribute&lt;uint8&gt; mul_or_null_AB (ADomain) := mul_or_null(A, B); . | A | B | mul_or_null_AB | . | 0 | 1 | 0 | . | 1 | null | null | . | 2 | 54 | 108 | . | 5 | 100 | null | . | 2 | 111 | 222 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/mul_or_null.html#example",
    
    "relUrl": "/docs/mul_or_null.html#example"
  },"1999": {
    "doc": "mul_or_null",
    "title": "see also",
    "content": ". | mul | . ",
    "url": "/docs/mul_or_null.html#see-also",
    
    "relUrl": "/docs/mul_or_null.html#see-also"
  },"2000": {
    "doc": "mul_or_null",
    "title": "mul_or_null",
    "content": "arithmetic-functions sub_or_null . ",
    "url": "/docs/mul_or_null.html",
    
    "relUrl": "/docs/mul_or_null.html"
  },"2001": {
    "doc": "multi-tasking",
    "title": "related issues",
    "content": ". | issue 1021 | . ",
    "url": "/docs/multi-tasking.html#related-issues",
    
    "relUrl": "/docs/multi-tasking.html#related-issues"
  },"2002": {
    "doc": "multi-tasking",
    "title": "multi-tasking",
    "content": "recent-developments: Multi Tasking (also known as Parallel Processing, PP1/PP2) . Multiple improvements, including solving potential dead-locks, have been made to the Multi Tasking(MT2) functionality. This allows the GeoDMS to perform multiple calculation steps simultaneously. Since version 7.174 we advice to enable all Multi Tasking options (default setting since 7.196 when installing the GeoDMS. If your local machine encounters memory issues or non reproducible errors, try to disable the MT2 option. The option can be set from the Tools &gt; Options &gt; Advanced dialog (it is possible to overrule the default setting with a batch parameter). ",
    "url": "/docs/multi-tasking.html",
    
    "relUrl": "/docs/multi-tasking.html"
  },"2003": {
    "doc": "namespace",
    "title": "search path",
    "content": "Within the GeoDMS items are found in a their search path. This path starts in the context of the configured item containing the reference. If the referred item is not found in this context, the parent level of this item is searched, until the root level is reached. Items configured in side branches are not part of this search path. The GeoDMS needs to be informed about the side branches in which the requested items occur. This can be done by specifying this branche information in the name of the referred items. The relevant parent item names need to be added to the name of the referred item, until the level of a parent item is reached which is part of the search path. Another way of indicating that a branche, not being a part of the search path, need to be searched for items is by configuring the using property, . ",
    "url": "/docs/namespace.html#search-path",
    
    "relUrl": "/docs/namespace.html#search-path"
  },"2004": {
    "doc": "namespace",
    "title": "example",
    "content": "Assume the following configuration: . container LandUseScanner {    container Units    {        unit&lt;float32&gt; m   := BaseUnit('m', float32) , label = \"meter\";        unit&lt;float32&gt; km2 := 1000.0 * m             , label = \"kilometer\";        unit&lt;float32&gt; s   := BaseUnit('s', float32) , label = \"second\";          container speed        {            unit&lt;float32&gt; m_per_s := m / s, label = \"meter per second\";        }      }    container Calc    {        parameter&lt;Units/m&gt; dist := 10[Units/m];        container speed        {           parameter&lt;Units/m&gt;             dist    := 50[Units/m];           parameter&lt;Units/s&gt;             period  :=  5[Units/s];           parameter&lt;Units/speed/m_per_s&gt; speed50 := dist / Period;           parameter&lt;Units/speed/m_per_s&gt; speed10 := Calc/dist / Period;        }     } } . This example contains multiple references. The following examples can be derived from this script to illustrate the NameSpace concept of the GeoDMS: . 1. Same Container: The km (Kilometer) unit in the Units container contains a reference (within the expression) to the m (Meter) unit. The name used for this reference item is only m, as the m item is configured in the same container (Units) as the km item. This m item can be therefore be found and no parent item name is needed. 2. Within Search Path: The m_per_s (meter per second) unit in the Units/speed container contains references (within the expression) to both the m and s items. These m and s items are confiured in the Units container. As in example 1, only the direct tree item names are used in the reference, as the Units container is within the search path of the m_per_s item. The full search path for the m_per_s item is: . | first the container Calc of the Units container | second the container Units | third the container LandUseScanner The m item can be be found in the Units container and therefore no parent item name is needed. | . 3. Parent name needed: The item dist in the Calc container contains two references(in the definition of the values unit and in the expression) to the item m configured in the Units container. The full search path for this dist item is: . | first the container Calc | second the container LandUseScanner Within this search path the item m is not found. But in the container LandUseScanner the container Units can be found. So in this case the name of the direct parent (Units) needs to be added to the name of the referred tree item (m), resulting in the name: Units/m. | . 4. Multiple parent names needed: The items speed50 and speed10 in the Calc/speed container contains references(in the definition of the values unit) to the item m_per_s configured in the Units/speed container. The full search path for these items are: . | first the container speedof the Calc container | second the container Calc | third the container LandUseScanner Within this search path the item m_per_s is not found. Also the item: speed/m_per_s cannot be found in this search parth. But in the container LandUseScanner the container Units can be found. So in this case the name of both parents (Units/speed) needs to be added to the name of the referred tree item (m), resulting in the name: Units/speed/m_per_s. | . 5. Adding parent names can result in different outcomes: The items speed50 and speed10 result in outcomes of respectively 10 and 2. Configuring the item Calc/dist or dist does matter in this case. This also relates to the search path for these items (see example 4). In the expression configured for the speed50 item, the dist item is found in the same container (speed). This GeoDMS does not look any futher and uses this dist item (with as value 50 units/s). In the expression configured for the speed10 item, the Calc/dist item is not an item name that can be found in the speed container. Buth the item name can be found in the parent container, Calc (with as value 10 units/m). So in the configured expression for these items, references are made to other items based on the parent names added. ",
    "url": "/docs/namespace.html#example",
    
    "relUrl": "/docs/namespace.html#example"
  },"2005": {
    "doc": "namespace",
    "title": "namespace",
    "content": "tree-item often refer to other tree items, in defining unit, expression or other property. References to other items are configured by name. The referred name means the direct name of the configured item and the relevant parent item names. Which parent-item need to be configured in a reference, is depending on the location of the tree item referring to the other items. If an item is configured in the same context (same parent item) as it’s referred items, the reference can be configured with only the direct name no parent item name has to be configured. This also applies to the direct subitem of each of the parents of the item. For items in other branches parent items need to be added to your reference. ",
    "url": "/docs/namespace.html",
    
    "relUrl": "/docs/namespace.html"
  },"2006": {
    "doc": "naming-conventions",
    "title": "general",
    "content": ". | Limit the length of tree item names: Use the label, description or url property for longer names and/or extra descriptions and prevent redundancy in tree-item-name of tree items (see next dot). | Prevent redundancy in full tree item names: An item is defined by it’s full name, not only by the direct name in it’s parent container. Don’t absorb information in a name which is already part of a direct or indirect parent-item, see example: | . container InhabitantsPerRegion {     container Year1999     {          attribute&lt;nrInhabitants&gt; InhGroningen1999 (region);         attribute&lt;nrInhabitants&gt; InhFriesland1999 (region);         attribute&lt;nrInhabitants&gt; InhDrenthe1999   (region);     } } . In this example two types of redundancies occur: . | The characters: Inh (number inhabitants) are part of each attribute name, but number of inhabitants is already the name of an indirect parent. | The year 1999 is repeated in each attribute name. | . The preferable configuration is: . container InhabitantsPerRegion {     container Year1999     {          attribute&lt;nrInhabitants&gt; Groningen (region);         attribute&lt;nrInhabitants&gt; Friesland (region);         attribute&lt;nrInhabitants&gt; Drenthe   (region);     } } . The full name of the second attribute is now: InhabitantsPerRegion/Year1999/Friesland. This name contains all relevant and no redundant information. The exception to this rule is the case where tree item names would only consist of numeric characters. The next example illustrates this: . container LandUse {     attribute&lt;ha&gt; lu1990 (Nl100mGrid);    attribute&lt;ha&gt; lu2000 (Nl100mGrid);    attribute&lt;ha&gt; lu2010 (Nl100mGrid); } . The abbreviation lu means land use and is as redundant with the parent container name. Tree item names 1990, 2000, 2010 are however no valid tree item names, this type of redundancy is acceptable. | Use the postfix: _rel in naming index-attribute, e.g. region_rel as attribute name for the relation of a building to a region | Name objects singular, e.g. airport in stead of airports and road in stead of roads | Use capitals for acronyms, e.g. NIP (for Nederland in Plannen) | Use for abbreviation lower-case letters, e.g. lu for land use | Limit tree item names to the most relevant information, e.g.: heather instead of heathland | In conjunctions, name first the generic followed by more specific information, e.g.: agr_cattle, lu_labour_office. The information after the hyphen _ indicates a further specification or limiting condition. In case no alternatives are available, a liberal approach is allowed, e.g. wet_highpeatsoil or wet_peatsoil_high. As an alternative, the conjunction can also be composed with the first elements in lower-case letters and the next elements starting with a capital, e.g. luModel, luLumos | Combinations of concepts can be combined in one name, e.g. SocCultural. | Don’t use keywords like: attribute, parameter, container, template, unit for tree items names. | Don’t use composition names: poly, polygon, arc for domain units. | Don’t use operators-and-functions names for template. | . ",
    "url": "/docs/naming-conventions.html#general",
    
    "relUrl": "/docs/naming-conventions.html#general"
  },"2007": {
    "doc": "naming-conventions",
    "title": "units",
    "content": "In a GeoDMS configuration three types of units are distinguished: . | Quantity units for quantity data-item expressed in values-unit like meter or euro. | Class units for classified data (like soil types, region keys) or for data to be classified. | Geographical domains as municipality or NlGrid100m. | . These different unit types are configured in different containers, often called Units, Classifications and Geography. ",
    "url": "/docs/naming-conventions.html#units",
    
    "relUrl": "/docs/naming-conventions.html#units"
  },"2008": {
    "doc": "naming-conventions",
    "title": "quantity units",
    "content": ". | Configure quantity units in a units container, preferably as one of the first configured containers. | Use as much as possible si units or monetary units as base units. Derive other units as square meter from base units with expressions. | Use the following naming conventions for si units and factors: | . | Quantity | Unit | Symbol | . | Length | meter | m | . | Mass | kilogram | kg | . | Time | seconde | s | . | Elektric current | ampere | A | . | Temperature | kelvin | K | . | Qauntity matery | mol | mol | . | light intensity | candela | cd | . | Factor | name | Symbol | . | 10-24 | yocto | y | . | 10-21 | zepto | z | . | 10-18 | atto | a | . | 10-15 | femto | f | . | 10-12 | pico | p | . | 10-9 | nano | n | . | 10-6 | micro | Âµ (mi) | . | 10-3 | milli | m | . | 10-2 | centi | c | . | 10-1 | deci | d | . | 101 | deka | da | . | 102 | hecto | h | . | 103 | kilo | k | . | 106 | Mega | M | . | 109 | Giga | G | . | 1012 | Tera | T | . | 1015 | Peta | P | . | 1018 | Exa | E | . | 1021 | Zetta | Z | . | 1024 | Yotta | Y | . | Use the prefix Nr for numbers, like NrInhabitants, NrResidences. | Use the range property to specify the range of floating point units, if known and different from the default range of the value type, see value-type for the range of the value types. | Use the NrOfRows property to specify the range of integer units, if known. | . ",
    "url": "/docs/naming-conventions.html#quantity-units",
    
    "relUrl": "/docs/naming-conventions.html#quantity-units"
  },"2009": {
    "doc": "naming-conventions",
    "title": "class units",
    "content": ". | Configure class units in a Classifications container. | Use the NrOfRows property to indicate the number or classes. | As subitems of a class unit, the following attributes are often configured: . | A ClassBreaks item, with the class boundaries translated into class numbers. The DialogType property for this attribute need to be configured with the value: Classification. Example: | . attribute&lt;km&gt; ClassBreaks: DialogType = \"Classification\", [0,200,400,800];  . The values-unit of this classes item (in the example km) should correspond with the values unit of the data to be classified. The first class gets the value 0, the second class a value 1 etc. For classified data no classes item need to be configured (think e.g. about region keys). | A Label item, with the labels used for the classes (in the legend of the map view and in the table view). The DialogType property for this attribute should be configure with as value:LabelText. Example: | . attribute&lt;string&gt; Label: DialogType = \"LabelText\",     ['0 - 200','200 - 400','400 - 800','&gt; 800'];  . The values unit of this Label item is of the string values unit. | A set of possible style items for the visualisation of the classes in a map view. These are attributes configuring the visualisation-style for each class. Example: | . attribute&lt;uint32&gt; SymbolColor: DialogType = \"SymbolColor\",    [rgb(128,255,0),rgb(0,128,0),rgb(0,64,128),rgb(255,0,0)];  . This item configures the used symbol colors for each class. See visualisation style for the possible style items. ",
    "url": "/docs/naming-conventions.html#class-units",
    
    "relUrl": "/docs/naming-conventions.html#class-units"
  },"2010": {
    "doc": "naming-conventions",
    "title": "naming-conventions",
    "content": "To make configurations clear (also for non-developers), maintainable and transferable, it is strongly recommended to follow the conventions for naming your tree-item. Clear, meaningful and unambiguous naming of items in your model is essential for understanding the logic and the maintainability of your model. Therefore we advice you to think well about your tree item names, don’t use abstract variables names like: a, b, c or var1, var2, var3. tree item names are case insensitive with regard to the normal A..Z letters from the alphabet. For other characters, like the Greek alphabet (allowed since version 7.315), names are case sensitive. Use lowercases for keywords like container, attribute and unit. The conventions are often not binding, the GeoDMS will not generate syntax errors if the conventions are not complied with. See tree-item-name for the allowed syntax for tree item names. ",
    "url": "/docs/naming-conventions.html",
    
    "relUrl": "/docs/naming-conventions.html"
  },"2011": {
    "doc": "ne",
    "title": "syntax",
    "content": ". | ne(a, b) | a &lt;&gt; b | . ",
    "url": "/docs/ne.html#syntax",
    
    "relUrl": "/docs/ne.html#syntax"
  },"2012": {
    "doc": "ne",
    "title": "definition",
    "content": "ne(a, b) or a &lt;&gt; b results in a boolean data-item indicating if the values of data item a are not equal to the corresponding values of data item b. ",
    "url": "/docs/ne.html#definition",
    
    "relUrl": "/docs/ne.html#definition"
  },"2013": {
    "doc": "ne",
    "title": "description",
    "content": "The comparison between two missing values (null == null) results in the value False. ",
    "url": "/docs/ne.html#description",
    
    "relUrl": "/docs/ne.html#description"
  },"2014": {
    "doc": "ne",
    "title": "applies to",
    "content": "Data items with Numeric, Point. string or bool value-type . ",
    "url": "/docs/ne.html#applies-to",
    
    "relUrl": "/docs/ne.html#applies-to"
  },"2015": {
    "doc": "ne",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be compared to data items of any domain). | argument must have matching: . | value-type | metric | . | . ",
    "url": "/docs/ne.html#conditions",
    
    "relUrl": "/docs/ne.html#conditions"
  },"2016": {
    "doc": "ne",
    "title": "example",
    "content": "attribute&lt;bool&gt; AneB (CDomain) := ne(A, B); attribute&lt;bool&gt; AneB (CDomain) := A &lt;&gt; B; . ",
    "url": "/docs/ne.html#example",
    
    "relUrl": "/docs/ne.html#example"
  },"2017": {
    "doc": "ne",
    "title": "see also",
    "content": ". | ne_or_one_null | . ",
    "url": "/docs/ne.html#see-also",
    
    "relUrl": "/docs/ne.html#see-also"
  },"2018": {
    "doc": "ne",
    "title": "ne",
    "content": "ordering-functions not equals (==) . ",
    "url": "/docs/ne.html",
    
    "relUrl": "/docs/ne.html"
  },"2019": {
    "doc": "ne_or_one_null",
    "title": "syntax",
    "content": ". | ne_or_one_null(a, b) | . ",
    "url": "/docs/ne_or_one_null.html#syntax",
    
    "relUrl": "/docs/ne_or_one_null.html#syntax"
  },"2020": {
    "doc": "ne_or_one_null",
    "title": "definition",
    "content": "ne_or_one_null(a, b) results in a boolean data-item indicating if the values of data item a are not equal to the corresponding values of data item b or if the corresponding values of data items a or b are null. ",
    "url": "/docs/ne_or_one_null.html#definition",
    
    "relUrl": "/docs/ne_or_one_null.html#definition"
  },"2021": {
    "doc": "ne_or_one_null",
    "title": "description",
    "content": "The comparison between two missing values (null = null) results in the value False. ",
    "url": "/docs/ne_or_one_null.html#description",
    
    "relUrl": "/docs/ne_or_one_null.html#description"
  },"2022": {
    "doc": "ne_or_one_null",
    "title": "applies to",
    "content": "Data items with Numeric, Point, or string value-type . ",
    "url": "/docs/ne_or_one_null.html#applies-to",
    
    "relUrl": "/docs/ne_or_one_null.html#applies-to"
  },"2023": {
    "doc": "ne_or_one_null",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be compared to data items of any domain). | argument must have matching: . | value-type | metric | . | . ",
    "url": "/docs/ne_or_one_null.html#conditions",
    
    "relUrl": "/docs/ne_or_one_null.html#conditions"
  },"2024": {
    "doc": "ne_or_one_null",
    "title": "example",
    "content": "attribute&lt;bool&gt; neAB (CDomain) := ne_or_one_null(A, B); . ",
    "url": "/docs/ne_or_one_null.html#example",
    
    "relUrl": "/docs/ne_or_one_null.html#example"
  },"2025": {
    "doc": "ne_or_one_null",
    "title": "see also",
    "content": ". | ne | . ",
    "url": "/docs/ne_or_one_null.html#see-also",
    
    "relUrl": "/docs/ne_or_one_null.html#see-also"
  },"2026": {
    "doc": "ne_or_one_null",
    "title": "ne_or_one_null",
    "content": "ordering-functions not equals or one side has null values . ",
    "url": "/docs/ne_or_one_null.html",
    
    "relUrl": "/docs/ne_or_one_null.html"
  },"2027": {
    "doc": "neg",
    "title": "syntax",
    "content": ". | neg(a) | - a | . ",
    "url": "/docs/neg.html#syntax",
    
    "relUrl": "/docs/neg.html#syntax"
  },"2028": {
    "doc": "neg",
    "title": "definition",
    "content": "neg(a) or - a results in the negative values of data-item a. ",
    "url": "/docs/neg.html#definition",
    
    "relUrl": "/docs/neg.html#definition"
  },"2029": {
    "doc": "neg",
    "title": "applies to",
    "content": "Data item or unit with Numeric value-type . ",
    "url": "/docs/neg.html#applies-to",
    
    "relUrl": "/docs/neg.html#applies-to"
  },"2030": {
    "doc": "neg",
    "title": "example",
    "content": "1. attribute&lt;float32&gt; negA (ADomain) := neg(A); 2. attribute&lt;float32&gt; negA (ADomain) := - A; . | A | negA | . | 0 | 0 | . | 1 | -1 | . | -2 | 2 | . | 3.6 | -3.6 | . | 999 | -999 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/neg.html#example",
    
    "relUrl": "/docs/neg.html#example"
  },"2031": {
    "doc": "neg",
    "title": "see also",
    "content": ". | sub | . ",
    "url": "/docs/neg.html#see-also",
    
    "relUrl": "/docs/neg.html#see-also"
  },"2032": {
    "doc": "neg",
    "title": "neg",
    "content": "arithmetic-functions negative (-) . ",
    "url": "/docs/neg.html",
    
    "relUrl": "/docs/neg.html"
  },"2033": {
    "doc": "neighbourhood-potential",
    "title": "neighbourhood-potential",
    "content": "A Neighbourhood Potential is the combination of a raster with a kernel. r := Potential(d,K) implies that $r_{ij} = \\sum\\limits_{kl} d_{i-k, j-l} \\times K_{kl}$ . This is AKA convolution. See also the potential function and the potential-with-kernel. If we ignore the terms that are cut off at the borders, then $\\sum\\limits_{ij} R = \\sum\\limits_{ij} d \\times \\sum\\limits_{kl} K$. The values unit of R is defined as the product of the values units of d and K. Note the similarity of this operation with the multiplication of two polynomials in two unknowns, take: . $d(x,y) := \\sum\\limits_{ij} d_{ij} \\times x^i \\times y^j$ . $K(x,y) := \\sum\\limits_{kl} K_{kl} \\times x^k \\times y^l$ . $R(x,y) := \\sum\\limits_{ij} R_{ij} \\times x^i \\times y^j$ . It follows that . R(x,y) = d(x,y) * K(x,y) if we ignore the terms that are cut off at the borders. ",
    "url": "/docs/neighbourhood-potential.html",
    
    "relUrl": "/docs/neighbourhood-potential.html"
  },"2034": {
    "doc": "network-functions",
    "title": "network-functions",
    "content": "Network operators-and-functions are used to build and calculate with network topologies like connect or impedance-functions . | first_node - a point data item with the coordinates of the first point of an arc or polygon | last_node - a point data item with the coordinates of the last point of an arc or polygon | . | connect - creates the nearest point on an arc/polygon data item from a point data item or finds the nearest point in a point data item from another point data item | connect_eq - creates the nearest point on an arc/polygon data item from a point data item if the values of two data items match | connect_ne - creates the nearest point on an arc/polygon data item from a point data item if the values of two data items do not match | connect_neighbour - a relation to the nearest point in the same point data item, not being the point itself | connect_info - information for each point on the connection to an arc/polygon data item, as made by the connect function | connect_info_eq - information for each point on the connection to an arc/polygon data item, as made by the connect_eq function | connect_info_ne - information for each point on the connection to an arc/polygon data item, as made by the connect_ne function | connected_parts - the connected (sub)networks that exist in a set of links | capacitated_connect - finds the nearest point in a point data item from another point data item with a capacity constraint | . | impedance-general-(formerly-known-as-dijkstra) - a description of the dijkstra algorithm | impedance-key-entities - a description on nodes and links | impedance-functions - how to apply the impedance function | impedance-options - optional parameters of the impedance function | impedance-warning - warning if the impedance is applied with very large datasets | impedance-interaction-potential - additional information on the concept of interaction potential | impedance-additional -some additional information on impedance functions | impedance-future - our ideas on potential future impedance functionality | impedance-links - interesting links | impedance-example-origin-to-nearest-destination - an example of how to apply the impedance function to calculate the distances of a point set to the nearest point in another point set | . | impedance-obsolete-dijkstra | impedance-obsolete-dijkstra-od | impedance-obsolete-dijkstra-directed | . | trace_back - the amount of flow for each link in the network. | service_area - the relation to the nearest destination node for each node in the node set. | . ",
    "url": "/docs/network-functions.html",
    
    "relUrl": "/docs/network-functions.html"
  },"2035": {
    "doc": "networks-processing-example",
    "title": "download",
    "content": ". | configuration/data | . ",
    "url": "/docs/networks-processing-example.html#download",
    
    "relUrl": "/docs/networks-processing-example.html#download"
  },"2036": {
    "doc": "networks-processing-example",
    "title": "concepts",
    "content": ". | Network Analysis | . ",
    "url": "/docs/networks-processing-example.html#concepts",
    
    "relUrl": "/docs/networks-processing-example.html#concepts"
  },"2037": {
    "doc": "networks-processing-example",
    "title": "functions",
    "content": ". | connect | impedance-obsolete-dijkstra | arc2segm | connected_parts | . ",
    "url": "/docs/networks-processing-example.html#functions",
    
    "relUrl": "/docs/networks-processing-example.html#functions"
  },"2038": {
    "doc": "networks-processing-example",
    "title": "networks-processing-example",
    "content": "configuration-examples Network processing . This script presents an example on how to build a network topology from an arc set of roads and a set of origin and destinations points. ",
    "url": "/docs/networks-processing-example.html",
    
    "relUrl": "/docs/networks-processing-example.html"
  },"2039": {
    "doc": "normalize",
    "title": "syntax",
    "content": ". | normalize(a, mean, sd) | . ",
    "url": "/docs/normalize.html#syntax",
    
    "relUrl": "/docs/normalize.html#syntax"
  },"2040": {
    "doc": "normalize",
    "title": "definition",
    "content": "normalize(a, mean, sd) scales the attribute a to a normal distribution with as mean value the literal or parameter mean and as standard deviation the literal or parameter sd. The resulting attribute has a new values-unit and the same domain-unit as attribute a. ",
    "url": "/docs/normalize.html#definition",
    
    "relUrl": "/docs/normalize.html#definition"
  },"2041": {
    "doc": "normalize",
    "title": "description",
    "content": "The literals or parameters mean and sd have default values of zero and one. To avoid rounding off errors in the normalize calculations, use a float32 of float64 value-type for the a, mean and sd argument. ",
    "url": "/docs/normalize.html#description",
    
    "relUrl": "/docs/normalize.html#description"
  },"2042": {
    "doc": "normalize",
    "title": "conditions",
    "content": "The value type of attribute a and literals or parameters mean and sd must match. ",
    "url": "/docs/normalize.html#conditions",
    
    "relUrl": "/docs/normalize.html#conditions"
  },"2043": {
    "doc": "normalize",
    "title": "example",
    "content": "attribute&lt;float32&gt; normalize_NrInh (City) := normalize(City/NrInhabitants, 0f, 1f); . | City/NrInhabitants | normalize_nrInh | . | 550 | 1.13 | . | 525 | 0.96 | . | 300 | -0.48 | . | 500 | 0.80 | . | 200 | -1.13 | . | 175 | -1.29 | . | null | null | . domain City, nr of rows = 7 . ",
    "url": "/docs/normalize.html#example",
    
    "relUrl": "/docs/normalize.html#example"
  },"2044": {
    "doc": "normalize",
    "title": "normalize",
    "content": "rescale-functions normalize . ",
    "url": "/docs/normalize.html",
    
    "relUrl": "/docs/normalize.html"
  },"2045": {
    "doc": "not",
    "title": "syntax",
    "content": ". | not(condition) | !condition | . ",
    "url": "/docs/not.html#syntax",
    
    "relUrl": "/docs/not.html#syntax"
  },"2046": {
    "doc": "not",
    "title": "definition",
    "content": "not(condition) or !condition results in true values if condition is false and vice versa. ",
    "url": "/docs/not.html#definition",
    
    "relUrl": "/docs/not.html#definition"
  },"2047": {
    "doc": "not",
    "title": "applies to",
    "content": ". | condition data-item with bool value-type | . ",
    "url": "/docs/not.html#applies-to",
    
    "relUrl": "/docs/not.html#applies-to"
  },"2048": {
    "doc": "not",
    "title": "example",
    "content": "1. attribute&lt;bool&gt; notA (LDomain) := not(condA); 2. attribute&lt;bool&gt; notA (LDomain) := !condA; . | condA | notA | . | False | True | . | True | False | . DDomain, nr of rows = 2 . ",
    "url": "/docs/not.html#example",
    
    "relUrl": "/docs/not.html#example"
  },"2049": {
    "doc": "not",
    "title": "see also",
    "content": ". | and (&amp;&amp;) | | or ( |   | ) | . | . ",
    "url": "/docs/not.html#see-also",
    
    "relUrl": "/docs/not.html#see-also"
  },"2050": {
    "doc": "not",
    "title": "not",
    "content": "logical-functions not (!) . ",
    "url": "/docs/not.html",
    
    "relUrl": "/docs/not.html"
  },"2051": {
    "doc": "notepad---command-line-parameters-not-working",
    "title": "notepad---command-line-parameters-not-working",
    "content": "We encountered an issue with the command line parameters to jump to the correct configuration-file and or line in the file. These parameters do sometimes not work if both a 32 and a 64 bits version of Notepad ++ are installed. Solution: uninstall both versions and install only one new version. ",
    "url": "/docs/notepad---command-line-parameters-not-working.html",
    
    "relUrl": "/docs/notepad---command-line-parameters-not-working.html"
  },"2052": {
    "doc": "nrofrows",
    "title": "concept",
    "content": ". | NrofRows() is a function resulting in the number of elements of a domain-unit. | NrofRows is a property used to configure the number of elements of a domain unit | . The first part of this page describes the NrofRows() function, the last paragraph describes the NrofRows property . ",
    "url": "/docs/nrofrows.html#concept",
    
    "relUrl": "/docs/nrofrows.html#concept"
  },"2053": {
    "doc": "nrofrows",
    "title": "syntax",
    "content": ". | NrofRows(domainunit) | #domainunit | . ",
    "url": "/docs/nrofrows.html#syntax",
    
    "relUrl": "/docs/nrofrows.html#syntax"
  },"2054": {
    "doc": "nrofrows",
    "title": "definition",
    "content": "NrofRows(domainunit) or #domainunit results in a uint32 parameter with the number of entries/elements (cardinality) of the argument domainunit. ",
    "url": "/docs/nrofrows.html#definition",
    
    "relUrl": "/docs/nrofrows.html#definition"
  },"2055": {
    "doc": "nrofrows",
    "title": "applies to",
    "content": ". | domain unit domainunit with value-type of the group CanBeDomainUnit | . ",
    "url": "/docs/nrofrows.html#applies-to",
    
    "relUrl": "/docs/nrofrows.html#applies-to"
  },"2056": {
    "doc": "nrofrows",
    "title": "example",
    "content": "1. parameter&lt;uint32&gt; rowsRegions := NrofRows(Region); *result = 5* 2. parameter&lt;uint32&gt; rowsRegions := #RegionDomain; *result = 5*; . | RegionDomain | . | 0 | . | 1 | . | 2 | . | 3 | . | 4 | . domain Region, nr of rows = 5 . ",
    "url": "/docs/nrofrows.html#example",
    
    "relUrl": "/docs/nrofrows.html#example"
  },"2057": {
    "doc": "nrofrows",
    "title": "see also",
    "content": ". | range | . ",
    "url": "/docs/nrofrows.html#see-also",
    
    "relUrl": "/docs/nrofrows.html#see-also"
  },"2058": {
    "doc": "nrofrows",
    "title": "property",
    "content": "NrofRows is a property configured for a domain unit, to inform the GeoDMS about the number of elements/entries of the domain. This number is also called the cardinality. For domain units with data read from external storagemanager or with an expression, the number of elements is read/calculated. So for these domain units this NrOfRows property does not have to be configured. The range function can be used as alternative for the NrOfRows property and offers more functionality, for example to non zero based domain units). ",
    "url": "/docs/nrofrows.html#property",
    
    "relUrl": "/docs/nrofrows.html#property"
  },"2059": {
    "doc": "nrofrows",
    "title": "configuration",
    "content": "The NrofRows property, due to historical reasons, has a little different syntax (no double quotes) as a normal property, see the example . unit&lt;uint8&gt; WeekDays: NrofRows = 7 { attribute&lt;string&gt; name : ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']; } . ",
    "url": "/docs/nrofrows.html#configuration",
    
    "relUrl": "/docs/nrofrows.html#configuration"
  },"2060": {
    "doc": "nrofrows",
    "title": "nrofrows",
    "content": "unit-functions NrofRows . ",
    "url": "/docs/nrofrows.html",
    
    "relUrl": "/docs/nrofrows.html"
  },"2061": {
    "doc": "nth_element",
    "title": "description",
    "content": "This operator returns the value of the nth element of ranked attribute a, which can be done in partition. ",
    "url": "/docs/nth_element.html#description",
    
    "relUrl": "/docs/nth_element.html#description"
  },"2062": {
    "doc": "nth_element",
    "title": "syntax",
    "content": ". | nth_element(a, n) | nth_element(a, n, relation) | . ",
    "url": "/docs/nth_element.html#syntax",
    
    "relUrl": "/docs/nth_element.html#syntax"
  },"2063": {
    "doc": "nth_element",
    "title": "definition",
    "content": ". | nth_element(a, n) results in a parameter with the nth element of the ascending sorted attribute a. | nth_element(a, n, relation) results in an attribute with the nth elements of the ascending sorted attribute a, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | . ",
    "url": "/docs/nth_element.html#definition",
    
    "relUrl": "/docs/nth_element.html#definition"
  },"2064": {
    "doc": "nth_element",
    "title": "applies to",
    "content": ". | attribute a with numeric (uint2, uint4, uint8, uint32 or bool value-type) | attribute n with uint32 value type | relation with value-type of the group CanBeDomainUnit | . ",
    "url": "/docs/nth_element.html#applies-to",
    
    "relUrl": "/docs/nth_element.html#applies-to"
  },"2065": {
    "doc": "nth_element",
    "title": "conditions",
    "content": ". | The values unit of the resulting data-item should match with regard to value type and metric with the values unit of attribute a | The domain of argument a and relation must match, | The domain of argument n must be the same as the resulting domain or n must be a parameter. | . ",
    "url": "/docs/nth_element.html#conditions",
    
    "relUrl": "/docs/nth_element.html#conditions"
  },"2066": {
    "doc": "nth_element",
    "title": "since version",
    "content": "5.61 . ",
    "url": "/docs/nth_element.html#since-version",
    
    "relUrl": "/docs/nth_element.html#since-version"
  },"2067": {
    "doc": "nth_element",
    "title": "example",
    "content": "1. parameter&lt;uint32&gt; nth_elementNrInh := nth_element(City/NrInhabitants, 2); result = 300 2. attribute&lt;float32&gt; nth_elementNrInhRegion (Region) := nth_element( City/NrInhabitants , 0 , City/Region_rel ); . | City/NrInhabitants | City/Region_rel | . | 550 | 0 | . | 525 | 1 | . | 300 | 2 | . | 500 | 1 | . | 200 | 3 | . | 175 | null | . | null | 3 | . domain City, nr of rows = 7 . | nth_elementNrInhRegion | . | 550 | . | 500 | . | 300 | . | 200 | . | null | . domain Region, nr of rows = 5 . ",
    "url": "/docs/nth_element.html#example",
    
    "relUrl": "/docs/nth_element.html#example"
  },"2068": {
    "doc": "nth_element",
    "title": "see also",
    "content": ". | nth_element_weighted | rth_element | . ",
    "url": "/docs/nth_element.html#see-also",
    
    "relUrl": "/docs/nth_element.html#see-also"
  },"2069": {
    "doc": "nth_element",
    "title": "nth_element",
    "content": "aggregation-functions nth_element . ",
    "url": "/docs/nth_element.html",
    
    "relUrl": "/docs/nth_element.html"
  },"2070": {
    "doc": "nth_element_weighted",
    "title": "syntax",
    "content": ". | nth_element_weighted(rank, targetweight, weight) | nth_element_weighted(rank, targetweight, weight, relation) | . ",
    "url": "/docs/nth_element_weighted.html#syntax",
    
    "relUrl": "/docs/nth_element_weighted.html#syntax"
  },"2071": {
    "doc": "nth_element_weighted",
    "title": "definition",
    "content": ". | nth_element_weighted(rank, targetweight, weight) results in a parameter with a rank value. To calculate this rank value, first the sort order of the weight argument is determined by sorting the rank attribute ascending. The weight values are now cumulated according to this sort order until the value of the parameter with the targetweight is reached. The rank value for this element is the result of the nth_element_weighted function. | nth_element_weighted(rank, targetweight, weight, relation) results in an attribute with rank values, calculated as described above, grouped by relation. The domain-unit of the resulting attribute is the values unit of the relation. | . ",
    "url": "/docs/nth_element_weighted.html#definition",
    
    "relUrl": "/docs/nth_element_weighted.html#definition"
  },"2072": {
    "doc": "nth_element_weighted",
    "title": "applies to",
    "content": ". | attribute rank with Numeric value-type data-item | attribute targetweight with float32 or float64 value type | attribute weight with float32 or float64 value type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/nth_element_weighted.html#applies-to",
    
    "relUrl": "/docs/nth_element_weighted.html#applies-to"
  },"2073": {
    "doc": "nth_element_weighted",
    "title": "conditions",
    "content": ". | The values-unit of the argument targetweight and weight must match and only contain positive values. | The domain unit of the arguments rank, weight and relation must match. | In variant 2 the domain of the targetweight argument must match with the domain of the values-unit of the relation (literals or parameters can be used as data items of any domain). | . ",
    "url": "/docs/nth_element_weighted.html#conditions",
    
    "relUrl": "/docs/nth_element_weighted.html#conditions"
  },"2074": {
    "doc": "nth_element_weighted",
    "title": "since version",
    "content": "5.95 . ",
    "url": "/docs/nth_element_weighted.html#since-version",
    
    "relUrl": "/docs/nth_element_weighted.html#since-version"
  },"2075": {
    "doc": "nth_element_weighted",
    "title": "example",
    "content": "1. parameter&lt;uint32&gt; nth_element_weighted_NrInh := nth_element_weighted( City/Ranking ,1800f ,float32(City/nrInhabitants) ); result = 9 2. attribute&lt;float32&gt; nth_element_weighted_NrInhRegion (Region) := nth_element_weighted( City/Ranking ,400f ,float32(City/nrInhabitants) ,City/Region_rel ); . | City/Ranking | City/NrInhabitants | City/Region_rel | . | 1 | 550 | 0 | . | 3 | 525 | 1 | . | 6 | 300 | 2 | . | 9 | 500 | 1 | . | 10 | 200 | 3 | . | 21 | 175 | null | . | 50 | null | 3 | . domain City, nr of rows = 7 . | nth_element_weighted_NrInhRegion | . | 1 | . | 3 | . | null (6 in versions before 7.022) | . | null | . | null | . domain Region, nr of rows = 5 . ",
    "url": "/docs/nth_element_weighted.html#example",
    
    "relUrl": "/docs/nth_element_weighted.html#example"
  },"2076": {
    "doc": "nth_element_weighted",
    "title": "see also",
    "content": ". | nth_element | rth_element | . ",
    "url": "/docs/nth_element_weighted.html#see-also",
    
    "relUrl": "/docs/nth_element_weighted.html#see-also"
  },"2077": {
    "doc": "nth_element_weighted",
    "title": "nth_element_weighted",
    "content": "aggregation-functions nth_element_weighted . ",
    "url": "/docs/nth_element_weighted.html",
    
    "relUrl": "/docs/nth_element_weighted.html"
  },"2078": {
    "doc": "numeric-data-type",
    "title": "numeric-data-type",
    "content": "Numeric data can be categorised as: . | numerical: values describing quantities/measurements | categorical: values describing characteristics or groups | . This distinction is important in interpreting your values. It effects: . | which operators-and-functions can be applied logically on your data items. | the value-type to be configured the way data is classified (mainly for the map view). | . ",
    "url": "/docs/numeric-data-type.html",
    
    "relUrl": "/docs/numeric-data-type.html"
  },"2079": {
    "doc": "numerical",
    "title": "numerical",
    "content": "Numerical data has meaning as a measurement, such as a the surface of an area or the length of a road. It can also be a count, such as the number of inhabitants in a municipality or the number of cattle of a farmer. Two types of numerical data are distinguished: . continuous . Continuous data represent measurements their possible values cannot be counted and can only be described using intervals on the real number line. In the GeoDMS float32/float64 value-type are used for this type of data. It is advised to configure values-unit with metric describing this type of data, for interpreting your data and to prevent illogical calculations . discrete . Discrete data represent values that can be counted. The data is usually represented by positive integer values. In the GeoDMS we mainly use uint32/uint64 value types for this type of data (if the number of possible values is small, also uint8 and uint16 value types can be used). Usually the name of the item already describes the type of count but also for this type of data it is often useful to configure values units with metric describing this type of data to prevent illogical calculations. ",
    "url": "/docs/numerical.html",
    
    "relUrl": "/docs/numerical.html"
  },"2080": {
    "doc": "odbc",
    "title": "database: ODBC",
    "content": "The GeoDMS can read data from a configured ODBC source in two ways: . | A direct reference to a file, if the source is file based (e.g. msaccess, msexcel). | By using a configured DSN at the local machine. | . For file based databases the first option is preferable, as it makes it easier to exchange projects between different machines. It is not possible to write data directly to an ODBC source. An indirect way is to write data to a dbf or ascii-files, formats that can usually be imported in most databases. ",
    "url": "/docs/odbc.html#database-odbc",
    
    "relUrl": "/docs/odbc.html#database-odbc"
  },"2081": {
    "doc": "odbc",
    "title": "hierarchical structure",
    "content": "The hierarchical structure for the configuration of an ODBC source is presented in the next picture: . Three levels can be distinguished in the configuration of an ODBC source: . | Database level: the database is configured to a container, e.g. with the name SourceData. | Table, View/Query level: the Tables, View/Queries from which the data is read are configured as subitem of the database level. | Attribute level: the relevant attribute from the tables/queries are configured as subitems of the configured tables/queries. | . The sqlstring property is used to configure which attributes are selected from which Table, View/Query. Always configure the ORDER BY clause in the SqlString property as the sequence of elements matters in the GeoDMS and and ODBC source only guarantees the same sequence of elements if the ORDER BY clause is configured. The ODBC StorageManager is used in GeoDMS projects to read data from msaccess databases and msexcel files. Other ODBC sources can also be configured. With the ODBC text driver data can also be read from ASCII files, but we advise other StorageManagers for this format. ",
    "url": "/docs/odbc.html#hierarchical-structure",
    
    "relUrl": "/docs/odbc.html#hierarchical-structure"
  },"2082": {
    "doc": "odbc",
    "title": "Value Types",
    "content": "The value-type of the values-unit in the GeoDMS should match with regard to their type (not their size) with the data types of the attribute in the database. The following values types are allowed for the ODBC data types: . | (u)int8/16/32/64 for byte, integer and long Integer; | float32/64 for single/double; | bool for boolean; | string for string; | Other data types (date, currency etc.) can not (yet) be read from ODBC sources with the GeoDMS. | . ",
    "url": "/docs/odbc.html#value-types",
    
    "relUrl": "/docs/odbc.html#value-types"
  },"2083": {
    "doc": "odbc",
    "title": "ODBC and x64 versions",
    "content": "To use a GeoDMS 64 bits platform version for projects that read data from ODBC sources, 64 bits ODBC drivers are required on your local machine. Installing these drivers is not possible if a 32 bits Ms-Office version is installed. Recommendations for using the GeoDMS on x64 platforms with 32 bits MS-Office installed: . | Plan migration of the use of MsExcel and/or MsAccess files to other file formats, such as csv. Consider how you would edit the data. For projects that depend on reading data from MsExcel and/or MsAccess, this can be laborious, since all data in MsExcel and MsAccess need to be exported. | For small chunks of data read by ODBC, consider re-implementing the data directly within configuration files, such as the land use tables. | Use a (virtual) machine without Win 32 MS-Office (consider x64 version of MS-Office and/or Open/Libre Office). | For projects that run fine on a Win32 GeoDMS version and that depend on MsExcel and/or MsAccess: keep using the Win32 version. | . ",
    "url": "/docs/odbc.html#odbc-and-x64-versions",
    
    "relUrl": "/docs/odbc.html#odbc-and-x64-versions"
  },"2084": {
    "doc": "odbc",
    "title": "odbc",
    "content": " ",
    "url": "/docs/odbc.html",
    
    "relUrl": "/docs/odbc.html"
  },"2085": {
    "doc": "older-geodms-versions",
    "title": "Versions of 2019",
    "content": "2019-12-04: GeoDms Version 7.206 for x64 . This version fixes some issues related to CalcCache resource usage and various other improvements. Select GeoDmsGui-&gt;Tools-&gt;Options-&gt;Current Configuration-&gt;Minimum size for DataItem specific swapfiles in CalcCache and change the value from 1000000 to 1000000000 to improve calculation speed for the price of increased probability of memory overflow related issues. This is recommended for Windows 10 where memory overflow issues seem to be delt with well, and not recommended for Windows 2008 server. Fixes: . | issue 1238: domain units with a sub-item named geometry now are automatically Mapviewable. | issue 1301: solved memory error with some large data sets. | issue 1305: TableView index error fixed | issue 1307: No more Cannot obtain a Read Lock because there is 1 Write Lock on this data | issue 1314: Fixed appcrash | issue 1316: Minimum size for DataItem specific swapfiles is now stored in the registry per user, per machine. | issue 1318: Dijkstra now warns when givens Mass and MaxImpedance attributes contain NULL values. | . 2019-11-01: GeoDms Version 7.203 for x64 . Fixes: . | Startup issue on Windows Server 2008 | . 2019-10-21: GeoDms Version 7.202 for x64 . Fixes: . | issue 1280 Stack overflow exceptions now result in an error message; Stack size has increased for GeoDmsRun.exe | issue 1290 Various other issues related to the display of diagnostic messages. | issue 1205 12561294 Display of the Thousand separator is now settable per user and per machine in Tools-&gt;Options. Default is off. | . Known issue: On Windows Server 2008 R2, the GeoDMS software might block during dll-initialisation due to concurrency runtime limitations. This issue does not occur on Windows 10. For users with Windows Server 2008 R2, install and use GeoDMS 7.203. 2019-10-09: GeoDms Version 7.201 for x64 . Fixes: . | issue 1258 Dijkstra on empty nodeset/linkset | issue 1279 Vesta crashed on Municipal selection, caused by dijkstra on a nodeset without links. | issue 1289 Fixed GUI action Update subtree, introduced by 7.200, relative to 7.182. | . 2019-10-04: GeoDms Version 7.200 for x64 . Fixes various issues introduced since 7.182, such as issues 941, 1184. Reverted: . | Yellow items, i.e. not actually copying and retaining cache items as endogenous config items by keeping a temporary user perspective. | Separate production of signature objects reflecting cache results with formal domain and values units based on processing formal arguments and actual data result objects. | . Reversion of these changes implies that some cache entries are still identified by expressions containing treeitem names and that for some operators, some formal arguments cannot be substituted by their related calculation rules. 2019-04-11: GeoDms Version 7.198 (withdrawn, use 7.203 instead) . In this version, the GUI has been stream-lined. Many icons have been replaced, the toolbar now contains 32x32 pixel icons similar to the qGis-look, GUI operations to change a model configuration have been removed (such as the Insert operations) as the use case of building a model configuration interactively never flew since the syntax of the configuration files in much more clear to work with. Implements issues: . | 1202: A separate GeoDmsCaller.exe is now provided to send GUI control messages to an existing instance of GeoDmsGui.exe | 1205: Thousand separators have now been implemented in the representation of quantities in TableView, LispExpr string representation, statistics, etc., but not in Export to Clipboard as .csv. | 1206: WM(T)S support now also supports background layers that are made of .jpg files. | 1207: The SourceDescr tab can now be used to see which storages have been used for a certain result or container. | 1212: new qGis-style icons. | 1217: display of palette icon in tree-view for different color aspect attributes. | . Fixes issues: . | 1164: gebruik van Symbol fonts (zoals: ttf-Wingdings) voor PointLayer visualisatie. | 1182: issue with connections to arcs with zero length | 1191: | 1192: | 1198: | 1213: | 1214: | 1215: | 1220: | 1221: | . 2019-02-20: GeoDms Version 7.196 (withdrawn, use 7.203 instead) . This release optimizes the use of memory, especially of models that calculate attributes of the same entities sequentially, such as in a loop with time steps. For this, large freed memory blocks are retained and reissued when demanded to avoid the system to wait on synchronized OS memory recollection. | The .tmp part of the CalcCache is no longer in use, instead all non-persistent intermediary results are stored in the (system page file backed) heap. EmptyWorkingSet is called when in stress. | Full Names are no longer stored per item and only composed when requested. This greatly reduces the stress on the internal Tokenizer. | Internal representation of Undefined SharedStr and StringRef made more consistent. | . Fixed issues related to these changes: . | issue http://www.mantis.objectvision.nl/view.php?id=1192 1192: lock already taken | issue http://www.mantis.objectvision.nl/view.php?id=1192 1191: combine(range(u, xb, xe), range(v, yb, ye)) now works | issue http://www.mantis.objectvision.nl/view.php?id=1024 1024: Startup issue on Windows 7. | issue http://www.mantis.objectvision.nl/view.php?id=1183 1183: memory allocation errors | issue http://www.mantis.objectvision.nl/view.php?id=1184 1184: domain unification error when using ParseXML | issue http://www.mantis.objectvision.nl/view.php?id=1185 1185: Layer Control names and unit specs are represented again. | . Other Fixed issue: . | issue http://www.mantis.objectvision.nl/view.php?id=11177 1177: numerical instability in the weight aggregation of nth_element_weighted could give undefined results. This could affect Fusion, 2UP, RSL and other projects using nth_element_weighted. | . 2019-01-06: GeoDms Version 7.185 (withdrawn, use 7.200 instead) . GeoDMS 7.185 mainly contains fixes of reported issues and has a mechanism (in debug mode) to detect potential dead-locks by checking a hierarchy of the critical sections. This has resulted in the removal of many potential dead-locks. New functionality: . | issue http://www.mantis.objectvision.nl/view.php?id=1092 1092: code analysis for clean-up support: now a source can be set, more used items are included (such as when used indirectly in properties), and representation colors have been improved. | . Possible breaking change: . | issue http://www.mantis.objectvision.nl/view.php?id=1141 1141: Now two domains are considered different if they refer to different items, even if their calculation rule is the same. For example: unit landuse_class: nrofrow=5; unit building_type: nrofrows=5; are now domain-incompatible. Thus, the entity compatibility check is now more strict. Tested projects (and adapted when necessary): Fusion, Vesta, RSL. | . Fixes: . | issue http://www.mantis.objectvision.nl/view.php?id=1094 1094: color palettes are now hidden for Layers with more than 32 classes and for Wms Layers. | issue http://www.mantis.objectvision.nl/view.php?id=1152 1152: Viewing info in a feature layer with an indirect geometry now works. | issue http://www.mantis.objectvision.nl/view.php?id=1157 1157: After right-clicking a color in a layer-control, the GUI doesn’t crash anymore. | issue http://www.mantis.objectvision.nl/view.php?id=1159 1159: Diagnostics: Detail pages now also provide info when an script-error was found when processing its contents. | issue http://www.mantis.objectvision.nl/view.php?id=1166 1166: CalcCache: no more illegal abstract error when opening an persistent sequence array from a previous session. | . Progress on issue 823: gdal2.vect and gdal2.grid have now been implemented. ",
    "url": "/docs/older-geodms-versions.html#versions-of-2019",
    
    "relUrl": "/docs/older-geodms-versions.html#versions-of-2019"
  },"2086": {
    "doc": "older-geodms-versions",
    "title": "Versions of 2018",
    "content": "2018-10-15: GeoDms Version 7.182 for x64 . Implemented: . | issue http://www.mantis.objectvision.nl/view.php?id=823 823: now all GDAL 1.91 data is installed inside the GeoDMS program folder. | issue http://www.mantis.objectvision.nl/view.php?id=1092 1092: background of required items are colored in the TreeView when a target is set from the Popup menu-&gt;Code analysis… | . Fixed: . | issue http://www.mantis.objectvision.nl/view.php?id=1085 1085: Group by &gt; sort on attribute now works | issue http://www.mantis.objectvision.nl/view.php?id=1086 1086: nth_element_weighted now can process zero weights | . | issue http://www.mantis.objectvision.nl/view.php?id=1088 1088: Crash or not, depending on Order of calculation. | issue http://www.mantis.objectvision.nl/view.php?id=1090 1090: Enter when the Current Item Bar has focus, only activates that item; F5 has now been disabled. | issue http://www.mantis.objectvision.nl/view.php?id=1111 1111: split_polygon(geometry parameter) now works. | . 2018-08-29: GeoDms Version 7.180 for x64 and Win32 . This version has been compiled with: . | Visual Studio 2017, version 14.1 (which replaced Visual Studio 2015, v 12.0). | Boost 1.67 (was: 1.66) | GDAL 2.3.1 (additional to 1.9.1) | . Many compiler warnings have been dealt with and syntax improvement opportunities have been implemented. Fixed issues: . | 1014 (VS 2017) | 1074: Centroid_or_mid took too long. | 208: popup menu doesn’t activate all items at first request. | . Implemented: . | issue 1089: more informative about box. | . Progress on issues: . | 823: GDAL 2.3.1 can now be used for reading; use gdal2.vect or gdal2.grid as StorageType. | 1092: Added ‘Instantiated From’ reference in the General Detail page, and calculation rules (expression properties) now have | . 2018-07-18: GeoDms Version 7.177 for x64 . Implements: . | issue 811: unconnected pairs in an OD matrix now have Undefined Impedance. Breaking Change: Check the usage of dense OD impedance matrices calculated with dijkstra_m function as unconnected pairs now have impedance and no longer maxDist. | issue 1025: Get and set statusflags from command line | . Fixes: . | issue 988: color for NoData always transparent in FeatureLayer and GridLayer. | issue 1038: no error msg “No such host is known” when drawing background layer without internet connection | . Supplemental changes related to . | issue 644: Visualisation styles shown in legend | . 2018-07-04: GeoDms Version 7.176 for x64 and Win32 . Breaking change: . | issue 1068. | . For documenting projects with many inheritance relations, such as Vesta, the status quo was no longer sustainable. Now the combination of inheritance and overriding is stopped. An overriding item without calculation rule no longer inherits the sub-items of the overridden item. Check if your config will be affected before updating to this version. Furthermore: . This version also contains a few fixes and improvements of recent functionality, more specifically: . | issues related to the new Table Group By Tool (790): 1060, 1061, 1062. | issue related to the current item bar: 1065: Ctrl-C and Ctrl-V now work. | issue 1063: connect operator. | issue 1067: mean operator. | issue 909: shp/dbf export now has the same set of attributes as a .csv export. | issue 985: zoom level of the overview panel in the MapView. | issue 1001 and related 644: different feature layers without thematic attribute now get different colors. | . 2018-06-25: GeoDms Version 7.175 (withdrawn) . This version is published to present new functionality in the TableView for the purpose of testing and evaluation. It doesn’t contain fixed issues. Implements: . | Issue 790: Group by Tool in the TableView for grouping rows on the values of one or more columns. | . As this version introduced new issues that have been fixed in GeoDMS 7.176, the GeoDMS 7.175 is withdrawn from this publication page. 2018-06-11: GeoDms Version 7.174 for x64 . Fixes: . | Desktop issue 1053, | PP2 1040. | Diagnostic messages. | . 2018-06-05: GeoDms Version 7.173 for x64 . Fixes many minor issues related to recent additions: . | Info Tool issue 494. | issue 1043: TableView of fixed domain | Current Item Bar issues 1045, 1046, 1047. | WmsLayer issues 1048, 1049. | . 2018-05-23: GeoDms Version 7.172 for x64 . Implements: . | issue 820 An editable item path can be used to jump to other items (use F5 or mouse-click to search). | issue 809 now config files with UTF8 Byte Order Mark can be procesed. | . Fixes: . | issue 1007 const_file_view Error when changing reference of unit LatLong | issue 1027 Error Dialog appeared for non-related items when requesting data. | issue 1030 LUS Demo: issue with PP2 enabled | issue 1035 ViewDetails unknonw exception. | . 2018-04-30: GeoDms Version 7.170 for x64 . Fixes: . | issue 1032 with writing dijkstra_m results. | . 2018-04-24: GeoDms Version 7.169 for x64, withdrawn because of issue 1032. Performance improvement: . | 1021: Dijkstra_functions now run different origin zones in parallel when multiple CPU’s are present. With 8 CPU’s this maked the production of an OD table approximately 6 times faster. | . 2018-04-19: GeoDms Version 7.168 for x64 . New feature: . | Dijkstra_m can now produce OrgZone_MaxImp as startpoint attribute, see issue 1021 for an example. | . Fixed issues: . | 1022: When copying to Clipboard from the TableView, now wide characters are used that can better represent UTF8 characters than the earlier usage of ASCII when writing to the Clipboard, | 1024: GeoDMS starts again on Windows 7. | 592: event log info of dijkstra operations is immediately visible again (with MT2 on). | . 2018-04-13: GeoDms Version 7.167 for x64 . Warning: This version requires Windows 10, see issue 1024. Please replace by 7.168 if you install on an older version of Windows. Fixes issue 1018: background drawing wasn’t clipped, causing frames and some text controls to disappear, introduced by GeoDMS Version 7.166; please update any 7.166 to 7.168. And fixes diagnostic (=error message related) issues: . | 999: | 1012: | . 2018-03-28: GeoDms Version 7.166 (withdrawn) . Fixes issues: . | WMS related: 996, 997, 998, 1003, 1010, 1011, | 588: split_polygon | 994: PolyData sneller in TableView | 995: TableCoposer operatoren AsString en AsList werken nu ook voor tabellen van meer dan 4 GB. | 999: some extra debug info with ViewDetails might help to diagnose this issue. | . 2018-03-07: GeoDms Version 7.165 for x64 . Fixed issues: . | 990: faster lookup and corrected permutation_rnd in case of PP1 | 899: redraw layers when activated. | . 2018-03-05: GeoDms Version 7.163 for x64 . Implemented issues: . | 236, 312: background layers are only read when the current zoom-factor don’t rule them out. | 918: wms as background layer. | . Fixed issues: . | 983, | 984, | 986, | 987 | . upgrade from boost 1.60.0 to 1.66.0 . 2018-02-13: GeoDms Version 7.162 for x64 . Fixed issues: . | 427, | 793: now values are displayed in ExplainValue of aggregation in the Detail Pages, | 961, | 968, | 969, | 971 | . Implemented issues: . | 199, | 743, | 931 Settings are now stored in user and machine specific profiles, even when the LAN provides users with roaming profiles. | . Added: . | operator do(exec_operation, resulting_filename): see issue 971 | operators min_index(values, partitioning(optional)) and max_index(values, partitioning(optional)): see issue 743. | . ",
    "url": "/docs/older-geodms-versions.html#versions-of-2018",
    
    "relUrl": "/docs/older-geodms-versions.html#versions-of-2018"
  },"2087": {
    "doc": "older-geodms-versions",
    "title": "Versions of 2017",
    "content": "2017-12-21: GeoDms Version 7.159 for x64 . Added: . | operator mapping_count(srcDomain, dstDomain, CountType) | . 2017-12-13: GeoDms Version 7.157 for x64 . Fixes: . | issue 953 (which was fixed incorrectly in GeoDMS 7.156) | . 2017-11-30: GeoDms Version 7.155 for x64 . Poly2grid has been made even faster by using for each row a vector based linked list of edges that start in that row, which prevents sorting the edges. Now poly2grid is O(n+p+r*log(k)) where n = the number of edges, p = the number of pixels to be painted, r - the number of rows, and k = the maximum number of edges crossing one row. Fixes: . | issue 915 | issue 928 | issue 934 | . 2017-11-23: GeoDms Version 7.152 for x64 . Fixes: . | issue 926 (poly2grid artifacts) | issue 5 | issue 829 | issue 885 | issue 911 | issue 918 | issue 919 | issue 928 | . Poly2grid has been implemented much faster by sorting and processing edges from low to high rows. 2017-10-13: GeoDms Version 7.148 for x64 . Fixes: . | poly2grid drawing on too many pixes in case of a horizontal border (issues 908 and 916). | . New: . | Properties DomainUnit_FullName en ValuesUnit_FullName (issue 829). | Button for TableView export (issue 561) | . 2017-08-28: GeoDms Version 7.145 for x64 . Fixes: . | issues 885, 896, 898, 904, 905, 906 | . 2017-06-13: GeoDms Version 7.141 for x64 . | GeoDMS 7.140 introduced an issue for older versions of Windows, such as Server 2008 R2 Datacenter: critical section locking during initialization when loading DLL’s caused a deadlock. This is now avoided by registering operators without locking the operator registry during initialization. | . The 7.140 version had been developed with a focus on bug fixing and getting things more stable. The regression tests have been expanded to include GUI actions in order to keep more functionality working as it worked in previous versions. Functional and/or Breaking changes: . | Default code editor is now the default installation path for Notepad ++, see configuration of your preferred code editor | . Now Implemented: . | 000821 Export Primary Data to.. now uses the full path for a default filename. | 000859 Allow longer item names, read from GDAL sources, such as fgdb. | . Fixes: . | 000894 reading boolean data with GDAL. | 000890 GDAL issue with reading 16 bits data as 32 bits values | 000887 Edit Palette Dialog issues | 000884 Multi Select issues in point- and polygon layers. | 000874 &amp; 000893 | 000872 | 000871 Lock already taken issue. | 000859 | 000539 order of items in Explain value is now determined by the order of appearance in the calculation rule. | . Regression test now includes the following GUI actions: Show MapView, Edit Palette and Reclassify. 2017-02-21: GeoDms Version 7.139 for x64 . Fixes: . | 000539 | 000855 | 000859 | 000860 | 000865 | . 2017-02-08: GeoDms Version 7.138 for x64 . Fixes: . | 000852 | 000853 | 000854 | 000807 | . 2017-01-09: GeoDms Version 7.137 for x64 . Main improvement of this release is that all read data action and most calculations are now done in worker threads, which keeps the main thread responsive for GUI actions. Specific handling enables the user to change data or close views, which will invalidate running tasks. Adding a thematic attribute without pre-configured classification to a MapView now no longer waits for the completion of the data processing for the Jenks Fisher classifications. New functionality: . | 000842: Implemented a new property with the name ‘FullSource’ | . Fixes: . | 000626: AddLayer cmd no longer freezes on making data available for generating a classification scheme. | 000847: read/write lock error. | 000788: case parameter references | 000837: Reading tiff with GDAL.grid and the original TIFF reader now both fully support reading area’s with different scales and extents (sub-sections as well as enclosing extents, for which the border area is set as undefined or false). GDAL.grid now also supports reading attributes with values of type Bool, UInt2, or UInt4. | . | 0000802: [Export] Export data to .csv / Table Copy to Clipboard took extremely long - resolved. | 0000813: [TableView] DataReadLock issue in EditPalette - resolved. | 0000539: [Explain Value] Faster retrieval of aggregant values when explaining an aggregation. | 0000738: [Calculations] connect and connect_info using additional attribute information - resolved. | 0000385: [Views] Activate existing layers/columns in MapView and TableView when related items are activated again - implemented. | 0000005: [Export] Export Scalebar with correct symbol and text size. - resolved. | 0000801: [TableView] Copy to Clipboard (man on the beach) fails with selected data - resolved. | 0000791: [Calculations] Memory Allocation Failed in template instantiation - resolved. | 0000609: [CalcCache] connect_neighbour results in invalid outcome for tiled data - resolved. | 0000788: [Calculations] reference for a case parameter differs between first and following instantiations - resolved. | 0000783: [Calculations] substr results in GeoDmsGui has stopped working &gt; crash - resolved. | 0000580: [Desktop] DetailPage Value Info geeft alleen relevante informatie bij activering uit tabel/kaart of back/forward knop - partially fixed. | . ",
    "url": "/docs/older-geodms-versions.html#versions-of-2017",
    
    "relUrl": "/docs/older-geodms-versions.html#versions-of-2017"
  },"2088": {
    "doc": "older-geodms-versions",
    "title": "Versions of 2016",
    "content": "2016-04-11: GeoDms Version 7.130 for x64 and Win32 . Addresses issues: . | Fixes a bug in ordering items (sort, rlookup, rjoin, etc.) that was introduced in 7.126 in the fix of issue 739. | 753 | 754 | 755 | . There are currently known issues with PP2, so I recommend to set . | Tools-&gt;Options-&gt;General settings-&gt;Parallel Processing 1 = ON (parallel tile processing) | Tools-&gt;Options-&gt;General settings-&gt;Parallel Processing 2 = OFF (multiple calculation steps simultaneously) | . ",
    "url": "/docs/older-geodms-versions.html#versions-of-2016",
    
    "relUrl": "/docs/older-geodms-versions.html#versions-of-2016"
  },"2089": {
    "doc": "older-geodms-versions",
    "title": "older-geodms-versions",
    "content": " ",
    "url": "/docs/older-geodms-versions.html",
    
    "relUrl": "/docs/older-geodms-versions.html"
  },"2090": {
    "doc": "older-versions",
    "title": "Versions 2022",
    "content": "2022-10-10: GeoDms Version 8.041 . GeoDms x64 installation, click here . New functionality: . | large palettes with random colours for the unique values of categorical thematic attributes. | thematic attributes can now be represented by multiple aspects, work in progress. | . Fixes: . | issue 283 | issue 291 | issue 309 | issue 310 | . 2022-09-29: GeoDms Version 8.039 . GeoDms x64 installation, click here . Fixes: . | Issue on Azure with 8.038 | TableView-&gt;Sort on column issue due to inconsistent state when setting an index was interrupted by a user message. | minor issues and compiler warnings | . 2022-09-26: GeoDms Version 8.038 . GeoDms x64 installation, click here . Fixes: . | issue 303: dyna_points | issue 305: fixed crash | ReadElemFlags now work | . Known issue: . | on Azure (with OS Windows Server 2019 Datacenter version 1809) starting this version may sometimes result in: “System Error: … Rtc.dll was not found.”; GeoDms 8.039 seems not to cause this behaviour. | . 2022-09-22: GeoDms Version 8.037 . GeoDms x64 installation, click here . Fixes: . | issue 297: Diagnostic message now have a better source location indication | issue 304 | point_in_ranked_polygon now works | . Implements: . | issue 291: various layout issues in Layer Control symbols | . Trello . | 61: hex numbers can now be used in dms syntax, preceded by the percent-sign, for example %FFFFFF | 65: null values and failure reasons have grey text in the TableView | . Detail pages: . | clean-up generic and Explore pages | . 2022-09-14: GeoDms Version 8.035 . GeoDms x64 installation, click here . New functionality . | issue 291 PenColor arc-layer, WIP. | Thread throttling | . Fixes: . | TIFF read issue | . 2022-09-01: GeoDms Version 8.033 . GeoDms x64 installation, click here . New functions: . | ClassifyNonzeroJenksFisher as alternative for ClassifyJenksFisher classification | bg_buffer_point, see bg_buffer | dyna_point_with_ends, dyna_segment, dyna_segment_with_ends, see dyna_point | point_in_all_polygons: (D1-&gt;point, D2-&gt;polygon) -&gt; unit { first_rel: . -\\&gt; D1; second_rel: . -\\&gt; D2 } | point_in_ranked_polygon, with known issue https://geodms.nl/mantis/view.php?id=302 302, which is fixed in 8.036 | . Fixes: . | TIFF read error, ntroduced in 7.412 and hotfixed in 7.414. | combine(…, bool), required for vesta50 | issue 294 | number of threads in the recursive Unique function is now limited to the number of vCPUs. | bg_buffer_linestring and bg_buffer_multi_polygon: various quality improvements. | an issue with tiling SPoint data of which the last tile would pass the 2^15 boundary if not cut-off by the domain’s range, such as with the rtc_10m raster. | . GUI . | raster and feature attributes with negative values are now displayed with a more adapted classification and colour scheme, handling negative, zero, and positive as | Ctrl-Alt-D as hot-key for “Default View”. | . Known issues: . | explain value in detail page lacks info on the source of a value resulting from union_data. | S3 (pipelined tile processing) is off by default when installing the GeoDMS on a system where geoDMS was already used. I advise to enable S3 from the GeoDmsGui.exe -&gt; Tools -&gt; Options -&gt; Advanced -&gt; check ‘3: Pipelined Tile Operations’. | . 2022-08-29: GeoDms Version 8.031 . (withdrawn, download 8.033) . Known issue, solved in 8.033: . | tiff driver incorrectly determines if a tiff is tiled or striped, resulting in not being able to read striped tiffs. Fixed in 8.033. | . 2022-08-19: GeoDms Version 8.027 . (withdrawn, download 8.033) . ",
    "url": "/docs/older-versions.html#versions-2022",
    
    "relUrl": "/docs/older-versions.html#versions-2022"
  },"2091": {
    "doc": "older-versions",
    "title": "2022: 7.400 Series",
    "content": "We concluded 2021 with the 7.400, which is compiled with Visual Studio 2022 to comply to the most recently implemented C++20 language rules. We started building and using GDAL 3.04 by vcpkg, which includes recent drivers for GeoPackage, netCDF, but also the openssl that we started using in 7.326. vcpkg allows us to have a completely working debug and release build of GDAL 3, which makes debugging easier. See also: GDAL update . 2022-09-01: GeoDms Version 7.414 . GeoDms x64 installation, click here . Fixes: . | TIFF read error, possibly introduced since 7.411 or 7.412. | hang on MapView:GetCaption, such as in RSL3 without label work-around. | issues with ArgMax and maxelem; Trello #92. | . 2022-05-31: GeoDms Version 7.412 . (withdrawn because of a tiff driver issue that has been resolved in 7.414) . Fixed: . | issues with writing GeoPackage. | Notepad++ syntax file GeoDMS_npp_def.xml is now included in the setup. Note: last update of the keyword list is of 03/10/2019. | TIFF storage manager now uses LIBTIFF 4.3.0 (latest) of vcpkg with BIGTIFF support (was 4.2 ) | AsItemName | . Known issues: . | tiff driver incorrectly determines if a tiff is tiled or striped, resulting in not being able to read striped tiffs. Fixed in 8.033. | . 2022-04-22: GeoDms Version 7.411 . GeoDms x64 installation, click here . New in 7.411: . | operator AsItemName | operator ReadElems now has formatting flags to allow strings to contain spaces, tabs and/or comma’s. | . Fixed: . | (partially) issues with polygon_connectivity, bg_buffer; see also: mantis issue 265 sub 1. | Default ColorPalette is now redesigned and determined per MapView to produce a more consistent coloring of binary rasters and non-thematic feature layers. | . GDAL 3: . | fixed reading non-string attributes from a .CSV file. | fixed writing to geojson and gml | added reading Bool, UInt2, and UInt4 rasters | added reading multiple band raster-data into a composite UInt32 raster. | . 2022-03-11: GeoDms Version 7.410 . GeoDms x64 installation, click here . New operators in 7.410: . | outer_polygon(polygon attr(poly)); resulting in polygons without lakes | outer_multi_polygon(multi_polygon attr(poly)); resulting in multi_polygons without lakes | . New operators in 7.409: . | bg_simplify_linestring(linestring attr(arc), maxTolerance: Float64) | bg_simplify_multi_polygon(polygon attr(poly), maxTolerance: Float64) | bg_buffer_linestring(linestring attr(arc), distance: Float64, nrCornersInCircle: UInt8); | bg_buffer_multi_polygon(lpolygon attr(arc), distance: Float64, nrCornersInCircle: UInt8); | bg_buffer_multi_point(multi_point attr(sequence), distance: Float64, nrCornersInCircle: UInt8); | . GeoDmsRun . | additional command line option to redirect text output, such as statistics results, to a specific file | . Breaking changes: . | removed operator: bg_simplify(), introduced in 7.408 | some layer attributes, when read from a GDAL3 vector source are read as a smaller GeoDms integer type than in 7.408 | . Fixed: . | a failure to write multiple attributes to a layer with GDAL does not cause the GeoDms to not close. | . 2022-03-08: GeoDms Version 7.409 . 7.409 has been revoked because of the issue with writing multiple layers to a GeoPackage that seems to result in only the last layer containing data. This did not occur in 7.408 and is fixed in 7.410. 2022-02-18: GeoDms Version 7.408 . GeoDms x64 installation, click here . New in 7.408: . | operator bg_simplify(line or polygon attribute, maxTolerange: Float64); See Trello #50 | statistics opvragen via GeoDmsRun en nu met Frequency count voor value types tot en bet 16 bits, Trello #19 | AsHex werkt nu ook voor UInt4, UInt8, UInt16, UInt64 | . GDAL: . | see GDAL update, especially improved support for writing to: . | csv | Geopackage | . | . Fixed: . | performance issue met connect_info, Trello #45 | Start en eindtijden rekenproces in .xml met export meta info, Trello #18 | issue: 259 | issue: 233 | issue: 110 | issue 152 | issue: 59 | Trello #46 | issue: 244 | issue: 41 | . 2022-01-26: GeoDms Version 7.407 . GeoDms x64 installation, click here . Fixes an issue with GDAL that might delete existing source data due to an unintended attribute write attempt. GDAL: . | storage types gdalwrite.vect and gdalwrite.grid that can be used when data is intended to be exported whereas storage managers of type gdal.grid and gdal.vect now only allow for reading data from an external source. | reading and writing subbyte elements: Bool, UInt2 and UInt4 are now supported. | . 2022-01-21: GeoDms Version 7.406 . GeoDms x64 installation: revoked because of the gdal source data at risc issue, update to 7.407 or later. Implements . | issue 218: now SessionStartTime and CurrentTime are written into outputmetainfo.xml files | issue 246: generate item statistics from GeoDmsRun.exe; known issue https://geodms.nl/mantis/view.php?id=254 will be fixed in 7.407 | . Fixes . | issue 248: “Check Failed Error: item-&gt;DataInMem()” | issue 251: | sporaric recursive cs-lock on operationcontext clean-up which caused program termination | InterestCount leak in exceptional AbstrCalculator construction | . Diagnostics: . | report “This seems to be a GeoDms internal error; …” where appropriate | . gdal . | usage of specified GDAL_Driver, GDAL_Options and GDAL_LayerCreateOptions | vcpkg upgrade to update to GDAL 3.4.0, released 2021/11/04 | . gdal.grid . | support of reading sub-datasets as multiple rasters | reading multiple datasets from a netCDF file | . gdal.vect . | read/write support for int64 data | write support for .csv data and .dbf data; known issue: numeric output is quoted in a resulting .csv file. | . 2022-01-10: GeoDms Version 7.404 . GeoDms x64 installation: revoked because of the gdal source data at risc issue, update to 7.407 or later. Furthermore, now also arc and polygon feature data can be written with GDAL 3. new GDAL 3 functions, see also GDAL update: . | writing point features and attributes to various GDAL vector targets | writing raster data to TIFF via GDAL | reading GeoPackage data, fixed issue https://geodms.nl/mantis/view.php?id=152 | reading OpenStreetMap’s pbf data, fixed issue https://geodms.nl/mantis/view.php?id=244 | . | using the DialogData value as values unit for all loaded geometries of tables found in a storage that contains multiple tables/layers. | . ",
    "url": "/docs/older-versions.html#2022-7400-series",
    
    "relUrl": "/docs/older-versions.html#2022-7400-series"
  },"2092": {
    "doc": "older-versions",
    "title": "2021: 7.300 Series",
    "content": "In 2021, we started with the 7.300 series to indicate that the GeoDMS code is now being compiled with Visual Studio 2019 (the 7.2xx series were built with VS2017) to comply to the most recently implemented C++20 language rules. 2021-07-12: GeoDms Version 7.326 . GeoDms x64 installation, click here . Same as 7.325 except for: . | fix of issue 240: WMTS background layers are now (only) read from https, using openssl. This change was necessary because the Dutch nationaal georegister stopped serving tiles through http. | fix of issue 242: handling of a transparency channel (alpha) in WMTS tiles. | . 2021-03-12: GeoDms Version 7.325 . GeoDms x64 installation, click here . Same as 7.324 except for: . | a fix of an issue with the potential function results, see 241 and 239 | a fix of an access violation in case of failure to read data for a wms background layer by http. A mechanism for utilizing htts with openTLS is expected for GeoDMS 7.326. see issue 240 | . 2021-24-11: GeoDms Version 7.324 . GeoDms x64 is withdrawn because of issues with the potential function, see 241 and 239 . Fixes: . | better implementation of deterministic parallel convolution, aka the Potential with kernel function. See issues 232 and 239 | sporadious deadlocks during a long chain of batch operations, specifically seen in LuisaBees sensitivity scripts, see issue 132 | management ownership of future calculation results (aka interest count holders) which caused order of operation issues such as 141 | code simplifications: . | ItemLocks no longer use cs_lock_map but directly own (calculated) data, provided by realised future calculation results. | concurrency::unbounded_buffer replaced by std::counted_semaphore | made critical sections faster and simpler (and less reentrant!) by separating resource disconnection (still inside a critical section) from resource deallocation (moved outside such section) by better usage of move or swap operations. | . | | . 2021-11-11: GeoDms Version 7.321 . GeoDms x64 installation, click here . | More regular default tile sizes, update on the changes in 7.317. This fixes issue 238 where overlapping tiling was created since 7.317. | GeoDmsRun.exe now sends to STDOUT ( std::cout ) for display in console all output that is also sent to an optional logfile and that GeoDmsGui.exe also displays in the EventLog; one can redirect STDOUT to a logfile as alternative to the /L command line option; Fatal errors are still sent to STDERR (std::cerr ). | . 2021-11-08: GeoDms Version 7.320 . GeoDms x64 installation, click here . | transfer of future result ownership from a operation to its awaiters is now protected by transfering ArgRefs as optional reference count holders with RAII. | with /S1, thePotential operator now calculates tiles Multi Threaded again (this was stalled since 7.315) but now with a deterministic result | furthermore identical to 7.319. | . 2021-10-28: GeoDms Version 7.319 . GeoDms x64 installation, click here . | reading a limited extent from a TIF data source caused all GridData to be read, causing large memory resource usage for projects such as LUISA and 2UP where country data is read from larger TIF data. | furthermore identical to 7.318. | . 2021-10-27: GeoDms Version 7.318 . GeoDms x64 installation, click here . | sporadic halting, issues 132 and 191, is presumably fixed. The sporadic halting issue has been seen in Luisa, Land Use Scanner, LUS demo, and 2UP. Please report to us if seen still with this or later versions. | furthermore identical to 7.317. | . 2021-10-26: GeoDms Version 7.317 . GeoDms x64 installation, click here . | code signed by “Object Vision B.V.” | Changed tiling/segmenting for large entities; tile sizes are now more equal for different sized entities | With MT1 on, transformations on separable segments larger than 4096 elements are processed parallel in sub-segments of 4096 items each. | Point in polygon is now independent of the order and tiling of the array of points. Results were dependent on that order for points that were in multiple (overlapping) polygons. | the Unique and Rlookup operations now also work with numeric and point sequences as values. | now the StatusFlags can also be set as command line flag when starting the GeoDMS GUI | . Breaking changes: . | Results of Point in polygon when polygons overlap | stored .fss results for tiled entities without decoupled entity definition and resulting segmentation need to be reproduced. | . 2021-10-12: GeoDms Version 7.315 . (withdrawn) . 2021-10-08: GeoDms Version 7.314 . GeoDms x64 installation, click here . | code signed by “Open Source Developer, Martinus Hilferink” | . New calculation rule syntax: . | UTF-8 character support in tree item names | . | arrow operator (-&gt;) to index an attribute in the NameSpaceof the values unit of that index, i.e.: classifications/x/name[x_rel] can now be written as x_rel-&gt;name. | . | And and Or as binary infix operators as alternative for &amp;&amp; and ||. | . New functions: . | EXEC_EC that executes an external process and returns its ExitCode, which enables a modeller to use that result in for example the construction of a storage name of a source that can only be read after completion of that process. | . Fixed: . | issue with maxDist in Connect, Connect info and dist_info. | . | issues related to WMTS support for LambertEA europe and LatLong | . | hanging threads with MT2 on | . | with /S1, the results of Potential were not exactly deterministic as it incorrectly relied on the associativity of floating point addition of the overlapping tile results. | . Performance improvements: . | ShadowTile generation (used in indexed Lookup) and Union data are now done in parallel when /S1 is on and the element type is separable (i.e. fixed size, thus not string or sequence, and not sharing bits in the same byte, thus not Bool, UInt2 nor UInt4). | . BREAKING CHANGE: . ExplicitSuppliers can no longer be used to control the execution of external processes such as with Exec(‘dir &gt;&gt; filelist’) to prepare for internal value calculations. For this, now use EXEC_EC, which returns 0 on success or an errorcode in order to guarantee its derivation before usage. This affects for example the BAG Toolkit 2.2; Use version 7.326 or later for the BAG Toolkit 2.2. 2021-07-20: GeoDms Version 7.313 . GeoDms x64 installation code-signed by “Open Source Developer, Martinus Hilferink” . Implemented: . - issue 59: writing available projection info to a .PRJ file when writing a .SHP file . - issues 198 and 217: take the current Clipboard contents and scroll in TableView to the specified row-number (Ctrl-G) or search-key (Ctrl-F) and in MapView to the specified coordinate. Fixed: . - issue 219: use GridLayer with basegrid for raster subset domains. 2021-06-10: GeoDms Version 7.312 for x64 . Implemented connect_info and dist_info functions that divide the tiles of points over different worker threads and that can take a maximum square distance per point to avoid connecting remote locations. Fixed issue 213 that gave error to the result of a unique(float32(round(some attribute with values with a metric))). 2021-05-13: GeoDms Version 7.311 for x64 . Implemented join_equal_values functions , see https://geodms.nl/mantis/view.php?id=107 . Fixed Help url issue https://geodms.nl/mantis/view.php?id=199 . 2021-05-06: GeoDms Version 7.310 for x64 . Fixed: issue https://geodms.nl/mantis/view.php?id=195 . 2021-02-24: GeoDms Version 7.308 for x64 . Fixed issue 141: MT issues with Stored Properties, such as DialogData, StorageReadOnly, SqlString. Now all Stored Properties are read from the main thread and kept private as task related context. 2021-02-23: GeoDms Version 7.307 for x64 . Architecture . | argmin, argmax, min_elem, max_elem are now implemented with internal operators (and no longer depend on RewriteExpr.lsp) | . New operators: . | argmin_uint8, agmax_uint8, argmin_uint16, argmax_uint16 | . Fixed issues: . | argmin, argmax with 1 argument now results in the correct domain | . 2021-02-01: GeoDms Version 7.306 for x64 . Fixed issues: . | issue 174: connect_info with a uint8 domain for the arc/polygon set to connect to now works. | . 2021-02-01: GeoDms Version 7.305 for x64 . New operations: . | subset operations that avoid the creation of nr_OrgEntity: . | select_unit(condition), | select_data(select_unit(condition: D-&gt;bool) orgData: D-&gt;V) which runs through condition and picks-up the orgData elements that correspond with condition elements that are true without the use of an intermediate org_rel (formerly known as nr_OrgEntity). | . | subset operations that result in org_rel as a replacement of nr_OrgEntity: select_orgrel(condition) | subset operations that optimize for expected limitation of the cardinality and ordinals of the result set: . | select_unit_uint8(condition), select_unit_uint16(condition), select_unit_uint32(condition) | select_orgrel_uint8(condition), select_orgrel_uint16(condition), select_orgrel_uint32(condition) | . | (partitioned) summation operations with specified value types: . | sum_(|u)int(8|16|32|64)(values: D-&gt;V[, partition: D-&gt;P]), | sum_float64(...), | sum_(i|u|d)point(...), | . | partitioned counting operations that optimize for expected limitation of the cardinality and ordinals of the results: . | pcount_uint(8|16|32)(partition: D-&gt;P): P-&gt;uint(8|16|32), | . | . Fixed issues: . | issue 182: a domain with a single tile that didn’t cover the defined range resulted in inconsistent data size handling. Now, if NrTiles = 1 and tile[0] strictly smaller than range then GetCount() = #range, but GetTileCount(0) is #tile, and data is only calculated and used for the non-covering tile. | issue 183: using unknown_item | . 2021-01-25: GeoDms Version 7.304 for x64 . Upgrades: . | build environment: MSVC 2019 (was: MSVC 2019) | compiler: C++ 14.2 (was 14.1) | platformtoolset: v142 | LanguageStandard: stdcpplast | boost: 1.75.0 (was: 1.69.0) | . Code clean-up: . | the use of boost::mpl and type_traits have been replaced by equivalent elements of namespace std | fixes related to the more strict C++20 language rules. | . Feature request: . | issue 172: GUI MapView controls: Panning and feature-info have become the default mouse actions; the related Buttons in the toolbar have been removed. | . Fixed issues: . | issue 176: Synchronisation of data read from .fss with reading domain cardinality from the same .fss | issue 181: not operator (issue introduced in 7.300 as a result of new aggregation operations | . ",
    "url": "/docs/older-versions.html#2021-7300-series",
    
    "relUrl": "/docs/older-versions.html#2021-7300-series"
  },"2093": {
    "doc": "older-versions",
    "title": "Versions of 2020",
    "content": "2020-12-03: GeoDms Version 7.238 for x64 . 2020-10-23: GeoDms Version 7.234 for x64 . 2020-10-05: GeoDms Version 7.229 for x64 . Fixes issues related to processing many red items and ExplainValue tooling: 1429, 1433 GUI issues: 1326, 1429 . MapView Toolbar: now default mouse functions: . | LeftButtonClick -&gt; SetFocus in active layer and all raster layers, information on focus item is presented in legend | Drag -&gt; Map Panning, | LeftButtonDoubleClick -&gt; ExplainValue of focus element in active layer, see Detailpage | InfoTool is now removed. | ZoomIn, ZoomOut and most selection Tools replace the Drag function, but leave LeftButtonClick and LeftButtonDoubleClick unchanged. The SelectObject Tool does disable the SetFocus function when active. | . TableView Toolbar: . | InfoTool now works as a command to ExplainValue on the Focus element. | . Fixed issues for Vesta. 2020-09-04: GeoDms Version 7.222 for x64 . Fixes issues 1414, 1415, 1416, 1417, 1419, Fixed issues for Vesta. 2020-08-04: GeoDms Version 7.220 for x64 . Fixes issues 1411, 1413 . Fixes issues with cancel working thread, GetLabelAttr values and Value Info Detail Page. Warning: we’re working on a found issue in the Vesta Regression test causing an Access Violation. Do not use 7.220 for Vesta for now. 2020-04-08: GeoDms Version 7.215 for x64 . Contains various fixes of GeoDMS 7.213: Fixes issues 1380, 1382, 1325, 1360 Fixes Progress Messaging . 2020-03-16: GeoDms Version 7.213 for x64 . Contains various fixes of GeoDMS 7.212. 2020-03-11: GeoDms Version 7.212 for x64 . New features: . | Gui: F2 helps to trace the source of errors | dijkstra_m for Network travel time matricices: a logit based decay function can now be specified for intermediate aggregation | . Regression tests . | includes Vesta and different Multi Threading setttings. | . Dataset size: . | better support for datasets with more than 2^32 rows, more specifically, rowset size issues were solved for merge, raster_merge, dijkstra_m, and aggregations with more than 2^32 partitions. | . Diagnostics . | better detection and reporting when values or row-counts unexpectedly exceed 2^32. | . Fixes many MT2 and dijkstra issues … . | Fixed GeoDmsGui crashes, see: issues 1347, 1348, | Fixed Delphi error in GeoDmsGui crashes, see: issues 1347 348 | Fixed “Failed to generate’ en ‘access violation’ error, see: issue 1373 | Dijkstra issues: various changes and fixes have been made in the GeoDMS to accommodate OD pair sets with more than 2^32 rows, | . see: issue 1362 . | GDAL 2 fixes and improvements, see issues 1368 and issues 1369 | . The boost::polygon library is now included in our subversion repository and some initiary investigations and updates were made as preparation of work as discussed at issue 1208. 2020-01-08: GeoDms Version 7.207 for x64 . Added operators: subset_uint8, subset_uint16, subset_uint32 . Fixes minor issues 1319, 1329. ",
    "url": "/docs/older-versions.html#versions-of-2020",
    
    "relUrl": "/docs/older-versions.html#versions-of-2020"
  },"2094": {
    "doc": "older-versions",
    "title": "Archive 2016..2019",
    "content": "Some documented versions of earlier years can be found on the page with Older GeoDMS versions . ",
    "url": "/docs/older-versions.html#archive-20162019",
    
    "relUrl": "/docs/older-versions.html#archive-20162019"
  },"2095": {
    "doc": "older-versions",
    "title": "Versions of 2019",
    "content": "2019-12-04: GeoDms Version 7.206 for x64 . This version fixes some issues related to CalcCache resource usage and various other improvements. Select GeoDmsGui-&gt;Tools-&gt;Options-&gt;Current Configuration-&gt;Minimum size for DataItem specific swapfiles in CalcCache and change the value from 1000000 to 1000000000 to improve calculation speed for the price of increased probability of memory overflow related issues. This is recommended for Windows 10 where memory overflow issues seem to be delt with well, and not recommended for Windows 2008 server. Fixes: . | issue 1238: domain units with a sub-item named geometry now are automatically Mapviewable. | issue 1301: solved memory error with some large data sets. | issue 1305: TableView index error fixed | issue 1307: No more Cannot obtain a Read Lock because there is 1 Write Lock on this data | issue 1314: Fixed appcrash | issue 1316: Minimum size for DataItem specific swapfiles is now stored in the registry per user, per machine. | issue 1318: Dijkstra now warns when givens Mass and MaxImpedance attributes contain NULL values. | . 2019-11-01: GeoDms Version 7.203 for x64 . Fixes: . | Startup issue on Windows Server 2008 | . 2019-10-21: GeoDms Version 7.202 for x64 . Fixes: . | issue 1280 Stack overflow exceptions now result in an error message; Stack size has increased for GeoDmsRun.exe | issue 1290 Various other issues related to the display of diagnostic messages. | issue 1205 12561294 Display of the Thousand separator is now settable per user and per machine in Tools-&gt;Options. Default is off. | . Known issue: On Windows Server 2008 R2, the GeoDMS software might block during dll-initialisation due to concurrency runtime limitations. This issue does not occur on Windows 10. For users with Windows Server 2008 R2, install and use GeoDMS 7.203. 2019-10-09: GeoDms Version 7.201 for x64 . Fixes: . | issue 1258 Dijkstra on empty nodeset/linkset | issue 1279 Vesta crashed on Municipal selection, caused by dijkstra on a nodeset without links. | issue 1289 Fixed GUI action Update subtree, introduced by 7.200, relative to 7.182. | . 2019-10-04: GeoDms Version 7.200 for x64 . Fixes various issues introduced since 7.182, such as issues 941, 1184. Reverted: . | Yellow items, i.e. not actually copying and retaining cache items as endogenous config items by keeping a temporary user perspective. | Separate production of signature objects reflecting cache results with formal domain and values units based on processing formal arguments and actual data result objects. | . Reversion of these changes implies that some cache entries are still identified by expressions containing treeitem names and that for some operators, some formal arguments cannot be substituted by their related calculation rules. 2019-04-11: GeoDms Version 7.198 (withdrawn, use 7.203 instead) . In this version, the GUI has been stream-lined. Many icons have been replaced, the toolbar now contains 32x32 pixel icons similar to the qGis-look, GUI operations to change a model configuration have been removed (such as the Insert operations) as the use case of building a model configuration interactively never flew since the syntax of the configuration files in much more clear to work with. Implements issues: . | 1202: A separate GeoDmsCaller.exe is now provided to send GUI control messages to an existing instance of GeoDmsGui.exe | 1205: Thousand separators have now been implemented in the representation of quantities in TableView, LispExpr string representation, statistics, etc., but not in Export to Clipboard as .csv. | 1206: WM(T)S support now also supports background layers that are made of .jpg files. | 1207: The SourceDescr tab can now be used to see which storages have been used for a certain result or container. | 1212: new qGis-style icons. | 1217: display of palette icon in tree-view for different color aspect attributes. | . Fixes issues: . | 1164: gebruik van Symbol fonts (zoals: ttf-Wingdings) voor PointLayer visualisatie. | 1182: issue with connections to arcs with zero length | 1191: | 1192: | 1198: | 1213: | 1214: | 1215: | 1220: | 1221: | . 2019-02-20: GeoDms Version 7.196 (withdrawn, use 7.203 instead) . This release optimizes the use of memory, especially of models that calculate attributes of the same entities sequentially, such as in a loop with time steps. For this, large freed memory blocks are retained and reissued when demanded to avoid the system to wait on synchronized OS memory recollection. | The .tmp part of the CalcCache is no longer in use, instead all non-persistent intermediary results are stored in the (system page file backed) heap. EmptyWorkingSet is called when in stress. | Full Names are no longer stored per item and only composed when requested. This greatly reduces the stress on the internal Tokenizer. | Internal representation of Undefined SharedStr and StringRef made more consistent. | . Fixed issues related to these changes: . | issue http://www.mantis.objectvision.nl/view.php?id=1192 1192: lock already taken | issue http://www.mantis.objectvision.nl/view.php?id=1192 1191: combine(range(u, xb, xe), range(v, yb, ye)) now works | issue http://www.mantis.objectvision.nl/view.php?id=1024 1024: Startup issue on Windows 7. | issue http://www.mantis.objectvision.nl/view.php?id=1183 1183: memory allocation errors | issue http://www.mantis.objectvision.nl/view.php?id=1184 1184: domain unification error when using ParseXML | issue http://www.mantis.objectvision.nl/view.php?id=1185 1185: Layer Control names and unit specs are represented again. | . Other Fixed issue: . | issue http://www.mantis.objectvision.nl/view.php?id=11177 1177: numerical instability in the weight aggregation of nth_element_weighted could give undefined results. This could affect Fusion, 2UP, RSL and other projects using nth_element_weighted. | . 2019-01-06: GeoDms Version 7.185 (withdrawn, use 7.200 instead) . GeoDMS 7.185 mainly contains fixes of reported issues and has a mechanism (in debug mode) to detect potential dead-locks by checking a hierarchy of the critical sections. This has resulted in the removal of many potential dead-locks. New functionality: . | issue http://www.mantis.objectvision.nl/view.php?id=1092 1092: code analysis for clean-up support: now a source can be set, more used items are included (such as when used indirectly in properties), and representation colors have been improved. | . Possible breaking change: . | issue http://www.mantis.objectvision.nl/view.php?id=1141 1141: Now two domains are considered different if they refer to different items, even if their calculation rule is the same. For example: unit landuse_class: nrofrow=5; unit building_type: nrofrows=5; are now domain-incompatible. Thus, the entity compatibility check is now more strict. Tested projects (and adapted when necessary): Fusion, Vesta, RSL. | . Fixes: . | issue http://www.mantis.objectvision.nl/view.php?id=1094 1094: color palettes are now hidden for Layers with more than 32 classes and for Wms Layers. | issue http://www.mantis.objectvision.nl/view.php?id=1152 1152: Viewing info in a feature layer with an indirect geometry now works. | issue http://www.mantis.objectvision.nl/view.php?id=1157 1157: After right-clicking a color in a layer-control, the GUI doesn’t crash anymore. | issue http://www.mantis.objectvision.nl/view.php?id=1159 1159: Diagnostics: Detail pages now also provide info when an script-error was found when processing its contents. | issue http://www.mantis.objectvision.nl/view.php?id=1166 1166: CalcCache: no more illegal abstract error when opening an persistent sequence array from a previous session. | . Progress on issue 823: gdal2.vect and gdal2.grid have now been implemented. ",
    "url": "/docs/older-versions.html#versions-of-2019",
    
    "relUrl": "/docs/older-versions.html#versions-of-2019"
  },"2096": {
    "doc": "older-versions",
    "title": "Versions of 2018",
    "content": "2018-10-15: GeoDms Version 7.182 for x64 . Implemented: . | issue http://www.mantis.objectvision.nl/view.php?id=823 823: now all GDAL 1.91 data is installed inside the GeoDMS program folder. | issue http://www.mantis.objectvision.nl/view.php?id=1092 1092: background of required items are colored in the TreeView when a target is set from the Popup menu-&gt;Code analysis… | . Fixed: . | issue http://www.mantis.objectvision.nl/view.php?id=1085 1085: Group by &gt; sort on attribute now works | issue http://www.mantis.objectvision.nl/view.php?id=1086 1086: nth_element_weighted now can process zero weights | . | issue http://www.mantis.objectvision.nl/view.php?id=1088 1088: Crash or not, depending on Order of calculation. | issue http://www.mantis.objectvision.nl/view.php?id=1090 1090: Enter when the Current Item Bar has focus, only activates that item; F5 has now been disabled. | issue http://www.mantis.objectvision.nl/view.php?id=1111 1111: split_polygon(geometry parameter) now works. | . 2018-08-29: GeoDms Version 7.180 for x64 and Win32 . This version has been compiled with: . | Visual Studio 2017, version 14.1 (which replaced Visual Studio 2015, v 12.0). | Boost 1.67 (was: 1.66) | GDAL 2.3.1 (additional to 1.9.1) | . Many compiler warnings have been dealt with and syntax improvement opportunities have been implemented. Fixed issues: . | 1014 (VS 2017) | 1074: Centroid_or_mid took too long. | 208: popup menu doesn’t activate all items at first request. | . Implemented: . | issue 1089: more informative about box. | . Progress on issues: . | 823: GDAL 2.3.1 can now be used for reading; use gdal2.vect or gdal2.grid as StorageType. | 1092: Added ‘Instantiated From’ reference in the General Detail page, and calculation rules (expression properties) now have | . 2018-07-18: GeoDms Version 7.177 for x64 . Implements: . | issue 811: unconnected pairs in an OD matrix now have Undefined Impedance. Breaking Change: Check the usage of dense OD impedance matrices calculated with dijkstra_m function as unconnected pairs now have impedance and no longer maxDist. | issue 1025: Get and set statusflags from command line | . Fixes: . | issue 988: color for NoData always transparent in FeatureLayer and GridLayer. | issue 1038: no error msg “No such host is known” when drawing background layer without internet connection | . Supplemental changes related to . | issue 644: Visualisation styles shown in legend | . 2018-07-04: GeoDms Version 7.176 for x64 and Win32 . Breaking change: . | issue 1068. | . For documenting projects with many inheritance relations, such as Vesta, the status quo was no longer sustainable. Now the combination of inheritance and overriding is stopped. An overriding item without calculation rule no longer inherits the sub-items of the overridden item. Check if your config will be affected before updating to this version. Furthermore: . This version also contains a few fixes and improvements of recent functionality, more specifically: . | issues related to the new Table Group By Tool (790): 1060, 1061, 1062. | issue related to the current item bar: 1065: Ctrl-C and Ctrl-V now work. | issue 1063: connect operator. | issue 1067: mean operator. | issue 909: shp/dbf export now has the same set of attributes as a .csv export. | issue 985: zoom level of the overview panel in the MapView. | issue 1001 and related 644: different feature layers without thematic attribute now get different colors. | . 2018-06-25: GeoDms Version 7.175 (withdrawn) . This version is published to present new functionality in the TableView for the purpose of testing and evaluation. It doesn’t contain fixed issues. Implements: . | Issue 790: Group by Tool in the TableView for grouping rows on the values of one or more columns. | . As this version introduced new issues that have been fixed in GeoDMS 7.176, the GeoDMS 7.175 is withdrawn from this publication page. 2018-06-11: GeoDms Version 7.174 for x64 . Fixes: . | Desktop issue 1053, | PP2 1040. | Diagnostic messages. | . 2018-06-05: GeoDms Version 7.173 for x64 . Fixes many minor issues related to recent additions: . | Info Tool issue 494. | issue 1043: TableView of fixed domain | Current Item Bar issues 1045, 1046, 1047. | WmsLayer issues 1048, 1049. | . 2018-05-23: GeoDms Version 7.172 for x64 . Implements: . | issue 820 An editable item path can be used to jump to other items (use F5 or mouse-click to search). | issue 809 now config files with UTF8 Byte Order Mark can be procesed. | . Fixes: . | issue 1007 const_file_view Error when changing reference of unit LatLong | issue 1027 Error Dialog appeared for non-related items when requesting data. | issue 1030 LUS Demo: issue with PP2 enabled | issue 1035 ViewDetails unknonw exception. | . 2018-04-30: GeoDms Version 7.170 for x64 . Fixes: . | issue 1032 with writing dijkstra_m results. | . 2018-04-24: GeoDms Version 7.169 for x64, withdrawn because of issue 1032. Performance improvement: . | 1021: Dijkstra_functions now run different origin zones in parallel when multiple CPU’s are present. With 8 CPU’s this maked the production of an OD table approximately 6 times faster. | . 2018-04-19: GeoDms Version 7.168 for x64 . New feature: . | Dijkstra_m can now produce OrgZone_MaxImp as startpoint attribute, see issue 1021 for an example. | . Fixed issues: . | 1022: When copying to Clipboard from the TableView, now wide characters are used that can better represent UTF8 characters than the earlier usage of ASCII when writing to the Clipboard, | 1024: GeoDMS starts again on Windows 7. | 592: event log info of dijkstra operations is immediately visible again (with MT2 on). | . 2018-04-13: GeoDms Version 7.167 for x64 . Warning: This version requires Windows 10, see issue 1024. Please replace by 7.168 if you install on an older version of Windows. Fixes issue 1018: background drawing wasn’t clipped, causing frames and some text controls to disappear, introduced by GeoDMS Version 7.166; please update any 7.166 to 7.168. And fixes diagnostic (=error message related) issues: . | 999: | 1012: | . 2018-03-28: GeoDms Version 7.166 (withdrawn) . Fixes issues: . | WMS related: 996, 997, 998, 1003, 1010, 1011, | 588: split_polygon | 994: PolyData sneller in TableView | 995: TableCoposer operatoren AsString en AsList werken nu ook voor tabellen van meer dan 4 GB. | 999: some extra debug info with ViewDetails might help to diagnose this issue. | . 2018-03-07: GeoDms Version 7.165 for x64 . Fixed issues: . | 990: faster lookup and corrected permutation_rnd in case of PP1 | 899: redraw layers when activated. | . 2018-03-05: GeoDms Version 7.163 for x64 . Implemented issues: . | 236, 312: background layers are only read when the current zoom-factor don’t rule them out. | 918: wms as background layer. | . Fixed issues: . | 983, | 984, | 986, | 987 | . upgrade from boost 1.60.0 to 1.66.0 . 2018-02-13: GeoDms Version 7.162 for x64 . Fixed issues: . | 427, | 793: now values are displayed in ExplainValue of aggregation in the Detail Pages, | 961, | 968, | 969, | 971 | . Implemented issues: . | 199, | 743, | 931 Settings are now stored in user and machine specific profiles, even when the LAN provides users with roaming profiles. | . Added: . | operator do(exec_operation, resulting_filename): see issue 971 | operators min_index(values, partitioning(optional)) and max_index(values, partitioning(optional)): see issue 743. | . ",
    "url": "/docs/older-versions.html#versions-of-2018",
    
    "relUrl": "/docs/older-versions.html#versions-of-2018"
  },"2097": {
    "doc": "older-versions",
    "title": "Versions of 2017",
    "content": "2017-12-21: GeoDms Version 7.159 for x64 . Added: . | operator mapping_count(srcDomain, dstDomain, CountType) | . 2017-12-13: GeoDms Version 7.157 for x64 . Fixes: . | issue 953 (which was fixed incorrectly in GeoDMS 7.156) | . 2017-11-30: GeoDms Version 7.155 for x64 . Poly2grid has been made even faster by using for each row a vector based linked list of edges that start in that row, which prevents sorting the edges. Now poly2grid is O(n+p+r*log(k)) where n = the number of edges, p = the number of pixels to be painted, r - the number of rows, and k = the maximum number of edges crossing one row. Fixes: . | issue 915 | issue 928 | issue 934 | . 2017-11-23: GeoDms Version 7.152 for x64 . Fixes: . | issue 926 (poly2grid artifacts) | issue 5 | issue 829 | issue 885 | issue 911 | issue 918 | issue 919 | issue 928 | . Poly2grid has been implemented much faster by sorting and processing edges from low to high rows. 2017-10-13: GeoDms Version 7.148 for x64 . Fixes: . | poly2grid drawing on too many pixes in case of a horizontal border (issues 908 and 916). | . New: . | Properties DomainUnit_FullName en ValuesUnit_FullName (issue 829). | Button for TableView export (issue 561) | . 2017-08-28: GeoDms Version 7.145 for x64 . Fixes: . | issues 885, 896, 898, 904, 905, 906 | . 2017-06-13: GeoDms Version 7.141 for x64 . | GeoDMS 7.140 introduced an issue for older versions of Windows, such as Server 2008 R2 Datacenter: critical section locking during initialization when loading DLL’s caused a deadlock. This is now avoided by registering operators without locking the operator registry during initialization. | . The 7.140 version had been developed with a focus on bug fixing and getting things more stable. The regression tests have been expanded to include GUI actions in order to keep more functionality working as it worked in previous versions. Functional and/or Breaking changes: . | Default code editor is now the default installation path for Notepad ++, see configuration of your preferred code editor | . Now Implemented: . | 000821 Export Primary Data to.. now uses the full path for a default filename. | 000859 Allow longer item names, read from GDAL sources, such as fgdb. | . Fixes: . | 000894 reading boolean data with GDAL. | 000890 GDAL issue with reading 16 bits data as 32 bits values | 000887 Edit Palette Dialog issues | 000884 Multi Select issues in point- and polygon layers. | 000874 &amp; 000893 | 000872 | 000871 Lock already taken issue. | 000859 | 000539 order of items in Explain value is now determined by the order of appearance in the calculation rule. | . Regression test now includes the following GUI actions: Show MapView, Edit Palette and Reclassify. 2017-02-21: GeoDms Version 7.139 for x64 . Fixes: . | 000539 | 000855 | 000859 | 000860 | 000865 | . 2017-02-08: GeoDms Version 7.138 for x64 . Fixes: . | 000852 | 000853 | 000854 | 000807 | . 2017-01-09: GeoDms Version 7.137 for x64 . Main improvement of this release is that all read data action and most calculations are now done in worker threads, which keeps the main thread responsive for GUI actions. Specific handling enables the user to change data or close views, which will invalidate running tasks. Adding a thematic attribute without pre-configured classification to a MapView now no longer waits for the completion of the data processing for the Jenks Fisher classifications. New functionality: . | 000842: Implemented a new property with the name ‘FullSource’ | . Fixes: . | 000626: AddLayer cmd no longer freezes on making data available for generating a classification scheme. | 000847: read/write lock error. | 000788: case parameter references | 000837: Reading tiff with GDAL.grid and the original TIFF reader now both fully support reading area’s with different scales and extents (sub-sections as well as enclosing extents, for which the border area is set as undefined or false). GDAL.grid now also supports reading attributes with values of type Bool, UInt2, or UInt4. | . | 0000802: [Export] Export data to .csv / Table Copy to Clipboard took extremely long - resolved. | 0000813: [TableView] DataReadLock issue in EditPalette - resolved. | 0000539: [Explain Value] Faster retrieval of aggregant values when explaining an aggregation. | 0000738: [Calculations] connect and connect_info using additional attribute information - resolved. | 0000385: [Views] Activate existing layers/columns in MapView and TableView when related items are activated again - implemented. | 0000005: [Export] Export Scalebar with correct symbol and text size. - resolved. | 0000801: [TableView] Copy to Clipboard (man on the beach) fails with selected data - resolved. | 0000791: [Calculations] Memory Allocation Failed in template instantiation - resolved. | 0000609: [CalcCache] connect_neighbour results in invalid outcome for tiled data - resolved. | 0000788: [Calculations] reference for a case parameter differs between first and following instantiations - resolved. | 0000783: [Calculations] substr results in GeoDmsGui has stopped working &gt; crash - resolved. | 0000580: [Desktop] DetailPage Value Info geeft alleen relevante informatie bij activering uit tabel/kaart of back/forward knop - partially fixed. | . ",
    "url": "/docs/older-versions.html#versions-of-2017",
    
    "relUrl": "/docs/older-versions.html#versions-of-2017"
  },"2098": {
    "doc": "older-versions",
    "title": "Versions of 2016",
    "content": "2016-04-11: GeoDms Version 7.130 for x64 and Win32 . Addresses issues: . | Fixes a bug in ordering items (sort, rlookup, rjoin, etc.) that was introduced in 7.126 in the fix of issue 739. | 753 | 754 | 755 | . There are currently known issues with PP2, so I recommend to set . | Tools-&gt;Options-&gt;General settings-&gt;Parallel Processing 1 = ON (parallel tile processing) | Tools-&gt;Options-&gt;General settings-&gt;Parallel Processing 2 = OFF (multiple calculation steps simultaneously) | . ",
    "url": "/docs/older-versions.html#versions-of-2016",
    
    "relUrl": "/docs/older-versions.html#versions-of-2016"
  },"2099": {
    "doc": "older-versions",
    "title": "older-versions",
    "content": " ",
    "url": "/docs/older-versions.html",
    
    "relUrl": "/docs/older-versions.html"
  },"2100": {
    "doc": "one-dimensional-domain",
    "title": "table",
    "content": "The one-dimensional domain-unit corresponds to what in a database usually is called a table. In the GeoDMS this domain unit defines the number of but also the order of elements. attribute in the table have the configured unit as domain unit. Usually uint8 or uint32 value-type are used for one-dimensional domain units. The uint8 value type is used for domains with a limited set of elements, e.g. for class units. The maximum number of elements of a uint8 domain is 254. For domain units with more elements, up to 4.294.967.294 elements, use a uint32 value type. Other less frequently used value types as domain unit. | bool/uint2/uint4 types for domains with a very limited set of elements | uint64 in a 64 bits environment for domain with more than 4.294.967.294 elements. | . See the column MaxValue in the value-type table for their maximum number of elements. Note: there might be some issues with using bool/uint2/uint4 value type as domain, in that case the uint8 value type is advised. It is advised to use value types with smaller sizes if possible and only bigger sizes if necessary, this limits the amount of memory used and increases the model performance. ",
    "url": "/docs/one-dimensional-domain.html#table",
    
    "relUrl": "/docs/one-dimensional-domain.html#table"
  },"2101": {
    "doc": "one-dimensional-domain",
    "title": "views",
    "content": "A set of relational-functions is available to configure new domain units, based on the content of other items. In relational database terms this relates to the concept of a view, but is not the same. In a relational database, a view usually results in a collection of attributes, the definition of the view (number of elements and order) is implicitly derived from the query string resulting in the view. In the GeoDMS the resulting domain unit needs to be configured explicitly with a relational-functions or selection-functions (for example with select_with_org_rel for a selection of data elements of an origin domain). Examples . unit&lt;uint32&gt; building :   StorageName = \"%SourceDataDir%/BAG/pand.shp\" ,   StorageType = \"gdal.vect\" {    attribute&lt;fpoint&gt; geometry;    attribute&lt;uint32&gt; buildingyear; } unit&lt;uint8&gt; ehs_class: NrOfRows = 8 {     attribute&lt;uint32&gt; color:    [        rgb(255,  0,  0)       ,rgb(255,128,  0)       ,rgb(255,255,  0)       ,rgb(128,128,128)       ,rgb(  0,255,255)       ,rgb(  0,  0,255)       ,rgb(  0,255,  0)       ,rgb(  0,  0,  0)    ]; } . In the first example (building) the data is read from a Shapefile, the number of elements of the domain unit cardinality is derived from the number of records in the Shapefile. In the second example (ehs_class) the NrOfRows property is configured to define the cardinality. In both example subitem are configured (geometry, buildingyear and color). As these data item have their domain units as parent item, the domain unit is derived from the parent-item and has to be configured explicitly. ",
    "url": "/docs/one-dimensional-domain.html#views",
    
    "relUrl": "/docs/one-dimensional-domain.html#views"
  },"2102": {
    "doc": "one-dimensional-domain",
    "title": "one-dimensional-domain",
    "content": " ",
    "url": "/docs/one-dimensional-domain.html",
    
    "relUrl": "/docs/one-dimensional-domain.html"
  },"2103": {
    "doc": "open-data",
    "title": "open-data",
    "content": "De afgelopen jaren zijn steeds meer ruimtelijke bestanden beschikbaar gekomen, zoals de Basis Registraties en OpenStreetMap. Dit biedt veel mogelijkheden voor nieuwe toepassingen tegen lage kosten. left . Wij hebben ervaring met de volgende open data bronnen: . | BAG: Basis Registratie Adressen en Gebouwen | OSM: Open Street Map | NWB: Nationaal Wegen Bestand | BRT: Basis Registratie Topografie | BRK: Basis Registratie Kadaster | AHN: Actueel Hoogtebestand Nederland | . ",
    "url": "/docs/open-data.html",
    
    "relUrl": "/docs/open-data.html"
  },"2104": {
    "doc": "operator",
    "title": "operator",
    "content": "An Operator is a symbolic representation of a function to be applied on operands. This application is called an operation. Operands can be data-item or literals. In expression with multiple operators, the precedence of the evaluation is based on the precedence order and the associativity within this order. Operators with lower orders are evaluated first. Examples: . | -3^2 is evaluated as (-3)^2 or pow(neg(3), 2) due to the higher precedence order of the unary sub operator. | a / b * c is evaluated as (a / b) * c or mul(div(a,b), c) due to the equal order and left to right associativity of the mul and div operator. | a?b:c?d:e is evaluated as a?b:(c?d:e) due to the right to left associativity of the immediate if operators. | | a |   | b &amp;&amp; c is evaluated as a |   | (b &amp;&amp; c) or or(a, and(b, c) due to the higher precedence order of the and operator. | . | . Use brackets to overrule the precedence rules. | Operator&lt;/B&gt;&lt;/td&gt; | Name | Order Precedence | Associativity | Description | Equivalent Function | &lt;/tr&gt; | + (unary) | plus | 0 | right to left | +a means a | | . | - (unary) | minus | 0 | right to left | -a means -a | [sub](sub)&lt;/a&gt; | . | # | nrofrows | 0 | - | #u means number of rows of unit u | [nrofrows](nrofrows)&lt;/a&gt; | . | ^ | power | 1 | left to right | a ^ b means a to the b-th power | [pow](pow)&lt;/a&gt; | . | ! | subitem | 1 | left to right | a!b means subitem(a, b) | [subitem](subitem)&lt;/a&gt; | . | . | parent item | 1 | left to right | id(.) means id(parent item) | | . | [..] or -&gt; | array access | 1 | left to right | a[b] means lookup(b, a) if b is a data item | [lookup](lookup)&lt;/a&gt; | . | [..] | value | 1 | left to right | a[b] means value(a,b) if b is a unit | [value](value) | . | * | multiply | 2 | left to right | a * b means a multiplied with b | [mul](mul)&lt;/a&gt; | . | / | divide | 2 | left to right | a / b means a divided by b (spaces are necessary) | [div](div)&lt;/a&gt; | . | % | modulo | 2 | left to right | a % b means a modulo b | [mod](mod) | . | +(binary) | plus | 3 | left to right | a + b means a plus b | [add](add) | . | - (binary) | minus | 3 | left to right | a - b means a minus b | [sub](sub)&lt;/a&gt; | . | == | equal to | 4 | left to right | a == b means a equals b | [eq](eq) | . | != | not equal to | 4 | left to right | a b means a not equals b | [not](not)&lt;/a&gt; | . | &lt; | less than | 4 | left to right | a &lt; b means a less than b | [lt](lt) | . | &lt;= | less than or equal to | 4 | left to right | a &lt;= b means a less than or equal to b | [le](le) | . | &gt; | greater than | 4 | left to right | a &gt; b means a greater than b | [gt](gt) | . | &gt;= | greater than or equal to | 4 | left to right | a &gt;= b means a greater than or equal to b | [ge](ge) | . | ! (unary) | not | 5 | right to left | !a means not a | [not](not) | . | &amp;&amp; | and | 6 | left to right | a &amp;&amp; b means a and b | [and](and) | . || | or | 7 | left to right | a || b means a or b | [or](or) | . | ? : | then else (in an iif expression) | 8 | right to left | cond-expr? then-expr: else-expr | [iif](iif) | . &lt;/tbody&gt; &lt;/table&gt; | . ",
    "url": "/docs/operator.html",
    
    "relUrl": "/docs/operator.html"
  },"2105": {
    "doc": "operators-and-functions",
    "title": "operators",
    "content": "An operator is a symbolic presentation of a function to be applied on operands. ",
    "url": "/docs/operators-and-functions.html#operators",
    
    "relUrl": "/docs/operators-and-functions.html#operators"
  },"2106": {
    "doc": "operators-and-functions",
    "title": "functions",
    "content": "Functions express dependences between items. A function associates a single output to each input element. Functions in the GeoDMS are categorized in the following function groups: . | arithmetic-functions: basic mathematical functions, like add, div or sqrt | ordering-functions: to compare/order data items like eq, lt, argmax or sort | aggregation-functions: to aggregate data items to other domain units like sum or mean | conversion-functions: to convert value-type, round data items or use different notations | classify-functions: to classify quantities to class units | transcendental-functions: functions transcending algebra, like exponent and logarithm | predicates-functions: to check conditions, like isdefined of isnull. | logical-functions: to provide basic comparisons, returning in boolean data items like iif or and | relational-functions: to relate data items of different domain units like lookup or create new domain units like unique | selection-functions: to create new domain units for selections of data from other domain units like select_with_attr_by_cond | rescale-functions: to scale data items to new distributions | constant-functions: to define constant values like pi or true | trigonometric-functions: operate on angles like sin or cos. | geometric-functions: geometric operations on point, arc and/or polygon | network-functions: to build and calculate network topologies like connect or impedance-functions | grid-functions: to calculate with data items of grid-domain, like potential or district | string-functions: operate on data items with string value types like left or strcount | file,-folder-and-read-functions: operate on files and folders, like makedir or storage_name | unit-functions: to define and get information of unit items, like rangeand lowerbound | matrix-functions: to perform matrix calculations, like matrix-multiplication or matrix-inverse | sequence-functions: process data items with one-dimensional sequences. | metascript-functions:to generate script (like for_each) or request information on tree-item like subitem_propvalues | allocation-functions: mainly used for Land Use Allocation | miscellaneous-functions: remaining functions not categorized in other groups, like rnd_uniform or propvalue | . ",
    "url": "/docs/operators-and-functions.html#functions",
    
    "relUrl": "/docs/operators-and-functions.html#functions"
  },"2107": {
    "doc": "operators-and-functions",
    "title": "operators-and-functions",
    "content": "Operators and functions are used in expressions to calculate with data-item and or literals. ",
    "url": "/docs/operators-and-functions.html",
    
    "relUrl": "/docs/operators-and-functions.html"
  },"2108": {
    "doc": "or",
    "title": "syntax",
    "content": ". | or(condition1 ,.., conditionn) | | condition1 |   | condition2 | . | . ",
    "url": "/docs/or.html#syntax",
    
    "relUrl": "/docs/or.html#syntax"
  },"2109": {
    "doc": "or",
    "title": "definition",
    "content": "| or(condition1 ,.., conditionn) or condition1 |   | condition2 combines two or more conditions or results in true values if any condition is true and in false values if all conditions are false. | . ",
    "url": "/docs/or.html#definition",
    
    "relUrl": "/docs/or.html#definition"
  },"2110": {
    "doc": "or",
    "title": "applies to",
    "content": ". | condition1 .. conditionn data-item with bool value-type | . ",
    "url": "/docs/or.html#applies-to",
    
    "relUrl": "/docs/or.html#applies-to"
  },"2111": {
    "doc": "or",
    "title": "conditions",
    "content": "The conditions need to match with regard to their domain-unit or be void (literals or parameter can be combined with data items of any domain). ",
    "url": "/docs/or.html#conditions",
    
    "relUrl": "/docs/or.html#conditions"
  },"2112": {
    "doc": "or",
    "title": "example",
    "content": "1. attribute&lt;bool&gt; condA_or_condB (LDomain) := or(condA, condB); 2. attribute&lt;bool&gt; condA_or_condB (LDomain) := condA &amp;&amp; condB; . | condA | condB | condA_or_condB | . | False | False | False | . | False | True | True | . | True | False | True | . | True | True | True | . LDomain, nr of rows = 4 . ",
    "url": "/docs/or.html#example",
    
    "relUrl": "/docs/or.html#example"
  },"2113": {
    "doc": "or",
    "title": "see also",
    "content": ". | and (&amp;&amp;) | not (!) | . ",
    "url": "/docs/or.html#see-also",
    
    "relUrl": "/docs/or.html#see-also"
  },"2114": {
    "doc": "or",
    "title": "or",
    "content": "logical-functions or (||) . ",
    "url": "/docs/or.html",
    
    "relUrl": "/docs/or.html"
  },"2115": {
    "doc": "ordering-functions",
    "title": "ordering-functions",
    "content": "Ordering operators-and-functions are used to compare or order data-item: . | eq (==) | eq_or_both_null | float_isnearby | lt (&lt;) | lt_or_lhs_null | le (&lt;=) | le_or_lhs_null | gt (&gt;) | gt_or_rhs_null | ge (&gt;=) | ge_or_rhs_null | ne (&lt;&gt;) | ne_or_one_null | . | argmax - the order number of the argument with the highest value | argmax_uint8_16 - versions of the argmax function resulting in a uint8/16 data item | argmax_alldefined - variant of the argmax with defined values for all defined arguments | argmax_alldefined_uint8_16 - versions of the argmax_alldefined function resulting in a uint8/16 data item | argmax_ifdefined - variant of the argmax with defined values for any defined arguments | argmax_ifdefined_uint8_16 - versions of the argmax_ifdefined function resulting in a uint8/16 data item | . | argmin - the order number of the argument with the lowest value | argmin_uint8_16 - versions of the argmin function resulting in a uint8/16 data item | argmin_alldefined - variant of the argmin with defined values for all defined arguments | argmin_alldefined_uint8_16 - versions of the argmin_alldefined function resulting in a uint8/16 data item | argmin_ifdefined - variant of the argmin with defined values for any defined arguments | argmin_ifdefined_uint8_16 - versions of the argmin_ifdefined function resulting in a uint8/16 data item | . | max_elem - the highest value of the arguments | max_elem_alldefined - variant of the max_elem with defined values for all defined arguments | max_elem_ifdefined - variant of the max_elem with defined values for any defined arguments | . | min_elem - the lowest values of the arguments | min_elem_alldefined - variant of the min_elem with defined values for all defined arguments | min_elem_ifdefined - variant of the min_elem with defined values for any defined arguments | . See also: aggregation-functions for min and max . | median | . | sort - order the values | reverse - reverse the order of values | . ",
    "url": "/docs/ordering-functions.html",
    
    "relUrl": "/docs/ordering-functions.html"
  },"2116": {
    "doc": "overlay-versus-combine-data",
    "title": "how to use",
    "content": "It is adviced to use the overlay function if the number of actual unique combinations in the data is much less than the possible combinations (for instance in determining the set of atomic regions in a land use model). Use the combine_data function if the number of possible combinations is limited and you want to use the same visualisation-style and labels for the same combinations. ",
    "url": "/docs/overlay-versus-combine-data.html#how-to-use",
    
    "relUrl": "/docs/overlay-versus-combine-data.html#how-to-use"
  },"2117": {
    "doc": "overlay-versus-combine-data",
    "title": "download",
    "content": ". | configuration/data | . ",
    "url": "/docs/overlay-versus-combine-data.html#download",
    
    "relUrl": "/docs/overlay-versus-combine-data.html#download"
  },"2118": {
    "doc": "overlay-versus-combine-data",
    "title": "functions",
    "content": ". | overlay | combine | combine_data | . ",
    "url": "/docs/overlay-versus-combine-data.html#functions",
    
    "relUrl": "/docs/overlay-versus-combine-data.html#functions"
  },"2119": {
    "doc": "overlay-versus-combine-data",
    "title": "overlay-versus-combine-data",
    "content": "configuration-examples Overlay versus Combine_data . This script explains the difference between the overlay and the combine_data operator. The overlay operator makes values depending on the occurence of a unique combination in multiple data-item. The unique operator on the UnionData subitem of the overlay result, results in the set of unique occurences of combinations. The combine_data operator combines data items and result in index number for the combined unit, the first argument of the combine function. This combined unit combines two units and makes entries for each possible combination. So the overlay function looks at the actual equal combinations in the data items, where the combine_data looks at all possible combinations. ",
    "url": "/docs/overlay-versus-combine-data.html",
    
    "relUrl": "/docs/overlay-versus-combine-data.html"
  },"2120": {
    "doc": "overlay",
    "title": "syntax",
    "content": ". | overlay(a, domainunit, container) | overlay32(a, domainunit, container) | . ",
    "url": "/docs/overlay.html#syntax",
    
    "relUrl": "/docs/overlay.html#syntax"
  },"2121": {
    "doc": "overlay",
    "title": "definition",
    "content": ". | overlay(a, domainunit, container) results in a new uint16 domain-unit | overlay32(a, domainunit, container) results in a new uint32 domain unit | . The first argument a contains the names of the source attribute. These attributes need to be configured in the container argument. Argument domainunit is the domain unit of the source and the resulting attributes. The overlay(32) functions results in the following subitems: . | a subitem UnionData is generated for this domain unit, containing different index-numbers of this domain unit for each unique combinations of the occurring values in the source attributes. | subitems for each name of the source attributes from the argument a. These subitems contain relation to the domain unit of the attributes need configured in the container argument. | . ",
    "url": "/docs/overlay.html#definition",
    
    "relUrl": "/docs/overlay.html#definition"
  },"2122": {
    "doc": "overlay",
    "title": "description",
    "content": "The overlay(32) function is for example used to create unique regions in the discrete-allocation function. In the GeoDMS the unique function is used to find the unique values of one attribute, the overlay32 function can be used for multiple attributes. ",
    "url": "/docs/overlay.html#description",
    
    "relUrl": "/docs/overlay.html#description"
  },"2123": {
    "doc": "overlay",
    "title": "applies to",
    "content": ". | attribute a with string value-type | domain unit domainunit with value type from group CanBeDomainUnit | container container with as subitems the attributes to be overlayed. For each entry in the argument a an attribute with the same name need to be configured with a uint8 or unit16 value type and with domainunit argument as their domain units. | . ",
    "url": "/docs/overlay.html#applies-to",
    
    "relUrl": "/docs/overlay.html#applies-to"
  },"2124": {
    "doc": "overlay",
    "title": "conditions",
    "content": "The domain unit of all attributes to be overlayed need to match. null values are not allowed in the source attributes. ",
    "url": "/docs/overlay.html#conditions",
    
    "relUrl": "/docs/overlay.html#conditions"
  },"2125": {
    "doc": "overlay",
    "title": "since version",
    "content": "5.51 . ",
    "url": "/docs/overlay.html#since-version",
    
    "relUrl": "/docs/overlay.html#since-version"
  },"2126": {
    "doc": "overlay",
    "title": "example",
    "content": "unit&lt;uint8&gt; OverlayRegios: nrofrows = 2 { attribute&lt;string&gt; names: ['NoordZuid', 'OostWest']; } container OverlayGrids { attribute&lt;uint8&gt; NoordZuid (GridDomain): StorageName = \"%projdir%/data/overlayNZ.asc\"; attribute&lt;uint8&gt; OostWest (GridDomain): StorageName = \"%projdir%/data/overlayOW.asc\"; } unit&lt;uint16&gt; NoordZuidOostWest := overlay(OverlayRegios/names, GridDomain, OverlayGrids); . NoordZuid: . |   |   |   |   |   | . | 0 | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | 0 | . | 1 | 1 | 1 | 1 | 1 | . | 1 | 1 | 1 | 1 | 1 | . | 1 | 1 | 1 | 1 | 1 | . GridDomain, nr of rows = 5, nr of cols = 5 . OostWest: . |   |   |   |   |   | . | 0 | 0 | 0 | 1 | 1 | . | 0 | 0 | 0 | 1 | 1 | . | 0 | 0 | 0 | 1 | 1 | . | 0 | 0 | 0 | 1 | 1 | . | 0 | 0 | 0 | 1 | 1 | . GridDomain, nr of rows = 5, nr of cols = 5 . NoordZuidOostWest/UnionData: . |   |   |   |   |   | . | 0 | 0 | 0 | 2 | 2 | . | 0 | 0 | 0 | 2 | 2 | . | 1 | 1 | 1 | 3 | 3 | . | 1 | 1 | 1 | 3 | 3 | . | 1 | 1 | 1 | 3 | 3 | . GridDomain, nr of rows = 5, nr of cols = 5 . ",
    "url": "/docs/overlay.html#example",
    
    "relUrl": "/docs/overlay.html#example"
  },"2127": {
    "doc": "overlay",
    "title": "see also",
    "content": ". | full configuration example: overlay-versus-combine-data | overlay32 | overlay64 | . ",
    "url": "/docs/overlay.html#see-also",
    
    "relUrl": "/docs/overlay.html#see-also"
  },"2128": {
    "doc": "overlay",
    "title": "overlay",
    "content": "relational-functions overlay . ",
    "url": "/docs/overlay.html",
    
    "relUrl": "/docs/overlay.html"
  },"2129": {
    "doc": "overlay32",
    "title": "syntax",
    "content": ". | overlay32(a, domainunit, container) | . ",
    "url": "/docs/overlay32.html#syntax",
    
    "relUrl": "/docs/overlay32.html#syntax"
  },"2130": {
    "doc": "overlay32",
    "title": "definition",
    "content": "overlay32 works like the overlay function, only it results in unit with value-type uint32. ",
    "url": "/docs/overlay32.html#definition",
    
    "relUrl": "/docs/overlay32.html#definition"
  },"2131": {
    "doc": "overlay32",
    "title": "overlay32",
    "content": "relational-functions overlay32 . ",
    "url": "/docs/overlay32.html",
    
    "relUrl": "/docs/overlay32.html"
  },"2132": {
    "doc": "overlay64",
    "title": "syntax",
    "content": ". | overlay64(a, domainunit, container) | . ",
    "url": "/docs/overlay64.html#syntax",
    
    "relUrl": "/docs/overlay64.html#syntax"
  },"2133": {
    "doc": "overlay64",
    "title": "definition",
    "content": "overlay64 works like the overlay function, only it results in unit with value-type uint64. ",
    "url": "/docs/overlay64.html#definition",
    
    "relUrl": "/docs/overlay64.html#definition"
  },"2134": {
    "doc": "overlay64",
    "title": "overlay64",
    "content": "relational-functions overlay64 . ",
    "url": "/docs/overlay64.html",
    
    "relUrl": "/docs/overlay64.html"
  },"2135": {
    "doc": "overlay_polygon-(intersect)",
    "title": "syntax",
    "content": ". | overlay_polygon(first_polygon_data_item, second_polygon_data_item) | . ",
    "url": "/docs/overlay_polygon-(intersect).html#syntax",
    
    "relUrl": "/docs/overlay_polygon-(intersect).html#syntax"
  },"2136": {
    "doc": "overlay_polygon-(intersect)",
    "title": "description",
    "content": "overlay_polygon(first_polygon_data_item, second_polygon_data_item) results in a new uint32 domain-unit with an entry for each intersecting part of the first_polygon_data_item and the second_polygon_data_item. The function generates three subitem for the new domain unit: . | geometry: the geometry of the resulting polygon (in the figure the yellow polygons). This attribute has the same values-unit as the first_polygon_data_item and second_polygon_data_item attributes. | first_rel: a relation for the new domain unit towards the domain of the first_polygon_data_item. | second_rel: a relation for the new domain unit towards the domain of the second_polygon_data_item. | . In other GIS software the term intersect is often used for this operation. ",
    "url": "/docs/overlay_polygon-(intersect).html#description",
    
    "relUrl": "/docs/overlay_polygon-(intersect).html#description"
  },"2137": {
    "doc": "overlay_polygon-(intersect)",
    "title": "applies to",
    "content": "attributes first_polygon_data_item and second_polygon_data_item with an ipoint or spoint value-type. ",
    "url": "/docs/overlay_polygon-(intersect).html#applies-to",
    
    "relUrl": "/docs/overlay_polygon-(intersect).html#applies-to"
  },"2138": {
    "doc": "overlay_polygon-(intersect)",
    "title": "conditions",
    "content": ". | The composition of the first_polygon_data_item and second_polygon_data argument needs to be polygon. | The values-unit of the first_polygon_data_item and second_polygon_data arguments items must match. | The order of the points in the first_polygon_data_item and second_polygon_data needs to be clockwise for exterior bounds and counter clockwise for holes in polygons (right-hand-rule). | . This function results in problems for (integer) coordinates larger than 2^25 (after translation where the first point is moved to (0, 0)). If your integer coordinates for instance represent mm, 2^25[mm] = about 33 [km]. The reason is that for calculating intersections, products of coordinates are calculated and casted to float64 with a 53 bits mantissa (in the development/test environment of boost::polygon these were float80 values with a 64 bits mantissa). We advise to keep the size of your integer coordinates for polygons limited and for instance do not use a mm precision for country borders (meter or kilometer might be sufficient). ",
    "url": "/docs/overlay_polygon-(intersect).html#conditions",
    
    "relUrl": "/docs/overlay_polygon-(intersect).html#conditions"
  },"2139": {
    "doc": "overlay_polygon-(intersect)",
    "title": "since version",
    "content": "7.042 . ",
    "url": "/docs/overlay_polygon-(intersect).html#since-version",
    
    "relUrl": "/docs/overlay_polygon-(intersect).html#since-version"
  },"2140": {
    "doc": "overlay_polygon-(intersect)",
    "title": "example",
    "content": "unit&lt;uint32&gt; intersect := overlay_polygon(Building/geometry, District/geometry); . ",
    "url": "/docs/overlay_polygon-(intersect).html#example",
    
    "relUrl": "/docs/overlay_polygon-(intersect).html#example"
  },"2141": {
    "doc": "overlay_polygon-(intersect)",
    "title": "overlay_polygon-(intersect)",
    "content": "geometric-functions overlay_polygon . ",
    "url": "/docs/overlay_polygon-(intersect).html",
    
    "relUrl": "/docs/overlay_polygon-(intersect).html"
  },"2142": {
    "doc": "parallel-processing-and-gpu-acceleration",
    "title": "MultiThreading libraries",
    "content": ". | Parallel Patterns Library (PPL): http://msdn.microsoft.com/en-us/library/dd492418.aspx | Intel’s Threading Building Blocks (TBB): http://msdn.microsoft.com/en-us/library/dd492418.aspx | . The GeoDms now uses PPL for the implementation of the following two GeoDms options . | MT1, which enables the parallel (multi-threaded) processing of tiles of the same item. | MT2 (experimental), which enables then parellel processing of multiple items. | . Both can be enabled or disabled from the Tools-&gt;Options dialog under the General Settings tab. These settings are stored in a user/machine specific registry and affect both the geodms-gui GUI as the geodmsrun. MT1 requires data items to be partitioned into multiple tile. Both options require more memory resources of the system than serial processing and, especially with a Win32 process, this can lead to memory allocation failures which are not always handled smoothly. Work in progres is to support a mechanism that allows for MT1 to allocate all required resources at the start of a tile task (and reuse those resources for the next tasl in queue for that thread) or wait if those resources cannot be made available. For MT2 this doesn’t seem feasible but some mechanism must be implemented to stall or at least not start threads when their task tend to exhaust memory resources, especially waiting for a swap-out operation should not cause the threading mechanism to fire new threads, as it occasionally does. ",
    "url": "/docs/parallel-processing-and-gpu-acceleration.html#multithreading-libraries",
    
    "relUrl": "/docs/parallel-processing-and-gpu-acceleration.html#multithreading-libraries"
  },"2143": {
    "doc": "parallel-processing-and-gpu-acceleration",
    "title": "GPU Hardware acceleration",
    "content": ". | Windows GDI has been used to implement the first version of poly2grid. Disadvantage is that all (potentially hardware accelerated) operations are done on Device Dependent Bitmaps, of which the bit-depth is uncertain, see Mantis issue 276 on the GDI poly2grid function failure on Citrix with a virtual video driver from Novell due to limited (16) bit-depth of their DDB’s. | CUDA, see http://en.wikipedia.org/wiki/CUDA and http://www.drdobbs.com/parallel/introduction-to-cuda-cc/240143066: Nice, but depending on NVIDIA Graphics Hardware. | OpenCL, see http://en.wikipedia.org/wiki/OpenCL: | DirectCL | C++ Accelerated Massive Parallelism (AMP) | AMP is depreciated since VC 2022, presumably due to other developments, such as: https://en.wikipedia.org/wiki/SYCL | HSA Bolt: http://www.drdobbs.com/parallel/heterogeneous-programming/240144126 for heterogenous platforms with load balancing. | . ",
    "url": "/docs/parallel-processing-and-gpu-acceleration.html#gpu-hardware-acceleration",
    
    "relUrl": "/docs/parallel-processing-and-gpu-acceleration.html#gpu-hardware-acceleration"
  },"2144": {
    "doc": "parallel-processing-and-gpu-acceleration",
    "title": "dedicated libraries",
    "content": ". | IPP 7.0, see http://software.intel.com/en-us/intel-ipp: used for FFT based convolution, which uses multiple cores internally. | GDAL offers an alternative for poly2grid, but this will not utilize any multi-threading or hardware acceleration. | Bolt: a C++ Template Library for HSA with functions such as bolt::amp::sort and bolt::amp::translate, see: http://twimgs.com/ddj/images/article/2012/1212/DrDobbsHeterogeneousComputing.pdf; requires MSVC 2012. | . ",
    "url": "/docs/parallel-processing-and-gpu-acceleration.html#dedicated-libraries",
    
    "relUrl": "/docs/parallel-processing-and-gpu-acceleration.html#dedicated-libraries"
  },"2145": {
    "doc": "parallel-processing-and-gpu-acceleration",
    "title": "MSVC 2012 AMP support",
    "content": ". | http://msdn.microsoft.com/en-us/library/hh265137.aspx | http://msdn.microsoft.com/en-us/library/hh388953.aspx | Tile support: http://msdn.microsoft.com/en-us/library/hh873135.aspx | . ",
    "url": "/docs/parallel-processing-and-gpu-acceleration.html#msvc-2012-amp-support",
    
    "relUrl": "/docs/parallel-processing-and-gpu-acceleration.html#msvc-2012-amp-support"
  },"2146": {
    "doc": "parallel-processing-and-gpu-acceleration",
    "title": "parallel-processing-and-gpu-acceleration",
    "content": "Investigate, describe and compare: . ",
    "url": "/docs/parallel-processing-and-gpu-acceleration.html",
    
    "relUrl": "/docs/parallel-processing-and-gpu-acceleration.html"
  },"2147": {
    "doc": "parameter",
    "title": "syntax",
    "content": ". | Start with the keyword: parameter | Configure between the less than (&lt;) and greater than (&gt;) characters, it’s values-unit. | Next configure the name of the parameter. | The parameter value is often configured as expression (see first example) but also other property can be configured (see second example). | To finalize the definition of an item, configure a semicolon (;) character. | . ",
    "url": "/docs/parameter.html#syntax",
    
    "relUrl": "/docs/parameter.html#syntax"
  },"2148": {
    "doc": "parameter",
    "title": "example",
    "content": "parameter&lt;periods&gt; nrPeriods  := 4; parameter&lt;string&gt;  RegionName := \"Europe\"; . ",
    "url": "/docs/parameter.html#example",
    
    "relUrl": "/docs/parameter.html#example"
  },"2149": {
    "doc": "parameter",
    "title": "parameter",
    "content": "Parameters are data-item referring to one value. No domain-unit needs to be configured. ",
    "url": "/docs/parameter.html",
    
    "relUrl": "/docs/parameter.html"
  },"2150": {
    "doc": "parent-item",
    "title": "parent-item",
    "content": "The GeoDMS uses a hierachical structure for tree-item-name tree-item in a configuration. The parent item of an item A is the item one level higher, of which item A is a subitem. The parent items of the parent item of A are the indirect parent items of A. The root item in a configuration has no parent item. a point (.) in the configuration refers to the direct parent item, two points (..) to the parent of the parent etc. ",
    "url": "/docs/parent-item.html",
    
    "relUrl": "/docs/parent-item.html"
  },"2151": {
    "doc": "parse_xml",
    "title": "syntax",
    "content": ". | parse_xml(string_dataitem, xml_scheme) | . ",
    "url": "/docs/parse_xml.html#syntax",
    
    "relUrl": "/docs/parse_xml.html#syntax"
  },"2152": {
    "doc": "parse_xml",
    "title": "definition",
    "content": "parse_xml(string_dataitem, xml_scheme) parses the contents of the argument string_dataitem with XML data into a set of configured attribute, based on the xml_scheme argument. ",
    "url": "/docs/parse_xml.html#definition",
    
    "relUrl": "/docs/parse_xml.html#definition"
  },"2153": {
    "doc": "parse_xml",
    "title": "applies to",
    "content": ". | data-item string_dataitem with value-type string | template xml_scheme, with xml scheme information for the string_dataitem. | . ",
    "url": "/docs/parse_xml.html#applies-to",
    
    "relUrl": "/docs/parse_xml.html#applies-to"
  },"2154": {
    "doc": "parse_xml",
    "title": "condition",
    "content": "The template used as second argument of the xml_parse function may not contain any expression. If calculations are needed, configure them outside the scope of the template. ",
    "url": "/docs/parse_xml.html#condition",
    
    "relUrl": "/docs/parse_xml.html#condition"
  },"2155": {
    "doc": "parse_xml",
    "title": "example",
    "content": "attribute&lt;string&gt; FileName(File): ['9999OPR08012016-000001.xml','9999OPR08012016-000003.xml']; attribute&lt;string&gt; XmlData(File :   StorageType = \"strfiles\" ,   StorageName = \"%SourceDataDir%/BAG\"; template scheme {    unit&lt;uint32&gt; bag_LVC_OpenbareRuimte    {       attribute&lt;string&gt; bag_LVC_identificatie;       attribute&lt;string&gt; bag_LVC_OpenbareRuimteNaam;       attribute&lt;string&gt; bag_LVC_openbareRuimteType;       unit&lt;uint32&gt; bag_LVC_gerelateerdeWoonplaats       {          attribute&lt;string&gt; bag_LVC_identificatie;       }       attribute&lt;string&gt; bag_LVC_openbareruimteStatus;       attribute&lt;string&gt; bag_LVC_aanduidingRecordInactief;       attribute&lt;string&gt; bag_LVC_aanduidingRecordCorrectie;       attribute&lt;string&gt; bag_LVC_officieel;       attribute&lt;string&gt; bag_LVC_inOnderzoek;       attribute&lt;string&gt; bagtype_begindatumTijdvakGeldigheid;       attribute&lt;string&gt; bagtype_einddatumTijdvakGeldigheid;       attribute&lt;string&gt; bagtype_documentdatum;       attribute&lt;string&gt; bagtype_documentnummer;    } } container ParsedXML := parse_xml(XmlData, scheme); unit&lt;uint32&gt; gerelateerdeWoonplaats := ParsedXML/bag_LVC_OpenbareRuimte/bag_LVC_gerelateerdeWoonplaats {    attribute&lt;string&gt;                 identificatie      := bag_LVC_identificatie;    attribute&lt;gerelateerdeWoonplaats&gt; openbareruimte_rel := value(Parent_rel, ParsedXML/bag_LVC_OpenbareRuimte);  } . This example parses two OpenbareRuimte files from the BAG into a set of attributes for GeoDMS domain units. ",
    "url": "/docs/parse_xml.html#example",
    
    "relUrl": "/docs/parse_xml.html#example"
  },"2156": {
    "doc": "parse_xml",
    "title": "parse_xml",
    "content": "file,-folder-and-read-functions parse_xml . ",
    "url": "/docs/parse_xml.html",
    
    "relUrl": "/docs/parse_xml.html"
  },"2157": {
    "doc": "partioningattribute",
    "title": "definition",
    "content": "PartioningAttribute is the fourth argument of the discrete_alloc function. PartioningAttribute is an attribute with the index-numbers of each land use type. The domain-unit of this attribute is the set of land use types. ",
    "url": "/docs/partioningattribute.html#definition",
    
    "relUrl": "/docs/partioningattribute.html#definition"
  },"2158": {
    "doc": "partioningattribute",
    "title": "applies",
    "content": ". | attribute PartioningAttribute with value type: uint8 | . ",
    "url": "/docs/partioningattribute.html#applies",
    
    "relUrl": "/docs/partioningattribute.html#applies"
  },"2159": {
    "doc": "partioningattribute",
    "title": "example",
    "content": "unit&lt;uint8&gt; lu_type: nrofrows = 3 {     attribute&lt;lu_type&gt; partioning := id(lu_type); } . ",
    "url": "/docs/partioningattribute.html#example",
    
    "relUrl": "/docs/partioningattribute.html#example"
  },"2160": {
    "doc": "partioningattribute",
    "title": "partioningattribute",
    "content": "allocation-functions, argument 4: PartioningAttribute . ",
    "url": "/docs/partioningattribute.html",
    
    "relUrl": "/docs/partioningattribute.html"
  },"2161": {
    "doc": "partioningname",
    "title": "definition",
    "content": "PartioningName is the fifth argument of the discrete_alloc function. PartioningName is an attribute that maps each partioningattribute to a relation name. The domain-unit of this attribute is the set of land use types. ",
    "url": "/docs/partioningname.html#definition",
    
    "relUrl": "/docs/partioningname.html#definition"
  },"2162": {
    "doc": "partioningname",
    "title": "applies",
    "content": ". | attribute PartioningName with value type: string. | . ",
    "url": "/docs/partioningname.html#applies",
    
    "relUrl": "/docs/partioningname.html#applies"
  },"2163": {
    "doc": "partioningname",
    "title": "example",
    "content": "unit&lt;uint8&gt; lu_type: nrofrows = 3 {     attribute&lt;string&gt; PartioningName: ['Living','Working','Nature']; } . ",
    "url": "/docs/partioningname.html#example",
    
    "relUrl": "/docs/partioningname.html#example"
  },"2164": {
    "doc": "partioningname",
    "title": "partioningname",
    "content": "allocation-functions, argument 5: PartioningName . ",
    "url": "/docs/partioningname.html",
    
    "relUrl": "/docs/partioningname.html"
  },"2165": {
    "doc": "partitioned_union_polygon-(dissolve-by-attribute)",
    "title": "syntax",
    "content": ". | partitioned_union_polygon(polygon_data_item, relation) | . ",
    "url": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html#syntax",
    
    "relUrl": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html#syntax"
  },"2166": {
    "doc": "partitioned_union_polygon-(dissolve-by-attribute)",
    "title": "description",
    "content": "partitioned_union_polygon(polygon_data_item, partioning) results in an attribute with all polygons from polygon_data_item, grouped by the argument relation. Lines between adjacent polygons within each group are removed. The domain-unit of the resulting attribute is the values-unit of the relation. In other GIS software the term dissolve is often used for this operation. ",
    "url": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html#description",
    
    "relUrl": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html#description"
  },"2167": {
    "doc": "partitioned_union_polygon-(dissolve-by-attribute)",
    "title": "applies to",
    "content": ". | attribute polygon_data_item with an ipoint or spoint value-type | relation with a value type of the group CanBeDomainUnit | . ",
    "url": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html#applies-to",
    
    "relUrl": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html#applies-to"
  },"2168": {
    "doc": "partitioned_union_polygon-(dissolve-by-attribute)",
    "title": "conditions",
    "content": ". | The composition of the polygon_data_item item needs to be polygon. | The domain unit of the polygon_data_item item must be of value type uint32. | The domain unit of arguments polygon_data_item and relation must match. | The order of points in the polygon_data_item needs to be clockwise for exterior bounds and counter clockwise for holes in polygons (right-hand-rule). | . This function result in problems for (integer) coordinates larger than 2^25 (after translation where the first point is moved to (0, 0)). If your integer coordinates for instance represent mm, 2^25[mm] = about 33[km]. The reason is that for calculating intersections, products of coordinates are calculated and casted to float64 with a 53 bits mantissa (in the development/test environment of boost::polygon these were float80 values with a 64 bits mantissa). We advise to keep the size of your integer coordinates for polygons limited and for instance do not use a mm precision for country borders (meter or kilometer might be sufficient). ",
    "url": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html#conditions",
    
    "relUrl": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html#conditions"
  },"2169": {
    "doc": "partitioned_union_polygon-(dissolve-by-attribute)",
    "title": "since version",
    "content": "7.042 . ",
    "url": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html#since-version",
    
    "relUrl": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html#since-version"
  },"2170": {
    "doc": "partitioned_union_polygon-(dissolve-by-attribute)",
    "title": "example",
    "content": "attribute&lt;ipoint&gt; geometry (polygon, region): = partitioned_union_polygon(ipolygon(district/geometry), region_rel); . ",
    "url": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html#example",
    
    "relUrl": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html#example"
  },"2171": {
    "doc": "partitioned_union_polygon-(dissolve-by-attribute)",
    "title": "see also",
    "content": ". | union_polygon-(dissolve) | . ",
    "url": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html#see-also",
    
    "relUrl": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html#see-also"
  },"2172": {
    "doc": "partitioned_union_polygon-(dissolve-by-attribute)",
    "title": "partitioned_union_polygon-(dissolve-by-attribute)",
    "content": "geometric-functions partitioned_union_polygon (dissolve by attribute) . ",
    "url": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html",
    
    "relUrl": "/docs/partitioned_union_polygon-(dissolve-by-attribute).html"
  },"2173": {
    "doc": "partitioning",
    "title": "partitioning",
    "content": "A partioning is defined as an attribute with the index-numbers of another domain-unit. In the context of a relational database, the partioning can be compared to a foreign key containing the index numbers of the related domain. For possible value-type, see group: CanBeDomainUnit. A partition is a synonym for a relation. ",
    "url": "/docs/partitioning.html",
    
    "relUrl": "/docs/partitioning.html"
  },"2174": {
    "doc": "patronen-van-groepen",
    "title": "introductie",
    "content": "Kaarten zijn een nuttig instrument om inzicht te krijgen in de ruimtelijke verdeling van doelgroepen. Wij hebben een methode ontwikkeld om met behulp van patronen een helder en gedetailleerd beeld te krijgen van deze verdeling. De methode wordt o.a. gebruikt in de WoonZorgwijzer en in veel demografische kaarten die we maken. Deze pagina beschrijft het hoe en waarom van deze methode. ",
    "url": "/docs/patronen-van-groepen.html#introductie",
    
    "relUrl": "/docs/patronen-van-groepen.html#introductie"
  },"2175": {
    "doc": "patronen-van-groepen",
    "title": "fysiek versus sociaal domein",
    "content": "Kaarten worden traditioneel veel gebruikt in het fysieke domein om objecten weer te geven, zie bijvoorbeeld: . 300px BAG panden en percelen uit de BRK . Objecten hebben meestal een vaste locatie (denk aan gebouwen, percelen etc.). Het vastleggen van de exacte ligging is vaak belangrijk, bijvoorbeeld omdat ze een eigendomssituatie beschrijven. In het sociale domein draait het niet om objecten, maar om subjecten (personen). Belangrijke verschillen tussen objecten en subjecten bij het maken van kaarten zijn: . | Subjecten hebben geen vaste locatie. Ze hebben vaak wel een woonadres, maar verplaatsen zich ook naar bijvoorbeeld school, werk, winkel etc. Het concept van een leefomgeving past beter bij een subject dan één specifieke locatie. | Subjecten hebben het recht op privacy. Het adres van een persoon is een persoonsgegeven dat in Nederland door de AVG beschermd wordt en niet zomaar met een ieder gedeeld kan worden. | . Subjecten op een specifieke locatie op een kaart zetten (zoals objecten) is vanwege verschil 1 minder logisch en vanwege verschil 2 ook meestal ongewenst. Een extra nadeel is dat er vaak meer personen in een huis/appartementsgebouw wonen. Het weergeven hiervan op hun locatie, resulteert in veel overlap en niet in een helder beeld van het voorkomen van bepaalde groepen. ",
    "url": "/docs/patronen-van-groepen.html#fysiek-versus-sociaal-domein",
    
    "relUrl": "/docs/patronen-van-groepen.html#fysiek-versus-sociaal-domein"
  },"2176": {
    "doc": "patronen-van-groepen",
    "title": "administratieve grenzen",
    "content": "Een veel gebruikte oplossing voor de hierboven geschetste issues met subjecten is om gebruik te maken van (administratieve) indelingen. Informatie over personen wordt geaggregeerd naar postcodegebieden, buurten, wijken, gemeentes etc. Op het gebiedsniveau worden kaarten gemaakt zoals in het volgende voorbeeld: . |300px aantal inwoners per CBS buurt in de gemeente Leiden . Het werken met administratieve indelingen heeft een aantal voordelen: . | Het levert een eenvoudig te begrijpen kaartbeeld op | Je kunt data eenvoudig uitwisselen en combineren met andere bronnen | . Helaas kennen deze visualisaties ook een aantal nadelen: . | gebiedsindeling: de gebiedsindeling kan het beeld sterk beïnvloeden, zeker als de data niet homogeen verspreid is over een gebied. Of een verpleeghuis net aan de ene of aan de andere kant van een buurtgrens ligt, zal het beeld van de spreiding van 75 plussers op buurtniveau sterk kunnen beïnvloeden | kleine gebieden: als de indeling veel kleine gebieden betreft (denk aan PC6 gebieden) dan zal je voor doelgroepen vaak te weinig waarnemingen hebben in een gebied om, rekening houdend met privacy overwegingen, resultaten voor deze gebieden te tonen. Dat levert kaarten op met veel missing data. | grote gebieden: als de indeling grotere gebieden betreft (denk aan wijken/gemeentes), is het risico op missing data kleiner, maar is de kans groter op uitmiddelen. Eén wijk kan bijvoorbeeld bestaan uit hoogbouw en een groot buitengebied, in een andere wijk heb je een veel homogenere spreiding van bebouwing. Het aantal inwoners kan dan vergelijkbaar zijn, maar de spreiding binnen de wijk varieert wel sterk. | omvang van de gebieden: om administratieve gebieden voor doelgroep analyses vergelijkbaar te maken, wordt er vaak voor gekozen de omvang van gebieden in termen van aantal inwoners ongeveer gelijk te houden. Dat betekent dat gebieden in de binnenstad (waar veel mensen dichtbij elkaar wonen) vaak in oppervlakte veel kleiner zijn dan gebieden in het buitengebied. Op een kaart overheersen daardoor vaak de buitengebieden, terwijl veel sociale problematiek zich juist in de kwa oppervlakte kleine gebieden in de binnenstad afspeelt. | geen relatie met ‘buurtconcept’ van de bewoner: voor een individuele bewoner is het idee over zijn buurt meestal de eigen woning met een gebied eromheen, waarin hij zich vaak begeeft. Voorzieningen liggen in de buurt als ze voor de bewoner in zijn ‘buurtconcept’ liggen, niet als ze in een administratief vastgelegde buurt liggen. De meeste bewoners zullen vaak niet eens weten waar administratieve buurt- en wijkengrenzen liggen. | . Om deze problemen te ondervangen en patronen te laten zien van doelgroepen, onafhankelijk van administratieve indelingen (die voor andere doelen bepaald zijn), hebben we een alternatieve visualisatie techniek ontwikkeld . ",
    "url": "/docs/patronen-van-groepen.html#administratieve-grenzen",
    
    "relUrl": "/docs/patronen-van-groepen.html#administratieve-grenzen"
  },"2177": {
    "doc": "patronen-van-groepen",
    "title": "patronen",
    "content": "Voor het maken van patroonkaarten gebruiken we brondata op adres of pc6 niveau zijn. Deze data zal in het proces verwerkt worden van een persoonsgegeven tot een gebiedsgegeven (niet meer herleidbaar naar een individueel persoon). Omdat de brondata dus wel persoonsgegevens betreft, is het belangrijk dat voor de verwerking hiervoor wordt voldaan aan de AVG, zie ons privacy protocol. De volgende stappen worden doorlopen om tot patroonkaarten te komen: . 1) Het maken van een Herkomst/bestemmingsmatrix en het aggregeren naar nabije locaties . [](File:Pc4topc4.png \"wikilink\") . Op het schaalniveau waarop data wordt aangeleverd, maken we een herkomst/bestemmingsmatrix, waarin we de afstanden berekenen van iedere herkomst adres/postcode naar alle andere bestemming adressen/postcodes tot aan bijvoorbeeld 100 of 300 meter. Dit resulteert voor iedere herkomst locatie in een set van bestemming locaties die ‘in de buurt’ liggen. Per herkomst locatie tellen we nu het aantal personen op de locatie zelf en van de set bestemmingslocaties die ‘in de buurt’ liggen (eventueel met een gewicht dat afneemt als de afstanden groter worden). Net als bij de administratieve indelingen, aggregeren we dus aantallen naar een buurtconcept. Het verschil met de administratieve indeling is dat de buurt in deze methodiek verschilt per herkomst locatie. Een buurt in deze methodiek bestaat hier uit alle andere locaties op een afstand van bijvoorbeeld 100 of 300 meter vanaf de herkomst locatie. Geografisch overlappen deze buurten, je kunt de totalen niet zomaar bij elkaar optellen. 300px . Met dit buurt concept, implementeren we het idee van de woonomgeving. Personen bewegen zich in een omgeving, waarbij de kans dat je je in of nabij je je huis begeeft, groter is dan verder weg van je huis. Belangrijk hierbij is ook hoe je het begrip verder weg operationaliseert. Stel dat je aan de rand van een kanaal woont, dan kan de afstand hemelsbreed naar de overkant van het kanaal beperkt zijn, maar als je het kanaal niet kan oversteken zal dit een minder belangrijk onderdeel uitmaken van je woonomgeving. Daarom operationaliseren het begrip ver weg door te kijken naar feitelijke loopafstanden en berekenen we afstanden in de herkomst/bestemmingsmatrix over de weg. Het resultaat van deze aggregatie bewerking is een maat voor het voorkomen van doelgroepen op een locatie en in zijn feitelijke nabijheid. Dit resultaat is, mits de aantallen locaties in de buurt groot genoeg zijn, niet meer herleidbaar naar individuele personen. Voor de WoonZorgwijzer zijn de resultaten van het model op postcode6 niveau berekend en met een herkomst/bestemmingsmatrix (maximale afstand van 300 meter) conform deze methodiek geaggregeerd (ook wel uitgesmeerd genoemd). Het resultaat is door het CBS op privacy getoetst en akkoord bevonden om te gebruiken in openbare websites. 2) het vertalen van uitgesmeerde resultaten naar een ruimtelijk patroon . 2.1 koppeling aan BAG panden . Het resultaat van stap 1 vertalen we naar een ruimtelijk patroon met behulp van de BAG. | Als de brondata op adresniveau beschikbaar is, koppelen we deze m.b.v. postcode en huisnummer aan nummeraanduidingen in de BAG. Via de nummeraanduiding wordt een relatie gelegd met een BAG verblijfsobject en vervolgens geaggregeerd naar het BAG pand waar de verblijfsobject in gelegen zijn. | Als de brondata op pc6 niveau beschikbaar is, koppelen we deze aan de nummeraanduidingen in de BAG met deze postcode. Net als bij het adresniveau aggregeren we deze waarden via het verblijfsobject naar het BAG pand niveau. | . Hiermee wordt het resultaat van stap 1 gekoppeld is aan panden uit de BAG, zie bijvoorbeeld de verdeling van hen het aantal verwachte personen met een somatische aandoening (bron: WoonZorgwijzer): . 400px|border verdeling van het aantal verwachte personen met een somatische aandoening geprojecteerd m.b.v. de BAG pand geometrie, gerelateerd via postcode. Deze weergave op pand niveau geeft, zeker als je verder uitzoomt, geen helder beeld van de verdeling van de doelgroepen. Daarvoor bewerken we deze data in de volgende stappen tot schaal afhankelijke patroonkaarten. 2.2 van BAG panden naar gridcellen . De pand geometrieën vertalen we naar kleine gridcellen (voor de WoonZorgwijzer gebruiken we cellen van 5 * 5 meter, in lokale toepassingen inmiddels ook 2 * 2 meter), zie de volgende figuur: . 400px|border pand geometrie vertaald naar 5 * 5 meter cellen met de verdeling zoals bij 2.1 . 2.3 uitsmeren van BAG panden tot een gebiedspatroon . Vanuit deze kleine gridcellen bereken we nu een gebiedspatroon, gebruik makend van een vorm van ruimtelijke interpolatie. In de GeoDMS maken we hiervoor gebruik van de potential functie. Deze bewerking is gerelateerd aan het begrip dat in de GIS wereld heatmap wordt genoemd. Zie de figuur voor een voorbeeld van het resultaat: . 400px|border patroon voor een groter gebied gebaseerd op kleine cellen op basis van pand geometrieën . De resulterende patronen aggregeren we ook naar grids met grotere cellen (voor de WoonZorgwijzer 10 * 10 en 20 * 20 meter), bedoeld voor visualisaties in uitgezoomde kaarten. 2.4 uitfilteren kleine gebieden en infrastructuur . In de laatste stap filteren we . | kleine outliers uit de kaarten, vaak het resultaat van afrondingen. | infrastructuur elementen zoals water en hoofdwegen. Deze filtering is schaal afhankelijk. Uitgezoomd worden alleen grotere wateren uit de kaarten gefilterd, verder ingezoomd ook kleinere wateren, hoofdwegen e.d. Deze filtering voeren we uit omdat het niet logisch is om iets te zeggen over de verdeling van doelgroepen in bijvoorbeeld een meer of op een snelweg. Bijkomend voordeel is dat door deze filtering de referentie van kaarten beter wordt. Infrastructuur elementen zijn in het snel zien voor de ruimtelijke interpretatie. Door deze uit de gridkaarten te halen, worden ze via de gebruikte achtergrondlagen in de visualisatie beter zichtbaar (vaak zelfs met labels), zie het volgende figuur: | . 400px|border resulterende schaalafhankelijke patronen, waarin outliers en infrastructuur elementen zijn uitgefilterd . Het resultaat van de stappen 1 en 2.1 t/m 2.4 is een set van schaalafhankelijke gridkaarten. Deze visualisaties nemen veel van de nadelen van de administratieve indelingen weg: . 1) Omdat er geen gebruik gemaakt wordt van een vaste administratieve indeling, kan zo’n indeling ook niet het beeld bepalen. Het ruimtelijk patroon wordt volledig bepaald door het patroon in de data. 2) Als een doelgroep relatief weinig voorkomt, kan in stap 1 eenvoudig de afstandsmaat vergoot worden, om toch voldoende locaties te hebben om het niet herleidbaar zijn naar personen te genereren. Deze methodiek is geschikt voor een heldere visualisatie van de ruimtelijke verdeling van doelgroepen (dus waar komen bepaalde groepen relatief veel voor). De methode is minder geschikt voor het bepalen of uitwisselen van aantallen, omdat daarvoor een duidelijke gebiedsafbakening noodzakelijk is. ",
    "url": "/docs/patronen-van-groepen.html#patronen",
    
    "relUrl": "/docs/patronen-van-groepen.html#patronen"
  },"2178": {
    "doc": "patronen-van-groepen",
    "title": "patronen-van-groepen",
    "content": " ",
    "url": "/docs/patronen-van-groepen.html",
    
    "relUrl": "/docs/patronen-van-groepen.html"
  },"2179": {
    "doc": "pbf-(osm)",
    "title": "Read",
    "content": "Since GeoDMS version 7408, gdal.vect can be used to read geopackages. example . container osm : StorageName = \"%projdir%/data/flevoland-latest.osm.pbf\" , StorageType = \"gdal.vect\" , StorageReadOnly = \"True\" , SyncMode = \"AllTables\" { } . This configures a .pbf file. The SyncMode property indicates all tables are read from the .pbf file. All tables become domain units and parent items for all attributes. These attributes can be configured explicitly or are read with a default value type. options . The following example shows how to configure an open option to allow for in memory filesize of 500MB instead of the default 100MB, following the OSM driver. unit&lt;uint32&gt; optionSet := range(uint32, 0, 1); attribute&lt;string&gt; GDAL_Options (optionSet) : ['MAX_TMPFILE_SIZE=500']; . ",
    "url": "/docs/pbf-(osm).html#read",
    
    "relUrl": "/docs/pbf-(osm).html#read"
  },"2180": {
    "doc": "pbf-(osm)",
    "title": "pbf-(osm)",
    "content": "The pbf format is used for OSM data. The GeoDMS supports reading pbf data. See open options for a full list of all open gdal-options for .pbf data. ",
    "url": "/docs/pbf-(osm).html",
    
    "relUrl": "/docs/pbf-(osm).html"
  },"2181": {
    "doc": "pcount",
    "title": "syntax",
    "content": ". | pcount(a) | | pcount_uint(8 | 16 | 32)(a) | . | . ",
    "url": "/docs/pcount.html#syntax",
    
    "relUrl": "/docs/pcount.html#syntax"
  },"2182": {
    "doc": "pcount",
    "title": "definition",
    "content": ". | pcount(a) is defined as the uint32 count of the number of entries of a relation in the related domain-unit, so pcount(a) is a synonym for count(a, a). | | pcount_uint(8 | 16 | 32)(a) is the pcount variant resulting in uint8, uint16 and uint32 data-item | . | . ",
    "url": "/docs/pcount.html#definition",
    
    "relUrl": "/docs/pcount.html#definition"
  },"2183": {
    "doc": "pcount",
    "title": "applies to",
    "content": ". | attribute a with uint2, uint4, uint8, uint16, uint32, spoint, ipoint or bool value-type | . ",
    "url": "/docs/pcount.html#applies-to",
    
    "relUrl": "/docs/pcount.html#applies-to"
  },"2184": {
    "doc": "pcount",
    "title": "example",
    "content": "attribute&lt;uint32&gt; pcountReg (Region) := pcount(City/Region_rel); . | City/Region_rel | . | 0 | . | 1 | . | 2 | . | 1 | . | 3 | . | null | . | 3 | . domain City, nr of rows = 7 . | pcountReg | . | 1 | . | 2 | . | 1 | . | 2 | . | 0 | . domain Region, nr of rows = 5 . ",
    "url": "/docs/pcount.html#example",
    
    "relUrl": "/docs/pcount.html#example"
  },"2185": {
    "doc": "pcount",
    "title": "see also",
    "content": ". | count | . ",
    "url": "/docs/pcount.html#see-also",
    
    "relUrl": "/docs/pcount.html#see-also"
  },"2186": {
    "doc": "pcount",
    "title": "pcount",
    "content": "aggregation-functions pcount . ",
    "url": "/docs/pcount.html",
    
    "relUrl": "/docs/pcount.html"
  },"2187": {
    "doc": "performance-tests",
    "title": "performance-tests",
    "content": "recent-developments: Performance Tests . Each GeoDMS version published on our website passed our regression test, testing the operators (both in tiled/untiled variants) and the storage managers on small datasets. | Since version 7.168 performance tests are added showing how the GeoDMS behaves on large data sets/calculation processes. | Since version 7.229 a CalcCache test is added to test if results stored are stored in the CalcCache and are re-used. | Since version 7.234 tests are added on actions performed in the geodms-gui. | . For specific projects tests are and can be added, informing the user for a test item: . | whether the GeoDMS version results in the same output, | the duration to calculate this item. | . ",
    "url": "/docs/performance-tests.html",
    
    "relUrl": "/docs/performance-tests.html"
  },"2188": {
    "doc": "persistent",
    "title": "definition",
    "content": "Persistent means calculation results, stored as files in the CalcCache, are available for re-use also after closing the application and restarting a new session. The opposite of persistent is session-specific. ",
    "url": "/docs/persistent.html#definition",
    
    "relUrl": "/docs/persistent.html#definition"
  },"2189": {
    "doc": "persistent",
    "title": "persistent",
    "content": " ",
    "url": "/docs/persistent.html",
    
    "relUrl": "/docs/persistent.html"
  },"2190": {
    "doc": "pi",
    "title": "syntax",
    "content": ". | pi() | . ",
    "url": "/docs/pi.html#syntax",
    
    "relUrl": "/docs/pi.html#syntax"
  },"2191": {
    "doc": "pi",
    "title": "definition",
    "content": "pi() results in a float64 value: pi (3.14159…). ",
    "url": "/docs/pi.html#definition",
    
    "relUrl": "/docs/pi.html#definition"
  },"2192": {
    "doc": "pi",
    "title": "applies to",
    "content": "data-item with float64 value-type . ",
    "url": "/docs/pi.html#applies-to",
    
    "relUrl": "/docs/pi.html#applies-to"
  },"2193": {
    "doc": "pi",
    "title": "example",
    "content": "parameter&lt;float64&gt; paramPi := pi(); . result: paramPi = 3.14159… . ",
    "url": "/docs/pi.html#example",
    
    "relUrl": "/docs/pi.html#example"
  },"2194": {
    "doc": "pi",
    "title": "pi",
    "content": "constant-functions pi . ",
    "url": "/docs/pi.html",
    
    "relUrl": "/docs/pi.html"
  },"2195": {
    "doc": "planned-developments",
    "title": "see also",
    "content": ". | under-study | http://www.mantis.objectvision.nl/view_all_bug_page.php en selecteer op Assigned To=IdeaBox | . ",
    "url": "/docs/planned-developments.html#see-also",
    
    "relUrl": "/docs/planned-developments.html#see-also"
  },"2196": {
    "doc": "planned-developments",
    "title": "planned-developments",
    "content": "This section describes the planned developments in the GeoDMS software: . | polygon-and-arcs | metadata-(url-property)-in-external-browser | imgui new GUI | . ",
    "url": "/docs/planned-developments.html",
    
    "relUrl": "/docs/planned-developments.html"
  },"2197": {
    "doc": "point-2-grid",
    "title": "since version 7.015",
    "content": "Since GeoDMS 7.015 a relation to a grid-domain can be configured easily with the value function (example), based on a point attribute of a vector domain-unit. The resulting attribute will contain the index-numbers of the related grid domain for the vector domain. example . // coordinate system  unit&lt;fpoint&gt; rdc_base : format = \"EPSG:28992\", unit&lt;fpoint&gt; rdc      := range(rdc_base, point(300000f,0f), point(625000f,280000f)); // configuration of grid domain, related to the rdc unit&lt;spoint&gt; griddomain := range(       gridset(rdc, point(-100f, 100f, rdc), point(625000f, 10000f, rdc) ,'spoint')      ,point(   0s,    0s)      ,point(3250s, 2700s) ); // configuration of vector domain, with a point attribute in rdc coordinates unit&lt;uint32&gt; vectordomain: nrofrows = 4 { attribute&lt;rdc&gt; point: [{20427,69272},{17502,95885},{3188,80531},{12620,112190}]; } attribute&lt;griddomain&gt; grid_7015_and_later_rel (vectordomain) := vectordomain/point[griddomain]; . A grid and vector domain_unit are configured, both with rdc as coordinate unit. In the bold line the actual relation is configured. The value functions works as the coordinates used are expressed in the same coordinates (in this case rdc). The value function can also be applied to calculate coordinate transformations, if the format strings of the coordinate systems are known. These strings need to be configured in the format property of these base units for the how-to-configure-a-coordinate-system. ",
    "url": "/docs/point-2-grid.html#since-version-7015",
    
    "relUrl": "/docs/point-2-grid.html#since-version-7015"
  },"2198": {
    "doc": "point-2-grid",
    "title": "before version 7.015",
    "content": "Before GeoDMS version 7.015 such a relation needed to be configured with the getprojectionfactor and getprojectionoffset functions to relate a point attribute in world coordinates to a grid domain. example . // coordinate system, grid and vector domain are similar  parameter&lt;rdc&gt; projOffset := GetProjectionOffset (griddomain); // Result: [{625000, 10000)] parameter&lt;rdc&gt; projFactor := GetProjectionFactor (griddomain); // Result: [(-100.0, 100.0)] attribute&lt;griddomain&gt; grid_before_7015_rel (vectordomain) := value((vectordomain/point - projOffset) / projFactor, griddomain); . In the bold line the actual relation is configured. The projOffset and projFactor are used to relate the points in the rdc coordinates to the griddomain. ",
    "url": "/docs/point-2-grid.html#before-version-7015",
    
    "relUrl": "/docs/point-2-grid.html#before-version-7015"
  },"2199": {
    "doc": "point-2-grid",
    "title": "backward incompability",
    "content": "To make your configuration working both in versions before and after 7.015, you need to configure an expression in which the geodmsversion function is used to determine the running GeoDMS version. example . attribute&lt;griddomain&gt; grid_rel (vectordomain) := = GeoDMSVersion() &gt; 7.015    ? 'vectordomain/point[rdc]'    : 'value((vectordomain/point - projOffset) / projFactor, griddomain\")'; . The expression in the example with the double == is an indirect-expression. Based on the GeoDMSVersion the grid_rel is calculated in a different way. ",
    "url": "/docs/point-2-grid.html#backward-incompability",
    
    "relUrl": "/docs/point-2-grid.html#backward-incompability"
  },"2200": {
    "doc": "point-2-grid",
    "title": "point-2-grid",
    "content": "configuration-examples Point 2 Grid . ",
    "url": "/docs/point-2-grid.html",
    
    "relUrl": "/docs/point-2-grid.html"
  },"2201": {
    "doc": "point-features-from-xml-gml-files",
    "title": "point-features-from-xml-gml-files",
    "content": "This example shows how point data can be read and processed from a GML data source. The example reads and processes verblijfsobject geometries from the BAG. container vbo { attribute&lt;string&gt; FileName(File): ['9999VBO08012016-000001.xml','9999VBO008012016-000003.xml']; attribute&lt;String&gt; XmlData (File) : StorageType = \"strfiles\" , StorageName = \"%SourceDataDir%/BAG\"; container ParsedXML := parse_xml(XmlData, scheme); unit&lt;uint32&gt; vbo := ParsedXML/bag_LVC_Verblijfsobject { attribute&lt;string&gt; gml_pos := ParsedXML/bag_LVC_Verblijfsobject/gml_pos; attribute&lt;float64&gt; x := ReadElems(gml_pos, float64, const(0,.)) { attribute&lt;uint32&gt; ReadPos (vbo); // explict configuration of ReadPos item // is necessary to find vbo unit } attribute&lt;float64&gt; y := ReadElems(gml_pos, float64, x/ReadPos) { attribute&lt;uint32&gt; ReadPos (vbo); } attribute&lt;rdc_mm&gt; geometry_mm := point(round(y * 1000.0), round(x * 1000.0), rdc_mm); template scheme { unit&lt;uint32&gt; bag_LVC_Verblijfsobject { attribute&lt;string&gt; bag_LVC_identificatie; attribute&lt;string&gt; gml_pos; } } } } . ",
    "url": "/docs/point-features-from-xml-gml-files.html",
    
    "relUrl": "/docs/point-features-from-xml-gml-files.html"
  },"2202": {
    "doc": "point-function",
    "title": "syntax",
    "content": ". | point(column, row, pointunit) | . ",
    "url": "/docs/point-function.html#syntax",
    
    "relUrl": "/docs/point-function.html#syntax"
  },"2203": {
    "doc": "point-function",
    "title": "definition",
    "content": "point(column, row, pointunit) results in a two-dimensional point data-item. The coordinates are derived from the one-dimensional column and row data items. The third argument is the resulting point values-unit. ",
    "url": "/docs/point-function.html#definition",
    
    "relUrl": "/docs/point-function.html#definition"
  },"2204": {
    "doc": "point-function",
    "title": "description",
    "content": "The default order of column, row can be overruled in the config.ini with the rule: . ConfigPointColRow=1 . If this setting is configured, the order in all point functions of the configuration becomes row, column. This row, column order is more common in graphs and geographic coordinate systems. ",
    "url": "/docs/point-function.html#description",
    
    "relUrl": "/docs/point-function.html#description"
  },"2205": {
    "doc": "point-function",
    "title": "applies to",
    "content": ". | column and row data-item with (u)int16, (u)int32, float32 or float64 value-type | pointunit with wpoint, spoint, upoint, ipoint, fpoint or dpoint value type | . ",
    "url": "/docs/point-function.html#applies-to",
    
    "relUrl": "/docs/point-function.html#applies-to"
  },"2206": {
    "doc": "point-function",
    "title": "conditions",
    "content": ". | The value type of the column and row data items must match with each other and with the pointunit: . | uint16 data items for wpoint unit; | int16 data items for spoint units; | uint32 data items for upoint units; | int32 data items for ipoint units; | float32 data items for fpoint units; | float64 data items for dpoint units. | . | The domain-unit of the column, row and resulting data items must match. | . ",
    "url": "/docs/point-function.html#conditions",
    
    "relUrl": "/docs/point-function.html#conditions"
  },"2207": {
    "doc": "point-function",
    "title": "since version",
    "content": "5.15 . ",
    "url": "/docs/point-function.html#since-version",
    
    "relUrl": "/docs/point-function.html#since-version"
  },"2208": {
    "doc": "point-function",
    "title": "example",
    "content": "attribute&lt;fpoint&gt; pointXY (ADomain) := point(Ycoord, Xcoord, fpoint); . | Ycoord | Xcoord | pointXY | . | 401331 | 115135 | {401331, 115135} | . | 399476 | 111803 | {399476, 111803} | . | 399289 | 114903 | {399289, 114903} | . | 401729 | 111353 | {401729, 111353} | . | 398696 | 111741 | {398696, 111741} | . ADomain, nr of rows = 5 . ",
    "url": "/docs/point-function.html#example",
    
    "relUrl": "/docs/point-function.html#example"
  },"2209": {
    "doc": "point-function",
    "title": "point-function",
    "content": "geometric-functions point function . ",
    "url": "/docs/point-function.html",
    
    "relUrl": "/docs/point-function.html"
  },"2210": {
    "doc": "point-order-in-polygons",
    "title": "rules",
    "content": "The following rules apply to the sequence of points in a polygon: . | outer rings need to be configured clock wise | inner rings (lakes) are configured counter clock wise | the first and the last point need to have the same coordinate | . If the sequence of points is configured manually and used in the sequence2points, always configure the correct sequence, although for the map and functions like point_in_polygon an incorrect sequence might not matter. ",
    "url": "/docs/point-order-in-polygons.html#rules",
    
    "relUrl": "/docs/point-order-in-polygons.html#rules"
  },"2211": {
    "doc": "point-order-in-polygons",
    "title": "validation",
    "content": "A way to test if the correct sequence is configured is by requesting the area of the polygon with the area function. A positive value indicates a correct sequence, a negative value indicates the points are configured in the incorrect sequence . ",
    "url": "/docs/point-order-in-polygons.html#validation",
    
    "relUrl": "/docs/point-order-in-polygons.html#validation"
  },"2212": {
    "doc": "point-order-in-polygons",
    "title": "point-order-in-polygons",
    "content": "For some operators-and-functions (like union_polygon-(dissolve)) the sequence order of points in a polygon matters. ",
    "url": "/docs/point-order-in-polygons.html",
    
    "relUrl": "/docs/point-order-in-polygons.html"
  },"2213": {
    "doc": "point-visualisation",
    "title": "available visualisation-style subitem for point data",
    "content": "parameter&lt;uint32&gt;  SymbolColor      := rgb(255,0,0)  , DialogType = \"SymbolColor\"; parameter&lt;float32&gt; SymbolSize       := 8f            , DialogType = \"SymbolSize\"; parameter&lt;meter&gt;   SymbolWorldSize  := 10[meter]     , DialogType = \"SymbolWorldSize\"; parameter&lt;string&gt;  SymbolFont       := 'GeoDMS Font' , DialogType = \"SymbolFont\"; parameter&lt;int16&gt;   SymbolIndex      := 35s           , DialogType = \"SymbolIndex\"; . Description: . | SymbolColor: a data-item with value-type uint32 and as expression a (set) of rgb values. | SymbolSize: a data item with value type float32 and as expression a (set) of values indicating the symbol character size in pixels. | SymbolWorldSize: a data item with the same values unit as the values unit of the unit for the how-to-configure-a-coordinate-system. The SymbolWorldSize specifies a size in e.g. meters, which is dependent on the zoom level in the map view. With this property a zoom dependent size can be configured. | symbolfont: a data item with [value type] string and as expression the font to be used. The GeoDMS Font, named in the example, is a font that is installed with a GeoDMS application. It contains different symbols to be used for point data in the map view. See your Windows reference for more information on how to use fonts. The GeoDMS font is the default value for this visualisation style. | SymbolIndex: a data item with value type int16 and an expression that indicates the character symbol in the font. | . ",
    "url": "/docs/point-visualisation.html#available-visualisation-style-subitem-for-point-data",
    
    "relUrl": "/docs/point-visualisation.html#available-visualisation-style-subitem-for-point-data"
  },"2214": {
    "doc": "point-visualisation",
    "title": "point-visualisation",
    "content": " ",
    "url": "/docs/point-visualisation.html",
    
    "relUrl": "/docs/point-visualisation.html"
  },"2215": {
    "doc": "point",
    "title": "vector data",
    "content": ". The feature-attribute of point vector-data always refers to one coordinate for each element in the domain-unit. Vector point data is often read from a esri-shapefile or geopackage. X and Y attribute can also easily be read as numeric attributes from a data-source and combined with a point-function to a feature-attribute, as in the next example. unit&lt;uint32&gt; residence :  StorageName = \"=System/DbName\" ,  SqlString = \"SELECT * FROM Residences ORDER BY id\" {    attribute&lt;coord_rd&gt; x;    attribute&lt;coord_rd&gt; y;    attribute&lt;point_rd&gt; geometry := point(x, y, point_rd); } . The x and y attributes are read from the data source with as values unit coord_rd. The geometry data-item combines both x and y coordinate with the point function to create a two dimensional data item of coordinates. The values-unit of this geometry attribute is point_rd, defining the coordinate system. Subitems of the location item can be configured to define multiple visualisation-style. ",
    "url": "/docs/point.html#vector-data",
    
    "relUrl": "/docs/point.html#vector-data"
  },"2216": {
    "doc": "point",
    "title": "grid data",
    "content": "As the nature of grid-domain is two-dimensional, the identification of a grid cell in a Grid Domain is also two-dimensional. ",
    "url": "/docs/point.html#grid-data",
    
    "relUrl": "/docs/point.html#grid-data"
  },"2217": {
    "doc": "point",
    "title": "see also",
    "content": ". | arc | polygon | vector-data | grid-data | . ",
    "url": "/docs/point.html#see-also",
    
    "relUrl": "/docs/point.html#see-also"
  },"2218": {
    "doc": "point",
    "title": "point",
    "content": ". | point data-item are data items with a two-dimensional value-type (PointGroup) and a single coordinate for each entry. | point-function is a function creating point data items. | . The next topics on this page describe the point data item. The point function is described on the point-function page. In the GeoDMS point data items are used for: . ",
    "url": "/docs/point.html",
    
    "relUrl": "/docs/point.html"
  },"2219": {
    "doc": "point_in_all_polygons",
    "title": "syntax",
    "content": ". | point_in_all_polygons(point_data_item, polygon_data_item) | . ",
    "url": "/docs/point_in_all_polygons.html#syntax",
    
    "relUrl": "/docs/point_in_all_polygons.html#syntax"
  },"2220": {
    "doc": "point_in_all_polygons",
    "title": "definition",
    "content": "point_in_all_polygons(point_data_item, polygon_data_item) results in a new uint32 domain-unit with two subitems: first_rel and second_rel. These subitems indicate which point is located in which polygons, as a point can be located in multiple polygons and a polygon can container multiple points, this is an n to n relation. The first_rel item contains the relation to the point_data_item. The second_rel item contains the relation to the polygon_data_item. ",
    "url": "/docs/point_in_all_polygons.html#definition",
    
    "relUrl": "/docs/point_in_all_polygons.html#definition"
  },"2221": {
    "doc": "point_in_all_polygons",
    "title": "applies to",
    "content": ". | a data-item point_data_item with Point value-type | a data item polygon_data_item with composition polygon and Point value type | . ",
    "url": "/docs/point_in_all_polygons.html#applies-to",
    
    "relUrl": "/docs/point_in_all_polygons.html#applies-to"
  },"2222": {
    "doc": "point_in_all_polygons",
    "title": "since version",
    "content": "8.035 . ",
    "url": "/docs/point_in_all_polygons.html#since-version",
    
    "relUrl": "/docs/point_in_all_polygons.html#since-version"
  },"2223": {
    "doc": "point_in_all_polygons",
    "title": "example",
    "content": "unit&lt;uint32&gt; district_relations := point_in_all_polygons(Pointdomain/point, district/geometry); . | first_rel | second_rel | . | 0 | 0 | . | 1 | 1 | . | 2 | 0 | . | 2 | 1 | . | Pointdomain/id | Pointdomain/label | Pointdomain/point | . | 0 | A | {401331, 115135} | . | 1 | B | {399476, 111803} | . | 2 | C | {399289, 114903} | . |   |   |   | . domain Pointdomain, nr of rows = 3 . | District/id | District/geometry | . | 0 | {21:{403025, 113810},{4 | . | 1 | {17:{400990, 113269},{4 | . |   |   | . domain District, nr of rows = 2 . ",
    "url": "/docs/point_in_all_polygons.html#example",
    
    "relUrl": "/docs/point_in_all_polygons.html#example"
  },"2224": {
    "doc": "point_in_all_polygons",
    "title": "see also",
    "content": ". | point_in_polygon | point_in_ranked_polygon | . ",
    "url": "/docs/point_in_all_polygons.html#see-also",
    
    "relUrl": "/docs/point_in_all_polygons.html#see-also"
  },"2225": {
    "doc": "point_in_all_polygons",
    "title": "point_in_all_polygons",
    "content": "geometric-functions point_in_all_polygons . ",
    "url": "/docs/point_in_all_polygons.html",
    
    "relUrl": "/docs/point_in_all_polygons.html"
  },"2226": {
    "doc": "point_in_polygon",
    "title": "syntax",
    "content": ". | point_in_polygon(point_data_item, polygon_data_item) | . ",
    "url": "/docs/point_in_polygon.html#syntax",
    
    "relUrl": "/docs/point_in_polygon.html#syntax"
  },"2227": {
    "doc": "point_in_polygon",
    "title": "definition",
    "content": "point_in_polygon(point_data_item, polygon_data_item) results for each point of the point_data_item in a relation towards the domain-unit of the polygon_data_item in which the point is located. The resulting values-unit is the domain unit of the polygon_data_item. If a point is not located in any polygon, the function results in a null value (the yellow point in the image). If a point is located in multiple polygons, the function results in the ‘first’ relation found. As the function uses a tile specific spatial index, the concept of what is first is dependent on the tile division. With the same tile division, the function is deterministic, but if the tile division is changed this can influence the results of this point_in_polygon function. If you want to explicitly configure the ranking of the polygons in these cases, use the point_in_ranked_polygon function. ",
    "url": "/docs/point_in_polygon.html#definition",
    
    "relUrl": "/docs/point_in_polygon.html#definition"
  },"2228": {
    "doc": "point_in_polygon",
    "title": "description",
    "content": "The point_in_polygon function was used in earlier versions of the GeoDMS to rasterize polygon data. Since version 6.025, it is advised to use the poly2grid function for this purpose. ",
    "url": "/docs/point_in_polygon.html#description",
    
    "relUrl": "/docs/point_in_polygon.html#description"
  },"2229": {
    "doc": "point_in_polygon",
    "title": "applies to",
    "content": ". | a data-item point_data_item with Point value-type | a data item polygon_data_item with composition type polygon and Point value type | . ",
    "url": "/docs/point_in_polygon.html#applies-to",
    
    "relUrl": "/docs/point_in_polygon.html#applies-to"
  },"2230": {
    "doc": "point_in_polygon",
    "title": "example",
    "content": "attribute&lt;district&gt; district_rel (ADomain) := point_in_polygon(Adomain/point, district/geometry); . | point | district_rel | . | {401331, 115135} | 6 | . | {399476, 111803} | 4 | . | {399289, 114903} | 1 | . | {401729, 111353} | 5 | . | {398696, 111741} | null | . ADomain, nr of rows = 5 . | District/geometry | . | {21:{403025, 113810},{4 | . | {17:{400990, 113269},{4 | . | {19:{403128, 115099},{4 | . | {23:{402174, 113703},{4 | . | {30:{401531, 114646},{4 | . | {13:{402757, 114546},{4 | . | {54:(405282, 113562},{4 | . domain District, nr of rows = 7 . ",
    "url": "/docs/point_in_polygon.html#example",
    
    "relUrl": "/docs/point_in_polygon.html#example"
  },"2231": {
    "doc": "point_in_polygon",
    "title": "see also",
    "content": ". | point_in_ranked_polygon | point_in_all_polygons | . ",
    "url": "/docs/point_in_polygon.html#see-also",
    
    "relUrl": "/docs/point_in_polygon.html#see-also"
  },"2232": {
    "doc": "point_in_polygon",
    "title": "point_in_polygon",
    "content": "geometric-functions point_in_polygon . ",
    "url": "/docs/point_in_polygon.html",
    
    "relUrl": "/docs/point_in_polygon.html"
  },"2233": {
    "doc": "point_in_ranked_polygon",
    "title": "syntax",
    "content": ". | point_in_ranked_polygon(point_data_item, polygon_data_item, rank_data_item) | . ",
    "url": "/docs/point_in_ranked_polygon.html#syntax",
    
    "relUrl": "/docs/point_in_ranked_polygon.html#syntax"
  },"2234": {
    "doc": "point_in_ranked_polygon",
    "title": "definition",
    "content": "point_in_ranked_polygon(point_data_item, polygon_data_item, rank_data_item) results for each point of the point_data_item in a relation towards the domain unit of the polygon_data_item in which the point is located. The resulting values-unit is the domain-unit of the polygon_data_item. If a point is not located in any polygon, the function results in a null value. If a point is located in multiple polygons (the red point in the image), the function results in the polygon with the lowest rank_data_item value. ",
    "url": "/docs/point_in_ranked_polygon.html#definition",
    
    "relUrl": "/docs/point_in_ranked_polygon.html#definition"
  },"2235": {
    "doc": "point_in_ranked_polygon",
    "title": "description",
    "content": "The rank_data_item argument is used to make an explicit choice for a polygon, if a point is located in multiple polygons. Therefore the rank values need to distinguish the different polygons. If a constant is used as rank value, the point_in_ranked_polygon results in the same values as the point_in_polygon function. ",
    "url": "/docs/point_in_ranked_polygon.html#description",
    
    "relUrl": "/docs/point_in_ranked_polygon.html#description"
  },"2236": {
    "doc": "point_in_ranked_polygon",
    "title": "applies to",
    "content": ". | a data-item point_data_item with Point value-type | a data item polygon_data_item with composition type polygon and Point value type | a data item rank_data_item with a uint8, (u)int32, float32 or float64 value type | . ",
    "url": "/docs/point_in_ranked_polygon.html#applies-to",
    
    "relUrl": "/docs/point_in_ranked_polygon.html#applies-to"
  },"2237": {
    "doc": "point_in_ranked_polygon",
    "title": "since version",
    "content": "8.036 . ",
    "url": "/docs/point_in_ranked_polygon.html#since-version",
    
    "relUrl": "/docs/point_in_ranked_polygon.html#since-version"
  },"2238": {
    "doc": "point_in_ranked_polygon",
    "title": "example",
    "content": "attribute&lt;city&gt; city_rel (ADomain) := point_in_ranked_polygon(Adomain/point, city/geometry, city/rank); . | point | city_rel | . | {401331, 115135} | 3 | . | {399476, 111803} | 2 | . | {399289, 114903} | 1 | . | {401729, 111353} | 5 | . | {398696, 111741} | null | . ADomain, nr of rows = 5 . | City/geometry | City/rank | . | {21:{403025, 113810},{4 | 2 | . | {17:{400990, 113269},{4 | 1 | . | {19:{403128, 115099},{4 | 7 | . | {23:{402174, 113703},{4 | 4 | . | {30:{401531, 114646},{4 | 6 | . | {13:{402757, 114546},{4 | 5 | . | {54:(405282, 113562},{4 | 3 | . domain City, nr of rows = 7 . ",
    "url": "/docs/point_in_ranked_polygon.html#example",
    
    "relUrl": "/docs/point_in_ranked_polygon.html#example"
  },"2239": {
    "doc": "point_in_ranked_polygon",
    "title": "see also",
    "content": ". | point_in_polygon | point_in_all_polygons | . ",
    "url": "/docs/point_in_ranked_polygon.html#see-also",
    
    "relUrl": "/docs/point_in_ranked_polygon.html#see-also"
  },"2240": {
    "doc": "point_in_ranked_polygon",
    "title": "point_in_ranked_polygon",
    "content": "geometric-functions point_in_ranked_polygon . ",
    "url": "/docs/point_in_ranked_polygon.html",
    
    "relUrl": "/docs/point_in_ranked_polygon.html"
  },"2241": {
    "doc": "point_isnearby",
    "title": "syntax",
    "content": ". | point_isNearby(a, b, margin) | . ",
    "url": "/docs/point_isnearby.html#syntax",
    
    "relUrl": "/docs/point_isnearby.html#syntax"
  },"2242": {
    "doc": "point_isnearby",
    "title": "definition",
    "content": "point_isNearby(a, b, margin) results in a boolean data item indicating if the values of point data-item a are within the margin margin of the corresponding values of data item b. ",
    "url": "/docs/point_isnearby.html#definition",
    
    "relUrl": "/docs/point_isnearby.html#definition"
  },"2243": {
    "doc": "point_isnearby",
    "title": "description",
    "content": "With floating point data values, due to round offs, it can be useful to compare results and accept a margin in which the comparison still results in a True value. Use the point_isNearby function in stead of the eq function for point data in these cases. The comparison between two missing values results in the value True. The point_isNearBy function can be used in the similar manner as the float_isnearby function. ",
    "url": "/docs/point_isnearby.html#description",
    
    "relUrl": "/docs/point_isnearby.html#description"
  },"2244": {
    "doc": "point_isnearby",
    "title": "applies to",
    "content": "Data items a, b, margin with fpoint/dpoint value type . ",
    "url": "/docs/point_isnearby.html#applies-to",
    
    "relUrl": "/docs/point_isnearby.html#applies-to"
  },"2245": {
    "doc": "point_isnearby",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be compared to data items of any domain). | argument must have matching: . | value-type | . | . ",
    "url": "/docs/point_isnearby.html#conditions",
    
    "relUrl": "/docs/point_isnearby.html#conditions"
  },"2246": {
    "doc": "point_isnearby",
    "title": "see also",
    "content": ". | float_isnearby | . ",
    "url": "/docs/point_isnearby.html#see-also",
    
    "relUrl": "/docs/point_isnearby.html#see-also"
  },"2247": {
    "doc": "point_isnearby",
    "title": "point_isnearby",
    "content": "geometric-functions point_is_NearBy . ",
    "url": "/docs/point_isnearby.html",
    
    "relUrl": "/docs/point_isnearby.html"
  },"2248": {
    "doc": "pointcol",
    "title": "syntax",
    "content": ". | PointCol(point data item) | . ",
    "url": "/docs/pointcol.html#syntax",
    
    "relUrl": "/docs/pointcol.html#syntax"
  },"2249": {
    "doc": "pointcol",
    "title": "definition",
    "content": "PointCol(point data item) results in a data-item with the column numbers of the point data item point data item. Be aware, the result is depending on the xy-order. ",
    "url": "/docs/pointcol.html#definition",
    
    "relUrl": "/docs/pointcol.html#definition"
  },"2250": {
    "doc": "pointcol",
    "title": "applies to",
    "content": "data item point data item with a Point value-type . ",
    "url": "/docs/pointcol.html#applies-to",
    
    "relUrl": "/docs/pointcol.html#applies-to"
  },"2251": {
    "doc": "pointcol",
    "title": "example",
    "content": "attribute&lt;float32&gt; PointColXY (ADomain) := PointCol(pointXY); . | pointXY | PointColXY | . | {401331, 115135} | 115135 | . | {399476, 111803} | 111803 | . | {399289, 114903} | 114903 | . | {401729, 111353} | 111353 | . | {398696, 111741} | 111741 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/pointcol.html#example",
    
    "relUrl": "/docs/pointcol.html#example"
  },"2252": {
    "doc": "pointcol",
    "title": "see also",
    "content": ". | pointrow | . ",
    "url": "/docs/pointcol.html#see-also",
    
    "relUrl": "/docs/pointcol.html#see-also"
  },"2253": {
    "doc": "pointcol",
    "title": "pointcol",
    "content": "geometric-functions PointCol . ",
    "url": "/docs/pointcol.html",
    
    "relUrl": "/docs/pointcol.html"
  },"2254": {
    "doc": "pointrow",
    "title": "syntax",
    "content": ". | PointRow(point data item) | . ",
    "url": "/docs/pointrow.html#syntax",
    
    "relUrl": "/docs/pointrow.html#syntax"
  },"2255": {
    "doc": "pointrow",
    "title": "definition",
    "content": "PointRow(point data item) results in a data-item with the row numbers of the point data item point data item. Be aware, the result is depending on the xy-order. ",
    "url": "/docs/pointrow.html#definition",
    
    "relUrl": "/docs/pointrow.html#definition"
  },"2256": {
    "doc": "pointrow",
    "title": "applies to",
    "content": "data item point data item with a Point value-type . ",
    "url": "/docs/pointrow.html#applies-to",
    
    "relUrl": "/docs/pointrow.html#applies-to"
  },"2257": {
    "doc": "pointrow",
    "title": "example",
    "content": "attribute&lt;float32&gt; PointRowXY (ADomain) := PointRow(pointXY); . | pointXY | PointRowXY | . | {401331, 115135} | 401331 | . | {399476, 111803} | 399476 | . | {399289, 114903} | 399289 | . | {401729, 111353} | 401729 | . | {398696, 111741} | 398696 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/pointrow.html#example",
    
    "relUrl": "/docs/pointrow.html#example"
  },"2258": {
    "doc": "pointrow",
    "title": "see also",
    "content": ". | pointcol | . ",
    "url": "/docs/pointrow.html#see-also",
    
    "relUrl": "/docs/pointrow.html#see-also"
  },"2259": {
    "doc": "pointrow",
    "title": "pointrow",
    "content": "geometric-functions PointRow . ",
    "url": "/docs/pointrow.html",
    
    "relUrl": "/docs/pointrow.html"
  },"2260": {
    "doc": "points2sequence",
    "title": "syntax",
    "content": ". | points2sequence(point) | points2sequence(point, SequenceNr) | points2sequence(point, SequenceNr, ordinal) | points2sequence_p(point) | points2sequence_ps(point, SequenceNr) | points2sequence_pso(point, SequenceNr, ordinal) | points2sequence_po(point, ordinal) | . | points2polygon(point) | points2polygon(point, SequenceNr) | points2polygon(point, SequenceNr, ordinal) | points2polygon_p(point) | points2polygon_ps(point, SequenceNr) | points2polygon_pso(point, SequenceNr, ordinal) | points2polygon_po(point, ordinal) | . ",
    "url": "/docs/points2sequence.html#syntax",
    
    "relUrl": "/docs/points2sequence.html#syntax"
  },"2261": {
    "doc": "points2sequence",
    "title": "definition",
    "content": ". | points2sequence(point, SequenceNr, ordinal) and its variants result in a point attribute with composition arc or polygon. | points2polygon(point, SequenceNr, ordinal) and its variants result in a new point attribute with composition type polygon: | . Both function groups are used to make arc / polygon, based on a data-item with points, a relation from the point towards the domain-unit of the resulting arcs/polygons and a data item indicating the order of the points in the resulting arcs/polygons. They both have the following argument: . | point = a data item with the points for the resulting arcs/polygons. | SequenceNr = an optional relation towards the domain unit of the resulting arcs/polygons. If no SequenceNr is configured, the resulting data item with arc/polygons is a parameter. | ordinal = an optional data item with the order of each point in the resulting arcs/polygons. If no ordinal is specified, the configuration order is used. | . ",
    "url": "/docs/points2sequence.html#definition",
    
    "relUrl": "/docs/points2sequence.html#definition"
  },"2262": {
    "doc": "points2sequence",
    "title": "applies to",
    "content": ". | data item point with a point value type | data item SequenceNr with as values-unit the domain unit of the resulting arcs/polygons. | data item ordinal with uint32 value type | . ",
    "url": "/docs/points2sequence.html#applies-to",
    
    "relUrl": "/docs/points2sequence.html#applies-to"
  },"2263": {
    "doc": "points2sequence",
    "title": "conditions",
    "content": "The domain units of all arguments must match. ",
    "url": "/docs/points2sequence.html#conditions",
    
    "relUrl": "/docs/points2sequence.html#conditions"
  },"2264": {
    "doc": "points2sequence",
    "title": "since version",
    "content": "5.15; variants available since 7.033 . ",
    "url": "/docs/points2sequence.html#since-version",
    
    "relUrl": "/docs/points2sequence.html#since-version"
  },"2265": {
    "doc": "points2sequence",
    "title": "example",
    "content": "attribute&lt;fpoint&gt; geometry (road, arc) := points2sequence(point, SequenceNr, ordinal); . | point | SequenceNr | Ordinal | . | {399246, 112631} | 0 | 0 | . | {398599, 111866} | 0 | 1 | . | {398599, 111866} | 1 | 0 | . | {399495, 111924} | 1 | 1 | . | {401801, 111524} | 1 | 2 | . | {401529, 114921} | 2 | 0 | . | {398584, 114823} | 2 | 1 | . domain RoadPointSet, nr of rows = 7 . | geometry | . | {2 {399246, 112631}{398599, 111866}} | . | {3 {398599, 111866}{399495, 111924} {401801,111524}} | . | {2 {401529, 114921}{398584, 114823}} | . domain Road, nr of rows = 3 . ",
    "url": "/docs/points2sequence.html#example",
    
    "relUrl": "/docs/points2sequence.html#example"
  },"2266": {
    "doc": "points2sequence",
    "title": "see also",
    "content": ". | sequence2points | . ",
    "url": "/docs/points2sequence.html#see-also",
    
    "relUrl": "/docs/points2sequence.html#see-also"
  },"2267": {
    "doc": "points2sequence",
    "title": "points2sequence",
    "content": "geometric-functions points2sequence . ",
    "url": "/docs/points2sequence.html",
    
    "relUrl": "/docs/points2sequence.html"
  },"2268": {
    "doc": "poly2grid",
    "title": "syntax",
    "content": ". | poly2grid(polygon_data_item, gridunit) | . ",
    "url": "/docs/poly2grid.html#syntax",
    
    "relUrl": "/docs/poly2grid.html#syntax"
  },"2269": {
    "doc": "poly2grid",
    "title": "definition",
    "content": "The poly2grid function results in grid data-item with a relation to the domain-unit of the polygon_data_item . The resulting data item has: . | as values-unit the domain-unit of the polygon_data_item argument | as domain-unit the gridunit argument | . ",
    "url": "/docs/poly2grid.html#definition",
    
    "relUrl": "/docs/poly2grid.html#definition"
  },"2270": {
    "doc": "poly2grid",
    "title": "description",
    "content": "Since 7.020 the poly2grid function is based on a similar function in GDAL. The explicit gdal_poly2grid function with the same signature is a synonym for the poly2grid function since 7.020. Between the versions 6.025 and 7.020, the poly2grid function used a GDI function to convert data items of polygon domains to grid domains. This function is still available as gdi_poly2grid, with the same signature as poly2grid. The function is faster than the new function based on GDAL, but can result in invalid results on some graphic devices supporting a limited set of colors. In versions before 6.025 the point_in_polygon function was used for this purpose. This is still possible, but it is advised to use the poly2grid function instead as it is much faster. In earlier versions, a third argument was used, the subPixelFactor. A higher value meant more accurate results, but also more processing time. From version 7.020 on, with the implementation of the GDAL function, a value of one for this subPixelfactor already results in accurate results. This third argument has become obsolete. ",
    "url": "/docs/poly2grid.html#description",
    
    "relUrl": "/docs/poly2grid.html#description"
  },"2271": {
    "doc": "poly2grid",
    "title": "applies to",
    "content": ". | data item polygon_data_item with a wpoint, spoint, upoint, ipoint, fpoint or dpoint value-type | unit gridunit with a wpoint, spoint upoint, ipoint, fpoint, dpoint value type | . ",
    "url": "/docs/poly2grid.html#applies-to",
    
    "relUrl": "/docs/poly2grid.html#applies-to"
  },"2272": {
    "doc": "poly2grid",
    "title": "conditions",
    "content": ". | The composition type of the polygon_data_item needs to be polygon. | The domain-unit of the polygon_data_item must be of value type uint32. | . ",
    "url": "/docs/poly2grid.html#conditions",
    
    "relUrl": "/docs/poly2grid.html#conditions"
  },"2273": {
    "doc": "poly2grid",
    "title": "complexity",
    "content": "The complexity of the poly2grid function for one polygon is O(n* log(n) + x), with: . | n: number of points of the polygon. | x: number of pixels to be drawn. | . This implies the number of points per polygon is an important factor in the calculation speed of the function. Simplifying polygons can help to improve the calculation speed. See geometric-functions for simplify functions in the GeoDMS. ",
    "url": "/docs/poly2grid.html#complexity",
    
    "relUrl": "/docs/poly2grid.html#complexity"
  },"2274": {
    "doc": "poly2grid",
    "title": "since version",
    "content": "6.025 . ",
    "url": "/docs/poly2grid.html#since-version",
    
    "relUrl": "/docs/poly2grid.html#since-version"
  },"2275": {
    "doc": "poly2grid",
    "title": "example",
    "content": "attribute&lt;source/district&gt; DistrictGrid (gridunit/gridcel_10m) := poly2grid(Source/District/border, gridunit/gridcel_10m); . ",
    "url": "/docs/poly2grid.html#example",
    
    "relUrl": "/docs/poly2grid.html#example"
  },"2276": {
    "doc": "poly2grid",
    "title": "see also",
    "content": ". | example polygon-to-grid | poly2grid_untiled | . ",
    "url": "/docs/poly2grid.html#see-also",
    
    "relUrl": "/docs/poly2grid.html#see-also"
  },"2277": {
    "doc": "poly2grid",
    "title": "poly2grid",
    "content": "geometric-functions poly2grid . ",
    "url": "/docs/poly2grid.html",
    
    "relUrl": "/docs/poly2grid.html"
  },"2278": {
    "doc": "poly2grid_untiled",
    "title": "syntax",
    "content": ". | poly2grid_untiled(polygon_data_item, gridunit) | . ",
    "url": "/docs/poly2grid_untiled.html#syntax",
    
    "relUrl": "/docs/poly2grid_untiled.html#syntax"
  },"2279": {
    "doc": "poly2grid_untiled",
    "title": "definition",
    "content": "The poly2grid_untiled function results in grid data-item with a relation to the domain-unit of the polygon_data_item . The resulting data item has: . | as domain-unit the gridunit argument | as values-unit the domain-unit of the polygon_data_item argument | . ",
    "url": "/docs/poly2grid_untiled.html#definition",
    
    "relUrl": "/docs/poly2grid_untiled.html#definition"
  },"2280": {
    "doc": "poly2grid_untiled",
    "title": "description",
    "content": "This function is the same as poly2grid but writes singly threaded on a single mutable shadow tile that is then split into separate tiles after rendering all polygons. Compared to poly2grid, this poly2grid_untiled function will: . | take longer to calculate (as it doesn’t process tiles in parallel), | use more memory (to store the intermediate mutable shadow tile), | but uses less CPU time (as polygons preparation is not repeated for each tile with which their bounding box intersects), | the results are independent of the actual tiling (which could not be always true for poly2grid as the conversion to a tile-local coordinate system might cause tiling-dependent flip-cases). | . ",
    "url": "/docs/poly2grid_untiled.html#description",
    
    "relUrl": "/docs/poly2grid_untiled.html#description"
  },"2281": {
    "doc": "poly2grid_untiled",
    "title": "applies to",
    "content": ". | data item polygon_data_item with a wpoint, spoint, upoint, ipoint, fpoint or dpoint value-type | unit gridunit with a wpoint, spoint upoint, ipoint, fpoint, dpoint value type | . ",
    "url": "/docs/poly2grid_untiled.html#applies-to",
    
    "relUrl": "/docs/poly2grid_untiled.html#applies-to"
  },"2282": {
    "doc": "poly2grid_untiled",
    "title": "conditions",
    "content": ". | The composition type of the polygon_data_item needs to be polygon. | The domain-unit of the polygon_data_item must be of value type uint32. | . ",
    "url": "/docs/poly2grid_untiled.html#conditions",
    
    "relUrl": "/docs/poly2grid_untiled.html#conditions"
  },"2283": {
    "doc": "poly2grid_untiled",
    "title": "since version",
    "content": "8.7.0 . ",
    "url": "/docs/poly2grid_untiled.html#since-version",
    
    "relUrl": "/docs/poly2grid_untiled.html#since-version"
  },"2284": {
    "doc": "poly2grid_untiled",
    "title": "example",
    "content": "attribute&lt;source/district&gt; DistrictGrid (gridunit/gridcel_10m) := poly2grid_untiled(Source/District/border, gridunit/gridcel_10m); . ",
    "url": "/docs/poly2grid_untiled.html#example",
    
    "relUrl": "/docs/poly2grid_untiled.html#example"
  },"2285": {
    "doc": "poly2grid_untiled",
    "title": "see also",
    "content": ". | poly2grid | . ",
    "url": "/docs/poly2grid_untiled.html#see-also",
    
    "relUrl": "/docs/poly2grid_untiled.html#see-also"
  },"2286": {
    "doc": "poly2grid_untiled",
    "title": "poly2grid_untiled",
    "content": "geometric-functions poly2grid_untiled . ",
    "url": "/docs/poly2grid_untiled.html",
    
    "relUrl": "/docs/poly2grid_untiled.html"
  },"2287": {
    "doc": "polygon-and-arcs",
    "title": "polygon-and-arcs",
    "content": "planned-developments: Polygon and Arcs . More and more the GeoDMS is also used to work with vector-data. We are planning to: . | improve the performance of geometric-functions, see Mantis issue 1208. | . Some preliminary test results: . | use polygon_d16D and not polygon_deflated_d16D | I’ve added some tests. polygon_i4HV(geometry_mm, 200.0) takes 5 minutes, polygon_i4HV(geometry_mm, 2550d) takes long. A bit more testing might clarify the effect of the scale parameter for i4HV, d4HV and d16HV. However, this is not likely to pointer a resolution of this issue. | . Plan/workaround: . - filter out big objects as being irrelevant . - test intersection with convolved copies of polygons. Check that lakes are properly inflated. links: . - http://masc.cs.gmu.edu/wiki/ReducedConvolution . - http://masc.cs.gmu.edu/wiki/uploads/ReducedConvolution/iros11-mksum2d.pdf . | add more functions to work with arc, for instance buffering. | improve the rendering of vector-data. | . ",
    "url": "/docs/polygon-and-arcs.html",
    
    "relUrl": "/docs/polygon-and-arcs.html"
  },"2288": {
    "doc": "polygon-convolution",
    "title": "polygon-convolution",
    "content": "Polygon convolution is the convolution of mappings of F2 → Bool, that are represented by polygons that indicate the boundary of the closed subset(s) of F2 that are mapped onto TRUE; were addition is replaced by the or operation. The convolution operator is here represented as * and has type (F2→Bool) × (F2→Bool) → (F2→Bool). For_each q ∈ F2 and Ma, Mb ∈ F2 → Bool: . (Ma*Mb)q := ⋁p ∈ F2 : Ma(p) ∧ Mb(q−p) . Further let Pi := δM**i*, it seems that *δ*(*M**a***M**b*) = *δMa * Mb* ∧ *M**a* * *δM**b similar to the diffential of the product of two functions. See also: Boost Polygon’s minkowski tutorial . ",
    "url": "/docs/polygon-convolution.html",
    
    "relUrl": "/docs/polygon-convolution.html"
  },"2289": {
    "doc": "polygon-deflated",
    "title": "syntax",
    "content": ". | polygon_dXd(polygon_data_item, deflatesize) | polygon_dXhv(polygon_data_item, deflatesize) | . ",
    "url": "/docs/polygon-deflated.html#syntax",
    
    "relUrl": "/docs/polygon-deflated.html#syntax"
  },"2290": {
    "doc": "polygon-deflated",
    "title": "description",
    "content": "The polygon_iXX functions result in deflated versions of an original polygon_data_item. There are different ways of deflating polygons related to how angles are treated. Multiple functions are implemented, the figure shows 4 of these functions. See the differences in how the angles are rounded off. The degree of roundness is obtained by increasing the value 4 to 16. The suffix ‘d’ or ‘hv’ is used for the kernel; diagonal (diamond shaped) or horizontal-vertical (square shaped). For these deflations the Minkowski sum method is used. The deflatesize parameter indicates with how many units in the coordinate system used the original polygon is deflated. ",
    "url": "/docs/polygon-deflated.html#description",
    
    "relUrl": "/docs/polygon-deflated.html#description"
  },"2291": {
    "doc": "polygon-deflated",
    "title": "applies to",
    "content": ". | attribute polygon_data_item and with an ipoint or spoint value-type. | parameter deflatesize with float64 value type. | . ",
    "url": "/docs/polygon-deflated.html#applies-to",
    
    "relUrl": "/docs/polygon-deflated.html#applies-to"
  },"2292": {
    "doc": "polygon-deflated",
    "title": "conditions",
    "content": ". | The composition type of the polygon_data_item needs to be polygon. | The order of the points in the polygon_data_item needs to be clockwise for exterior bounds and counter clockwise for holes in polygons (right-hand-rule). | The current implementation of these functions request coordinate values to be less than 67.108.864. Convert detailed coordinates (e.g. in mm) to cm/dm if your coordinate values exceed this number. | . These functions result in problems for (integer) coordinates larger than 2^25 (after translation where the first point is moved to (0, 0)). If your integer coordinates for instance represent mm, 2^25[mm] = about 33[km]. The reason is that for calculating intersections, products of coordinates are calculated and casted to float64 with a 53 bits mantissa (in the development/test environment of boost::polygon these were float80 values with a 64 bits mantissa). We advise to keep the size of your integer coordinates for polygons limited and for instance do not use a mm precision for country borders (meter or kilometer might be sufficient). ",
    "url": "/docs/polygon-deflated.html#conditions",
    
    "relUrl": "/docs/polygon-deflated.html#conditions"
  },"2293": {
    "doc": "polygon-deflated",
    "title": "since version",
    "content": "7.042 . ",
    "url": "/docs/polygon-deflated.html#since-version",
    
    "relUrl": "/docs/polygon-deflated.html#since-version"
  },"2294": {
    "doc": "polygon-deflated",
    "title": "examples",
    "content": "attribute&lt;ipoint&gt; building_deflated_4D75 (polygon, source/bld) := polygon_d4D(bld/border, 75); // deflates building borders with 75 units in the coordinate system // angles are rounded off with 4 points per angle // deflates using a diagonal kernel (diamond shaped). attribute&lt;ipoint&gt; building_deflated_i_8D75 (polygon, source/bld) := polygon_d8D(bld/border, 75); // deflates building borders with 75 units in the coordinate system // angles are rounded off with 8 points per angle. // deflates using a diagonal kernel (diamond shaped). attribute&lt;ipoint&gt; building_deflated_i_16D75 (polygon, source/bld) := polygon_d16D(bld/border, 75); // deflates building borders with 75 units in the coordinate system // angles are rounded off with 16 points per angle. // deflates using a diagonal kernel (diamond shaped). attribute&lt;ipoint&gt; building_deflated_4HV75(polygon, source/bld) := polygon_d4HV(bld/border, 75d&gt;)&lt;/B&gt;; // deflates building borders with 75 units in the coordinate system // angles are rounded off with 4 points per angle // deflates using a horizonal-vertical kernel (square shaped). ",
    "url": "/docs/polygon-deflated.html#examples",
    
    "relUrl": "/docs/polygon-deflated.html#examples"
  },"2295": {
    "doc": "polygon-deflated",
    "title": "see also",
    "content": ". | bg_buffer_multi_polygon | polygon-inflated | . ",
    "url": "/docs/polygon-deflated.html#see-also",
    
    "relUrl": "/docs/polygon-deflated.html#see-also"
  },"2296": {
    "doc": "polygon-deflated",
    "title": "polygon-deflated",
    "content": "geometric-functions polygon deflated . ",
    "url": "/docs/polygon-deflated.html",
    
    "relUrl": "/docs/polygon-deflated.html"
  },"2297": {
    "doc": "polygon-features-from-xml-gml-files",
    "title": "GML polygon",
    "content": "This example shows how polygon data can be read and processed from a GML data source. The example reads and processes pand geometries from the BAG. We advice to put the templates in a separate configuration file. container pand { attribute&lt;string&gt; FileName(File): ['9999PND08012016-000001.xml','9999PND008012016-000003.xml']; attribute&lt;String&gt; XmlData (File) : StorageType = \"strfiles\" , StorageName = \"%SourceDataDir%/BAG\"; container ParsedXML := parse_xml(XmlData, scheme); container geoBuilder := ProcessGmlPolygon(ParsedXML/bag_LVC_pand,false); template scheme { unit&lt;uint32&gt; bag_LVC_pand { attribute&lt;string&gt; bag_LVC_identificatie; unit&lt;uint32&gt; gml_Polygon { unit&lt;uint32&gt; gml_posList { attribute&lt;string&gt; srsDimension; attribute&lt;string&gt; count; } } unit&lt;uint32&gt; gml_Interior { unit&lt;uint32&gt; gml_posList { attribute&lt;string&gt; srsDimension; attribute&lt;string&gt; count; } } } } // templates for processing polygon geometries template ProcessGmlPolygon { // begin case parameters unit&lt;uint32&gt; gmlContext; parameter&lt;bool&gt; hasMultiplePolygons; // end case parameters container impl := ProcessGmlPolygonImpl(gmlContext/gml_Polygon); parameter&lt;string&gt; geometry_expr:= hasMultiplePolygons ? 'templates/optimized_union( impl/gmlPolygon , gmlContext , impl/Polygon/result , impl/gmlPolygon/Parent_rel )' : 'templates/one2one_union( impl/gmlPolygon , gmlContext , impl/Polygon/result , impl/gmlPolygon/Parent_rel )'; container geometry := = geometry_expr; attribute&lt;rdc_mm&gt; result (gmlContext, polygon) := geometry/result; } template ProcessGmlPolygonImpl { // begin case parameters unit&lt;uint32&gt; gmlPolygon; // end case parameters container Exterior := ProcessLinearRing(gmlPolygon, true); container Interior := ProcessLinearRing(gmlPolygon/gml_Interior, false); container Polygon := ProcessPolygon( gmlPolygon, Exterior/geometry_mm, gmlPolygon/gml_Interior, Interior/geometry_mm, gmlPolygon/gml_Interior/Parent_rel ); } template ProcessLinearRing { // begin case parameters unit&lt;uint32&gt; parsedXMLsrc; parameter&lt;bool&gt; isExt; // exterior // end case parameters container impl { container posList := ProcessPosList(parsedXMLsrc/gml_posList, isExt); container union := one2one_union( parsedXMLsrc/gml_posList , parsedXMLsrc , posList/result , parsedXMLsrc/gml_posList/Parent_rel ); } attribute&lt;rdc_mm&gt; geometry_mm(poly,parsedXMLsrc) := impl/union/result; } template ProcessPosList { // begin case parameters unit&lt;uint32&gt; posList; parameter&lt;bool&gt; isExterior; // end case parameters unit&lt;uint32&gt; impl := posList { attribute&lt;string&gt; values := _ValuesTable/Values[value_rel]; attribute&lt;string&gt; str_sequence := '{'+string(uint32(count) * uint32(srsDimension)) +':'+ values +'}' , IntegrityCheck = \"srsDimension == '2' || srsDimension == '3'\"; attribute&lt;Float64&gt; f64_sequence(poly) := Float64Seq(str_sequence); unit&lt;uint32&gt; posListunit := range(uint32, 0, #posList) { attribute&lt;uint32&gt; nrCoordPerPoint := union_data(posListunit, uint32(srsDimension)); } unit&lt;uint32&gt; coordinates := sequence2points(union_data(posListunit, f64_sequence)); unit&lt;uint32&gt; p := select_with_org_rel( coordinates/ordinal % posListunit/nrCoordPerPoint[coordinates/SequenceNr] == 0 ) { attribute&lt;float64&gt; x := coordinates/point[org_rel]; attribute&lt;float64&gt; y := coordinates/point[org_rel + 1]; attribute&lt;rdc_mm&gt; p_mm := point(Round(y * 1000.0), Round(x * 1000.0), rdc_mm); attribute&lt;posListunit&gt; s := coordinates/SequenceNr[org_rel]; attribute&lt;uint32&gt; fo := coordinates/ordinal[org_rel] / posListunit/nrCoordPerPoint[s]; attribute&lt;uint32&gt; ro := pcount(s)[s]- fo - 1; } attribute&lt;rdc_mm&gt; geometry_mm (poly) := union_data( posList , points2sequence_pso( p/p_mm, p/s , isExterior ? p/ro : p/fo ) ); } attribute&lt;rdc_mm&gt; result (posList, poly) := impl/geometry_mm[rdc_mm]; } template ProcessPolygon { // begin case parameters unit&lt;uint32&gt; Exterior; attribute&lt;rdc_mm&gt; ExtGeometry(Exterior, poly); unit&lt;uint32&gt; Interior; attribute&lt;rdc_mm&gt; IntGeometry(Interior, poly); attribute&lt;Exterior&gt; Parent_rel(Interior); // end case parameters container impl { container IntUnion := optimized_union( Interior, Exterior, IntGeometry, Parent_rel ); attribute&lt;uint32&gt; count(Exterior) := pcount(parent_rel); unit&lt;uint32&gt; ExtCopy := range(Exterior, 0, #Exterior) { attribute&lt;uint32&gt; count2 := union_data(., count); } unit&lt;uint32&gt; nonTrivialExterior := select_with_org_rel(ExtCopy/count2 &gt; 0) { attribute&lt;Exterior&gt; Exterior_rel := value(org_rel, Exterior); attribute&lt;rdc_mm&gt; diff(poly) := ExtGeometry[Exterior_rel]- IntUnion/result[Exterior_rel]; attribute&lt;rdc_mm&gt; result(poly,Exterior) := impl/nonTrivialExterior/diff[ invert(impl/nonTrivialExterior/Exterior_rel) ]; } attribute&lt;rdc_mm&gt; result(poly,Exterior) := impl/count == 0 ? ExtGeometry : impl/result; attribute&lt;int32&gt; area (Exterior) := area(result, Int32); } template union { // begin case parameters unit&lt;uint32&gt; child; unit&lt;uint32&gt; parent; attribute&lt;rdc_mm&gt; geometry(child, poly); attribute&lt;parent&gt; parent_rel(child); // end case parameters attribute&lt;rdc_mm&gt; result(poly,parent) := partitioned_union_polygon(geometry, parent_rel); } template optimized_union { // begin case parameters unit&lt;uint32&gt; child; unit&lt;uint32&gt; parent; attribute&lt;rdc_mm&gt; geometry(child, poly); attribute&lt;parent&gt; parent_rel(child); // end case parameters container impl { attribute&lt;uint32&gt; count(parent) := pcount(parent_rel); unit&lt;uint32&gt; childCopy := range(child, 0, #child); unit&lt;uint32&gt; nonTrivialChild := select_with_org_rel((count != 1)[union_data(childCopy, parent_rel)]) { attribute&lt;child&gt; child_rel := value(org_rel, child); attribute&lt;rdc_mm&gt; union(poly,parent) := partitioned_union_polygon( geometry[child_rel] , parent_rel[child_rel] ); } } attribute&lt;rdc_mm&gt; result (poly,parent) := impl/count &lt;= 1 ? geometry[invert(parent_rel)] : impl/nonTrivialChild/union; attribute&lt;Int32&gt; area (parent) := area(result, Int32); } template one2one_union { // begin case parameters unit&lt;uint32&gt; child; unit&lt;uint32&gt; parent; attribute&lt;rdc_mm&gt; geometry(child, poly); attribute&lt;parent&gt; parent_rel(child); // end case parameters container impl { parameter&lt;bool&gt; Check := (#child == #parent) &amp;&amp; all(parent_rel == ID(child)); } attribute&lt;rdc_mm&gt; result(poly,parent) := union_data(parent, geometry) , IntegrityCheck = \"impl/Check\"; } . ",
    "url": "/docs/polygon-features-from-xml-gml-files.html#gml-polygon",
    
    "relUrl": "/docs/polygon-features-from-xml-gml-files.html#gml-polygon"
  },"2298": {
    "doc": "polygon-features-from-xml-gml-files",
    "title": "polygon-features-from-xml-gml-files",
    "content": " ",
    "url": "/docs/polygon-features-from-xml-gml-files.html",
    
    "relUrl": "/docs/polygon-features-from-xml-gml-files.html"
  },"2299": {
    "doc": "polygon-inflated",
    "title": "syntax",
    "content": ". | polygon_iXd(polygon_data_item, inflatesize) | polygon_iXhv(polygon_data_item, inflatesize) | . ",
    "url": "/docs/polygon-inflated.html#syntax",
    
    "relUrl": "/docs/polygon-inflated.html#syntax"
  },"2300": {
    "doc": "polygon-inflated",
    "title": "description",
    "content": "These functions result in inflated versions of an original polygon_data_item. There are different ways of inflating polygons related to how angles are treated. Multiple functions are implemented, the figure shows 4 of these functions. See the differences in how the angles are rounded off. X represents a user defined degree of roundness, which can be 4, 8 or 16. The suffix ‘d’ or ‘hv’ is used for the kernel; diagonal (diamond shaped) or horizontal-vertical (square shaped). For these inflations the Minkowski sum method is used. The inflatesize parameter indicates with how many units in the coordinate system used the original polygon is inflated. ",
    "url": "/docs/polygon-inflated.html#description",
    
    "relUrl": "/docs/polygon-inflated.html#description"
  },"2301": {
    "doc": "polygon-inflated",
    "title": "applies to",
    "content": ". | attribute polygon_data_item and with an ipoint or spoint value-type. | parameter inflatesize with float64 value type. | . ",
    "url": "/docs/polygon-inflated.html#applies-to",
    
    "relUrl": "/docs/polygon-inflated.html#applies-to"
  },"2302": {
    "doc": "polygon-inflated",
    "title": "conditions",
    "content": ". | The composition of the polygon_data_item needs to be polygon. | The order of the points in the polygon_data_item needs to be clockwise for exterior bounds and counter clockwise for holes in polygons (right-hand-rule). | The current implementation of these functions request coordinate values to be less than 67.108.864. Convert detailed coordinates (e.g. in mm) to cm/dm if your coordinate values exceed this number. | . These functions result in problems for (integer) coordinates larger than 2^25 (after translation where the first point is moved to (0, 0)). If your integer coordinates for instance represent mm, 2^25[mm] = about 33 [km]. The reason is that for calculating intersections, products of coordinates are calculated and casted to float64 with a 53 bits mantissa (in the development/test environment of boost::polygon these were float80 values with a 64 bits mantissa). We advise to keep the size of your integer coordinates for polygons limited and for instance do not use a mm precision for country borders (meter or kilometer might be sufficient). ",
    "url": "/docs/polygon-inflated.html#conditions",
    
    "relUrl": "/docs/polygon-inflated.html#conditions"
  },"2303": {
    "doc": "polygon-inflated",
    "title": "since version",
    "content": "7.042 . ",
    "url": "/docs/polygon-inflated.html#since-version",
    
    "relUrl": "/docs/polygon-inflated.html#since-version"
  },"2304": {
    "doc": "polygon-inflated",
    "title": "examples",
    "content": "attribute&lt;ipoint&gt; building_inflated_4D75 (polygon, source/bld) := polygon_i4D(bld/border, 75); // inflates building borders with 75 units in the coordinate system  // angles are rounded off with 4 points per angle // inflates using a diagonal kernel (diamond shaped). attribute&lt;ipoint&gt; building_inflated_i_8D75 (polygon, source/bld) := polygon_i8D(bld/border, 75); // inflates building borders with 75 units in the coordinate system // angles are rounded off with 8 points per angle. // inflates using a diagonal kernel (diamond shaped). attribute&lt;ipoint&gt; building_inflated_i_16D75 (polygon, source/bld) := polygon_i16D(bld/border, 75); // inflates building borders with 75 units in the coordinate system // angles are rounded off with 16 points per angle. // inflates using a diagonal kernel (diamond shaped). attribute&lt;ipoint&gt; building_inflated_4HV75 (polygon, source/bld) := polygon_i4HV(bld/border, 75d); // inflates building borders with 75 units in the coordinate system // angles are rounded off with 4 points per angle // inflates using a horizonal-vertical kernel (square shaped).&lt;/I&gt; . ",
    "url": "/docs/polygon-inflated.html#examples",
    
    "relUrl": "/docs/polygon-inflated.html#examples"
  },"2305": {
    "doc": "polygon-inflated",
    "title": "see also",
    "content": ". | bg_buffer_multi_polygon | polygon-deflated | . ",
    "url": "/docs/polygon-inflated.html#see-also",
    
    "relUrl": "/docs/polygon-inflated.html#see-also"
  },"2306": {
    "doc": "polygon-inflated",
    "title": "polygon-inflated",
    "content": "geometric-functions polygon inflated . ",
    "url": "/docs/polygon-inflated.html",
    
    "relUrl": "/docs/polygon-inflated.html"
  },"2307": {
    "doc": "polygon-processing-example",
    "title": "download",
    "content": ". | configuration/data | . ",
    "url": "/docs/polygon-processing-example.html#download",
    
    "relUrl": "/docs/polygon-processing-example.html#download"
  },"2308": {
    "doc": "polygon-processing-example",
    "title": "concepts",
    "content": ". | configuring shapes like circles, squares and triangles | polygon operations | reprojections | . ",
    "url": "/docs/polygon-processing-example.html#concepts",
    
    "relUrl": "/docs/polygon-processing-example.html#concepts"
  },"2309": {
    "doc": "polygon-processing-example",
    "title": "functions",
    "content": ". | union_polygon-(dissolve) | partitioned_union_polygon-(dissolve-by-attribute) | mul-(overlap) | sub-(difference) | polygon_connectivity | points2sequence | polygon-inflated | polygon-deflated | . ",
    "url": "/docs/polygon-processing-example.html#functions",
    
    "relUrl": "/docs/polygon-processing-example.html#functions"
  },"2310": {
    "doc": "polygon-processing-example",
    "title": "polygon-processing-example",
    "content": "configuration-examples Polygon processing . This script explores different polygon processing operations, using different shapes like circles, squares and triangles. ",
    "url": "/docs/polygon-processing-example.html",
    
    "relUrl": "/docs/polygon-processing-example.html"
  },"2311": {
    "doc": "polygon-to-grid",
    "title": "example",
    "content": "unit&lt;uint16&gt; earthquake :  StorageName     = \"%SourceDataDir%/physics/earthquakes.shp\" ,  StorageType    = \"gdal.vect\" ,  StorageReadOnly  = \"True\" {    attribute&lt;LatLong&gt; geometry (polygon); // LatLong must be the coordinate system unit    attribute&lt;int32&gt;   zone;                // HeatOption must be an attribute in the dbf file accompanying the shp file  } attribute&lt;earthquake&gt; earthquake_rel (gtopo) := poly2grid(earthquake/geometry, gtopo);  // gtopo must be the grid domain unit referring to the LatLong coordinate system unit  attribute&lt;int32&gt;      zone           (gtopo) := earthquake/zone[earthquake_rel]; . ",
    "url": "/docs/polygon-to-grid.html#example",
    
    "relUrl": "/docs/polygon-to-grid.html#example"
  },"2312": {
    "doc": "polygon-to-grid",
    "title": "polygon-to-grid",
    "content": "configuration-examples Polygon to grid . This example is used to read an attribute from a polygon esri-shapefile, make a relation from the polygons to a grid and calculate the attribute for the grid-domain. ",
    "url": "/docs/polygon-to-grid.html",
    
    "relUrl": "/docs/polygon-to-grid.html"
  },"2313": {
    "doc": "polygon-visualisation",
    "title": "description",
    "content": ". | BrushColor: a data-item with value-type uint32 and as expression a (set) of rgb values. Configure BrushColor := 4294967295 for a transparant brushcolor (the value represents the nulll value for this value type. The BrushColor attribute is also in use for grid-data. | HatchStyle: a data item with value type int16 and as expression values between 0 and 6, indicating the hatching style. The following examples show the different hatching styles: | . ",
    "url": "/docs/polygon-visualisation.html#description",
    
    "relUrl": "/docs/polygon-visualisation.html#description"
  },"2314": {
    "doc": "polygon-visualisation",
    "title": "polygon-visualisation",
    "content": "Available visualisation-style subitem for polygon data: For the outline of the polygon the same styles can be configured as for arc-visualisation). Available visualisation style subitems for the interior of the polygon: . parameter&lt;uint32&gt; BrushColor := rgb(255,0,0), DialogType = \"BrushColor\"; parameter&lt;int16&gt;  HatchStyle := 0s          , DialogType = \"HatchStyle\"; . ",
    "url": "/docs/polygon-visualisation.html",
    
    "relUrl": "/docs/polygon-visualisation.html"
  },"2315": {
    "doc": "polygon",
    "title": "data model",
    "content": "In the GeoDMS data model a polygon is a sequence of points. The order of points in a sequence needs to be clockwise for exterior bounds (islands) and counter clockwise for holes in polygons (lakes). For polygons with multiple rings (islands or holes), artificial lines are added between the rings, that are ignored when mapping the data in a mapview. But these artificial lines can effect arc oriented functions like arc_length and connect_info. We advice to configure the split_polygon function first on polygons with multiple rings and apply arc oriented functions on the result of the split polygon. ",
    "url": "/docs/polygon.html#data-model",
    
    "relUrl": "/docs/polygon.html#data-model"
  },"2316": {
    "doc": "polygon",
    "title": "example",
    "content": "The polygon example a describes a data structure where each element in a domain unit is related to one or multiple polygon geometries. In these cases two domain units are necessary (such a structure could also apply to arcs): . container administrative {    unit&lt;uint8&gt; province    :  NrofRows   = 13    ,  DialogData = \"ProvinceShapes/prvnr\"    ,  DialogType = \"Map\"    {       attribute&lt;string&gt; label:  ['Abroad','Groningen','Friesland','Drenthe','Overijssel','Gelderland','Utrecht', 'Noord-Holland','Zuid-Holland','Zeeland','Noord-Brabant','Limburg','Flevoland'];`    }    unit&lt;uint32&gt; ProvinceShape: StorageName = \"%projDir%/data/Geography/prv.dbf\"    {       attribute&lt;point_rd&gt; geometry (polygon) : StorageName = \"%projDir%/data/Geography/prv.shp\";       attribute&lt;province&gt; prvnr;    } } . The following two domain-unit are configured: . | The province unit is the domain unit of the administrative regions called provinces. The labels are configured for this domain unit as data item in the configuration. The dialogtype is set to Map and the DialogData to the prvnr relation referring to the ProvinceShapes domain unit. | The ProvinceShape domain unit describes the total set of geometries/shapes. Some provinces like Friesland consist of multiple shapes (multiple islands). Therefore the number of elements of this ProvinceShape domain is larger than the number of elements of the province domain. | . Each ProvinceShape element is related to one province. This relation, called prvnr is read from the .dbf file. The feature attribute geometry is read from an esri-shapefile and has polygon configured as composition. ",
    "url": "/docs/polygon.html#example",
    
    "relUrl": "/docs/polygon.html#example"
  },"2317": {
    "doc": "polygon",
    "title": "see also",
    "content": ". | point | arc | vector-data | grid-data | . ",
    "url": "/docs/polygon.html#see-also",
    
    "relUrl": "/docs/polygon.html#see-also"
  },"2318": {
    "doc": "polygon",
    "title": "polygon",
    "content": ". Polygon feature-attribute are attribute with a two-dimensional value-type (PointGroup) and at least three coordinates for each entry in the domain-unit. The last coordinate need to be the same as the first coordinate (closed geometry). Polygon attributes are used as feature attribute for vector-data. The points in the correct sequence define a polygon, a surface defined between a start point, one or more intermediates and an end point. The start point and end point need to be identical. Polygon attributes are often used for geography coordinates of regions, countries etc. To make the GeoDMS aware that a sequence of coordinates need to be interpreted as an polygon, this is done by configuring the composition to polygon. ",
    "url": "/docs/polygon.html",
    
    "relUrl": "/docs/polygon.html"
  },"2319": {
    "doc": "polygon_connectivity",
    "title": "syntax",
    "content": ". | polygon_connectivity(polygon_data_item) | . ",
    "url": "/docs/polygon_connectivity.html#syntax",
    
    "relUrl": "/docs/polygon_connectivity.html#syntax"
  },"2320": {
    "doc": "polygon_connectivity",
    "title": "definition",
    "content": "polygon_connectivity(polygon_data_item) results in a new uint32 domain-unit with one entry for each ‘connection’ in the polygon_data_item argument. A ‘connection’ is defined as two polygons having at least one common interior point. ",
    "url": "/docs/polygon_connectivity.html#definition",
    
    "relUrl": "/docs/polygon_connectivity.html#definition"
  },"2321": {
    "doc": "polygon_connectivity",
    "title": "description",
    "content": "The function results in an F1 and F2 attribute with relation to the domain-unit of the polygon_data_item attribute. The relations indicate which connections exists, each connection only occurs once (a connection between polygon 0 and 1 only occurs as F1: 0 and F2: 1 and not vice versa). Use the mul-(overlap) operator for polygon to calculate the overlap between connected polygons. ",
    "url": "/docs/polygon_connectivity.html#description",
    
    "relUrl": "/docs/polygon_connectivity.html#description"
  },"2322": {
    "doc": "polygon_connectivity",
    "title": "applies to",
    "content": "attribute polygon_data_item with an ipoint or spoint value-type. ",
    "url": "/docs/polygon_connectivity.html#applies-to",
    
    "relUrl": "/docs/polygon_connectivity.html#applies-to"
  },"2323": {
    "doc": "polygon_connectivity",
    "title": "conditions",
    "content": ". | The composition type of the polygon_data_item argument needs to be polygon. | The order of the points in polygon_data_item needs to be clockwise for exterior bounds and counter clockwise for holes in polygons (right-hand-rule). | . ",
    "url": "/docs/polygon_connectivity.html#conditions",
    
    "relUrl": "/docs/polygon_connectivity.html#conditions"
  },"2324": {
    "doc": "polygon_connectivity",
    "title": "since version",
    "content": "7.135 . ",
    "url": "/docs/polygon_connectivity.html#since-version",
    
    "relUrl": "/docs/polygon_connectivity.html#since-version"
  },"2325": {
    "doc": "polygon_connectivity",
    "title": "example",
    "content": "unit&lt;uint32&gt; connection := polygon_connectivity(district/geometry); . | F1 | F2 | . | 0 | 3 | . | 0 | 5 | . | 0 | 6 | . | 1 | 2 | . | 1 | 3 | . | 1 | 6 | . | 2 | 3 | . | 2 | 4 | . | 2 | 6 | . | 3 | 4 | . | 3 | 5 | . | 3 | 6 | . | 4 | 5 | . domain connection, nr of rows = 13 . ",
    "url": "/docs/polygon_connectivity.html#example",
    
    "relUrl": "/docs/polygon_connectivity.html#example"
  },"2326": {
    "doc": "polygon_connectivity",
    "title": "polygon_connectivity",
    "content": "geometric-functions polygon_connectivity . ",
    "url": "/docs/polygon_connectivity.html",
    
    "relUrl": "/docs/polygon_connectivity.html"
  },"2327": {
    "doc": "postgis",
    "title": "Database: PostgreSQL/PostGIS",
    "content": "Data can be read from PostgreSQL databases with the gdal.vect storagemanager. The PostGIS extension need to be installed to read vector data. Example: . container PostGreSQL  :  StorageName = \"PG:host='localhost' port='5432' user='dms' password='dms' dbname='geo'\"  ,  StorageType = \"gdal.vect\"  {     container administrative     {         unit&lt;uint32&gt; municipality: SqlString = \"SELECT geom, name FROM cbs.munic ORDER BY code\"         {             attribute&lt;point_rd&gt; geom (polygon);             attribute&lt;string&gt;   name;         }             } } . The database geo is configured to the container PostgresSQL. The storagename must configure the parameters: host, port, user, password and dbname. Within a subcontainer administrative, a domain-unit is configured called municipality. The attribute geom (the feature-attribute with the polygon geometry) and the name of the municipality are read from the database. In the sqlstring property the fields geom and name are selected. Their source name in the database (FROM clause) is cbs.munic in which cbs indicates the scheme name and munic the table name in the scheme. The ORDER BY clause guarantees all municipalities are always read in the same sequence (ordered by code) from the database. ",
    "url": "/docs/postgis.html#database-postgresqlpostgis",
    
    "relUrl": "/docs/postgis.html#database-postgresqlpostgis"
  },"2328": {
    "doc": "postgis",
    "title": "postgis",
    "content": " ",
    "url": "/docs/postgis.html",
    
    "relUrl": "/docs/postgis.html"
  },"2329": {
    "doc": "potential-with-kernel",
    "title": "in use for",
    "content": "Neighborhood operations are for instance used to: . | model the attractivity of a land use type in a suitability map based on the distance to for example an airport or a shopping area. a distance decay function can be used in the kernel to model the diminishing attractivity. | spread out densities of target groups, for instance inhabitants above 65 years old. They are often concentrated on a few locations (old age or nursing homes). The potential operation can be used to get a clear view of the density of an area and help to prevent in tracing back data to individual persons (often not allowed under AVG/GDPR regulations). | . ",
    "url": "/docs/potential-with-kernel.html#in-use-for",
    
    "relUrl": "/docs/potential-with-kernel.html#in-use-for"
  },"2330": {
    "doc": "potential-with-kernel",
    "title": "example",
    "content": "The example originates from a performance contest of the Spatial Analysis department of the Vrije Universiteit Amsterdam. In the contest a 1 km world wide grid and a 50 km kernel were used. container contest {       unit&lt;fpoint&gt;  WorldBaseUnit;    unit&lt;float32&gt; potential;    container Kernel    {       unit&lt;uint32&gt; Dist2Range;       unit&lt;spoint&gt; pot50km := range(spoint, point(-50s, -50s), point(51s, 51s))       {          attribute&lt;Dist2Range&gt; distMatr  := dist2(point(0s, 0s, .), Dist2Range);          attribute&lt;Potentiaal&gt; AbsWeight := distMatr &lt;= 2500 ? 1s : 0s;       }    }    container SourceData    {       unit&lt;wpoint&gt; wetlands       :   Descr           = \"Arc/Info binary grid\"       ,   StorageName     = \"%sourcedatadir%/SpaceToGo/wetlands1\"       ,   StorageType   = \"gdal.grid\"       ,   DialogData      = \"WorldBaseUnit\"       ,   StorageReadOnly = \"True\"       {           unit&lt;wpoint&gt;     World1kmGrid := TiledUnit(point(1024w, 1024w,.));           attribute&lt;uint8&gt; ReadData  (World1kmGrid);           attribute&lt;bool&gt;  IsWetLand (World1kmGrid) := ReadData == 1b;       }   }   container Result   {     attribute&lt;float32&gt; Potential50km (SourceData/wetlands/World1kmGrid) :=  potential(             float32(SourceData/wetlands/IsWetLand)            ,float32(kernel/pot50km/AbsWeight)        )      ,  StorageName = \"%LocalDataProjDir%/Potential50km_float32.tif\";    } }&lt;/B&gt; . ",
    "url": "/docs/potential-with-kernel.html#example",
    
    "relUrl": "/docs/potential-with-kernel.html#example"
  },"2331": {
    "doc": "potential-with-kernel",
    "title": "explanation",
    "content": "In the example two grid-domain are in use . | A geography grid with values from which the attribute isWetland is derived, read from an arc-info-binary-grid. The files for this grid are stored in a %SourceDataDir%/SpaceToGo folder. | A non geographic grid domain (the values are not related to a location on the earth surface), a so-called kernel, in the example named: pot50km. | . The actual potential calculations is perfomed in the bold line. Both argument are converted to float32 value-type, as this is required for the potential function. The calculated results are stored in a geotiff file called: potential50km_tiff. ",
    "url": "/docs/potential-with-kernel.html#explanation",
    
    "relUrl": "/docs/potential-with-kernel.html#explanation"
  },"2332": {
    "doc": "potential-with-kernel",
    "title": "performance",
    "content": "Using the focalsum function in ArcGIS, this example from the contest took more than 24 hours to calculate. In the GeoDMS, on a similar machine, it took a few minutes to calculate the same results with the potential function. ",
    "url": "/docs/potential-with-kernel.html#performance",
    
    "relUrl": "/docs/potential-with-kernel.html#performance"
  },"2333": {
    "doc": "potential-with-kernel",
    "title": "potential-with-kernel",
    "content": "configuration-examples Potential with Kernel . The potential function performs a neighborhood operation. It computes an output grid where the resulting value for each cell is the sum of the values of all the input cells within a specified neighborhood around that cell. This specified neighborhood is defined by the kernel (also known as distance matrix). In ArcGIS the operation is known as focalsum (part of focal statistics). Within the GeoDMS neighbourhood-potential are implemented using a convolution by Fast Fourier Transformation (FFT) algorithm. This makes potential calculations much faster than focalsum calculations, especially with large kernels. ",
    "url": "/docs/potential-with-kernel.html",
    
    "relUrl": "/docs/potential-with-kernel.html"
  },"2334": {
    "doc": "potential",
    "title": "syntax",
    "content": ". | potential(grid_data_item, kernel) | . ",
    "url": "/docs/potential.html#syntax",
    
    "relUrl": "/docs/potential.html#syntax"
  },"2335": {
    "doc": "potential",
    "title": "definition",
    "content": "potential(grid_data_item, kernel) results in a convolution of a grid_data_item and a kernel. For each cell in the grid_data_item, the values of the cell and it’s neighbourhood cells are multiplied with the corresponding values in the kernel taking that cell as the focal point in the kernel. The resulting cell value is the sum of these multiplications. The resulting value-type is float32 or float64, based on the value type of the grid_data_item. The resulting domain-unit is the domain unit of the grid_data_item attribute. Because the potential function uses a Fast Fourier Transformation, expression even with large kernels. In other GIS software this operation is also known as the focal statistics, statistic type: SUM . ",
    "url": "/docs/potential.html#definition",
    
    "relUrl": "/docs/potential.html#definition"
  },"2336": {
    "doc": "potential",
    "title": "description",
    "content": "See potential-with-kernel for more information on how to configure different kernels. ",
    "url": "/docs/potential.html#description",
    
    "relUrl": "/docs/potential.html#description"
  },"2337": {
    "doc": "potential",
    "title": "applies to",
    "content": ". | attribute grid_data_item with float32 or float64 value-type | . ",
    "url": "/docs/potential.html#applies-to",
    
    "relUrl": "/docs/potential.html#applies-to"
  },"2338": {
    "doc": "potential",
    "title": "conditions",
    "content": "The domain unit of grid_data_item must be a Point value type of the group CanBeDomainUnit. ",
    "url": "/docs/potential.html#conditions",
    
    "relUrl": "/docs/potential.html#conditions"
  },"2339": {
    "doc": "potential",
    "title": "example",
    "content": "attribute&lt;float32&gt; potgrid (GridDomain) := potential(float32(sourcegrid), pot3Range/RelWeight); . sourcegrid | | | |——:|-:|-:|-:|-:| null | 0| 0| 0| 1| 0 | 0| 2| 1| 1| 0 | 2| 3| 3| 3| 1 | 1| 1| 3| 0| 0 | 1| 0| 1| 3| . GridDomain, nr of rows = 5, nr of cols = 5 . potgrid | | | |———:|———:|———:|———:|———:| 0 | 0.18 | 0.32 | 0.50 | 0.38 | 0.18 | 0.74 | 1.26 | 1.50 | 1.03 | 0.44 | 1.18 | 1.91 | 2.06 | 1.35 | 0.56 | 1.03 | 1.62 | 1.91 | 1.41 | 0.32 | 0.47 | 0.71 | 0.97 | 0.91 | . GridDomain, nr of rows = 5, nr of cols = 5 . ",
    "url": "/docs/potential.html#example",
    
    "relUrl": "/docs/potential.html#example"
  },"2340": {
    "doc": "potential",
    "title": "potential",
    "content": "grid-functions potential . ",
    "url": "/docs/potential.html",
    
    "relUrl": "/docs/potential.html"
  },"2341": {
    "doc": "pow",
    "title": "syntax",
    "content": ". | pow(base, exp) | base^exp | . ",
    "url": "/docs/pow.html#syntax",
    
    "relUrl": "/docs/pow.html#syntax"
  },"2342": {
    "doc": "pow",
    "title": "definition",
    "content": "pow(base, exp) or base^exp results in the element-by-element exponentiation of the base values of data-item base to the corresponding exponent values of data item exp. ",
    "url": "/docs/pow.html#definition",
    
    "relUrl": "/docs/pow.html#definition"
  },"2343": {
    "doc": "pow",
    "title": "description",
    "content": "The power operator can not (yet) be used associative, expression as: a^b^c are not allowed, use (a^b)^c instead. ",
    "url": "/docs/pow.html#description",
    
    "relUrl": "/docs/pow.html#description"
  },"2344": {
    "doc": "pow",
    "title": "applies to",
    "content": "Data items with float32 or float 64 value-type . ",
    "url": "/docs/pow.html#applies-to",
    
    "relUrl": "/docs/pow.html#applies-to"
  },"2345": {
    "doc": "pow",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be calculated with data items of any domain). | argument must have matching: . | value-type | . | . ",
    "url": "/docs/pow.html#conditions",
    
    "relUrl": "/docs/pow.html#conditions"
  },"2346": {
    "doc": "pow",
    "title": "example",
    "content": "1. attribute&lt;float32&gt; powAB (ADomain) := pow(A, B); 2. attribute&lt;float32&gt; powAB (ADomain) := A^B; . | A | B | powAB | . | 0 | 1 | 0 | . | 1 | 1 | 1 | . | 4 | 2 | 16 | . | 7 | 3 | 343 | . | -5 | -2 | 0.04 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/pow.html#example",
    
    "relUrl": "/docs/pow.html#example"
  },"2347": {
    "doc": "pow",
    "title": "pow",
    "content": "arithmetic-functions power (^) . ",
    "url": "/docs/pow.html",
    
    "relUrl": "/docs/pow.html"
  },"2348": {
    "doc": "pp-2",
    "title": "related issues",
    "content": ". | issue 1021 | . ",
    "url": "/docs/pp-2.html#related-issues",
    
    "relUrl": "/docs/pp-2.html#related-issues"
  },"2349": {
    "doc": "pp-2",
    "title": "pp-2",
    "content": "recent-developments: Editing PP2 . Multiple improvements, including solving potential dead-locks, have been made to the parallel processing(PP2) functionality. This allows the GeoDMS to perform multiple calculation steps simultaneously. Since version 7.174 we advice to enable this option for interactive working with the GeoDMS GUI. For batch processing, especially if you run multiple processes simultaneously, we advice to disbale the option. The option can be set from the Tools &gt; Options &gt; General Settings dialog (in future versions we plan to make it possible to overrule the default setting with a batch parameter). Since version 7.196 PP2 enabled (as well as PP1 enabled) is the default setting when installing the GeoDMS. ",
    "url": "/docs/pp-2.html",
    
    "relUrl": "/docs/pp-2.html"
  },"2350": {
    "doc": "predicates-functions",
    "title": "predicates-functions",
    "content": "Predicate operators-and-functions are used to check certain conditions, like isdefined of isnull. | makedefined - defines a value (often zero) for null values | isdefined - True for non null and False for null values | isnull - True for null and False for non null values | . | ispositive | isnegative | iszero | . ",
    "url": "/docs/predicates-functions.html",
    
    "relUrl": "/docs/predicates-functions.html"
  },"2351": {
    "doc": "programming-architecture",
    "title": "programming architecture",
    "content": ". | All data is managed in arrays and data operations are vectorized. | Large arrays are segmented (or tiled in case of 2d raster data) in order to parallel process data segments in separate threads, aka MT1 | Different independent operations are executed in parallel, aka MT2, Multi Threading, | interest counting and a configurable CalcCache for storing intermediate results for as long as needed, but not longer. | Use of C++ templates, STL, BOOST, GDAL. | Management of run time properties of datasets to select the fastest algorithms, such as counting-sort and comparable methods for modus, join etc. | Retain intermediate resources for reuse in repeatedly called functions, such as in: poly2grid. | Usage of Intel’s Math Kernel Library for fast convolution, boost::uBlas for matrix operations. | calculations can be segmented functionally and their results merged afterwards to run on multiple machines. | . Under Study: . | C++ AMP for deploying GPU’s see http://wiki.objectvision.nl/index.php/Parallel_Processing_and_GPU_Acceleration and https://docs.microsoft.com/en-us/cpp/parallel/amp/cpp-amp-overview?view=vs-2019 GeoDMS is now compiled witt VS 2017. | virtual data segments with segment level ownership and lifetime, aka MT3 | a RUST like unique write and shared read owners of intermediate results, value-based-calculating. | . ",
    "url": "/docs/programming-architecture.html#programming-architecture",
    
    "relUrl": "/docs/programming-architecture.html#programming-architecture"
  },"2352": {
    "doc": "programming-architecture",
    "title": "programming-architecture",
    "content": "expression fast calculations: Programming Architecture . ",
    "url": "/docs/programming-architecture.html",
    
    "relUrl": "/docs/programming-architecture.html"
  },"2353": {
    "doc": "project",
    "title": "List of actual projects",
    "content": ". | mondaine | RSOpen | GeoDMS Academy | Vesta | . ",
    "url": "/docs/project.html#list-of-actual-projects",
    
    "relUrl": "/docs/project.html#list-of-actual-projects"
  },"2354": {
    "doc": "project",
    "title": "List of finished or discontinued projects",
    "content": ". | [[Kansen voor Duurzame verstedelijking]] | [[2UP China]] | [[NOVI Bereikbaarheidsindicatoren]] | [[OV Haltebereikbaarheidsstudie]] | [[Pand Hoogte Nederland]] | [[Zonneladder]] | [[Transformatie Potentie 2]] | . ",
    "url": "/docs/project.html#list-of-finished-or-discontinued-projects",
    
    "relUrl": "/docs/project.html#list-of-finished-or-discontinued-projects"
  },"2355": {
    "doc": "project",
    "title": "project",
    "content": " ",
    "url": "/docs/project.html",
    
    "relUrl": "/docs/project.html"
  },"2356": {
    "doc": "projection",
    "title": "contents",
    "content": "Projection information consists of the following set of parameters: . | pixel size in the x-direction in map units, often positive | pixel size in the y-direction in map units, often negative | x-coordinate of the center of the upper left pixel | y-coordinate of the center of the upper left pixel | . A world file can also contains rotation information, this is at the moment not (yet) used in the GeoDMS. ",
    "url": "/docs/projection.html#contents",
    
    "relUrl": "/docs/projection.html#contents"
  },"2357": {
    "doc": "projection",
    "title": "projection",
    "content": "Projection information is a set of parameters, defining the relation between a local grid and a geographical coordinate system. For multiple grid-data the projection information is read from the grid files or accompanying world files (a GeoTiff file for example often has this information stored in a .tfw file in the same folder). The projection information can also be explicitly configured in the GeoDMS configuration, see: geographic-grid-domain. The projection is presented in the geodms-gui &gt; Detail Pages &gt; General &gt; Projection for the geographic domain unit and all attribute with this domain-unit. ",
    "url": "/docs/projection.html",
    
    "relUrl": "/docs/projection.html"
  },"2358": {
    "doc": "property",
    "title": "all properties",
    "content": ". | cdf: a classification scheme for a values-unit or data-item. If configured to a values unit, all data items with this values unit will use the classification (by default) in map and graph views. If the cdf property is configured to a data item, it is used in a graph or map view of this data item and overrules a cdf property configured to the values unit of the data item. The cdf property always needs to refer to the ClassBreaks item of a classification scheme. | ConfigFileColNr: the vertical column position of the configured item in the configuration file. | ConfigFileLineNr: the horizontal line position of the configured item in the configuration. | ConfigFileName: the name of the configuration file, including the relative path from the configuration directory of the project. | Descr: a description for a tree-item that is shown in the detail pages and as tool tip. It is advised to keep a description limited to one sentence. More descriptive information can better be stored in a (HTML) file and configured as metadata with the url property. | dialogdata: Used in combination with the DialogType property to configure information on how to present data items. If the DialogType property is configured to Map, the DialogData should refer to the data item to which the geographic data is configured. This is needed to inform the GeoDMS how to visualise the geographic [[domain unit] of the requested data item. The DialogData property can also be configured for a values unit describing the coordinate system used for map views. In that case the DialogData can be configured with one or multiple attribute refering to geographic information. These attributes will then be grouped into a background layer that is by default presented in each map view. | dialogtype: Together with the DialogData property, this property defines how data is visualised. The following options are available: . | Classification: Defines a ClassBreaks item of a classification scheme. Configure this option for ClassBreaks items, to inform the GeoDMS the attribute is used for class boundaries of classifications and can be viewed/modified with the Classification and Palette editor in the geodms-gui. See ClassBreaks item in a classification scheme for more information on ClassBreaks items. | BrushColor: Defines a style item of a classification scheme. Configure this option for palette items, to inform the GeoDMS the attribute is used for the definition of colors in classifications and can be viewed/modified with the Classification and Palette editor in the GeoDMS GUI . See Visualisation style items in a classification scheme for more information on palette items. | Labels: Defines a labels item of a classification scheme. Configure this option for labels items, to inform the GeoDMS the attribute is used for the labels in classifications and can be viewed/modified with the Classification and Palette editor in the GeoDMS GUI . See Labels item in a classification scheme for more information on labels items. | Map: This option is configured for domain units, to inform the GeoDMS that all data items with this domain unit can be visualised in a map view. The DialogData property should refer to the feature-attribute. | SymbolSize: Defines the size in pixels for point data in the GeoDMS GUI map view. See Visualisation styles for point data | SymbolWorldSize: Defines the worldsize in the coordinate system unit for point data in the GeoDMS GUI map view. See Visualisation styles for point data | SymbolColor: Defines the color in rgb values for point data in the GeoDMS GUI map view. See Visualisation styles for point data | SymbolIndex: Defines the index value in the font for point data in the GeoDMS GUI map view. See Visualisation styles for point data | SymbolFont: Defines the font for point data in the GeoDMS GUI map view. See Visualisation styles for point data | PenWidth: Defines the width in pixels for arc data in the GeoDMS GUI map view. See Visualisation styles for arc data | PenWorldWidth: Defines the worldwidth in the coordinate system unit for arc data in the GeoDMS GUI map view. See Visualisation styles for arc data | PenColor: Defines the color in rgb values for arc data in the GeoDMS GUI map view. See Visualisation styles for arc data | PenStyle: Defines the style for arc data in the GeoDMS GUI map view. See Visualisation styles for arc data | BrushColor: Defines the color in rgb values for the interior of polygon data in the GeoDMS GUI map view. See Visualisation styles for polygon data | HatchStyle: Defines the style for the interior of polygon data in the GeoDMS GUI map view. See Visualisation styles for polygon data | LabelText: Defines the labels as strings for point and polygon data in the GeoDMS GUI map view. See Visualisation styles for labels | LabelSize: Defines the size in pixels for labels in the GeoDMS GUI map view. See Visualisation styles for labels | LabelWorldSize: Defines the worldsize in the coordinate system unit for labels in the GeoDMS GUI map view. See Visualisation styles for labels | LabelColor: Defines the color in rgb values for labels in the GeoDMS GUI map view. See Visualisation styles for labels | LabelFont: Defines the font for labels in the GeoDMS GUI map view. See Visualisation styles for labels | MinPixSize: Defines the lower limit of the scale range to visualise a layer. See Scale dependent visualisation | MaxPixSize: Defines the upper limit of the scale range to visualise a layer. See Scale dependent visualisation | . | disablestorage: Property used to configure whether or not a data item needs to be stored in an external storage. If a storage is configured to an item (or any parent item), the property definition: DisableStorage =”True” indicates the current item will not be stored in an external storage. | domainunit: The domain unit of a data item indicates the entity for which the data item is available. This domain unit is configured between () brackets for all attributes (not for parameter). A domain unit is usually configured in a Units container. | explicitsuppliers: This item creates a dependency relation towards another item, that needs to be updated first, before the current item is updated. | Expr: The expression property is used to configure a calculation rule for a tree item. | FreeData: This Boolean property determines if data results that are maintained in the CalcCache will be stored persistent or will be released after their interest count goes down to zero. The result data for data items with a calculation rule are by default stored persistent if they are stored in the CalcCache. data items that are read by a storagemanager are by default not persistent. Intermediate results are never persistent. Non persistent CalcCache data is stored in the subfolder tmp of the CalcCache folder. In combination with the KeepData = “True” property, the FreeData=”True” condition determines that calculated data will be freed at the end of a project session but not earlier. See also: CalcCache Guide. | FullName: This property is derived from the name of the tree item and it’s hierarchical structure (all parent container item names). The property is not meant to be configured. | HasCalculator: Read only property indicating if the data item has an expression configured or the item is the result of an expression configured to the parent-item. | InHidden: The property inHidden is derived from the configured isHidden = “True” property for the item itself or to any parent of the item. The inHidden property indicates if a item is visible (false) or not visible (true) if the option Show hidden items in the GUI Options dialog is set to false. | InTemplate: This property is derived from a parent property for which the IsTemplate property is configured. With the InTemplate property is indicated if the item is part of a calculation scheme, that can not be calculated. | IsEndogenous: The read only property IsEndogenous = “True” indicates a data item is calculated and not read from a source file. | IsHidden: The property isHidden = “True” hides tree items in the TreeView if the option Show hidden items in the GUI Options dialog is set to false. The option is meant to hide items that are not relevant to and end user. | IsLoadable: Read only property indicating if exogenous data items can be read from external source files, a StorageManager is configured for the data item and the property DisableStorage is not configured to be true. | IsStorable: Read only property indicating if endogenous data items can be stored, a storage manager is configured for the data item and the property DisableStorage is not configured to be true. | IsTemplate: This property need to be configured to the container item representing a calculation scheme. With this property is indicated that the item to which this poperty is configured and all it’s subitems represent a scheme that can not be updated. The property also needs to be configured to inform the GeoDMS GUI this item represents a calculation scheme (necessary for the case generator). | KeepData: This property can be set to true for calculations that are time consuming. If set to true the results of a calculation are kept in memory after being calculated once. | Label: This property is used to present the item in the GeoDMS GUI (except for the treeview in which the tree item name is used). In the legend of the Map view, the header of the table view etc the label is used (if configured, else the name is used). In the label all characters are allowed, but it is advised to keep the size of the label limited. | Name: This property is derived from the name of the tree item as it is configured in the GeoDMS configuration files | NrSubitems: A derived property indicating the number of first level subitems or a tree item. | ParamData: This property is used for case parameters. The content depends on the configuration of the accompanying ParamType property: . | If ParamType is configured to Numeric, ParamData indicates the values unit of the numeric value. | If ParamType is configured to ItemList, ParamData describes the container which subitems are presented in the combo box. | If ParamType is configured to ExprList, ParamData contains the expression resulting in a set of items, presented in the combo box. | If ParamType is configured to SimilarList, ParamData describes the container that must match with ohter ‘similar’ containers based on their subitems. Furthermore the property is used for case container to indicate in which subcontainer of the cases container the resulting cases will be available. | . | ParamType: This property is used for case parameters. The following options are available: . | NumericList : A textbox is shown to specify a numeric value, the values unit need to be configured in the ParamData property. | ItemList : a combobox is shown to select from the list of subitems from the container configured in the ParamData property. | ExprList : a combobox is shown to select from the options resulting from the expression, comma separated (expressions for this property are usually configured with the asexprList operator). | SimilarList : a comboxbox is shown to select from the containers that match the configured container for the ParamData property. The match must be on the number of items, values units and domain units of the items. If the “$AllValues” condition is configured in the | . | ParamData property (; separated), the condition about matching values unit does not apply. This also applies to the condition “$AllDomains” with regard to the configured domain units. Default, cases are not expanded so Similarlist does not result in matches within not yet expanded case. By adding the condition “$ExpandCases” all configured cases are first expanded and also searched through. | Password: Password that needs to be specified for a connection string towards an odbc source | spatialreference: This property is used to configure the EPSG code for the geographical coordinate system to the how-to-configure-a-coordinate-system | SortByName: Property used to indicate if the GeoDMS GUI should present all subitems in a alphabetic sequence instead of the sequence of the items in the configuration file. The default value = false (no alphabetic order). | source: This property is used to configure descriptive information for the source data used in a GeoDMS configuration. Source descriptions can be relevant for reporting purposes. The configured source property is presented in the Source Description tab for each data item in which this source item is used (based on the derived dependencies). | sqlstring: This property is configured for Data sources, at the table/query level. A valid SQL Statement need to be configured. All data selections statements are valid, statements that modify tables (like SELECT INTO, UPDATE etc) are not valid. | StartupDesktop: obsolete | storagename: primary data used in the GeoDMS is usually stored in external storages. With the StorageName property a reference towards a primary data source is configured (in most cases a filename). | storagereadonly: The StorageReadOnly property is used to indicate if a storage is only configured to read from (not to write to). | storagetype: This property indicates the StorageManager used to read and write the data, e.g. ASCII grid, BMP, DBF, ODBC. The StorageType property only has to be configured if it cannot be derived from the file extension. | StoreData:This property configured to the value True explicitly stores data items that will not be stored in the CalcCache on disk, according to the CalcCache rules. | syncmode: This property is used to indicate which sources are read from a storage with multiple tables/attributes. The SyncMode property can be configured in three different modes: . | All: all tables and queries are read from the database, independent on what is configured in the GeoDMS configuration. | Attr: only tables configured are read from the database, but from these table all attributes | None: only tables and attribute configured are read from the database | . | TableType: Read only property derived from the ODBC storage manager indicating if the source is a table or query . | TCalculationShemaCalculator: property used by the GeoDMS to store lay out information on the saved lay out of a calculation scheme. | TSubitemShemaCalculator: property used by the GeoDMS to store lay out information on the saved lay out of a subitem scheme. | TSupplierShemaCalculator: property used by the GeoDMS to store lay out information on the saved lay out of a supplier scheme. | . | Url: the url property is used to configure relevant background information, stored in files on the local machine (preferably html, but other formats that can be viewed on the local machine are allowed as well). The file configured in the url property is shown in the Metadata detail page if the tree item is selected in the tree view, or if a subitem is selected, for which no url property is configured. | UserName: User name that needs to be specifief for a connection string towards an odbc source | Using: The Using statement is used to refer to other branches in the tree in order to find tree items in expressions, without having to specify a full name. | composition: This property describes is used for data items with point value-type. It describes if each instance of the data item consits of one (single) point, for point data like dwellings, services, or a set of points (poly), for lines or polygons like roads or administrative areas. | valuesunit: The values unit describes in which unit a data item is expressed (meter, second, Euro etc). Values units are configured between &lt; and &gt; brackets after the keywords attribute or parameter. | ViewAction: If a case is specified with the case generator in the GeoDMS GUI , a resulting data item can be viewed in mapview, datagrid dynacube etc. This item and the type need to be configured in the ViewAction property. | . ",
    "url": "/docs/property.html#all-properties",
    
    "relUrl": "/docs/property.html#all-properties"
  },"2359": {
    "doc": "property",
    "title": "examples",
    "content": "unit&lt;uint32&gt; TestCSV : StorageName = \"%ProjDir%/Data/test.csv\" , StorageType = \"gdal.vect\" , StorageReadOnly = \"true\" , SyncMode = \"None\" { attribute&lt;string&gt; attr; } . parameter&lt;string&gt; SnapshotDir := ='SnapshotDir'+string(BAG_jaar); container Panden { unit&lt;uint32&gt; import : StorageName = \"= SnapshotDir+'/pand.fss'\" , StorageReadOnly = \"True\" { attribute&lt;rdc_mm_i32&gt; geometry_mm (polygon) ; attribute&lt;string&gt; identificatie; attribute&lt;int16&gt; bouwjaar; attribute&lt;WPSrc&gt; woonpand_type; attribute&lt;string&gt; status; } } . unit&lt;uint32&gt; Natura2000 : StorageName = \"%RSLdataDir%/Beleid/EU/Natura2000_20200524_RD_reproject.gdb\" , StorageType = \"gdal.vect\" , StorageReadOnly = \"True\" , DialogType = \"Map\" , Source = \"Nationaal georegister download shp-formaat op 20201013\" , url = \"http://geodata.nationaalgeoregister.nl/natura2000/atom/natura2000.xml PS_Natura2000_as_is\" , SyncMode = \"Attr\" , SqlString = \"SELECT * FROM Natura2000_20200524_RD_reproject WHERE KADASTER &lt;&gt; 'niet van toepassing'\" { attribute&lt;rdc_meter&gt; Geometry (poly); } . unit&lt;dpoint&gt; LatLong_Base: Format = \"EPSG:4326\", DialogData = \"wms_layer_llh\" { parameter&lt;float32&gt; ViewPortMinSize := 100f / 3600f; parameter&lt;float32&gt; PenWorldWidth := 10f / 3600f, DialogType = \"PenWorldWidth\"; parameter&lt;float32&gt; LabelWorldSize := 10f / 3600f, DialogType = \"LabelWorldSize\"; } . unit&lt;float32&gt; s := baseunit('s', float32) , label = \"second\", cdf = \"seconden/ClassBreaks\"; unit&lt;uint8&gt; seconden : nrofrows = 3 { attribute&lt;string&gt; Label : ['treated', 'control', 'other']; attribute&lt;uint32&gt; PenColor := Brushcolor, DialogType = \"PenColor\"; attribute&lt;uint32&gt; BrushColor : [rgb(200,0,0),rgb(0,200,0), rgb(128,128,128)], DialogType = \"BrushColor\"; attribute&lt;s&gt; ClassBreaks : [0,1080,3600], DialogType = \"Classification\"; } . ",
    "url": "/docs/property.html#examples",
    
    "relUrl": "/docs/property.html#examples"
  },"2360": {
    "doc": "property",
    "title": "property",
    "content": "This page contains a complete list of all property definitions. | Bold properties can be configured to (some) tree-item | Italic properties are derived properties, not meant to be configured | . Be aware, not all properties apply to all item types. ",
    "url": "/docs/property.html",
    
    "relUrl": "/docs/property.html"
  },"2361": {
    "doc": "propvalue",
    "title": "syntax",
    "content": ". | PropValue(item, property) | . ",
    "url": "/docs/propvalue.html#syntax",
    
    "relUrl": "/docs/propvalue.html#syntax"
  },"2362": {
    "doc": "propvalue",
    "title": "definition",
    "content": "PropValue(item, property) results in a string parameter with the value of the property argument for the tree-item argument. ",
    "url": "/docs/propvalue.html#definition",
    
    "relUrl": "/docs/propvalue.html#definition"
  },"2363": {
    "doc": "propvalue",
    "title": "applies to",
    "content": "item can be any tree item, not being itself or one of it’s subitem (an invalid recursion error is generated) . There is a list of all property. ",
    "url": "/docs/propvalue.html#applies-to",
    
    "relUrl": "/docs/propvalue.html#applies-to"
  },"2364": {
    "doc": "propvalue",
    "title": "example",
    "content": "attribute&lt;meter&gt; A (ADomain) := B + C,  descr = \"A is the sum of B and C\"; {    parameter&lt;string&gt; name       := PropValue(A, 'name');       result = 'A'    parameter&lt;string&gt; valuesunit := PropValue(A, 'ValuesUnit'); result = 'meter'    parameter&lt;string&gt; expr       := PropValue(A, 'expr');       result = 'B + C'    parameter&lt;string&gt; descr      := PropValue(A, 'descr);       result = 'A is the sum of B and C' } . ",
    "url": "/docs/propvalue.html#example",
    
    "relUrl": "/docs/propvalue.html#example"
  },"2365": {
    "doc": "propvalue",
    "title": "see also",
    "content": ". | subitem_propvalues | inherited_propvalues | . ",
    "url": "/docs/propvalue.html#see-also",
    
    "relUrl": "/docs/propvalue.html#see-also"
  },"2366": {
    "doc": "propvalue",
    "title": "propvalue",
    "content": "miscellaneous-functions PropValue . ",
    "url": "/docs/propvalue.html",
    
    "relUrl": "/docs/propvalue.html"
  },"2367": {
    "doc": "proximity",
    "title": "syntax",
    "content": ". | proximity(grid_data_item, kernel) | . ",
    "url": "/docs/proximity.html#syntax",
    
    "relUrl": "/docs/proximity.html#syntax"
  },"2368": {
    "doc": "proximity",
    "title": "definition",
    "content": "proximity(grid_data_item, kernel) results in a convolution of a grid_data_item and a kernel. For each cell in the grid_data_item, the values of the cell and it’s neighbourhood cells are multiplied with the corresponding values in the kernel taking that cell as the focal point in the kernel. The resulting cell value is the maximum of these multiplications. The resulting value-type is float32 or float64, based on the value type of the grid_data_item. The resulting domain-unit is the domain unit of the grid_data_item attribute. Because the proximity function uses a Fast Fourier Transformation, expression even with large kernels. In other GIS software this operation is also known as the focal statistics, statistic type: MAXIMUM . ",
    "url": "/docs/proximity.html#definition",
    
    "relUrl": "/docs/proximity.html#definition"
  },"2369": {
    "doc": "proximity",
    "title": "description",
    "content": "See potential-with-kernel for more information on how to configure different kernels. ",
    "url": "/docs/proximity.html#description",
    
    "relUrl": "/docs/proximity.html#description"
  },"2370": {
    "doc": "proximity",
    "title": "applies to",
    "content": ". | attribute grid_data_item with float32 or float64 value-type | . ",
    "url": "/docs/proximity.html#applies-to",
    
    "relUrl": "/docs/proximity.html#applies-to"
  },"2371": {
    "doc": "proximity",
    "title": "conditions",
    "content": "The domain unit of grid_data_item must be a Point value type of the group CanBeDomainUnit. ",
    "url": "/docs/proximity.html#conditions",
    
    "relUrl": "/docs/proximity.html#conditions"
  },"2372": {
    "doc": "proximity",
    "title": "example",
    "content": "attribute&lt;float32&gt; proxgrid (GridDomain) := proximity(float32(sourcegrid), pot3Range/RelWeight); . sourcegrid | | | |———–:|-:|-:|-:|-:| null |0 |0 |0 |1 | 0 |0 |2 |1 |1 | 0 |2 |3 |3 |3 | 1 |1 |1 |3 |0 | 0 |1 |0 |1 |3 | . GridDomain, nr of rows = 5, nr of cols = 5 . proxgrid | | | |———:|———:|———:|———:|———:| 0 | 0.18 | 0.23 | 0.18 | 0.18 | 0.18 | 0.26 | 0.35 | 0.35 | 0.35 | 0.24 | 0.35 | 0.53 | 0.53 | 0.53 | 0.18 | 0.26 | 0.35 | 0.53 | 0.35 | 0.12 | 0.18 | 0.26 | 0.35 | 0.53 | . GridDomain, nr of rows = 5, nr of cols = 5 . ",
    "url": "/docs/proximity.html#example",
    
    "relUrl": "/docs/proximity.html#example"
  },"2373": {
    "doc": "proximity",
    "title": "proximity",
    "content": "grid-functions proximity . ",
    "url": "/docs/proximity.html",
    
    "relUrl": "/docs/proximity.html"
  },"2374": {
    "doc": "quote",
    "title": "syntax",
    "content": ". | quote(string_dataitem) | . ",
    "url": "/docs/quote.html#syntax",
    
    "relUrl": "/docs/quote.html#syntax"
  },"2375": {
    "doc": "quote",
    "title": "definition",
    "content": "quote(string_dataitem) single quotes the values of data-item string_dataitem. ",
    "url": "/docs/quote.html#definition",
    
    "relUrl": "/docs/quote.html#definition"
  },"2376": {
    "doc": "quote",
    "title": "applies to",
    "content": "data item string_dataitem with string value-type . ",
    "url": "/docs/quote.html#applies-to",
    
    "relUrl": "/docs/quote.html#applies-to"
  },"2377": {
    "doc": "quote",
    "title": "example",
    "content": "attribute&lt;string&gt; quoteA (ADomain) := quote(A); . | A | quoteA | . | ‘Test’ | ’‘**Test**’’ | . | ‘88hallo99’ | ’‘**88hallo99**’’ | . | ’+)’ | ’‘**+)**’’ | . | ‘twee woorden’ | ’‘**twee woorden**’’ | . | ’ test met spatie’ | ’‘**test met spatie**’’ | . ADomain nr of rows = 5 . ",
    "url": "/docs/quote.html#example",
    
    "relUrl": "/docs/quote.html#example"
  },"2378": {
    "doc": "quote",
    "title": "see also",
    "content": ". | unquote | dquote | . ",
    "url": "/docs/quote.html#see-also",
    
    "relUrl": "/docs/quote.html#see-also"
  },"2379": {
    "doc": "quote",
    "title": "quote",
    "content": "string-functions quote . ",
    "url": "/docs/quote.html",
    
    "relUrl": "/docs/quote.html"
  },"2380": {
    "doc": "ramp",
    "title": "syntax",
    "content": ". | ramp(startvalue, endvalue, domain unit) | . ",
    "url": "/docs/ramp.html#syntax",
    
    "relUrl": "/docs/ramp.html#syntax"
  },"2381": {
    "doc": "ramp",
    "title": "definition",
    "content": "ramp(startvalue, endvalue, domainunit) ramps values, starting with the startvalue argument and ending with the endvalue argument. The number of values is defined by the cardinality of the domain-unit argument. ",
    "url": "/docs/ramp.html#definition",
    
    "relUrl": "/docs/ramp.html#definition"
  },"2382": {
    "doc": "ramp",
    "title": "applies to",
    "content": "unit domain unit with value-type from group CanBeDomainUnit . ",
    "url": "/docs/ramp.html#applies-to",
    
    "relUrl": "/docs/ramp.html#applies-to"
  },"2383": {
    "doc": "ramp",
    "title": "since version",
    "content": "7.031 . ",
    "url": "/docs/ramp.html#since-version",
    
    "relUrl": "/docs/ramp.html#since-version"
  },"2384": {
    "doc": "ramp",
    "title": "example",
    "content": "attribute&lt;uint32&gt; ramped (City) := ramp(0, 70, City); . | ramped | . | 0 | . | 11 | . | 23 | . | 35 | . | 46 | . | 58 | . | 70 | . domain City, nr of rows = 7 . ",
    "url": "/docs/ramp.html#example",
    
    "relUrl": "/docs/ramp.html#example"
  },"2385": {
    "doc": "ramp",
    "title": "see also",
    "content": ". | ramp_open | . ",
    "url": "/docs/ramp.html#see-also",
    
    "relUrl": "/docs/ramp.html#see-also"
  },"2386": {
    "doc": "ramp",
    "title": "ramp",
    "content": "rescale-functions ramp . ",
    "url": "/docs/ramp.html",
    
    "relUrl": "/docs/ramp.html"
  },"2387": {
    "doc": "ramp_open",
    "title": "syntax",
    "content": ". | ramp_open(startvalue, uptovalue, domainunit) | . ",
    "url": "/docs/ramp_open.html#syntax",
    
    "relUrl": "/docs/ramp_open.html#syntax"
  },"2388": {
    "doc": "ramp_open",
    "title": "definition",
    "content": "ramp_open(startvalue, uptovalue, domainunit) ramp values, starting with the startvalue argument up to the uptovalue argument. The uptovalue argument itself is not part of the resulting attribute. The number of values is defined by the cardinality of the domain-unit argument. ",
    "url": "/docs/ramp_open.html#definition",
    
    "relUrl": "/docs/ramp_open.html#definition"
  },"2389": {
    "doc": "ramp_open",
    "title": "applies to",
    "content": "unit domain unit with value-type from group CanBeDomainUnit . ",
    "url": "/docs/ramp_open.html#applies-to",
    
    "relUrl": "/docs/ramp_open.html#applies-to"
  },"2390": {
    "doc": "ramp_open",
    "title": "since version",
    "content": "7.031 . ",
    "url": "/docs/ramp_open.html#since-version",
    
    "relUrl": "/docs/ramp_open.html#since-version"
  },"2391": {
    "doc": "ramp_open",
    "title": "example",
    "content": "attribute&lt;uint32&gt; ramped (City) := ramp_open(0, 70, City); . | ramped | . | 0 | . | 10 | . | 20 | . | 30 | . | 40 | . | 50 | . | 60 | . domain City, nr of rows = 7 . ",
    "url": "/docs/ramp_open.html#example",
    
    "relUrl": "/docs/ramp_open.html#example"
  },"2392": {
    "doc": "ramp_open",
    "title": "see also",
    "content": ". | ramp | . ",
    "url": "/docs/ramp_open.html#see-also",
    
    "relUrl": "/docs/ramp_open.html#see-also"
  },"2393": {
    "doc": "ramp_open",
    "title": "ramp_open",
    "content": "rescale-functions ramp_open . ",
    "url": "/docs/ramp_open.html",
    
    "relUrl": "/docs/ramp_open.html"
  },"2394": {
    "doc": "ramp_open_rgb",
    "title": "syntax",
    "content": ". | ramp_open_rgb(startvalue, uptovalue, domainunit) | . ",
    "url": "/docs/ramp_open_rgb.html#syntax",
    
    "relUrl": "/docs/ramp_open_rgb.html#syntax"
  },"2395": {
    "doc": "ramp_open_rgb",
    "title": "definition",
    "content": "ramp_open_rgb(startvalue, uptovalue, domainunit) ramps rgb values, starting with the startvalue argument up to the uptovalue argument. The uptovalue argument itself is not part of the resulting attribute. The number of values is defined by the cardinality of the domain-unit argument. ",
    "url": "/docs/ramp_open_rgb.html#definition",
    
    "relUrl": "/docs/ramp_open_rgb.html#definition"
  },"2396": {
    "doc": "ramp_open_rgb",
    "title": "applies to",
    "content": ". | parameter startvalue and uptovalue with value-type uint32 (often configured with the rgb function) | unit domainunit with value type from group CanBeDomainUnit | . ",
    "url": "/docs/ramp_open_rgb.html#applies-to",
    
    "relUrl": "/docs/ramp_open_rgb.html#applies-to"
  },"2397": {
    "doc": "ramp_open_rgb",
    "title": "since version",
    "content": "7.031 . ",
    "url": "/docs/ramp_open_rgb.html#since-version",
    
    "relUrl": "/docs/ramp_open_rgb.html#since-version"
  },"2398": {
    "doc": "ramp_open_rgb",
    "title": "example",
    "content": "attribute&lt;uint32&gt; BrushColor (City) := ramp_open_rgb(rgb(255,255,0), rgb(0,255,0), City); . | BrushColor | . | rgb(255, 255, 0) | . | rgb(218, 255, 0) | . | rgb(182, 255, 0) | . | rgb(145, 255, 0) | . | rgb(109, 255, 0) | . | rgb( 72, 255, 0) | . | rgb( 36, 255, 0) | . domain City, nr of rows = 7 . ",
    "url": "/docs/ramp_open_rgb.html#example",
    
    "relUrl": "/docs/ramp_open_rgb.html#example"
  },"2399": {
    "doc": "ramp_open_rgb",
    "title": "see also",
    "content": ". | ramp_open | ramp_rgb | . ",
    "url": "/docs/ramp_open_rgb.html#see-also",
    
    "relUrl": "/docs/ramp_open_rgb.html#see-also"
  },"2400": {
    "doc": "ramp_open_rgb",
    "title": "ramp_open_rgb",
    "content": "rescale-functions ramp_open_rgb . ",
    "url": "/docs/ramp_open_rgb.html",
    
    "relUrl": "/docs/ramp_open_rgb.html"
  },"2401": {
    "doc": "ramp_rgb",
    "title": "syntax",
    "content": ". | ramp_rgb(startvalue, endvalue, domainunit) | . ",
    "url": "/docs/ramp_rgb.html#syntax",
    
    "relUrl": "/docs/ramp_rgb.html#syntax"
  },"2402": {
    "doc": "ramp_rgb",
    "title": "definition",
    "content": "ramp_rgb(startvalue, endvalue, domainunit) ramps rgb values, starting with the startvalue argument and ending with the endvalue argument. The number of values is defined by the cardinality of the domain-unit. ",
    "url": "/docs/ramp_rgb.html#definition",
    
    "relUrl": "/docs/ramp_rgb.html#definition"
  },"2403": {
    "doc": "ramp_rgb",
    "title": "applies to",
    "content": ". | parameter startvalue and endvalue with value-type uint32 (often configured with the rgb function) | unit domainunit with value type from group CanBeDomainUnit | . ",
    "url": "/docs/ramp_rgb.html#applies-to",
    
    "relUrl": "/docs/ramp_rgb.html#applies-to"
  },"2404": {
    "doc": "ramp_rgb",
    "title": "since version",
    "content": "7.031 . ",
    "url": "/docs/ramp_rgb.html#since-version",
    
    "relUrl": "/docs/ramp_rgb.html#since-version"
  },"2405": {
    "doc": "ramp_rgb",
    "title": "example",
    "content": "attribute&lt;uint32&gt; BrushColor (City) := ramp_rgb(rgb(0,255,0), rgb(0,0,255), City); . | BrushColor | . | rgb( 0, 255, 0) | . | rgb( 0, 212, 42) | . | rgb( 0, 170, 85) | . | rgb( 0, 127, 127) | . | rgb( 0, 85, 170) | . | rgb( 0, 42, 212) | . | rgb( 0, 0, 255) | . domain City, nr of rows = 7 . ",
    "url": "/docs/ramp_rgb.html#example",
    
    "relUrl": "/docs/ramp_rgb.html#example"
  },"2406": {
    "doc": "ramp_rgb",
    "title": "see also",
    "content": ". | ramp | . ",
    "url": "/docs/ramp_rgb.html#see-also",
    
    "relUrl": "/docs/ramp_rgb.html#see-also"
  },"2407": {
    "doc": "ramp_rgb",
    "title": "ramp_rgb",
    "content": "rescale-functions ramp_rgb . ",
    "url": "/docs/ramp_rgb.html",
    
    "relUrl": "/docs/ramp_rgb.html"
  },"2408": {
    "doc": "range",
    "title": "syntax",
    "content": ". | range(valuetype, startvalue, endvalue) | . ",
    "url": "/docs/range.html#syntax",
    
    "relUrl": "/docs/range.html#syntax"
  },"2409": {
    "doc": "range",
    "title": "definition",
    "content": "range(valuetype, startvalue, endvalue) sets the range for a unit with argument: . | valuetype, the value-type for the configured unit | startvalue, the lowest value of the allowed range | endvalue, the highest value of the allowed range | . The range function configures a half open range. This means the value of argument: startvalue is the first value that is part of the range. Argument endvalue is the first value that falls outside the given range. ",
    "url": "/docs/range.html#definition",
    
    "relUrl": "/docs/range.html#definition"
  },"2410": {
    "doc": "range",
    "title": "description",
    "content": "The number of entries/elements of a domain-unit can be configured with this range function or with the nrofrows property. The range function is more flexible as: . | It can also be used for two-dimensional domain units, grid-domain, with a value-type of the pointGroup; | all arguments can be configured explicitly, but can also be the results of calculations. | the startvalue argument can be different than the default value of 0. | . In earlier GeoDMS versions also a range property was in use. This property was used to specify the range a unit with two arguments, a startvalue and endvalue. This property is nog longer supported. ",
    "url": "/docs/range.html#description",
    
    "relUrl": "/docs/range.html#description"
  },"2411": {
    "doc": "range",
    "title": "applies to",
    "content": ". | literal or parameter valuetype can be any value type. | literals or parameters startvalue and endvalue of the configured valuetype argument | . ",
    "url": "/docs/range.html#applies-to",
    
    "relUrl": "/docs/range.html#applies-to"
  },"2412": {
    "doc": "range",
    "title": "example",
    "content": ". | uint32 domain unit | . unit&lt;uint32&gt; Province := range(uint32, 1, 13) { attribute&lt;.&gt; id := id(.); } . | Province/id | . | 1 | . | 2 | . | 3 | . | 4 | . | 5 | . | 6 | . | 7 | . | 8 | . | 9 | . | 10 | . | 11 | . | 12 | . domain Province, nr of rows = 12 . | spoint domain unit | . unit&lt;spoint&gt; GridDomain := range(spoint, point(10s, 14s), point(15s, 19s)) {  attribute&lt;.&gt; id := id(.);  } . GridDomain/id . |   |   |   |   |   | . | (10,14) | (10,15) | (10,16) | (10,17) | (10,18) | . | (11,14) | (11,15) | (11,16) | (11,17) | (11,18) | . | (12,14) | (12,15) | (12,16) | (12,17) | (12,18) | . | (13,14) | (13,15) | (13,16) | (13,17) | (13,18) | . | (14,14) | (14,15) | (14,16) | (14,17) | (14,18) | . GridDomain, nr of rows = 6, nr of cols = 5 . ",
    "url": "/docs/range.html#example",
    
    "relUrl": "/docs/range.html#example"
  },"2413": {
    "doc": "range",
    "title": "see also",
    "content": ". | cat_range | . ",
    "url": "/docs/range.html#see-also",
    
    "relUrl": "/docs/range.html#see-also"
  },"2414": {
    "doc": "range",
    "title": "range",
    "content": "unit-functions range . ",
    "url": "/docs/range.html",
    
    "relUrl": "/docs/range.html"
  },"2415": {
    "doc": "raster_merge",
    "title": "syntax",
    "content": ". | raster_merge(target_grid_domain, valuesunit,sub_grid_data_item_1, …, sub_grid_data_item_n) | raster_merge(indexmap, valuesunit, valuesunit,sub_grid_data_item_1, …, sub_grid_data_item_n) | . ",
    "url": "/docs/raster_merge.html#syntax",
    
    "relUrl": "/docs/raster_merge.html#syntax"
  },"2416": {
    "doc": "raster_merge",
    "title": "definition",
    "content": "raster_merge(target_grid_domain, valuesunit, sub_grid_data_item_1,…, sub_grid_data_item_n) results in raster-data merged from the given sub_grid_data_items. | The domain-unit of the resulting data-item is configured as first argument. | The values-unit of the resulting data item is configured as second argument. | . This variant can be used if the projection information can be derived from the domain units of the sub_grid domains and the cell size of the target_grid_domain equals the cell size of the sub_grid domains. This raster_merge variant can be used both to merge data from smaller sub_grid domains to a larger target grid domains or vice versa. raster_merge(indexmap, valuesunit, valuesunit, sub_grid_data_item_1, …, sub_grid_data_item_n) results in raster-data merged from the given sub_grid_data_items. | The domain unit of the resulting item is equal to the domain unit of the first argument indexmap. This indexmap argument contains sequence numbers of the configured sub_grid_data_items, 0 refers to sub_grid_data_item_1, 1 to sub_grid_data_item_1, …, n-1 tosub_grid_data_item_n.. | The values unit of the resulting data item is configured as second argument. | . At locations with indexmap values &gt;= n or outside the range of the domain unit of the indicated sub_grid, the result will be null. ",
    "url": "/docs/raster_merge.html#definition",
    
    "relUrl": "/docs/raster_merge.html#definition"
  },"2417": {
    "doc": "raster_merge",
    "title": "applies to",
    "content": ". | attribute indexmap with uint16 value-type | valuesunit must have a numeric value type | sub_grid_data_item_1, …, sub_grid_data_item_n must have the same values unit | The value type of the target_grid_domain and the sub_grids must match. | . ",
    "url": "/docs/raster_merge.html#applies-to",
    
    "relUrl": "/docs/raster_merge.html#applies-to"
  },"2418": {
    "doc": "raster_merge",
    "title": "conditions",
    "content": ". | The indexmap argument must have a domain unit with a Point value type of the group CanBeDomainUnit. | all sub_grid_data_items must have a domain unit with a Point value type of the group CanBeDomainUnit. | all sub_grids must have a compatible projections as the target_grid_domain and the domain unit of the indexmap argument. | . ",
    "url": "/docs/raster_merge.html#conditions",
    
    "relUrl": "/docs/raster_merge.html#conditions"
  },"2419": {
    "doc": "raster_merge",
    "title": "since",
    "content": ". | raster_merge(target_domain, valuesunit, subgrid_1, …, subgrid_n): 7.101 | raster_merge(indexmap, valuesunit, subgrid_1, …, subgrid_n): 7.013 | . ",
    "url": "/docs/raster_merge.html#since",
    
    "relUrl": "/docs/raster_merge.html#since"
  },"2420": {
    "doc": "raster_merge",
    "title": "example",
    "content": "attribute&lt;uint16&gt; indexmap (DomainM):= switch( case(pointRow(id(DomainM)) &lt; 2s &amp;&amp; pointCol(id(DomainM)) &lt; 2s, 0) ,case(pointRow(id(DomainM)) &gt;= 2s &amp;&amp; pointCol(id(DomainM)) &lt; 2s, 1) ,case(pointRow(id(DomainM)) &gt;= 2s &amp;&amp; pointCol(id(DomainM)) &gt;= 2s, 2) ,3 ); container SubGrids { unit&lt;spoint&gt; DomainA := range(DomainM, point(0s,0s), point(2s,2s)); unit&lt;spoint&gt; DomainB := range(DomainM, point(2s,0s), point(5s,2s)); unit&lt;spoint&gt; DomainC := range(DomainM, point(3s,2s), point(5s,5s)); unit&lt;spoint&gt; DomainD := range(DomainM, point(0s,2s), point(3s,5s)); } unit&lt;uint8&gt; codes; attribute&lt;codes&gt; ToBeMergedI (SubGrids/DomainA) := const(10, SubGrids/DomainA, codes); attribute&lt;codes&gt; ToBeMergedII (SubGrids/DomainB) := const(20, SubGrids/DomainB, codes); attribute&lt;codes&gt; ToBeMergedIII (SubGrids/DomainC) := const(30, SubGrids/DomainC, codes); attribute&lt;codes&gt; ToBeMergedIV (SubGrids/DomainD) := const(40, SubGrids/DomainD, codes); Example I: attribute&lt;codes&gt; raster_merged (DomainM) := raster_merge(DomainM, codes, ToBeMergedI, ToBeMergedII, ToBeMergedIII, ToBeMergedIV); Example II: attribute&lt;codes&gt; raster_merged (DomainM) := raster_merge(indexmap,codes, ToBeMergedI, ToBeMergedII, ToBeMergedIII, ToBeMergedIV); . indexmap | | | |—–:|—–:|—–:|—–:|—–:| 0 | 0 | 3 | 3 | 3 | 0 | 0 | 3 | 3 | 3 | 1 | 1 | 3 | 3 | 3 | 1 | 1 | 2 | 2 | 2 | 1 | 1 | 2 | 2 | 2 | . DomainM, nr of rows = 5, nr of cols = 5 . ToBeMergedI | |—–:|—–:| 10 | 10 | 10 | 10 | . DomainA, nr of rows = 2, nr of cols = 2 . ToBeMergedII | |—–:|—–:| 20 | 20 | 20 | 20 | 20 | 20 | . DomainB, nr of rows = 3, nr of cols = 2 . ToBeMergedIII | | |—–:|—–:|—–:| 30 | 30 | 30 | 30 | 30 | 30 | . DomainC, nr of rows = 2, nr of cols = 3 . ToBeMergedIV | | |—–:|—–:|—–:| 40 | 40 | 40 | 40 | 40 | 40 | 40 | 40 | 40 | . DomainD, nr of rows = 3, nr of cols = 3 . raster_merged | | | |——-:|——-:|——-:|——-:|——-:| 10 | 10 | 40 | 40 | 40 | 10 | 10 | 40 | 40 | 40 | 20 | 20 | 40 | 40 | 40 | 20 | 20 | 30 | 30 | 30 | 20 | 20 | 30 | 30 | 30 | . DomainM, nr of rows = 5, nr of cols = 5 . ",
    "url": "/docs/raster_merge.html#example",
    
    "relUrl": "/docs/raster_merge.html#example"
  },"2421": {
    "doc": "raster_merge",
    "title": "See also",
    "content": ". | merge | . ",
    "url": "/docs/raster_merge.html#see-also",
    
    "relUrl": "/docs/raster_merge.html#see-also"
  },"2422": {
    "doc": "raster_merge",
    "title": "raster_merge",
    "content": "grid-functions raster_merge . ",
    "url": "/docs/raster_merge.html",
    
    "relUrl": "/docs/raster_merge.html"
  },"2423": {
    "doc": "rd2latlong",
    "title": "syntax",
    "content": ". | RD2LatLong(geometry, value type) | . ",
    "url": "/docs/rd2latlong.html#syntax",
    
    "relUrl": "/docs/rd2latlong.html#syntax"
  },"2424": {
    "doc": "rd2latlong",
    "title": "definition",
    "content": "RD2LatLong(geometry, value type) converts the geometry argument, expressed in the Dutch RD coordinate system towards the LatLong coordinate system. The second optional argument is the value-type of the resulting data-item. ",
    "url": "/docs/rd2latlong.html#definition",
    
    "relUrl": "/docs/rd2latlong.html#definition"
  },"2425": {
    "doc": "rd2latlong",
    "title": "applies to",
    "content": "data item geometry with Point value type . ",
    "url": "/docs/rd2latlong.html#applies-to",
    
    "relUrl": "/docs/rd2latlong.html#applies-to"
  },"2426": {
    "doc": "rd2latlong",
    "title": "since version",
    "content": "5.44 . ",
    "url": "/docs/rd2latlong.html#since-version",
    
    "relUrl": "/docs/rd2latlong.html#since-version"
  },"2427": {
    "doc": "rd2latlong",
    "title": "example",
    "content": "attribute&lt;dpoint&gt; district_LatLong (DDomain, polygon) := RD2LatLong(district_rd, dpoint); . | district_rd | district_LatLong | . | {21: {403025, 113810}{4 | {21: {51.6155134, 4.7928460}{51 | . | {17: {400990, 113269}{4 | {17: {51.5971804, 4.7852773}{51 | . | {19: {401238, 115099}{4 | {19: {51.5995428, 4.8116626}{51 | . DDomain, nr of rows = 3 . ",
    "url": "/docs/rd2latlong.html#example",
    
    "relUrl": "/docs/rd2latlong.html#example"
  },"2428": {
    "doc": "rd2latlong",
    "title": "see also",
    "content": ". | rd2latlongwgs84 | latlongwgs842rd | rd2latlongge | rd2latlonged50 | . ",
    "url": "/docs/rd2latlong.html#see-also",
    
    "relUrl": "/docs/rd2latlong.html#see-also"
  },"2429": {
    "doc": "rd2latlong",
    "title": "rd2latlong",
    "content": "geometric-functions RD2LatLong . ",
    "url": "/docs/rd2latlong.html",
    
    "relUrl": "/docs/rd2latlong.html"
  },"2430": {
    "doc": "rd2latlonged50",
    "title": "syntax",
    "content": ". | RD2LatLongEd50(geometry, value type) | . ",
    "url": "/docs/rd2latlonged50.html#syntax",
    
    "relUrl": "/docs/rd2latlonged50.html#syntax"
  },"2431": {
    "doc": "rd2latlonged50",
    "title": "definition",
    "content": "RD2LatLongEd50(geometry, value type) converts the geometry argument, expressed in the Dutch RD coordinate system towards the Ed50 projection of the LatLong coordinate system. The second optional argument is the value-type of the resulting data-item. ",
    "url": "/docs/rd2latlonged50.html#definition",
    
    "relUrl": "/docs/rd2latlonged50.html#definition"
  },"2432": {
    "doc": "rd2latlonged50",
    "title": "applies to",
    "content": "data item geometry and with Point value type . ",
    "url": "/docs/rd2latlonged50.html#applies-to",
    
    "relUrl": "/docs/rd2latlonged50.html#applies-to"
  },"2433": {
    "doc": "rd2latlonged50",
    "title": "since version",
    "content": "5.44 . ",
    "url": "/docs/rd2latlonged50.html#since-version",
    
    "relUrl": "/docs/rd2latlonged50.html#since-version"
  },"2434": {
    "doc": "rd2latlonged50",
    "title": "example",
    "content": "attribute&lt;dpoint&gt; district_LatLongEd50(DDomain, polygon) := RD2LatLongEd50(district_rd, dpoint); . | district_rd | district_LatLongEd50 | . | {21: {403025, 113810}{4 | {21: {51.6153922, 4.7937585}{51 | . | {17: {400990, 113269}{4 | {17: {51.5970619, 4.7861904}{51 | . | {19: {401238, 115099}{4 | {19: {51.5994237, 4.8125713}{51 | . DDomain, nr of rows = 3 . ",
    "url": "/docs/rd2latlonged50.html#example",
    
    "relUrl": "/docs/rd2latlonged50.html#example"
  },"2435": {
    "doc": "rd2latlonged50",
    "title": "see also",
    "content": ". | rd2latlongwgs84 | latlongwgs842rd | rd2latlongge | rd2latlong | . ",
    "url": "/docs/rd2latlonged50.html#see-also",
    
    "relUrl": "/docs/rd2latlonged50.html#see-also"
  },"2436": {
    "doc": "rd2latlonged50",
    "title": "rd2latlonged50",
    "content": "geometric-functions RD2LatLongEd50 . ",
    "url": "/docs/rd2latlonged50.html",
    
    "relUrl": "/docs/rd2latlonged50.html"
  },"2437": {
    "doc": "rd2latlongge",
    "title": "syntax",
    "content": ". | RD2LatLongGE(geometry, value type) | . ",
    "url": "/docs/rd2latlongge.html#syntax",
    
    "relUrl": "/docs/rd2latlongge.html#syntax"
  },"2438": {
    "doc": "rd2latlongge",
    "title": "definition",
    "content": "RD2LatLongGE(geometry, value type) converts the geometry argument, expressed in the Dutch RD coordinate system towards the Wgs84 projection used in Google Earth (Wgs84 projection with a lineair correction) . The second optional argument is the value-type of the resulting data-item. ",
    "url": "/docs/rd2latlongge.html#definition",
    
    "relUrl": "/docs/rd2latlongge.html#definition"
  },"2439": {
    "doc": "rd2latlongge",
    "title": "applies to",
    "content": "data item geometry with Point value type . ",
    "url": "/docs/rd2latlongge.html#applies-to",
    
    "relUrl": "/docs/rd2latlongge.html#applies-to"
  },"2440": {
    "doc": "rd2latlongge",
    "title": "since version",
    "content": "5.44 . ",
    "url": "/docs/rd2latlongge.html#since-version",
    
    "relUrl": "/docs/rd2latlongge.html#since-version"
  },"2441": {
    "doc": "rd2latlongge",
    "title": "example",
    "content": "attribute&lt;dpoint&gt; district_LatLongGE(DDomain, polygon) := RD2LatLongGE(district_rd, dpoint); . | district_rd | district_LatLongGE | . | {21: {403025, 113810}{4 | {21: {51.6146385, 4.7925546}{51 | . | {17: {400990, 113269}{4 | {17: {51.5963092, 4.7849878}{51 | . | {19: {401238, 115099}{4 | {19: {51.5986712, 4.8113673}{51 | . DDomain, nr of rows = 3 . ",
    "url": "/docs/rd2latlongge.html#example",
    
    "relUrl": "/docs/rd2latlongge.html#example"
  },"2442": {
    "doc": "rd2latlongge",
    "title": "see also",
    "content": ". | rd2latlongwgs84 | latlongwgs842rd | rd2latlonged50 | rd2latlong | . ",
    "url": "/docs/rd2latlongge.html#see-also",
    
    "relUrl": "/docs/rd2latlongge.html#see-also"
  },"2443": {
    "doc": "rd2latlongge",
    "title": "rd2latlongge",
    "content": "geometric-functions RD2LatLongGE . ",
    "url": "/docs/rd2latlongge.html",
    
    "relUrl": "/docs/rd2latlongge.html"
  },"2444": {
    "doc": "rd2latlongwgs84",
    "title": "syntax",
    "content": ". | RD2LatLongWgs84(geometry, value type) | . ",
    "url": "/docs/rd2latlongwgs84.html#syntax",
    
    "relUrl": "/docs/rd2latlongwgs84.html#syntax"
  },"2445": {
    "doc": "rd2latlongwgs84",
    "title": "definition",
    "content": "RD2LatLongWgs84(geometry, value type) converts the geometry argument, expressed in the Dutch RD coordinate system towards the Wgs84 projection of the LatLong coordinate system. The second optional argument is the value-type of the resulting data-item. ",
    "url": "/docs/rd2latlongwgs84.html#definition",
    
    "relUrl": "/docs/rd2latlongwgs84.html#definition"
  },"2446": {
    "doc": "rd2latlongwgs84",
    "title": "applies to",
    "content": "data item geometry with Point value-type . ",
    "url": "/docs/rd2latlongwgs84.html#applies-to",
    
    "relUrl": "/docs/rd2latlongwgs84.html#applies-to"
  },"2447": {
    "doc": "rd2latlongwgs84",
    "title": "since version",
    "content": "5.44 . ",
    "url": "/docs/rd2latlongwgs84.html#since-version",
    
    "relUrl": "/docs/rd2latlongwgs84.html#since-version"
  },"2448": {
    "doc": "rd2latlongwgs84",
    "title": "example",
    "content": "attribute&lt;dpoint&gt; district_LatLongWgs84 (DDomain, polygon) := RD2LatLongWgs84(district_rd, dpoint); . | district_rd | district_LatLongWgs84 | . | {21: {403025, 113810}{4 | {21: {51.6145901, 4.7924961}{51 | . | {17: {400990, 113269}{4 | {17: {51.5962592, 4.7849284}{51 | . | {19: {401238, 115099}{4 | {19: {51.5986213, 4.8113099}{51 | . DDomain, nr of rows = 3 . ",
    "url": "/docs/rd2latlongwgs84.html#example",
    
    "relUrl": "/docs/rd2latlongwgs84.html#example"
  },"2449": {
    "doc": "rd2latlongwgs84",
    "title": "see also",
    "content": ". | latlongwgs842rd | rd2latlongge | rd2latlonged50 | rd2latlong | . ",
    "url": "/docs/rd2latlongwgs84.html#see-also",
    
    "relUrl": "/docs/rd2latlongwgs84.html#see-also"
  },"2450": {
    "doc": "rd2latlongwgs84",
    "title": "rd2latlongwgs84",
    "content": "geometric-functions RD2LatLongWgs84 . ",
    "url": "/docs/rd2latlongwgs84.html",
    
    "relUrl": "/docs/rd2latlongwgs84.html"
  },"2451": {
    "doc": "read-data",
    "title": "read-data",
    "content": "Data is read from a file or database with a storagemanager, if: . | At least the storagename property configured to a data-item or it’s parent-item. Often other StorageManager properties are also needed/useful. | No expression is configured for the data item. | . ",
    "url": "/docs/read-data.html",
    
    "relUrl": "/docs/read-data.html"
  },"2452": {
    "doc": "readarray",
    "title": "syntax",
    "content": ". | ReadArray(source, domainunit, valuetype, startposition, decimal-seperatorflag) | . ",
    "url": "/docs/readarray.html#syntax",
    
    "relUrl": "/docs/readarray.html#syntax"
  },"2453": {
    "doc": "readarray",
    "title": "definition",
    "content": "ReadArray(source, domainunit, valuetype, startposition, decimal-seperatorflag) results in an attribute, with row(s) of values, read from the source argument. The second domainunit configures the domain-unit of the resulting attribute. The third argument valuetype configures the value-type of the resulting attribute. The fourth argument startposition configures the read position in the source. Spaces/tabs are used as delimiter. The numbering of the positions is counted from left to right, meaning position two is the position of the second character in the first row. The ReadArray function also generates a uint32 parameter subitem, called ReadPos. This parameter indicates the position of the next value after the value being read by the ReadArray function, see the example. ",
    "url": "/docs/readarray.html#definition",
    
    "relUrl": "/docs/readarray.html#definition"
  },"2454": {
    "doc": "readarray",
    "title": "description",
    "content": "The ReadArray function is used to read a specific row from a text file, like an ini file. Use the readvalue function to read specific values from a text file. ",
    "url": "/docs/readarray.html#description",
    
    "relUrl": "/docs/readarray.html#description"
  },"2455": {
    "doc": "readarray",
    "title": "applies to",
    "content": ". | parameter source with string value type | unit domainunit with value type from group CanBeDomainUnit | valuetype can be any value type | parameter startposition with uint32 value type | decimal-separator, an optional additional uint32 parameter or literal with two possible values: . | 0 (default value): indicates a point is interpreted as decimal seperator | 1: indicates a comma is interpreted as decimal seperator. | . | . ",
    "url": "/docs/readarray.html#applies-to",
    
    "relUrl": "/docs/readarray.html#applies-to"
  },"2456": {
    "doc": "readarray",
    "title": "example",
    "content": "container ReadArray { parameter&lt;string&gt; file: StorageName = \"%projDir%/data/text.txt\", StorageType = \"str\"; unit&lt;uint32&gt; HDomain: nrofrows = 4; unit&lt;uint32&gt; BDomain: nrofrows = 6; attribute&lt;string&gt; Header (HDomain) := ReadArray(File, HDomain, string, 0); attribute&lt;string&gt; BodyRow1 (BDomain) := ReadArray(File, BDomain, string, Header/ReadPos); }; . |   |   |   |   |   |   |   | . | 6 | 9.02 | Test | True |   |   |   | . | 25000 | 27500 | 11000 | 6100 | 14400 | 300 | 70 | . | 30000 | 32500 | 12000 | 6200 | 14500 | 320 | 72 | . | 35000 | 37500 | 13000 | 6300 | 14600 | 340 | 74 | . | 40000 | 42500 | 14000 | 6400 | 14700 | 360 | 76 | . | 45000 | 47500 | 15000 | 6500 | 14800 | 380 | 78 | . | 50000 | 52500 | 16000 | 6600 | 14900 | 400 | 80 | . text.txt . | Header | . | 6 | . | 9.02 | . | Test | . | True | . HDomain, nr of rows = 4 . | BodyRow1 | . | 25000 | . | 27500 | . | 11000 | . | 6100 | . | 14400 | . | 300 | . | 70 | . BDomain, nr of rows = 6 . ",
    "url": "/docs/readarray.html#example",
    
    "relUrl": "/docs/readarray.html#example"
  },"2457": {
    "doc": "readarray",
    "title": "see also",
    "content": ". | readvalue | readelems | readlines | . ",
    "url": "/docs/readarray.html#see-also",
    
    "relUrl": "/docs/readarray.html#see-also"
  },"2458": {
    "doc": "readarray",
    "title": "readarray",
    "content": "file,-folder-and-read-functions ReadArray . ",
    "url": "/docs/readarray.html",
    
    "relUrl": "/docs/readarray.html"
  },"2459": {
    "doc": "readelems",
    "title": "syntax",
    "content": ". | ReadElems(sourceLines, valuesunit, startpositions, flagsvalue) | . ",
    "url": "/docs/readelems.html#syntax",
    
    "relUrl": "/docs/readelems.html#syntax"
  },"2460": {
    "doc": "readelems",
    "title": "definition",
    "content": "ReadElems(sourceLines, valuesunit, startpositions, flagsValue) results in an attribute, with column(s) of values of the sourceLines argument, for the domain-unit of the first and third argument. The resulting data-item contains the values of the sourceLines argument, starting at the startpositions that need to be configured for each element of the domain unit. Spaces, tabs, comma’s(if comma is not configured as decimal separator) and semicolons are used as field delimiters. This function also generates an uint32 attribute for the same domain unit, called readPos, containing the read positions after parsing a value from each line. The position is after reading the delimiter that ended the scanning of the read element, so this can be directly used to read the next field form a set of lines. ",
    "url": "/docs/readelems.html#definition",
    
    "relUrl": "/docs/readelems.html#definition"
  },"2461": {
    "doc": "readelems",
    "title": "applies to",
    "content": ". | attribute sourceLines with string value-type | valuesunit is the unit that is attributed to the resulting values and their value type. This type determines how characters are scanned, ie. integer are read until a non integer character is scanned, floating points can contain a decimal separator (default is the period) and can be in scientific notation (i.e. 1.23e+4). Strings can be quoted and quotes (single or double) will be removed during reading. | startpositions is a an attribute with uint32 value type | flagsValue is an optional uint32 parameter that indicates reading flags, which can be an additive combination of any of the following values: . | 1: commaAsDecimalSeparator: indicates a comma is interpreted as decimal separator, without this flag, the point is assumed to be the decimal-separator. | 2: noNegatives: indicates that a hyphen will be interpreted as a separate single character punctuation token and not as the start of a numeric value (starting from 7.411) | 4: noScientific: indicates that scientific number representation (with ‘e’) is not an option when reading a number (starting from version 7.411) | 8: noTabAsValueSeparator (starting from version 7.411) | 16: noSpaceAsStringTerminator (starting from version 7.411) | . | . ",
    "url": "/docs/readelems.html#applies-to",
    
    "relUrl": "/docs/readelems.html#applies-to"
  },"2462": {
    "doc": "readelems",
    "title": "conditions",
    "content": ". | The domain unit of the sourceLines and startpositions arguments must match. | . ",
    "url": "/docs/readelems.html#conditions",
    
    "relUrl": "/docs/readelems.html#conditions"
  },"2463": {
    "doc": "readelems",
    "title": "example",
    "content": "container ReadElems { parameter&lt;string&gt; file: StorageName = \"%projDir%/data/text.txt\", StorageType = \"str\"; unit&lt;uint32&gt; BDomain: nrofrows = 6; parameter&lt;float32&gt; Body:= ReadLines(File, BDomain, 0); attribute&lt;uint32&gt; FirstColumn (ReadLine/BDomain) := ReadElems(Body, uint32, const(0, BDomain)); attribute&lt;uint32&gt; LastColumn (ReadLine/BDomain) := ReadElems(Body, uint32, FirstColumn/readPos); }; . |   |   |   |   |   |   |   | . | 25000 | 27500 | 11000 | 6100 | 14400 | 300 | 70 | . | 30000 | 32500 | 12000 | 6200 | 14500 | 320 | 72 | . | 35000 | 37500 | 13000 | 6300 | 14600 | 340 | 74 | . | 40000 | 42500 | 14000 | 6400 | 14700 | 360 | 76 | . | 45000 | 47500 | 15000 | 6500 | 14800 | 380 | 78 | . | 50000 | 52500 | 16000 | 6600 | 14900 | 400 | 80 | . text.txt . | FirstColumn | LastColumn | . | 25000 | 70 | . | 30000 | 72 | . | 35000 | 74 | . | 40000 | 76 | . | 45000 | 78 | . | 50000 | 80 | . BDomain, nr of rows = 6 . ",
    "url": "/docs/readelems.html#example",
    
    "relUrl": "/docs/readelems.html#example"
  },"2464": {
    "doc": "readelems",
    "title": "see also",
    "content": ". | readvalue | readarray | readlines | tablechopper-(read-ascii-file) | . ",
    "url": "/docs/readelems.html#see-also",
    
    "relUrl": "/docs/readelems.html#see-also"
  },"2465": {
    "doc": "readelems",
    "title": "readelems",
    "content": "file,-folder-and-read-functions ReadElems . ",
    "url": "/docs/readelems.html",
    
    "relUrl": "/docs/readelems.html"
  },"2466": {
    "doc": "readlines",
    "title": "syntax",
    "content": ". | ReadLines(source, domainunit, startposition) | . ",
    "url": "/docs/readlines.html#syntax",
    
    "relUrl": "/docs/readlines.html#syntax"
  },"2467": {
    "doc": "readlines",
    "title": "definition",
    "content": "ReadLines(source, domainunit, startposition) results in a data-item, with the concatenation of the values of the rows of the source argument. The second argument domainunit configures the domain-unit of the resulting data item, for parameter this argument is void. The third argument startposition configures the read position in the source. The number of lines read is defined by the number of elements of the domain unit. In the resulting data item the delimiter between each value is the string representation of the tab character (\\t). The ReadLines function also generates a uint32 parameter subitem, called ReadPos. This parameter indicates the position of the next value after the value being read by the ReadLines function, see the example. ",
    "url": "/docs/readlines.html#definition",
    
    "relUrl": "/docs/readlines.html#definition"
  },"2468": {
    "doc": "readlines",
    "title": "applies to",
    "content": ". | parameter source with string value-type | unit domainunit with value type from group CanBeDomainUnit | parameter startposition with uint32 value type | . ",
    "url": "/docs/readlines.html#applies-to",
    
    "relUrl": "/docs/readlines.html#applies-to"
  },"2469": {
    "doc": "readlines",
    "title": "example",
    "content": "container ReadLines { parameter&lt;string&gt; file: StorageName = \"%projDir%/data/text.txt\", StorageType = \"str\"; unit&lt;uint32&gt; BDomain: nrofrows = 6; parameter&lt;string&gt; Header := ReadLines(file, void, 0); result = 6 9.02 Test True attribute&lt;string&gt; BodyRows (BDomain) := ReadLines(file, BDomain, Header/ReadPos); }; . |   |   |   |   |   |   |   | . | 6 | 9.02 | Test | True |   |   |   | . | 25000 | 27500 | 11000 | 6100 | 14400 | 300 | 70 | . | 30000 | 32500 | 12000 | 6200 | 14500 | 320 | 72 | . | 35000 | 37500 | 13000 | 6300 | 14600 | 340 | 74 | . | 40000 | 42500 | 14000 | 6400 | 14700 | 360 | 76 | . | 45000 | 47500 | 15000 | 6500 | 14800 | 380 | 78 | . | 50000 | 52500 | 16000 | 6600 | 14900 | 400 | 80 | . text.txt . |   | . |   | . | 25000275001100061001440030070 | . | 30000325001200062001450032072 | . | 35000375001300063001460034074 | . | 40000425001400064001470036076 | . | 45000475001500065001480038078 | . | 50000525001600066001490040080 | . BodyRows, BDomain, nr of rows = 6 . ",
    "url": "/docs/readlines.html#example",
    
    "relUrl": "/docs/readlines.html#example"
  },"2470": {
    "doc": "readlines",
    "title": "see also",
    "content": ". | readvalue | readelems | readarray | . ",
    "url": "/docs/readlines.html#see-also",
    
    "relUrl": "/docs/readlines.html#see-also"
  },"2471": {
    "doc": "readlines",
    "title": "readlines",
    "content": "file,-folder-and-read-functions ReadLines . ",
    "url": "/docs/readlines.html",
    
    "relUrl": "/docs/readlines.html"
  },"2472": {
    "doc": "readvalue",
    "title": "syntax",
    "content": ". | ReadValue(source, valuetype, startposition) | . ",
    "url": "/docs/readvalue.html#syntax",
    
    "relUrl": "/docs/readvalue.html#syntax"
  },"2473": {
    "doc": "readvalue",
    "title": "definition",
    "content": "ReadValue(source, valuetype, startposition) results in a single parameter value, read from the source argument. The second argument valuetype configures the value-type of the resulting parameter. The third argument startposition configures the read position in the source. Spaces/tabs are used as delimiter. The numbering of the positions is counted from left to right, meaning position two is the position of the second character in the first row. The ReadValue function also generates a uint32 parameter subitem, called ReadPos. This parameter indicates the position of the next value after the value being read by the ReadValue function, see the example. ",
    "url": "/docs/readvalue.html#definition",
    
    "relUrl": "/docs/readvalue.html#definition"
  },"2474": {
    "doc": "readvalue",
    "title": "description",
    "content": "The ReadValue function is used to read a specific value from a text file, like an ini file. Use the readarray function to read whole rows from a text file. ",
    "url": "/docs/readvalue.html#description",
    
    "relUrl": "/docs/readvalue.html#description"
  },"2475": {
    "doc": "readvalue",
    "title": "applies to",
    "content": ". | parameter source with string value type | valuetype can be any value type | parameter startposition with uint32 value type | . ",
    "url": "/docs/readvalue.html#applies-to",
    
    "relUrl": "/docs/readvalue.html#applies-to"
  },"2476": {
    "doc": "readvalue",
    "title": "example",
    "content": "container ReadValue { parameter&lt;string&gt; file: StorageName = \"%projDir%/data/text.txt\", StorageType = \"str\"; parameter&lt;uint32&gt; Value1 := ReadValue(file, uint32, 0); result = 6 parameter&lt;float32&gt; Value2 := ReadValue(file, float32, Value1/ReadPos); result = 9.02 parameter&lt;string&gt; Value3 := ReadValue(file, string, Value2/ReadPos); result = Test parameter&lt;bool&gt; Value4 := ReadValue(file, bool, Value3/ReadPos); result = True parameter&lt;uint32&gt; Value5 := ReadValue(file, uint32, Value4/ReadPos); result = 25000 }; . |   |   |   |   |   |   |   | . | 6 | 9.02 | Test | True |   |   |   | . | 25000 | 27500 | 11000 | 6100 | 14400 | 300 | 70 | . | 30000 | 32500 | 12000 | 6200 | 14500 | 320 | 72 | . | 35000 | 37500 | 13000 | 6300 | 14600 | 340 | 74 | . | 40000 | 42500 | 14000 | 6400 | 14700 | 360 | 76 | . | 45000 | 47500 | 15000 | 6500 | 14800 | 380 | 78 | . | 50000 | 52500 | 16000 | 6600 | 14900 | 400 | 80 | . text.txt . ",
    "url": "/docs/readvalue.html#example",
    
    "relUrl": "/docs/readvalue.html#example"
  },"2477": {
    "doc": "readvalue",
    "title": "see also",
    "content": ". | readarray | readelems | readlines | . ",
    "url": "/docs/readvalue.html#see-also",
    
    "relUrl": "/docs/readvalue.html#see-also"
  },"2478": {
    "doc": "readvalue",
    "title": "readvalue",
    "content": "file,-folder-and-read-functions ReadValue . ",
    "url": "/docs/readvalue.html",
    
    "relUrl": "/docs/readvalue.html"
  },"2479": {
    "doc": "recent-developments",
    "title": "recent-developments",
    "content": "The following development have been recently implemented : . | certificate | mapview-gui-toolbar-changes | BAG ToolKit updated to BAG 2.0 | tmp-calcache-no-longer-in-use | clean-up-support | wms-support | performance-tests | current-item-bar | multi-tasking | group-by-in-table | clean-up-gui | gdal GDAL 3, read and write data | . new serie: . | 8-serie-issues | . ",
    "url": "/docs/recent-developments.html",
    
    "relUrl": "/docs/recent-developments.html"
  },"2480": {
    "doc": "recollect_by_cond",
    "title": "description",
    "content": "Recollects attribute values of a selection back to an original set using the condition used for the selection. ",
    "url": "/docs/recollect_by_cond.html#description",
    
    "relUrl": "/docs/recollect_by_cond.html#description"
  },"2481": {
    "doc": "recollect_by_cond",
    "title": "syntax",
    "content": ". | recollect_by_cond(condition: D-&gt;Bool, values: S-&gt;V, fallbackValues: D-&gt;V) | recollect_by_cond(condition: D-&gt;Bool, values: S-&gt;V, fallbackValue: -&gt;V) | recollect_by_cond(condition: D-&gt;Bool, values: S-&gt;V) | . ",
    "url": "/docs/recollect_by_cond.html#syntax",
    
    "relUrl": "/docs/recollect_by_cond.html#syntax"
  },"2482": {
    "doc": "recollect_by_cond",
    "title": "definition",
    "content": "recollect_by_cond results in an attribute D-&gt;V having values taken from the values argument where a condition is true and using fallbackValue or fallbackValues where a condition is false, or undefined when no fallbackValues are provided. ",
    "url": "/docs/recollect_by_cond.html#definition",
    
    "relUrl": "/docs/recollect_by_cond.html#definition"
  },"2483": {
    "doc": "recollect_by_cond",
    "title": "example",
    "content": "attribute&lt;JunctionFreeSection&gt; JunctionFreeSection_rel := recollect_by_cond(ConnectedParts/IsJunctionFreeSection, ID(JunctionFreeSection)); . ",
    "url": "/docs/recollect_by_cond.html#example",
    
    "relUrl": "/docs/recollect_by_cond.html#example"
  },"2484": {
    "doc": "recollect_by_cond",
    "title": "recollect_by_cond",
    "content": "relational-functions recollect_by_cond . ",
    "url": "/docs/recollect_by_cond.html",
    
    "relUrl": "/docs/recollect_by_cond.html"
  },"2485": {
    "doc": "red-items-when-opening-a-configuration",
    "title": "solution",
    "content": "Open the Options dialog with the Tools &gt; Options menu item in the geodms-gui. Activate the Advanced tab. The SourceDataDir control indicates to which folder on your local machine the SourceDataDir placeholder refers. There are two options to solve the issue: . | Move (or copy) the source data of your project on your local machine to the folder indicated in this control. | Or adjust the value in the control, click OK, close the application and restart it to activate the new value. | . Check also if the localdatadir control refers to an existing folder on your local machine with enough space. Do not configure a network drive as LocalDataDir. ",
    "url": "/docs/red-items-when-opening-a-configuration.html#solution",
    
    "relUrl": "/docs/red-items-when-opening-a-configuration.html#solution"
  },"2486": {
    "doc": "red-items-when-opening-a-configuration",
    "title": "red-items-when-opening-a-configuration",
    "content": ". When opening a project, it can occur that source data can not be read. Items become red and errors are generated. This usually indicates the folders-and-placeholders sourcedatadir used in the configuration, refers to a folder on your local machine not containing the source data used in your project. ",
    "url": "/docs/red-items-when-opening-a-configuration.html",
    
    "relUrl": "/docs/red-items-when-opening-a-configuration.html"
  },"2487": {
    "doc": "reg_count",
    "title": "syntax",
    "content": ". | reg_count(a, b, c, d) | . ",
    "url": "/docs/reg_count.html#syntax",
    
    "relUrl": "/docs/reg_count.html#syntax"
  },"2488": {
    "doc": "reg_count",
    "title": "definition",
    "content": "reg_count(a, b, c, d) results in a set of attribute with the count of the non null values of attribute a, for each value class in a named by attribute b per region towards the regional level defined in the string attribute d. The labels in this string attribute d need to refer to the names of the relation in container c. The values-unit for each resulting data-item is uint32 and the domain-unit depend on the values unit of the corresponding relations. The reg_count_uint16/reg_count_uint8 versions can be used in the same manner as the reg_count function, resulting in data items with a uint16 or uint8 values unit. ",
    "url": "/docs/reg_count.html#definition",
    
    "relUrl": "/docs/reg_count.html#definition"
  },"2489": {
    "doc": "reg_count",
    "title": "applies to",
    "content": ". | attribute a with uint32 value-type | attribute b with string value type | container c | attribute d with string value type | . ",
    "url": "/docs/reg_count.html#applies-to",
    
    "relUrl": "/docs/reg_count.html#applies-to"
  },"2490": {
    "doc": "reg_count",
    "title": "conditions",
    "content": ". | The domain unit of attribute a must match with the domain of the attribute in container c. | The values unit of attribute a has to be the domain of attributes b and d. | The values of attribute d need to refer to subitem attributes in container c. | The value type of the attribute in container c must be of the group CanBeDomainUnit. | . ",
    "url": "/docs/reg_count.html#conditions",
    
    "relUrl": "/docs/reg_count.html#conditions"
  },"2491": {
    "doc": "reg_count",
    "title": "since version",
    "content": "5.85 . ",
    "url": "/docs/reg_count.html#since-version",
    
    "relUrl": "/docs/reg_count.html#since-version"
  },"2492": {
    "doc": "reg_count",
    "title": "example",
    "content": "container reg_count { container units { unit&lt;uint32&gt; Domain: nrofrows = 10; unit&lt;uint8&gt; RegioA: nrofrows = 5; unit&lt;uint8&gt; RegioB: nrofrows = 3; unit&lt;uint8&gt; Class: nrofrows = 4 { attribute&lt;string&gt; label: ['Class1','Class2','Class3','Class4']; } } container regios { attribute&lt;units/RegioA&gt; A (units/Domain): [0,0,1,2,3,0,4,2,1,0]; attribute&lt;units/RegioB&gt; B (units/Domain): [1,0,2,2,0,0,1,2,1,0]; } attribute&lt;units/Class&gt; src (units/Domain): [0,1,3,2,0,1,2,1,0,3]; attribute&lt;string&gt; refs (units/Class): ['A','A','B','A']; container attributes := reg_count( src , units/Class/label , Regios , refs ); }; . | attributes/class1 | attributes/class2 | attributes/class4 | . | 1 | 2 | 1 | . | 1 | 0 | 1 | . | 0 | 1 | 0 | . | 1 | 0 | 0 | . | 0 | 0 | 0 | . domain RegioA, nr of rows = 5 . | attributes/class3 | . | 0 | . | 1 | . | 1 | . domain RegioB, nr of rows = 3 . ",
    "url": "/docs/reg_count.html#example",
    
    "relUrl": "/docs/reg_count.html#example"
  },"2493": {
    "doc": "reg_count",
    "title": "reg_count",
    "content": "aggregation-functions reg_count . ",
    "url": "/docs/reg_count.html",
    
    "relUrl": "/docs/reg_count.html"
  },"2494": {
    "doc": "regex-flags",
    "title": "regex-flags",
    "content": "argument of regex_match, regex_search and regex_replace operators-and-functions . In the regex_match, regex_search and regex_replace functions an optional flag parameter can be configured to control how a source string is matched against the configured expression syntax. More information on this flag argument can be found here. In the GeoDMS this argument is passed as uint32 parameter, see the next enumeration for how these parameter values relate to the described flags. match_default          = 0, match_not_bol          = 1, /* 0x00000001: is not start of line */ match_not_eol          = match_not_bol &lt;&lt; 1, /* 0x00000002: last is not end of line */ match_not_bob          = match_not_eol &lt;&lt; 1, /* 0x00000004: first is not start of buffer */ match_not_eob          = match_not_bob &lt;&lt; 1, /* 0x00000008: last is not end of buffer */ match_not_bow          = match_not_eob &lt;&lt; 1, /* 0x00000010: first is not start of word */ match_not_eow          = match_not_bow &lt;&lt; 1, /* 0x00000020: last not end of word */ match_not_dot_newline  = match_not_eow &lt;&lt; 1, /* 0x00000040: \\n is not matched by '.' */ match_not_dot_null     = match_not_dot_newline &lt;&lt; 1, /* 0x00000080: '\\0' is not matched by '.' */ match_prev_avail       = match_not_dot_null &lt;&lt; 1, /* 0x00000100: *--first is a valid expression */ match_init             = match_prev_avail &lt;&lt; 1, /* 0x00000200: internal use */ match_any              = match_init &lt;&lt; 1, /* 0x00000400: don't care what we match */ match_not_null         = match_any &lt;&lt; 1, /* 0x00000800: string can't be null */ match_continuous       = match_not_null &lt;&lt; 1, /* 0x00001000: each grep match must continue from */                                                     /* uninterupted from the previous one */` match_partial          = match_continuous &lt;&lt; 1, /* 0x00002000: find partial matches */ match_stop             = match_partial &lt;&lt; 1, /* 0x00004000: stop after first match (grep) V3 only */ match_not_initial_null = match_stop, /* 0x00008000: don't match initial null, V4 only */ match_all              = match_stop &lt;&lt; 1, /* 0x00010000 must find the whole of input even if match_any is set */ match_perl             = match_all &lt;&lt; 1, /* 0x00020000 Use perl matching rules */ match_posix            = match_perl &lt;&lt; 1, /* 0x00040000 Use POSIX matching rules */ match_nosubs           = match_posix &lt;&lt; 1, /* 0x00080000 don't trap marked subs */ match_extra            = match_nosubs &lt;&lt; 1, /* 0x00100000 include full capture information for repeated captures */ match_single_line      = match_extra &lt;&lt; 1, /* 0x00200000  treat text as single line and ignor any \\n's when  matching ^ and $. */ match_unused1          = match_single_line &lt;&lt; 1, /* unused */ match_unused2          = match_unused1 &lt;&lt; 1, /* unused */ match_unused3          = match_unused2 &lt;&lt; 1, /* unused */ match_max              = match_unused3, /* 0x01000000 format_perl            = 0, /* perl style replacement */ format_default         = 0, /* ditto. */ format_sed             = match_max &lt;&lt; 1, /* 0x02000000 sed style replacement. */ format_all             = format_sed &lt;&lt; 1, /* 0x04000000 enable all extentions to sytax. */ format_no_copy         = format_all &lt;&lt; 1, /* 0x08000000 don't copy non-matching segments. */ format_first_only      = format_no_copy &lt;&lt; 1, /* 0x10000000 Only replace first occurance. */ format_is_if           = format_first_only &lt;&lt; 1, /* 0200000000 internal use only. */ format_literal         = format_is_if &lt;&lt; 1 /* 0x40000000 treat string as a literal */ . ",
    "url": "/docs/regex-flags.html",
    
    "relUrl": "/docs/regex-flags.html"
  },"2495": {
    "doc": "regex_match",
    "title": "syntax",
    "content": ". | regex_match(source, syntax, optionalflag) | . ",
    "url": "/docs/regex_match.html#syntax",
    
    "relUrl": "/docs/regex_match.html#syntax"
  },"2496": {
    "doc": "regex_match",
    "title": "definition",
    "content": "regex_match(source, syntax, optionalflag) results in a boolean data-item indicating if the source data item matches the syntax expressed by the syntax argument. A third optional argument optionalflag can be configured to control how the source string is matched against the syntax expressed by the syntax argument. ",
    "url": "/docs/regex_match.html#definition",
    
    "relUrl": "/docs/regex_match.html#definition"
  },"2497": {
    "doc": "regex_match",
    "title": "description",
    "content": "regex_match uses the boost 1.51 regex_match function. Click here for valid regex syntax rules and semantics. The third, optionalflag argument is optional. More information on this argument can be found here. In the GeoDMS this argument is passed as a uint32 parameter, see the enumeration of regex-flags. ",
    "url": "/docs/regex_match.html#description",
    
    "relUrl": "/docs/regex_match.html#description"
  },"2498": {
    "doc": "regex_match",
    "title": "applies to",
    "content": ". | data items source and syntax with string value-type | parameter optionalflag with uint32 value-type | . ",
    "url": "/docs/regex_match.html#applies-to",
    
    "relUrl": "/docs/regex_match.html#applies-to"
  },"2499": {
    "doc": "regex_match",
    "title": "since version",
    "content": "7.011 . ",
    "url": "/docs/regex_match.html#since-version",
    
    "relUrl": "/docs/regex_match.html#since-version"
  },"2500": {
    "doc": "regex_match",
    "title": "example",
    "content": "parameter&lt;string&gt; Text  := dquote('Corop') + ';' + dquote('CoropLabel'); parameter&lt;string&gt; Quote :=  quote('Corop') + ';' +  quote('CoropLabel'); parameter&lt;string&gt; Comma := dquote('Corop') + ',' + dquote('CoropLabel'); // the following regex_match functions check if the text parameters only // contain double quoted column names separated by semicolons // and no other characters parameter&lt;bool&gt; T := regex_match(text,  '\"[^\"]*+\"(;\"[^\"]*+\")*+'); result = True parameter&lt;bool&gt; Q := regex_match(quote, '\"[^\"]*+\"(;\"[^\"]*+\")*+'); result = False (due to single quote) parameter&lt;bool&gt; C := regex_match(comma, '\"[^\"]*+\"(;\"[^\"]*+\")*+'); result = False (due to comma) . ",
    "url": "/docs/regex_match.html#example",
    
    "relUrl": "/docs/regex_match.html#example"
  },"2501": {
    "doc": "regex_match",
    "title": "see also",
    "content": ". | regex_search | regex_replace | . ",
    "url": "/docs/regex_match.html#see-also",
    
    "relUrl": "/docs/regex_match.html#see-also"
  },"2502": {
    "doc": "regex_match",
    "title": "regex_match",
    "content": "miscellaneous-functions regex_match . ",
    "url": "/docs/regex_match.html",
    
    "relUrl": "/docs/regex_match.html"
  },"2503": {
    "doc": "regex_replace",
    "title": "syntax",
    "content": ". | regex_replace(source, syntax, newvalues, optionalflag) | . ",
    "url": "/docs/regex_replace.html#syntax",
    
    "relUrl": "/docs/regex_replace.html#syntax"
  },"2504": {
    "doc": "regex_replace",
    "title": "definition",
    "content": "regex_replace(source, syntax, newvalues, optionalflag) results in a string data-item in which the substrings of the source argument that meet the syntax argument are replaced by the newvalues argument. A fourth optional argument optionalflag can be configured to control how the source string is matched against the syntax expressed by the syntax argument. ",
    "url": "/docs/regex_replace.html#definition",
    
    "relUrl": "/docs/regex_replace.html#definition"
  },"2505": {
    "doc": "regex_replace",
    "title": "description",
    "content": "regex_match uses the boost 1.51 regex_match function. Click here for valid regex syntax rules and semantics. The fourth, optionalflag argument is optional. More information on this argument can be found here. In the GeoDMS this argument is passed as a uint32 parameter, see the enumeration of regex-flags. ",
    "url": "/docs/regex_replace.html#description",
    
    "relUrl": "/docs/regex_replace.html#description"
  },"2506": {
    "doc": "regex_replace",
    "title": "applies to",
    "content": ". | data items source, syntax and newvalues with string value type | parameter optionalflag with uint32 value-type | . ",
    "url": "/docs/regex_replace.html#applies-to",
    
    "relUrl": "/docs/regex_replace.html#applies-to"
  },"2507": {
    "doc": "regex_replace",
    "title": "since version",
    "content": "7.011 . ",
    "url": "/docs/regex_replace.html#since-version",
    
    "relUrl": "/docs/regex_replace.html#since-version"
  },"2508": {
    "doc": "regex_replace",
    "title": "example",
    "content": "parameter&lt;string&gt; Text := dquote('Corop') + ';' + dquote('CoropLabel')\"; // the following regex_replace function replaces double quoted headers // by the newvalue: 'NewLabel' parameter&lt;bool&gt; NewLabels := regex_replace(Text, '\\\"[^\\\"]*+\\\"',quote('NewLabel')); . result = ‘NewLabel’;’NewLabel’ . ",
    "url": "/docs/regex_replace.html#example",
    
    "relUrl": "/docs/regex_replace.html#example"
  },"2509": {
    "doc": "regex_replace",
    "title": "see also",
    "content": ". | regex_match | regex_search | replace | . ",
    "url": "/docs/regex_replace.html#see-also",
    
    "relUrl": "/docs/regex_replace.html#see-also"
  },"2510": {
    "doc": "regex_replace",
    "title": "regex_replace",
    "content": "miscellaneous-functions regex_replace . ",
    "url": "/docs/regex_replace.html",
    
    "relUrl": "/docs/regex_replace.html"
  },"2511": {
    "doc": "regex_search",
    "title": "syntax",
    "content": ". | regex_search(source, searchsyntax , optionalflag) | . ",
    "url": "/docs/regex_search.html#syntax",
    
    "relUrl": "/docs/regex_search.html#syntax"
  },"2512": {
    "doc": "regex_search",
    "title": "definition",
    "content": "regex_search(source, searchsyntax , optionalflag) results in a string data-item with a substring of the source argument that meets the searchsyntax argument. A third optional argument optionalflag can be configured to control how the source string is matched against the searchsyntax expressed by the syntax argument. ",
    "url": "/docs/regex_search.html#definition",
    
    "relUrl": "/docs/regex_search.html#definition"
  },"2513": {
    "doc": "regex_search",
    "title": "description",
    "content": "regex_match uses the boost 1.51 regex_match function. Click here for valid regex syntax rules and semantics. The third, optionalflag argument is optional. More information on this argument can be found here. In the GeoDMS this argument is passed as a uint32 parameter, see the enumeration of regex-flags. ",
    "url": "/docs/regex_search.html#description",
    
    "relUrl": "/docs/regex_search.html#description"
  },"2514": {
    "doc": "regex_search",
    "title": "applies to",
    "content": ". | data items source and searchsyntax with string value-type | parameter optionalflag with uint32 value type | . ",
    "url": "/docs/regex_search.html#applies-to",
    
    "relUrl": "/docs/regex_search.html#applies-to"
  },"2515": {
    "doc": "regex_search",
    "title": "since version",
    "content": "7.011 . ",
    "url": "/docs/regex_search.html#since-version",
    
    "relUrl": "/docs/regex_search.html#since-version"
  },"2516": {
    "doc": "regex_search",
    "title": "example",
    "content": "parameter&lt;string&gt; TextOk := dquote('Corop') + ';' + dquote('CoropLabel'); // the following regex_search function searches the TextOk  // parameter by the configured syntax  parameter&lt;bool&gt; FindSubString := regex_search(Regex_match/TextOk,'\"[^\"]*+\"',0); result = \"Corop\" . ",
    "url": "/docs/regex_search.html#example",
    
    "relUrl": "/docs/regex_search.html#example"
  },"2517": {
    "doc": "regex_search",
    "title": "see also",
    "content": ". | regex_match | regex_replace | . ",
    "url": "/docs/regex_search.html#see-also",
    
    "relUrl": "/docs/regex_search.html#see-also"
  },"2518": {
    "doc": "regex_search",
    "title": "regex_search",
    "content": "miscellaneous-functions regex_search . ",
    "url": "/docs/regex_search.html",
    
    "relUrl": "/docs/regex_search.html"
  },"2519": {
    "doc": "relate_attr",
    "title": "relate_attr",
    "content": "relational-functions relate_attr . The relate_attr is a depreciated name for the collect_attr_by_org_rel function. It was used in the GeoDMS versions between 8.5.2 and 8.7.2. We advice to rename this function to it’s new name: collect_attr_by_org_rel in your configurations. ",
    "url": "/docs/relate_attr.html",
    
    "relUrl": "/docs/relate_attr.html"
  },"2520": {
    "doc": "relation",
    "title": "naming convention",
    "content": "It is advised to use the postfix _rel when naming index attributes, see also naming-conventions. ",
    "url": "/docs/relation.html#naming-convention",
    
    "relUrl": "/docs/relation.html#naming-convention"
  },"2521": {
    "doc": "relation",
    "title": "how to make",
    "content": "Relations are often made with a rlookup or point_in_polygon function. See also relational-attribute-example. ",
    "url": "/docs/relation.html#how-to-make",
    
    "relUrl": "/docs/relation.html#how-to-make"
  },"2522": {
    "doc": "relation",
    "title": "use",
    "content": "Relations are often used in relational-functions and aggregation-functions. ",
    "url": "/docs/relation.html#use",
    
    "relUrl": "/docs/relation.html#use"
  },"2523": {
    "doc": "relation",
    "title": "relation",
    "content": "A relation or relational attribute is an attribute containing as values the ordinal number of the elements of another domain. It thereby defines a mapping from each element of the domain for which it is an attribute to that other domain-unit. The following picture illustrates this: . A relation has the source domain as domain unit and the related/target domain as values-unit. It’s a mapping from the source towards the elated/target domain. Synonyms in use for relation: partitioning, index-attribute, relational attribute; . ",
    "url": "/docs/relation.html",
    
    "relUrl": "/docs/relation.html"
  },"2524": {
    "doc": "relational-attribute-example",
    "title": "example 1, relation based on (external) code attributes",
    "content": "container administrative {    unit&lt;uint32&gt; neighborhood    :  StorageName = \"%SourceDataDir%/CBS/2017/neighborhood\"    ,  StorageType = \"gdal.vect\"   {      attribute&lt;string&gt;       municipality_code;      attribute&lt;municipality&gt; municipality_rel := rlookup(municipality_code, municipality/values);   }   unit&lt;uint32&gt; municipality := unique(neighborhood/municipality_code); } . Explanation: . The example presents how an external code can be used to configure a relation. In the example the external code municipality_code is read from a source. Based on this attribute the municipality domain unit is configured with the unique function. This results in a domain unit with the generated subitem values, containing all unique municipality_codes in alphabetic order. The resulting relation: municipality_rel attribute, configured with the rlookup values, results in the index-numbers of the municipality domain for the neighborhood domain. ",
    "url": "/docs/relational-attribute-example.html#example-1-relation-based-on-external-code-attributes",
    
    "relUrl": "/docs/relational-attribute-example.html#example-1-relation-based-on-external-code-attributes"
  },"2525": {
    "doc": "relational-attribute-example",
    "title": "example 2, relation based on geometry (point in polygon)",
    "content": "container bag {    unit&lt;uint32&gt; vbo    :  StorageName = \"%SourceDataDir%/BAG/20170101/vbo.shp\"    ,  StorageType = \"gdal.vect\"   {      attribute&lt;point_rd&gt;     geometry;      attribute&lt;municipality&gt; municipality_rel := point_in_polygon(geometry, municipality/geometry);   }   unit&lt;uint32&gt; municipality    :  StorageName = \"%SourceDataDir%/CSB/2017/municipality.shp\"    ,  StorageType = \"gdal.vect\"   {      attribute&lt;point_rd&gt; geometry (poly);   } } . Explanation: . The example presents how a relation can be configured based on a point in polygon relation. In the example the geometry of a vbo (verblijfsobject in the BAG) and the geometry of municipalities are read from storages. The point_in_polygon function results in the index-numbers of the municipality domain for the vbo domain. The relation indicates in which municipality the vbo is located. ",
    "url": "/docs/relational-attribute-example.html#example-2-relation-based-on-geometry-point-in-polygon",
    
    "relUrl": "/docs/relational-attribute-example.html#example-2-relation-based-on-geometry-point-in-polygon"
  },"2526": {
    "doc": "relational-attribute-example",
    "title": "relational-attribute-example",
    "content": "configuration-examples Relational attribute . relation are used to relate domain-unit. They are use in many calculations, especially in aggregation-functions and relational-functions. Relational attributes can be made in different ways, two examples that occur often are presented here . ",
    "url": "/docs/relational-attribute-example.html",
    
    "relUrl": "/docs/relational-attribute-example.html"
  },"2527": {
    "doc": "relational-functions",
    "title": "relational-functions",
    "content": "Relational operators-and-functions are used to relate data-item of different domain-unit like lookup or rjoin or create new domain units like unique. Selection functions van be found on the separate page: selection-functions. | id - index numbers | mapping - to map attributes between domain units | . | lookup - using a relation to find the relevant entries | rlookup - using a foreign key attribute to make a relation | rjoin - using a foreign key to find the relevant entries, combining lookup and rlookup | join_equal_values - find all combinations of A and B wherfe A.x_rel is equal to B.x_rel | join_equal_values_uint8_16_32_64 - find all combinations of A and B wherfe A.x_rel is equal to B.x_rel, resulting in a domain unit with the explicit value type | . | index - an index number based on a sort order | direct_index | . | invert - inverts a relation | . | collect_attr_by_org_rel - collects a set of attributes to a new domain unit, using an org_rel attribute (lookup) | collect_attr_by_cond - collects a set of attributes to a new domain unit, using a condition | collect_by_cond - collects an attributes to a new domain unit, using a condition | recollect_by_cond - recollects attribute values of a selection back to an original set using the condition for the selection. | . | unique - configures a new unit, based on the unique values | unique_uint8_16_32_64 - configures a new unit, based on the unique values, with a uint8_16_32_64 values unit | union - obsolete, only in use for backward compatibility | union_unit - configures a new unit, based on the union of other units | union_unit_uint8_16_32_64 - configures a new unit, based on the union of other units, with a uint8_16_32_64 values unit | union_data - configures a new attribute, based on the union of other data items | combine - configures a new unit, based on the Cartesian product of other units | combine_unit_uint8_16_32_64 - configures a new unit, without subitems, based on the Cartesian product of other units, with a uint8_16_32_64 values unit | combine_uint8_16_32_64 - configures a new unit, based on the Cartesian product of other units, with a uint8_16_32_64 values unit | combine_data - configures a new attribute, based on the Cartesian product of other data items | . | merge - merges the values of a data item, based on an option data item | . | overlay - an uint16 domain unit with the unique values of multiple grid attributes | overlay32 - an uint32 domain unit with the unique values of multiple grid attributes | overlay64 - an uint64 domain unit with the unique values of multiple grid attributes | . ",
    "url": "/docs/relational-functions.html",
    
    "relUrl": "/docs/relational-functions.html"
  },"2528": {
    "doc": "relational-model-versus-semantic-arrays",
    "title": "download",
    "content": ". | configuration/data | . ",
    "url": "/docs/relational-model-versus-semantic-arrays.html#download",
    
    "relUrl": "/docs/relational-model-versus-semantic-arrays.html#download"
  },"2529": {
    "doc": "relational-model-versus-semantic-arrays",
    "title": "example",
    "content": "In the examples of this chapter we will use the following relational model, derived from the Dutch BAG model. Each apartment has a unique identifier (Id, primary key) and an administrative address (Street, Number, Zipcode and Town). A boolean attribute (IsResidential) indicates if the apartment has a residential function. The last attribute is the Surface (in square meters) of the apartment. Each building has also a unique identifier (Id, primary key), a construction year and a footprint of the building in square meters. The footprint can also be calculated with the area function in the GeoDMS. Apartments can be related to multiple buildings and buildings can consist of multiple apartments, the relation is therefore a n-n relation, implemented in a third relational table called ApartmentBuildingRelation. In this table ApartmentId and BuildingId are foreign keys. ",
    "url": "/docs/relational-model-versus-semantic-arrays.html#example",
    
    "relUrl": "/docs/relational-model-versus-semantic-arrays.html#example"
  },"2530": {
    "doc": "relational-model-versus-semantic-arrays",
    "title": "relation model versus semantic arrays",
    "content": "A relation in the relational model is defined as a subset of the Cartesian product of n domains. These relations are represented as tables/views. In a relation a primary key uniquely specifies a tuple. Foreign keys are used to represent 1-n or n-n relations between relations. Structured Query Languages (like SQL) are used to: . | define/modify or delete database objects (DDL), see ddl for how to configure DDL statementes in the GeoDMS. | query/modify/delete data from tables/views (DML), see dml for how to configure DML statementes in the GeoDMS. | . The GeoDMS uses a data model with semantic arrays. Semantics means each array is associated with meta information, used to derive calculation characteristics and check calculation logic. Semantic arrays are mappings between sets, in GeoDMS terms typed by domain-unit and values-unit. Relevant differences between the attributes of relations in the relational model and semantic arrays: . | domain units need to be configured explicitly. As a semantic array is defined by its domain and values units, these units need to be configured explicitly before the arrays can be defined. In the relation model a SQL statement results in a new view/relation with a subset of the source table(s)/views. In the GeoDMS such an operation is performed in two steps: | . | use a relation function to define the new domain unit. | define the relevant attributes for the new domain unit. | . See for example the Select From Where example. | index-numbers (mappings) are used to relate domains. aggregation-functions and relational-functions functions always work with these index numbers. Foreign keys in relations are therefore first translated to the index numbers of the relating domain (with the rlookup function). Such an attribute with domain unit A and as the index numbers of domain B is called a partitioning. | As the GeoDMS uses arrays, the sequence of elements matter. In the relation model there is no meaning in the ordering of the rows of a relation. A domain unit in the GeoDMS can be defined, in terms of the relational model, as an ordered relation. The sequence of the elements is relevant and if the sequence of elements would be different, they also need to have a different domain unit. This ordering can for instance be used in cumulative functions. | . ",
    "url": "/docs/relational-model-versus-semantic-arrays.html#relation-model-versus-semantic-arrays",
    
    "relUrl": "/docs/relational-model-versus-semantic-arrays.html#relation-model-versus-semantic-arrays"
  },"2531": {
    "doc": "relational-model-versus-semantic-arrays",
    "title": "GeoDMS configuration examples",
    "content": ". | See ddl for how to configure SQL data definition statements (Create Table, Alter Table, ..) | See dml for how to configure SQL data manipluation statements (Select Statements) | . ",
    "url": "/docs/relational-model-versus-semantic-arrays.html#geodms-configuration-examples",
    
    "relUrl": "/docs/relational-model-versus-semantic-arrays.html#geodms-configuration-examples"
  },"2532": {
    "doc": "relational-model-versus-semantic-arrays",
    "title": "relational-model-versus-semantic-arrays",
    "content": "To structure data, different data models are used. As the GeoDMS works with geographic data, geographic data models are relevant to structure this type of data, see topic geography. Another relevant and well-known data model, used in many databases is the relational model. Much data is structured according to this model and many data modelers and database designers are familiar with this model. The focus of this chapter will be on assisting these modelers how the relational model relates to the GeoDMS datamodel and how relational operations can be configured in the GeoDMS. All examples in this chapters are also visible in a complete configuration example, which can be downloaded here. ",
    "url": "/docs/relational-model-versus-semantic-arrays.html",
    
    "relUrl": "/docs/relational-model-versus-semantic-arrays.html"
  },"2533": {
    "doc": "repeat",
    "title": "syntax",
    "content": ". | repeat(string_dataitem, number) | . ",
    "url": "/docs/repeat.html#syntax",
    
    "relUrl": "/docs/repeat.html#syntax"
  },"2534": {
    "doc": "repeat",
    "title": "definition",
    "content": "repeat(string_dataitem, number) repeats number (of) times the values of string_dataitem. ",
    "url": "/docs/repeat.html#definition",
    
    "relUrl": "/docs/repeat.html#definition"
  },"2535": {
    "doc": "repeat",
    "title": "applies to",
    "content": ". | data-item string_dataitem with string value-type | data item number with uint32 value type | . ",
    "url": "/docs/repeat.html#applies-to",
    
    "relUrl": "/docs/repeat.html#applies-to"
  },"2536": {
    "doc": "repeat",
    "title": "conditions",
    "content": "The domain-unit of data items string_dataitem and number must match (literals or parameter can be compared to data items of any domain unit). ",
    "url": "/docs/repeat.html#conditions",
    
    "relUrl": "/docs/repeat.html#conditions"
  },"2537": {
    "doc": "repeat",
    "title": "since version",
    "content": "5.35 . ",
    "url": "/docs/repeat.html#since-version",
    
    "relUrl": "/docs/repeat.html#since-version"
  },"2538": {
    "doc": "repeat",
    "title": "example",
    "content": "attribute&lt;string&gt; repeatA (ADomain) := repeat(A, nr); . | A | nr | repeatA | . | ‘0’ | 0 |   | . | ‘1’ | 1 | ‘1’ | . | ‘2’ | 2 | ‘22’ | . | ‘3’ | 3 | ‘333’ | . | ‘4’ | 4 | ‘4444’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/repeat.html#example",
    
    "relUrl": "/docs/repeat.html#example"
  },"2539": {
    "doc": "repeat",
    "title": "repeat",
    "content": "string-functions repeat . ",
    "url": "/docs/repeat.html",
    
    "relUrl": "/docs/repeat.html"
  },"2540": {
    "doc": "replace",
    "title": "syntax",
    "content": ". | replace(source_string_dataitem, old_substring, new_substring) | . ",
    "url": "/docs/replace.html#syntax",
    
    "relUrl": "/docs/replace.html#syntax"
  },"2541": {
    "doc": "replace",
    "title": "definition",
    "content": "replace(source_string_dataitem, old_substring, new_substring) replaces old_substring in the source_string_dataitem with new_substring. ",
    "url": "/docs/replace.html#definition",
    
    "relUrl": "/docs/replace.html#definition"
  },"2542": {
    "doc": "replace",
    "title": "description",
    "content": "The replace function replaces full and substrings in source_string_dataitem. The replace_value replaces only string values that fully matches. The replace function is case sensitive. Multiple replacements can be combined in the replace function with the symtax: replace(source_string_dataitem, old_substring1, new_substring1, old_substring2, new_substring2). Replacements are executed according to their configuration sequence, so in the example first old_substring1 by new_substring1, then old_substring2 by new_substring2. ",
    "url": "/docs/replace.html#description",
    
    "relUrl": "/docs/replace.html#description"
  },"2543": {
    "doc": "replace",
    "title": "applies to",
    "content": ". | data-item source_string_dataitem, old_substring, new_substring with string value-type | . ",
    "url": "/docs/replace.html#applies-to",
    
    "relUrl": "/docs/replace.html#applies-to"
  },"2544": {
    "doc": "replace",
    "title": "conditions",
    "content": "The domain-unit of all argument must match or be void (literals or parameter can be compared to data items of any domain unit). ",
    "url": "/docs/replace.html#conditions",
    
    "relUrl": "/docs/replace.html#conditions"
  },"2545": {
    "doc": "replace",
    "title": "example",
    "content": "attribute&lt;string&gt; replaceA (ADomain) := replace(A, 'Tes', 'Taar'); . | A | replaceA | . | ‘Test’ | ‘Taart’ | . | ‘test’ | ‘test’ | . | ‘88hallo99’ | ‘88hallo99’ | . | ‘Test met Text’ | ‘Taart met Text’ | . | ‘Text met Test’ | ‘Text met Taart’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/replace.html#example",
    
    "relUrl": "/docs/replace.html#example"
  },"2546": {
    "doc": "replace",
    "title": "see also",
    "content": ". | replace_value | regex_replace | . ",
    "url": "/docs/replace.html#see-also",
    
    "relUrl": "/docs/replace.html#see-also"
  },"2547": {
    "doc": "replace",
    "title": "replace",
    "content": "string-functions replace . ",
    "url": "/docs/replace.html",
    
    "relUrl": "/docs/replace.html"
  },"2548": {
    "doc": "replace_value",
    "title": "syntax",
    "content": ". | replace_value(source_string_dataitem, old_string, new_string) | . ",
    "url": "/docs/replace_value.html#syntax",
    
    "relUrl": "/docs/replace_value.html#syntax"
  },"2549": {
    "doc": "replace_value",
    "title": "definition",
    "content": "replace_value(source_string_dataitem, old_string, new_string) replace_values old_string in the source_string_dataitem with new_string. ",
    "url": "/docs/replace_value.html#definition",
    
    "relUrl": "/docs/replace_value.html#definition"
  },"2550": {
    "doc": "replace_value",
    "title": "description",
    "content": "The replace_value function replaces only string values that fully matches. The replace function replaces full and substrings in source_string_dataitem. The replace_value function is case insensitive . ",
    "url": "/docs/replace_value.html#description",
    
    "relUrl": "/docs/replace_value.html#description"
  },"2551": {
    "doc": "replace_value",
    "title": "applies to",
    "content": ". | data-item source_string_dataitem, old_string, new_string with string value-type | . ",
    "url": "/docs/replace_value.html#applies-to",
    
    "relUrl": "/docs/replace_value.html#applies-to"
  },"2552": {
    "doc": "replace_value",
    "title": "conditions",
    "content": "The domain-unit of all argument must match or be void (literals or parameter can be compared to data items of any domain unit). ",
    "url": "/docs/replace_value.html#conditions",
    
    "relUrl": "/docs/replace_value.html#conditions"
  },"2553": {
    "doc": "replace_value",
    "title": "example",
    "content": "attribute&lt;string&gt; replace_valueA (ADomain) := replace_value(A, 'Tes', 'Taart'); . | A | replace_valueA | . | ‘Tes’ | ‘Taart’ | . | ‘tes’ | ‘Taart’ | . | ‘88hallo99’ | ‘88hallo99’ | . | ‘Test met Text’ | ‘Test met Text’ | . | ‘Tes met Test’ | ‘Tes met Test’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/replace_value.html#example",
    
    "relUrl": "/docs/replace_value.html#example"
  },"2554": {
    "doc": "replace_value",
    "title": "see also",
    "content": ". | replace | regex_replace | . ",
    "url": "/docs/replace_value.html#see-also",
    
    "relUrl": "/docs/replace_value.html#see-also"
  },"2555": {
    "doc": "replace_value",
    "title": "replace_value",
    "content": "string-functions replace_value . ",
    "url": "/docs/replace_value.html",
    
    "relUrl": "/docs/replace_value.html"
  },"2556": {
    "doc": "rescale-functions",
    "title": "rescale-functions",
    "content": "Rescale operators-and-functions are used to scale data-item to new distributions. | rescale - rescales the distribution of an attribute, between a minimum and a maximum value | scalesum - disaggregates the values of a parameter according to the distribution of a proxy attribute | normalize - scales the attribute to a normal distribution | interpolate_linear - interpolates the values of an attribute a towards a new domain unit | . | ramp - ramps values, starting with a startvalue and ending with an endvalue | ramp_rgb - ramps rgb values, starting with a startvalue and ending with an endvalue | ramp_open - ramps values, starting with a startvalue up to an endvalue | ramp_open_rgb - ramps rgb values, starting with a startvalue up to an endvalue | . ",
    "url": "/docs/rescale-functions.html",
    
    "relUrl": "/docs/rescale-functions.html"
  },"2557": {
    "doc": "rescale",
    "title": "syntax",
    "content": ". | rescale(a, min, max) | . ",
    "url": "/docs/rescale.html#syntax",
    
    "relUrl": "/docs/rescale.html#syntax"
  },"2558": {
    "doc": "rescale",
    "title": "definition",
    "content": "rescale(a, min, max) scales the attribute a between the literal / parameter min value and the literal / parameter max value. The relative differences between the values in the new distribution are similar to the original distribution. The resulting attribute has a new values-unit and the same domain-unit as attribute a. ",
    "url": "/docs/rescale.html#definition",
    
    "relUrl": "/docs/rescale.html#definition"
  },"2559": {
    "doc": "rescale",
    "title": "description",
    "content": "To avoid rounding off errors in the rescale calculation, use a float32 of float64 value-type for the a, min and max argument. Be cautious in using rescales. The values unit / metric of the original attribute get’s lost, less checks can be applied and the results become more difficult to interpret. ",
    "url": "/docs/rescale.html#description",
    
    "relUrl": "/docs/rescale.html#description"
  },"2560": {
    "doc": "rescale",
    "title": "conditions",
    "content": "The value type of attribute a and literal / parameter min and max must match. ",
    "url": "/docs/rescale.html#conditions",
    
    "relUrl": "/docs/rescale.html#conditions"
  },"2561": {
    "doc": "rescale",
    "title": "example",
    "content": "attribute&lt;float32&gt; rescale_NrInh (City) := rescale(City/NrInhabitants, 0f, 1f); . | City/NrInhabitants | rescale_nrInh | . | 550 | 1 | . | 525 | 0.93 | . | 300 | 0.33 | . | 500 | 0.87 | . | 200 | 0.07 | . | 175 | 0 | . | null | null | . domain City, nr of rows = 7 . ",
    "url": "/docs/rescale.html#example",
    
    "relUrl": "/docs/rescale.html#example"
  },"2562": {
    "doc": "rescale",
    "title": "rescale",
    "content": "rescale-functions rescale . ",
    "url": "/docs/rescale.html",
    
    "relUrl": "/docs/rescale.html"
  },"2563": {
    "doc": "reverse",
    "title": "syntax",
    "content": "reverse(a) . ",
    "url": "/docs/reverse.html#syntax",
    
    "relUrl": "/docs/reverse.html#syntax"
  },"2564": {
    "doc": "reverse",
    "title": "definition",
    "content": "reverse(a) reverses the sequence of the values of attribute a. The function results in a new attribute with the same values-unit and domain-unit as attribute a and with the values of attribut a in reversed order. ",
    "url": "/docs/reverse.html#definition",
    
    "relUrl": "/docs/reverse.html#definition"
  },"2565": {
    "doc": "reverse",
    "title": "applies to",
    "content": "attributes with Numeric, Point or bool value-type . ",
    "url": "/docs/reverse.html#applies-to",
    
    "relUrl": "/docs/reverse.html#applies-to"
  },"2566": {
    "doc": "reverse",
    "title": "example",
    "content": "attribute&lt;float32&gt; reverseA (ADomain) := reverse(A); . | A | reverseA | . | 0 | 100 | . | 1 | null | . | 2.5 | 0 | . | -100 | null | . | 999 | null | . | null | 999 | . | null | -100 | . | 0 | 2.5 | . | null | 1 | . | 100 | 0 | . ADomain, nr of rows = 10 . ",
    "url": "/docs/reverse.html#example",
    
    "relUrl": "/docs/reverse.html#example"
  },"2567": {
    "doc": "reverse",
    "title": "see also",
    "content": ". | sort | sort_str | . ",
    "url": "/docs/reverse.html#see-also",
    
    "relUrl": "/docs/reverse.html#see-also"
  },"2568": {
    "doc": "reverse",
    "title": "reverse",
    "content": "ordering-functions reverse . ",
    "url": "/docs/reverse.html",
    
    "relUrl": "/docs/reverse.html"
  },"2569": {
    "doc": "rgb",
    "title": "syntax",
    "content": ". | rgb(red, green, blue) | . ",
    "url": "/docs/rgb.html#syntax",
    
    "relUrl": "/docs/rgb.html#syntax"
  },"2570": {
    "doc": "rgb",
    "title": "definition",
    "content": "rgb(red, green, blue) function results in a uint32 rgb color value with the data-item: red, green and blue representing the red, green and blue aspects of the rgb value. ",
    "url": "/docs/rgb.html#definition",
    
    "relUrl": "/docs/rgb.html#definition"
  },"2571": {
    "doc": "rgb",
    "title": "applies to",
    "content": ". | data items with (u)int8, (u)int16 or (u)int32 value-type | . ",
    "url": "/docs/rgb.html#applies-to",
    
    "relUrl": "/docs/rgb.html#applies-to"
  },"2572": {
    "doc": "rgb",
    "title": "conditions",
    "content": ". | data items red, green and blue need to match with regard to their domain-unit (literals or parameter can be used with data items of any domain). | . ",
    "url": "/docs/rgb.html#conditions",
    
    "relUrl": "/docs/rgb.html#conditions"
  },"2573": {
    "doc": "rgb",
    "title": "example",
    "content": "parameter&lt;uint8&gt;  red   := uint8(254); parameter&lt;uint8&gt;  green := uint8(128); parameter&lt;uint8&gt;  blue  := uint8(  0); parameter&lt;uint32&gt; rgb   := rgb(red, green, blue); . result = parameter rgb with rgb value: 254,128,0 (orange) . ",
    "url": "/docs/rgb.html#example",
    
    "relUrl": "/docs/rgb.html#example"
  },"2574": {
    "doc": "rgb",
    "title": "rgb",
    "content": "conversion-functions rgb . ",
    "url": "/docs/rgb.html",
    
    "relUrl": "/docs/rgb.html"
  },"2575": {
    "doc": "right",
    "title": "syntax",
    "content": ". | right(string_dataitem, length) | . ",
    "url": "/docs/right.html#syntax",
    
    "relUrl": "/docs/right.html#syntax"
  },"2576": {
    "doc": "right",
    "title": "definition",
    "content": "right(string_dataitem, length) results in a substring of string_dataitem with the number of characters of the length argument, starting from the right of the string_dataitem. ",
    "url": "/docs/right.html#definition",
    
    "relUrl": "/docs/right.html#definition"
  },"2577": {
    "doc": "right",
    "title": "description",
    "content": "right(A, 3) is synonym for substr(A, strlenA) - 3, 3). ",
    "url": "/docs/right.html#description",
    
    "relUrl": "/docs/right.html#description"
  },"2578": {
    "doc": "right",
    "title": "applies to",
    "content": ". | data-item string_dataitem with string value-type | literal or parameter length with uint32 value type | . ",
    "url": "/docs/right.html#applies-to",
    
    "relUrl": "/docs/right.html#applies-to"
  },"2579": {
    "doc": "right",
    "title": "since version",
    "content": "7.155 . ",
    "url": "/docs/right.html#since-version",
    
    "relUrl": "/docs/right.html#since-version"
  },"2580": {
    "doc": "right",
    "title": "example",
    "content": "attribute&lt;string&gt; rightA (ADomain) := right(A, 3); . | A | rightA | . | ‘Test’ | ‘est’ | . | ‘88hallo99’ | ‘099’ | . | ’+)’ | ’’’’’‘’+)’‘ | . | ‘twee woorden’ | ‘den’ | . | ’ test met spatie’ | ‘tie’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/right.html#example",
    
    "relUrl": "/docs/right.html#example"
  },"2581": {
    "doc": "right",
    "title": "see also",
    "content": ". | left | substr | . ",
    "url": "/docs/right.html#see-also",
    
    "relUrl": "/docs/right.html#see-also"
  },"2582": {
    "doc": "right",
    "title": "right",
    "content": "string-functions right . ",
    "url": "/docs/right.html",
    
    "relUrl": "/docs/right.html"
  },"2583": {
    "doc": "rjoin",
    "title": "syntax",
    "content": ". | rjoin(foreign_key, primary_key, values) | . ",
    "url": "/docs/rjoin.html#syntax",
    
    "relUrl": "/docs/rjoin.html#syntax"
  },"2584": {
    "doc": "rjoin",
    "title": "definition",
    "content": "rjoin(foreign_key, primary_key, values) results in an attribute with the values of argument values for the domain-unit of argument foreign_key. The resulting data-item has the same values-unit as the values argument and the same domain unit as the foreign_key argument. ",
    "url": "/docs/rjoin.html#definition",
    
    "relUrl": "/docs/rjoin.html#definition"
  },"2585": {
    "doc": "rjoin",
    "title": "description",
    "content": "The rjoin function is advised if an attribute is available to relate domain (e.g. a region code), not being a relation in GeoDMS terms. If such a relation is available, use the faster lookup function. A rjoin function is rewritten to a rlookup function (to create a relation) and a lookup function (to use the relation), see the example. We advise that the primary_key argument can be used as primary key for the domain unit of this argument. If multiple instances of this argument occur, the resulting value will be based on the first index-numbers found. ",
    "url": "/docs/rjoin.html#description",
    
    "relUrl": "/docs/rjoin.html#description"
  },"2586": {
    "doc": "rjoin",
    "title": "applies to",
    "content": ". | foreign_key: an attribute which can serve as primary key for the domain unit of the primary_key argument, e.g. a region code. | primary_key: an attribute which can serve as primary key for it’s own domain unit and with the same values unit as the foreign_key attribute. | values: attribute with the requested values to be looked up. | . ",
    "url": "/docs/rjoin.html#applies-to",
    
    "relUrl": "/docs/rjoin.html#applies-to"
  },"2587": {
    "doc": "rjoin",
    "title": "conditions",
    "content": ". | The values unit of the arguments foreign_key and primary_key must match. | The domain unit of the arguments primary_key and values must match. | . ",
    "url": "/docs/rjoin.html#conditions",
    
    "relUrl": "/docs/rjoin.html#conditions"
  },"2588": {
    "doc": "rjoin",
    "title": "example",
    "content": "attribute&lt;degrees&gt; rjoinTemperature (City) := rjoin(City/RegionCode, Region/RegionCode, Region/Temperature); This is rewritten within the GeoDMS to: attribute&lt;Region&gt; Region_rel (City) := rlookup(City/RegionCode, Region/RegionCode) attribute&lt;degrees&gt; Temperature (City) := Region/Temperature[Region_rel];; . | City/RegionCode | rjoinTemperature | . | 100 | 12 | . | 200 | 11 | . | 300 | null | . | 200 | 11 | . | 400 | 14 | . | null | null | . | 400 | 14 | . domain City, nr of rows = 7 . | Region/RegionCode | Region/Temperature | . | 100 | 12 | . | 200 | 11 | . | 300 | null | . | 400 | 14 | . | 500 | 13 | . domain Region, nr of rows = 5 . ",
    "url": "/docs/rjoin.html#example",
    
    "relUrl": "/docs/rjoin.html#example"
  },"2589": {
    "doc": "rjoin",
    "title": "rjoin",
    "content": "relational-functions rjoin . ",
    "url": "/docs/rjoin.html",
    
    "relUrl": "/docs/rjoin.html"
  },"2590": {
    "doc": "rlookup",
    "title": "syntax",
    "content": ". | rlookup(foreign_key, primary_key) | . ",
    "url": "/docs/rlookup.html#syntax",
    
    "relUrl": "/docs/rlookup.html#syntax"
  },"2591": {
    "doc": "rlookup",
    "title": "definition",
    "content": "rlookup(foreign_key, primary_key) results in a relation from the domain-unit of the foreign_key argument towards the domain unit of the primary key argument . ",
    "url": "/docs/rlookup.html#definition",
    
    "relUrl": "/docs/rlookup.html#definition"
  },"2592": {
    "doc": "rlookup",
    "title": "applies to",
    "content": ". | foreign_key: an attribute which can serve as primary key for the domain unit of the primary_key argument, e.g. a region code. | primary_key: an attribute which can serve as primary key for it’s own domain unit and with the the same values-unit as the foreign_key attribute. | . ",
    "url": "/docs/rlookup.html#applies-to",
    
    "relUrl": "/docs/rlookup.html#applies-to"
  },"2593": {
    "doc": "rlookup",
    "title": "description",
    "content": "We advise that the second argument can be used as primary key for the domain unit of this argument. If multiple instances of the second argument occur, the resulting value will be the first index-numbers found. ",
    "url": "/docs/rlookup.html#description",
    
    "relUrl": "/docs/rlookup.html#description"
  },"2594": {
    "doc": "rlookup",
    "title": "applies to",
    "content": ". | attributes foreign_key and primary_key with Numeric, Point, uint2, unit4, bool or string value-type | . ",
    "url": "/docs/rlookup.html#applies-to-1",
    
    "relUrl": "/docs/rlookup.html#applies-to-1"
  },"2595": {
    "doc": "rlookup",
    "title": "conditions",
    "content": "The values unit of the arguments foreign_key and primary_key must match. ",
    "url": "/docs/rlookup.html#conditions",
    
    "relUrl": "/docs/rlookup.html#conditions"
  },"2596": {
    "doc": "rlookup",
    "title": "example",
    "content": "attribute&lt;Region&gt; Region_rel (City) := rlookup(City/RegionCode, Region/RegionCode); . | City/RegionCode | Region_rel | . | 100 | 0 | . | 200 | 1 | . | 300 | 2 | . | 200 | 1 | . | 400 | 3 | . | null | null | . | 400 | 3 | . domain City, nr of rows = 7 . | Region/RegionCode | . | 100 | . | 200 | . | 300 | . | 400 | . | 500 | . domain Region, nr of rows = 5 . ",
    "url": "/docs/rlookup.html#example",
    
    "relUrl": "/docs/rlookup.html#example"
  },"2597": {
    "doc": "rlookup",
    "title": "rlookup",
    "content": "relational-functions rlookup . ",
    "url": "/docs/rlookup.html",
    
    "relUrl": "/docs/rlookup.html"
  },"2598": {
    "doc": "rnd_permutation",
    "title": "syntax",
    "content": ". | rnd_permutation(seed, domainunit) | . ",
    "url": "/docs/rnd_permutation.html#syntax",
    
    "relUrl": "/docs/rnd_permutation.html#syntax"
  },"2599": {
    "doc": "rnd_permutation",
    "title": "definition",
    "content": "rnd_permutation(seed, domainunit) results in a random permutation of the index-numbers of the domainunit argument with the following arguments: . | a seed with a unique number; using the same seed results in the same random order; | unit domainunit, the domain-unit for which the permutation is made; | . ",
    "url": "/docs/rnd_permutation.html#definition",
    
    "relUrl": "/docs/rnd_permutation.html#definition"
  },"2600": {
    "doc": "rnd_permutation",
    "title": "applies to",
    "content": ". | data-item seed with uint32 value-type | unit domainunit with valuetype from the group CanBeDomainUnit | . ",
    "url": "/docs/rnd_permutation.html#applies-to",
    
    "relUrl": "/docs/rnd_permutation.html#applies-to"
  },"2601": {
    "doc": "rnd_permutation",
    "title": "since version",
    "content": "5.68 . ",
    "url": "/docs/rnd_permutation.html#since-version",
    
    "relUrl": "/docs/rnd_permutation.html#since-version"
  },"2602": {
    "doc": "rnd_permutation",
    "title": "example",
    "content": "attribute&lt;ADomain&gt; rand_order (ADomain) := rnd_permutation(0, ADomain); . | rand_order | . | 1 | . | 0 | . | 3 | . | 4 | . | 2 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/rnd_permutation.html#example",
    
    "relUrl": "/docs/rnd_permutation.html#example"
  },"2603": {
    "doc": "rnd_permutation",
    "title": "see also",
    "content": ". | rnd_uniform | . ",
    "url": "/docs/rnd_permutation.html#see-also",
    
    "relUrl": "/docs/rnd_permutation.html#see-also"
  },"2604": {
    "doc": "rnd_permutation",
    "title": "rnd_permutation",
    "content": "miscellaneous-functions rnd_permutation . ",
    "url": "/docs/rnd_permutation.html",
    
    "relUrl": "/docs/rnd_permutation.html"
  },"2605": {
    "doc": "rnd_uniform",
    "title": "syntax",
    "content": ". | rnd_uniform(seed, domainunit, valuesrange) | . ",
    "url": "/docs/rnd_uniform.html#syntax",
    
    "relUrl": "/docs/rnd_uniform.html#syntax"
  },"2606": {
    "doc": "rnd_uniform",
    "title": "definition",
    "content": "rnd_uniform(seed, domainunit, valuesrange) results in a data-item with pseudo random values and with the following argument: . | a random seed with a unique number; using the same random seed results in the same random values; | the domainunit of the resulting data item; | the valuesrange determines the range of possible values. Use the range function to configure this range. | . ",
    "url": "/docs/rnd_uniform.html#definition",
    
    "relUrl": "/docs/rnd_uniform.html#definition"
  },"2607": {
    "doc": "rnd_uniform",
    "title": "applies to",
    "content": ". | data item seed with uint32 value-type | unit domainunit with value type from the group CanBeDomainUnit | . ",
    "url": "/docs/rnd_uniform.html#applies-to",
    
    "relUrl": "/docs/rnd_uniform.html#applies-to"
  },"2608": {
    "doc": "rnd_uniform",
    "title": "conditions",
    "content": "The values-unit of the resulting data item and of the valuesrange argument must match. ",
    "url": "/docs/rnd_uniform.html#conditions",
    
    "relUrl": "/docs/rnd_uniform.html#conditions"
  },"2609": {
    "doc": "rnd_uniform",
    "title": "example",
    "content": "attribute &lt;float32&gt; rand (ADomain) := rnd_uniform(0, ADomain, range(float32, 0f, 1f)); . | rand | . | 0.719643 | . | 0.781171 | . | 0.974884 | . | 0.446728 | . | 0.087888 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/rnd_uniform.html#example",
    
    "relUrl": "/docs/rnd_uniform.html#example"
  },"2610": {
    "doc": "rnd_uniform",
    "title": "see also",
    "content": ". | rnd_permutation | . ",
    "url": "/docs/rnd_uniform.html#see-also",
    
    "relUrl": "/docs/rnd_uniform.html#see-also"
  },"2611": {
    "doc": "rnd_uniform",
    "title": "rnd_uniform",
    "content": "miscellaneous-functions rnd_uniform . ",
    "url": "/docs/rnd_uniform.html",
    
    "relUrl": "/docs/rnd_uniform.html"
  },"2612": {
    "doc": "rotate-scale-shear-a-grid",
    "title": "example",
    "content": "container Geography {     unit&lt;fpoint&gt; rdc_meter: range = \"[{300000, 0}, {625000, 280000})\";  } container parameters {     unit&lt;float32&gt; meter := BaseUnit('meter', float32);     parameter&lt;meter&gt; gridsize := 1000[meter];                                                     parameter&lt;meter&gt; NL_grid_X_min := 270000[meter];     parameter&lt;meter&gt; NL_grid_Y_min := 325000[meter];         parameter&lt;meter&gt; X_org := (     0f + (NL_grid_Y_min / 2f))[meter];     parameter&lt;meter&gt; Y_org := (375000f - (NL_grid_X_min / 2f))[meter];         parameter&lt;uint32&gt; aantalkolommen := uint32(((NL_grid_Y_min + NL_grid_X_min)*(sqrt(2f) / 2f)) / gridsize);     parameter&lt;uint32&gt; aantalrijen    := uint32(((NL_grid_Y_min + NL_grid_X_min)*(sqrt(2f) / 2f)) / gridsize);         parameter&lt;float32&gt; shear_factor     := 0.5f;     parameter&lt;float32&gt; rotation_angle   := (pi() / 4d)[float32]; // in radial=45 degrees;     parameter&lt;float32&gt; X_stretch_factor := gridsize;     parameter&lt;float32&gt; Y_stretch_factor := gridsize; } unit&lt;fpoint&gt; domain;  unit&lt;spoint&gt; rotated_grid_domain :=  range(domain, point(0s, 0s), point(parameters/aantalkolommen[int16], parameters/aantalrijen[int16])); unit&lt;spoint&gt; conversion_matrix := range(spoint, point(0s,0s), point(2s,2s)) ,  Using = \"parameters\" {     atrribute&lt;float32&gt; A_stretch  := union_data(., Y_stretch_factor, 0f, 0f, X_stretch_factor);     atrribute&lt;float32&gt; B_shear    := union_data(., 1f, shear_factor, 0f, 1f);     atrribute&lt;float32&gt; C_rotation :=  union_data(., cos(rotation_angle), sin(rotation_angle), -sin(rotation_angle), cos(rotation_angle));     atrribute&lt;float32&gt; AxB        := matr_mul(A_stretch, B_shear,.);     atrribute&lt;float32&gt; AxBxC      := matr_mul(AxB, C_rotation,.);     atrribute&lt;float32&gt; Result     := AxBxC; } unit&lt;upoint&gt; grid_coords := range(upoint, point(0,0), point(2, #rotated_grid_domain)) {    atrribute&lt;float32&gt; rotated_grid :=  union_data(., PointCol(id(rotated_grid_domain))[float32], PointRow(id(rotated_grid_domain))[float32]);    atrribute&lt;float32&gt; rd           := matr_mul(conversion_matrix/Result, rotated_grid, .); } unit&lt;uint32&gt; grid_domain := range(uint32, 0, #rotated_grid_domain) ,  Using = \"parameters\" ,  DialogData = \"rotated_grid_rd\" ,  DialogType = \"map\" {     atrribute&lt;Geography/rdc_meter&gt; rotated_grid_rd  :=  point( first(grid_coords/rd, pointcol(id(grid_coords))[.]) + Y_org , last(grid_coords/rd, pointcol(id(grid_coords))[.]) + X_org , geography/rdc_meter); } . ",
    "url": "/docs/rotate-scale-shear-a-grid.html#example",
    
    "relUrl": "/docs/rotate-scale-shear-a-grid.html#example"
  },"2613": {
    "doc": "rotate-scale-shear-a-grid",
    "title": "rotate-scale-shear-a-grid",
    "content": "configuration-examples Rotate Scale Shear a grid . The script presents an example how you can rotate, stretch and shear a raster domain. ",
    "url": "/docs/rotate-scale-shear-a-grid.html",
    
    "relUrl": "/docs/rotate-scale-shear-a-grid.html"
  },"2614": {
    "doc": "round",
    "title": "syntax",
    "content": "round(a) . ",
    "url": "/docs/round.html#syntax",
    
    "relUrl": "/docs/round.html#syntax"
  },"2615": {
    "doc": "round",
    "title": "definition",
    "content": "round(a) results in a integer data item rounded off from data-item a. Float32/64 data items are rounded off to the int32 value-type, f/dpoint data items to the ipoint value type. ",
    "url": "/docs/round.html#definition",
    
    "relUrl": "/docs/round.html#definition"
  },"2616": {
    "doc": "round",
    "title": "applies to",
    "content": ". | data item with float32, float64, fpoint or dpoint value type | . ",
    "url": "/docs/round.html#applies-to",
    
    "relUrl": "/docs/round.html#applies-to"
  },"2617": {
    "doc": "round",
    "title": "since version",
    "content": "5.45 . ",
    "url": "/docs/round.html#since-version",
    
    "relUrl": "/docs/round.html#since-version"
  },"2618": {
    "doc": "round",
    "title": "example",
    "content": "attribute&lt;int32&gt; roundA (ADomain) := round(A); . | A | roundA | . | 1.49 | 1 | . | 1.5 | 2 | . | -1.49 | -1 | . | -1.5 | -1 | . | -1.51 | -2 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/round.html#example",
    
    "relUrl": "/docs/round.html#example"
  },"2619": {
    "doc": "round",
    "title": "see also",
    "content": ". | round_64 | roundup | rounddown | roundtozero | . ",
    "url": "/docs/round.html#see-also",
    
    "relUrl": "/docs/round.html#see-also"
  },"2620": {
    "doc": "round",
    "title": "round",
    "content": "conversion-functions round . ",
    "url": "/docs/round.html",
    
    "relUrl": "/docs/round.html"
  },"2621": {
    "doc": "round_64",
    "title": "syntax",
    "content": "round_64(a) . ",
    "url": "/docs/round_64.html#syntax",
    
    "relUrl": "/docs/round_64.html#syntax"
  },"2622": {
    "doc": "round_64",
    "title": "definition",
    "content": "round_64(a) results in a integer data item rounded off from data-item a. Float32/64 data items are round_64ed off to the int64 value-type. ",
    "url": "/docs/round_64.html#definition",
    
    "relUrl": "/docs/round_64.html#definition"
  },"2623": {
    "doc": "round_64",
    "title": "applies to",
    "content": ". | data item with float32 or float64 value type | . ",
    "url": "/docs/round_64.html#applies-to",
    
    "relUrl": "/docs/round_64.html#applies-to"
  },"2624": {
    "doc": "round_64",
    "title": "since version",
    "content": "5.45 . ",
    "url": "/docs/round_64.html#since-version",
    
    "relUrl": "/docs/round_64.html#since-version"
  },"2625": {
    "doc": "round_64",
    "title": "example",
    "content": "attribute&lt;int32&gt; round_64A (ADomain) := round_64(A); . | A | round_64A | . | 1.49 | 1 | . | 1.5 | 2 | . | -1.49 | -1 | . | -1.5 | -1 | . | -1.51 | -2 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/round_64.html#example",
    
    "relUrl": "/docs/round_64.html#example"
  },"2626": {
    "doc": "round_64",
    "title": "see also",
    "content": ". | round | . ",
    "url": "/docs/round_64.html#see-also",
    
    "relUrl": "/docs/round_64.html#see-also"
  },"2627": {
    "doc": "round_64",
    "title": "round_64",
    "content": "conversion-functions round_64 . ",
    "url": "/docs/round_64.html",
    
    "relUrl": "/docs/round_64.html"
  },"2628": {
    "doc": "rounddown",
    "title": "syntax",
    "content": "roundDown(a) . ",
    "url": "/docs/rounddown.html#syntax",
    
    "relUrl": "/docs/rounddown.html#syntax"
  },"2629": {
    "doc": "rounddown",
    "title": "definition",
    "content": "roundDown(a) results in a integer data item rounded off downwards from data-item a. Float32/64 data items are rouded off to the int32 value-type, f/dpoint data items to the ipoint value type. ",
    "url": "/docs/rounddown.html#definition",
    
    "relUrl": "/docs/rounddown.html#definition"
  },"2630": {
    "doc": "rounddown",
    "title": "applies to",
    "content": ". | data item with float32, float64, fpoint or dpoint value type | . ",
    "url": "/docs/rounddown.html#applies-to",
    
    "relUrl": "/docs/rounddown.html#applies-to"
  },"2631": {
    "doc": "rounddown",
    "title": "since version",
    "content": "5.45 . ",
    "url": "/docs/rounddown.html#since-version",
    
    "relUrl": "/docs/rounddown.html#since-version"
  },"2632": {
    "doc": "rounddown",
    "title": "example",
    "content": "attribute&lt;int32&gt; roundDownA (ADomain) := roundDown(A); . | A | roundDownA | . | 1.49 | 1 | . | 1.5 | 1 | . | -1.49 | -2 | . | -1.5 | -2 | . | -1.51 | -2 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/rounddown.html#example",
    
    "relUrl": "/docs/rounddown.html#example"
  },"2633": {
    "doc": "rounddown",
    "title": "see also",
    "content": ". | rounddown_64 | round | roundup | roundtozero | . ",
    "url": "/docs/rounddown.html#see-also",
    
    "relUrl": "/docs/rounddown.html#see-also"
  },"2634": {
    "doc": "rounddown",
    "title": "rounddown",
    "content": "conversion-functions roundDown . ",
    "url": "/docs/rounddown.html",
    
    "relUrl": "/docs/rounddown.html"
  },"2635": {
    "doc": "rounddown_64",
    "title": "syntax",
    "content": "roundDown_64(a) . ",
    "url": "/docs/rounddown_64.html#syntax",
    
    "relUrl": "/docs/rounddown_64.html#syntax"
  },"2636": {
    "doc": "rounddown_64",
    "title": "definition",
    "content": "roundDown_64(a) results in a integer data item rounded off downwards from data-item a. Float32/64 data items are rounded off to the int64 value-type. ",
    "url": "/docs/rounddown_64.html#definition",
    
    "relUrl": "/docs/rounddown_64.html#definition"
  },"2637": {
    "doc": "rounddown_64",
    "title": "applies to",
    "content": ". | data-item with float32 or float64 value type | . ",
    "url": "/docs/rounddown_64.html#applies-to",
    
    "relUrl": "/docs/rounddown_64.html#applies-to"
  },"2638": {
    "doc": "rounddown_64",
    "title": "since version",
    "content": "5.45 . ",
    "url": "/docs/rounddown_64.html#since-version",
    
    "relUrl": "/docs/rounddown_64.html#since-version"
  },"2639": {
    "doc": "rounddown_64",
    "title": "example",
    "content": "attribute&lt;int32&gt; roundDown_64A (ADomain) := roundDown_64(A); . | A | roundDown_64A | . | 1.49 | 1 | . | 1.5 | 1 | . | -1.49 | -2 | . | -1.5 | -2 | . | -1.51 | -2 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/rounddown_64.html#example",
    
    "relUrl": "/docs/rounddown_64.html#example"
  },"2640": {
    "doc": "rounddown_64",
    "title": "see also",
    "content": ". | rounddown | . ",
    "url": "/docs/rounddown_64.html#see-also",
    
    "relUrl": "/docs/rounddown_64.html#see-also"
  },"2641": {
    "doc": "rounddown_64",
    "title": "rounddown_64",
    "content": "conversion-functions roundDown_64 . ",
    "url": "/docs/rounddown_64.html",
    
    "relUrl": "/docs/rounddown_64.html"
  },"2642": {
    "doc": "roundtozero",
    "title": "syntax",
    "content": "roundToZero(a) . ",
    "url": "/docs/roundtozero.html#syntax",
    
    "relUrl": "/docs/roundtozero.html#syntax"
  },"2643": {
    "doc": "roundtozero",
    "title": "definition",
    "content": "roundToZero(a) results in a integer data item rounded off towards zero from data-item a. Float32/64 data items are rounded off to the int32 value-type, f/dpoint data items to the ipoint value type. ",
    "url": "/docs/roundtozero.html#definition",
    
    "relUrl": "/docs/roundtozero.html#definition"
  },"2644": {
    "doc": "roundtozero",
    "title": "applies to",
    "content": ". | data item with float32, float64, fpoint or dpoint value type | . ",
    "url": "/docs/roundtozero.html#applies-to",
    
    "relUrl": "/docs/roundtozero.html#applies-to"
  },"2645": {
    "doc": "roundtozero",
    "title": "since version",
    "content": "5.45 . ",
    "url": "/docs/roundtozero.html#since-version",
    
    "relUrl": "/docs/roundtozero.html#since-version"
  },"2646": {
    "doc": "roundtozero",
    "title": "example",
    "content": "attribute&lt;int32&gt; roundToZeroA (ADomain) := roundToZero(A); . | A | roundToZeroA | . | 1.49 | 1 | . | 1.5 | 1 | . | -1.49 | -1 | . | -1.5 | -1 | . | -1.51 | -1 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/roundtozero.html#example",
    
    "relUrl": "/docs/roundtozero.html#example"
  },"2647": {
    "doc": "roundtozero",
    "title": "see also",
    "content": ". | roundtozero_64 | round | roundup | rounddown | . ",
    "url": "/docs/roundtozero.html#see-also",
    
    "relUrl": "/docs/roundtozero.html#see-also"
  },"2648": {
    "doc": "roundtozero",
    "title": "roundtozero",
    "content": "conversion-functions roundToZero . ",
    "url": "/docs/roundtozero.html",
    
    "relUrl": "/docs/roundtozero.html"
  },"2649": {
    "doc": "roundtozero_64",
    "title": "syntax",
    "content": "roundToZero_64(a) . ",
    "url": "/docs/roundtozero_64.html#syntax",
    
    "relUrl": "/docs/roundtozero_64.html#syntax"
  },"2650": {
    "doc": "roundtozero_64",
    "title": "definition",
    "content": "roundToZero_64(a) results in a integer data item rounded towards zero from data-item a. Float32/64 data items are rounded off to the int64 value-type. ",
    "url": "/docs/roundtozero_64.html#definition",
    
    "relUrl": "/docs/roundtozero_64.html#definition"
  },"2651": {
    "doc": "roundtozero_64",
    "title": "applies to",
    "content": ". | data item with float32 or float64 value type | . ",
    "url": "/docs/roundtozero_64.html#applies-to",
    
    "relUrl": "/docs/roundtozero_64.html#applies-to"
  },"2652": {
    "doc": "roundtozero_64",
    "title": "since version",
    "content": "5.45 . ",
    "url": "/docs/roundtozero_64.html#since-version",
    
    "relUrl": "/docs/roundtozero_64.html#since-version"
  },"2653": {
    "doc": "roundtozero_64",
    "title": "example",
    "content": "attribute&lt;int32&gt; roundToZero_64A (ADomain) := roundToZero_64(A); . | A | roundToZero_64A | . | 1.49 | 1 | . | 1.5 | 1 | . | -1.49 | -1 | . | -1.5 | -1 | . | -1.51 | -1 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/roundtozero_64.html#example",
    
    "relUrl": "/docs/roundtozero_64.html#example"
  },"2654": {
    "doc": "roundtozero_64",
    "title": "see also",
    "content": ". | roundtozero | . ",
    "url": "/docs/roundtozero_64.html#see-also",
    
    "relUrl": "/docs/roundtozero_64.html#see-also"
  },"2655": {
    "doc": "roundtozero_64",
    "title": "roundtozero_64",
    "content": "conversion-functions roundToZero_64 . ",
    "url": "/docs/roundtozero_64.html",
    
    "relUrl": "/docs/roundtozero_64.html"
  },"2656": {
    "doc": "roundup",
    "title": "syntax",
    "content": "roundUp(a) . ",
    "url": "/docs/roundup.html#syntax",
    
    "relUrl": "/docs/roundup.html#syntax"
  },"2657": {
    "doc": "roundup",
    "title": "definition",
    "content": "roundUp(a) results in a integer data item rounded off upwards from data-item a. Float32/64 data items are rounded off to the int32 value-type, f/dpoint data items to the ipoint value type. ",
    "url": "/docs/roundup.html#definition",
    
    "relUrl": "/docs/roundup.html#definition"
  },"2658": {
    "doc": "roundup",
    "title": "applies to",
    "content": ". | data-item with float32, float64, fpoint or dpoint value-type | . ",
    "url": "/docs/roundup.html#applies-to",
    
    "relUrl": "/docs/roundup.html#applies-to"
  },"2659": {
    "doc": "roundup",
    "title": "since version",
    "content": "5.45 . ",
    "url": "/docs/roundup.html#since-version",
    
    "relUrl": "/docs/roundup.html#since-version"
  },"2660": {
    "doc": "roundup",
    "title": "example",
    "content": "attribute&lt;int32&gt; roundUpA (ADomain) := roundUp(A); . | A | roundUpA | . | 1.49 | 2 | . | 1.5 | 2 | . | -1.49 | -1 | . | -1.5 | -1 | . | -1.51 | -1 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/roundup.html#example",
    
    "relUrl": "/docs/roundup.html#example"
  },"2661": {
    "doc": "roundup",
    "title": "see also",
    "content": ". | roundup_64 | round | rounddown | roundtozero | . ",
    "url": "/docs/roundup.html#see-also",
    
    "relUrl": "/docs/roundup.html#see-also"
  },"2662": {
    "doc": "roundup",
    "title": "roundup",
    "content": "conversion-functions roundUp . ",
    "url": "/docs/roundup.html",
    
    "relUrl": "/docs/roundup.html"
  },"2663": {
    "doc": "roundup_64",
    "title": "syntax",
    "content": "roundUp_64(a) . ",
    "url": "/docs/roundup_64.html#syntax",
    
    "relUrl": "/docs/roundup_64.html#syntax"
  },"2664": {
    "doc": "roundup_64",
    "title": "definition",
    "content": "roundUp_64(a) results in a integer data item rounded off upwards from data-item a. Float32/64 data items are rounded off to the int64 value-type. ",
    "url": "/docs/roundup_64.html#definition",
    
    "relUrl": "/docs/roundup_64.html#definition"
  },"2665": {
    "doc": "roundup_64",
    "title": "applies to",
    "content": ". | data item with float32 or float64 value type | . ",
    "url": "/docs/roundup_64.html#applies-to",
    
    "relUrl": "/docs/roundup_64.html#applies-to"
  },"2666": {
    "doc": "roundup_64",
    "title": "since version",
    "content": "5.45 . ",
    "url": "/docs/roundup_64.html#since-version",
    
    "relUrl": "/docs/roundup_64.html#since-version"
  },"2667": {
    "doc": "roundup_64",
    "title": "example",
    "content": "attribute&lt;int32&gt; roundUp_64A (ADomain) := roundUp_64(A); . | A | roundUp_64A | . | 1.49 | 2 | . | 1.5 | 2 | . | -1.49 | -1 | . | -1.5 | -1 | . | -1.51 | -1 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/roundup_64.html#example",
    
    "relUrl": "/docs/roundup_64.html#example"
  },"2668": {
    "doc": "roundup_64",
    "title": "see also",
    "content": ". | roundup | . ",
    "url": "/docs/roundup_64.html#see-also",
    
    "relUrl": "/docs/roundup_64.html#see-also"
  },"2669": {
    "doc": "roundup_64",
    "title": "roundup_64",
    "content": "conversion-functions roundUp_64 . ",
    "url": "/docs/roundup_64.html",
    
    "relUrl": "/docs/roundup_64.html"
  },"2670": {
    "doc": "rth_element",
    "title": "syntax",
    "content": ". | rth_element(a,r) | rth_element(a, r, relation) | . ",
    "url": "/docs/rth_element.html#syntax",
    
    "relUrl": "/docs/rth_element.html#syntax"
  },"2671": {
    "doc": "rth_element",
    "title": "definition",
    "content": ". | rth_element(a, r) results in a parameter with the r * (n-1)th element of the ascending sorted data-item a (n = number of elements). | rth_element(a, r, relation) results in an attribute with the r * (n-1)th elements of the ascending sorted data item a, grouped by relation (n = number of elements within a partition). The domain-unit of the result is the values-unit of the relation. The values unit of the result should match the values unit of attribute a. | . ",
    "url": "/docs/rth_element.html#definition",
    
    "relUrl": "/docs/rth_element.html#definition"
  },"2672": {
    "doc": "rth_element",
    "title": "description",
    "content": ". | If r*(n-1) is not an integer, a weighted mean is calculated from the values that relate to the two nearest indices. | With r = 0.5, the function results in the median of data item a. | . ",
    "url": "/docs/rth_element.html#description",
    
    "relUrl": "/docs/rth_element.html#description"
  },"2673": {
    "doc": "rth_element",
    "title": "applies to",
    "content": ". | attribute a with Numeric, uint2, uint4 or bool value-type | data item r with float32 value type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/rth_element.html#applies-to",
    
    "relUrl": "/docs/rth_element.html#applies-to"
  },"2674": {
    "doc": "rth_element",
    "title": "conditions",
    "content": ". | The values unit of the resulting data item should match with regard to value type and metric with the values unit of attribute a. | The domain of argument a and relation must match | The domain of argument r must be the same as the result domain or r must be a parameter. | . ",
    "url": "/docs/rth_element.html#conditions",
    
    "relUrl": "/docs/rth_element.html#conditions"
  },"2675": {
    "doc": "rth_element",
    "title": "since version",
    "content": "5.61 . ",
    "url": "/docs/rth_element.html#since-version",
    
    "relUrl": "/docs/rth_element.html#since-version"
  },"2676": {
    "doc": "rth_element",
    "title": "example",
    "content": "1. parameter&lt;uint32&gt; rth_elementNrInh := rth_element(City/NrInhabitants, 0.5f); result = 400 2. attribute&lt;float32&gt; rth_elementNrInhRegion (Region) := rth_element( City/NrInhabitants ,0.5f ,City/Region_rel ); . | City/NrInhabitants | City/Region_rel | . | 550 | 0 | . | 525 | 1 | . | 300 | 2 | . | 500 | 1 | . | 200 | 3 | . | 175 | null | . | null | 3 | . domain City, nr of rows = 7 . | rth_elementNrInhRegion | . | 550 | . | 512 | . | 300 | . | 200 | . | null | . domain Region, nr of rows = 5 . ",
    "url": "/docs/rth_element.html#example",
    
    "relUrl": "/docs/rth_element.html#example"
  },"2677": {
    "doc": "rth_element",
    "title": "see also",
    "content": ". | nth_element | nth_element_weighted | . ",
    "url": "/docs/rth_element.html#see-also",
    
    "relUrl": "/docs/rth_element.html#see-also"
  },"2678": {
    "doc": "rth_element",
    "title": "rth_element",
    "content": "aggregation-functions rth_element . ",
    "url": "/docs/rth_element.html",
    
    "relUrl": "/docs/rth_element.html"
  },"2679": {
    "doc": "rtrim",
    "title": "syntax",
    "content": ". | rtrim(string_dataitem) | . ",
    "url": "/docs/rtrim.html#syntax",
    
    "relUrl": "/docs/rtrim.html#syntax"
  },"2680": {
    "doc": "rtrim",
    "title": "definition",
    "content": "rtrim(string_dataitem) removes space characters after the last non space character in string_dataitem. ",
    "url": "/docs/rtrim.html#definition",
    
    "relUrl": "/docs/rtrim.html#definition"
  },"2681": {
    "doc": "rtrim",
    "title": "applies to",
    "content": "data-item string_dataitem with string value-type . ",
    "url": "/docs/rtrim.html#applies-to",
    
    "relUrl": "/docs/rtrim.html#applies-to"
  },"2682": {
    "doc": "rtrim",
    "title": "example",
    "content": "attribute&lt;string&gt; rtrimA (ADomain) := rtrim(A); . | A | rtrimA | . | ‘Test ‘ | ‘Test’ | . | ‘88hallo99’ | ‘88hallo99’ | . | ’+)’ | ’+)’ | . | ‘twee woorden’ | ‘twee woorden’ | . | ’ test met spatie’ | ’ test met spatie’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/rtrim.html#example",
    
    "relUrl": "/docs/rtrim.html#example"
  },"2683": {
    "doc": "rtrim",
    "title": "see also",
    "content": ". | trim | ltrim | . ",
    "url": "/docs/rtrim.html#see-also",
    
    "relUrl": "/docs/rtrim.html#see-also"
  },"2684": {
    "doc": "rtrim",
    "title": "rtrim",
    "content": "string-functions rtrim . ",
    "url": "/docs/rtrim.html",
    
    "relUrl": "/docs/rtrim.html"
  },"2685": {
    "doc": "sawec-2.0-wp3-it-infra",
    "title": "Conclusie",
    "content": "Gestelde rekendoelen zijn haalbaar. Prioriteitenlijst performance vebetering SAWEC . | functioneel: zorgen dat het rekenwerk niet meer (tussen) resultaten behoeft dan nodig, de activatie zodanig werkt dat niet woninginvesteringen voor een beperkte subset overwogen hoeven te worden en het rekenwerk kan worden gedistribueerd | software: memory issues recentere GeoDms versies oplossen en tot tot die tijd rekenen met Vesta versie GeoDms, dmv beter systematisch toepassen van moderne C++ programmeer concepten, zoals RAII, std:future’s monads in exception handling, etc. | technisch: verticaal schalen tot aan 64 GB en 400 Processoren | technisch: horizontaal schalen obv verdeling woningen over meerdere processen op dezelfde of verschillende machines | software: virtuele data-segmenten en segment-pipelining tbv minder geheugen beslag van tussenresultaten | software: structured dataflows | . Nog niet voor SAWEC 2.0 doen: . | software geschikt maken voor GPU processing | supporten van distributie van gescheiden rekentaken (zoals tbv gevoeligheidsanalyses) tbv run-batch processing | . ",
    "url": "/docs/sawec-2.0-wp3-it-infra.html#conclusie",
    
    "relUrl": "/docs/sawec-2.0-wp3-it-infra.html#conclusie"
  },"2686": {
    "doc": "sawec-2.0-wp3-it-infra",
    "title": "sawec-2.0-wp3-it-infra",
    "content": "Note: This is a Final draft document and for discussion purposes. Stated proposals and guidelines are not binding to the SAWEC team nor PBL. ICT context . Rekencontext . | 7 tot 9 miljoen woningen obv BAG verblijfsobjecten met wonen als gebruiksdoel, met een jaarlijkse mutatie obv met Ruimtescanner bepaalde nieuwbouw en sloop | tot 400 optionele maatregelen (hoofdopties: schilmaatregelen in 8 bouwdelen met ieder 3 kwaliteiten, Ruimteverwarming -&gt; InstallatiePerProduct ). | 51 zichtjaren, waarvan 21 voor kalibratie en 20 voor simulatie | jaarlijkse activatie van woningen, op basis van voorselectiecriteria op installatie en/of gebouwdeel eigenschappen, waaronder (resterende) levensduur, tbv woning-investeringen obv toepassingscriteria, een discreet keuze model (nested logit choice, S-curves), en volgende ambitietoedeling. | afweging maatregelen obv trekking pro rato S-curve op return on investment (positieve cash flow versus duration o.i.d.). | . SAWEC 2.0 moet: . | een scenario binnen 1 uur door kunnen rekenen op de Windows 10 Azure omgeving van TNO/PBL, | kunnen rekenen op een stand alone Windows 10 machine met 16 GB RAM | zo mogelijk (dit hangt af van de functionele specificatie van woning overstijgende ambities e.d.) een aselecte steekproef van woningen met geschaalde budgetten en ambities binnen 2 uur door kunnen rekenen | . Architectuurcontext . | zie documentatie NEV-Rekensysteem . | aan te roepen vanuit een batch file | invoer en uitvoer bestanden als .csv die mbv KEV tools interacteren met de MS Access database op Y | . | performance van interactief werken, mb.v. GeoDmsGUI kan worden verbeterd door: . | gemakkelijk in te kunnen stellen welke tussenresultaten wel en niet te bewaren ten behoeve van calculation tracing | schakelen in random sample-size versus het volledige doorrekenen | het kunnen instellen van studiegebieden | . | stand alone, of op 1 Azure machine | schaalbaar naar rekenen met k machines op Azure. | . Uitwerking rekenstructuur . Belangrijkste Entiteiten (tabellen) en Attributen . zie ook document 20210222_Woningdataflow.pdf . Woningen in een Dynamische Woningtabel . | hebben een begin- en eindjaar | bestaande en nieuwbouwwoningen worden niet onderscheiden | hebben 1 aansluiting (bestaande woningen) of eventueel meerdere aansluitingen (igv ongedifferentieerde projecties toekomstige woningen) en een gebruiksoppervlakte | hebben een id obv de BAG of Ruimtescanner output, en een aanvullend volgnummer gerelateerd aan de levensduur opsplitsing. | hebben een aan de id gerelateerd willekeurig getal tussen 0 en 2^32-1 tbv steekproefselectie en als random seed tbv het doen van kanstrekkingen, zoals woninginvesteringsbeslissing pro rato de uitkomsten van de S-curve toepassing. | gebouwinformatie en oppervlakken (zie Woningdataflow.pdf) . | zijn onafhankelijk van de te kiezen woninginvesteringen | oppervlakken en de meeste gebouwinformatie kenmerken zijn constant gedurende de levensduur van een woning | . | huur/koop/sociaal situatie en bewoners kenmerken zoals huishoudensgrootte en/of inkomencategorie kunnen dynamisch zijn, maar te overwegen is om een niet erg veranderlijk deel van deze kenmerken ook als statisch te definiëren en bij geprojecteerde veranderingen deze te administreren als ware het een combinatie van sloop en nieuwbouw. | bronnen voorbewerking . | Historisch vanaf 2000: alle BAG woningen met start- en eindjaar. Met het BAG snapshot proces zal een historische database van woningen kunnen worden opgebouwd. Hierin zullen woningen die voor 2012 gesloopt zijn waarschijnlijk niet goed zijn opgenomen en bij het ontbreken daarvan zal wellicht een onderschatting van het totaal verbruikt of een overschatting van het verbruik per woning volgen. | Heden: BAG + CBS + @@@FO | Toekomst: sloop per raster per type: Boolean; nieuwbouw: aantallen per woningtype, aan te vullen met bouwdeel en installatie start eigenschappen; interpolatie naar 1 jaarsperioden | stochastisch vastgestelde woningmutaties op grond van regionale verwachtingen uit bijvoorbeeld Ruimtescanner output | . | overheveling sociale en commerciële huur en koop. | . Woningen in een specifiek zichtjaar . | hebben een dynamische status bestaande uit: . | een 1..3 kwaliteit per bouwdeel (8x) | wel of niet een gas of H2 aansluiting; het hebben van een warmtenet aansluiting kan als exogeen beschouwd worden. | een installatie per functioneel-product (10x) met een aanschafjaar per installatie | . | hebben een verwachte WOZ waarde | huur/koop/sociaal situatie en bewoners kenmerken zoals huishoudensgrootte en/of inkomenscategorie, voor zover niet meegenomen in de definitie van wat een woning identificeert. | . Stamtabellen . | bouwdeel: {RO: Raam onder, RB: Raam boven, DR: deur, PL: paneel, MG: gevel, MS: spouwmuur, DS: Schuin dak, DP: plat dak } | product: {RWb, RWp, TWb, TWp, KDb, KDp, AS, DK, KK, VT} | zichtjaar | woninginvestering sawec:woninginvesting: . | per bouwdeel (8x): verbetering 1-&gt;2, 1-&gt;3 of 2-&gt;3,of niet van toepassing | per functioneel-product (10x); installatie met gerelateerde performance, primaire energiedrager (MT, LT, gas, H2), electrisch verbruik en investeringskosten | heeft technisch en beleidsmatige toepassingscriteria (een investering kan worden opgelegd door in casu niets doen niet van toepassing te laten zijn) | . | . | Activerings criteria: . | kunnen doelgroep gerelateerd zijn of vervangingsverwachting van een bouwdeel-kwaliteitsniveau of installatie, waaronder dak en AfgifteSysteem; | leiden tot activering van een bouwdeel of product. | activeert die woninginvesteringen die (al dan niet) alleen de geactiveerde bouwdeel of installatie verbeteren. | . | . Overige brondata . | (dynamische) klimaatkaarten | ingroeikaarten warmtenetten. | . In tabelvorm of rekenregels uit te werken: . | functionele vraag: . | hoe wordt die berekend voor verschillende bouwdeel kwaliteiten? | hoe wordt performance per bouwdeel optie gespecificeerd? | rekenregels specifiek voor bouwdelen of te generaliseren tot enkele tabellen ? | . | metervraag: gegeven een functionele vraag, berekening conform gegeven installaties en performances, wellicht zoals in Vesta, met toevoeging van dak, ventilatie, en keukenapparatuur | beleidsmaatregelen (belastingen, subsidies): . | @@@FO: generieke tarieven of criteria en tarieven per investeringscomponent. | . | doelen en ambities (te realiseren na toewijzing individuele woninginvesteringen): . | hebben een groepscriterium (bijvoorbeeld alle huurwoningen) | stellen een minimum of maximum aantal woningen met een bepaald bouwdeel kwaliteit of product-installatie | of stellen een maximum individueel of gemiddelde metervraag per energie-drager | of stellen een minimum individueel of gemiddelde bouwdeel kwaliteit | . | kostentabellen en/of leercurves: . | voor installaties | kosten [EUR/m^2] bouwdeelverbeteringen per niveausprong {1-&gt;2, 1-&gt;3, 2-&gt;3} per bouwdeel, zijn afhankelijk van het vertrekpunt (itt installaties) | . | . | gedrag en de verandering daarvan (tgv o.a. overheidsbeleid) . | verbruiksgedrag(bewoners eigenschappen) * oppervlaktes(woning eigenschappen) / R(kwaliteit bouwdelen) -&gt; functionele vraag . | rebound ? | correlaties ? | . | investerings gedrag ofwel de afweging van alternatieve toegestane woninginvesteringen igv een activatie: . | nested choices met S-Curve parameters per sub-populatie, zie @@@FO, . | hoofdkeuze: energiedrager ruimteverwarming, en | sub-keuze: gewenste isolatiekwaliteit. | gegeven een hoofdkeuze en isolatiekwaliteit, maak een afweging van alternatieve woninginvesteringen op basis van een discounted cash-flow inclusief comfort effecten en een S-curcve, @@@FO: hoe? | . | . | . | normeringen en verplichtingen op woningniveau worden geïmplementeerd door activeringscriteria en toepasbaarheid van gerelateerde woninginvesteringen. | . Onzekerheid attribuutwaarden . Binnen de context van 1 run worden alle waarden van attributen (van woningen en opties voor woningen) als vast per tijdstap verondersteld en bepaald door invoerdata, rekenregels en de waarden van voorgaande tijdstappen. SAWEC is daarmee een dynamisch simulatiemodel. Projecties naar de toekomst spelen in deze simulatie een beperkte rol, namelijk bij het evalueren van te overwegen woninginvesteringen, waarbij een investering wordt afgewogen tegen de verwachte (vermindering van) toekomstige kosten. Onzekerheid wordt geoperationaliseerd door tijdens de simulatie pseudo random trekkingen te doen. Dit speelt een rol bij: . | het kiezen van de primaire energiedrager voor ruimteverwarming op basis van een S-curve score op hoofdlijnen, waaronder beste score per energiedrager, maar met een lager gewicht dan in de nested-choice | het kiezen uit de toegestane woninginvesteringen op basis van de S-curve score per investeringsoptie | in voorbewerkingen (pre-pocessing): . | het vaststellen van woningmutaties op grond van regionale verwachtingen (uit bijvoorbeeld Ruimtescanner output) met betrekking tot sloop en nieuwbouw | het selecteren van woningen voor transitie huur/koop/sociaal | het relateren van (verwachte regionale) inkomensklasse verdeling aan woningen | . | . Aangezien een aantal van bovenstaande stochastische attributen niet als onafhankelijk beschouwd kan worden, is het van belang goed aandacht te besteden aan de organisatie van de trekkingen. Wanneer bijvoorbeeld bekend is dat CBS buurten met veel sociale huurwoningen ook relatief veel huishoudens wonen met lage inkomensklasse, worden verdelingsvraagstukken onderbelicht wanneer in een buurt met 50% huur/koop en 50% laag/hoog inkomen deze attribuutwaarden onafhankelijk worden gesampled. Gebruik en bediening, use cases . SAWEC dient allereerst gebruikt te kunnen worden om met extern ingestelde parameters een tijdreeks door te rekenen en resultaten in .csv bestanden te bewaren . | met name binnen het kader van KEV-runs mbv het NEV-Rekensysteem. | meestal 1 run, bestaande uit het simuleren van alle toekomstige zichtjaren, soms ook het draaien van productie-batches of sensitivity-batches. | een run dient distribueerbaar te zijn over een op te geven aantal AZURE machines of op een stand-alone Windows 10 Desktop of Workstation. | . Aanvullend zal SAWEC gebruikt worden tbv . | gevoeligheidsanalyse: meerdere runs met eigen instellingen. Waarschijnlijk zal het bij het doorrekenen van een groot aantal runs effectiever zijn om niet de woningen maar de runs over verschillende machines te verdelen; een batch van runs kan beter per bundel runs gedistribueerd worden, maar dit heeft bij de implementatie van SAWEC geen prioriteit, kan later alsnog eenvoudig aanvullend geïmplementeerd worden, | model kalibratie van Activatie en S-curve parameters op historische data. Optimalisatie van een Goodness of Fit van model-uitkomsten en waarnemingen? Dit behoeft mogelijk aanvullende statistische optimalisatie tools, zoals modules tbv multi-nominal logistic regression, beschikbaar in o.a. R. De opzet van model-kalibratie behoeft aanvullende bestudering en ontwerp en eventueel implementatie door iteratief bijgestuurd doorrekenen van een historische situatie mbt GeoDmsRun | interactief werken tbv exploratie en herleiden van resultaten, en het debuggen van aannames en rekenregels: GeoDmsGui. | productie van tijdreeksen tbv grafieken in bijvoorbeeld Excel. | er kan een lijst indicatoren per zichtjaar worden ge-exporteerd, hiermee kan met een grafiek tool, zoals Excel, een tijdreeks grafiek worden samengesteld. | De gebruiker kan vooraf aan een run aangeven van welke indicatoren een tijdreeks tabel gevormd moet worden tbv gemakkelijkere verwerking tot tijdreeks grafieken,. | . | . Invoer en parameterisatie . invoer data bestanden, waaronder parameter files in .csv format omvatten: . | een selectiecriterium van woningen: alle, of op basis van kenmerken en/of een bepaald studiegebied | het aantal rekenmachines. Wanneer op Azure gewerkt wordt, zal er in voorzien zijn dat meerdere rekenmachines gestart kunnen worden die ieder een deel van de woningen simuleren en resultaten daarvan weg schijven op een gedeelde folder. De aansturende machine zal na gereedkoming de resulterende resultaten samenvoegen. | alle of een bepaalde random gekozen fractie tbv snellere resultaten. Woning-keuze overstijgende ambities en budgetten zullen pro rato zulke fracties en eventuele distributie over verschillende rekenmachines worden toebedeeld. | .csv formaat tabellen met woningkenmerken stamtabellen, leercurves, | .csv .shp of .tif formaat tabellen met brongegevens woningen uit de BAG, Ruimtescanner en gedownsamplede CBS brongegevens | . GeoDMS script bestanden, waarvan een gedeelte gemarkeerd is als zijnde eenvoudig wijzigbaar door gebruikers tbv het definiëren van een run . Ontkoppelde voorbewerkte data, te lezen it een snel binair dataformaat zoals .fss, TIF, en/of NetCDF, waaronder . | resultaten van kalibratie | een dynamische tabel van historische, bestaande en toekomstige woningen (mbv een begin- en eventueel eind-jaar) met een toegekend random volgnummer tbv sampling en distributie. | klimaatkaarten met aantal vorstdagen. | . Dit dient in het Functioneel Ontwerp of elders verder uitgewerkt te worden met een technische beschrijving van de belangrijkste te lezen .csv bestanden. met opslaglocatie, filenaam, formaat, en attribuut namen . Uitvoer . Extensieve statistieken van de gesimuleerde woning-samples met ten minste functionele vraag per gebruiksdoel en metervraag per energiedrager, per installatiepakket per jaar, en per koop/huur/sociaal categorie. Dit dient in het Functioneel Ontwerp of elders verder uitgewerkt te worden met een technische beschrijving van de belangrijkste resulterende .csv bestanden. met opslaglocatie, filenaam, formaat, en attribuut namen . KEV interactie . | Mbv de GUI van het NEV-RekenSysteem kan worden gekozen voor welk project, scenario, en model.run jaren gerekend moet worden. Mbv environent variabelen zal SAWEC de daarbij behorende data paden voor invoer en uitvoer moeten kunnen bepalen | In het NEV-Rekensysteem is ook een SAWEC parameter dialoog te activeren. Hierin door de gebruiker gekozen instellingen dienen ook in een parameter file te worden geschreven en door SAWEC gelezen. Specificatie van deze GUI zal in de uitwerking van het Functioneel Ontwerp beschreven moeten worden. | lezen van KEV energieprijzen, economische parameters, en warmtenetten van NEV-RS in .csv format met TAB separators. | schrijven van verbruiksgegevens naar NEV: .csv formaat. | afnemers SAWEC resultaten: SELPE, SAVE-Production, RESolve-E, Competes (elektriciteit) | voor SELPE nodig: verbruiksgegevens per installatie per jaar, per koop/huur/sociaal categorie, fictief verbruik. | bij gedistribueerde simulatie van woningen, is het nodig de extensieve statistieken van de woning-samples te aggregeren en de gedistribueerde aggregaties samen te voegen. Dit kan als postprocessing stap na completering van de gedistribueerde berekening opgezet worden. | . Dit dient in het Functioneel Ontwerp of elders verder uitgewerkt te worden. Performance en geheugenbeheer . Hierbij een overzicht van technieken en methoden om aan de gestelde rekentijden te kunnen gaan voldoen. Allereerst een beschrijving van de huidige architectuur, technieken en mogelijkheden om snel te rekenen en vervolgens mogelijke verbeterpunten. Huidige GeoDMS technieken tbv het snel toepassen van rekenmodellen. Rekenen met arrays . Het datamodel van de GeoDMS bestaat uit . | Entiteiten. Een entiteit is een value-range met metriek of projectie informatie, met een eventuele segmentatie van die range (aka tiling). | Attributen. Een attribuut is een mappings tussen twee entiteiten, geoperationaliseerd als gesegmenteerde arrays van data-elementen. | . De data-values van zowel entiteiten als attributen kunnen . | expliciet gedefinieerd worden, | gerelateerd worden aan een externe bron, of | voorzien van een rekenregel waarmee de waarden berekend moeten worden. | . Een rekenproces bestaat uit het uitvoeren van reken-operaties op arrays hetgeen processing units veel sneller doen dan als voor iedere rekenstap nieuwe instructies verwerkt moeten worden, mede dankzij SIMD vectorisatie mogelijkheden en vergelijkbare optimalisatie technieken. Iedere instantiatie van een geparametriseerd reken script dient benoemd te worden, net als iedere instantiate van een for_each repetitie of loop, waarmee iedere berekende entiteit en attribuut een unieke naam heeft en iedere naam een eenduidige data-value. Het ontbreken van object states geeft de voordelen van functioneel programmeren: Referentiele Transparantie memoization en herberekenbaarheid. Dit value based rekenmodel maakt mogelijk een rekenproces te beschouwen als data-flow diagram van data-values en rekenstappen waarbij het beschikbaar hebben van een data-value voorgesteld kan worden als een pebble op dat diagram en het uitvoeren van een rekenstap kan aanvangen als alle benodigde data-values van een pebble zijn voorzien, resulterend in een pebble op het reken-resultaat. Het bereiken van een rekendoel kan dmv een strategie waarmee steeds een linie tussen bronnen en rekendoel wordt dichtgehouden. Data-values kunnen voor meerdere rekenoperaties gebruikt worden (memoization) of juist on-demand, just in time, opnieuw berekend worden. Ook kan er ingesteld worden dat bepaalde resultaten langer bewaard worden tbv hergebruik in toekomstige rekendoelen, wat vooral handig is als een gebruiker stap voor stap wil nalopen hoe een resultaat-element berekend is (calculation tracing). De huidige rekenstrategie van de GeoDms is om voor gevraagde resultaten alle benodigde rekenstappen te beschouwen en steeds rekenstappen waarvoor de benodigde data-values beschikbaar zijn in een start-queue te zetten en te starten voor zover het maximum aantal reken-threads, nu gelijk gesteld aan het aantal processing-units, dat toelaat. Steeds wanneer een rekentaak gereed komt, wordt dit opnieuw geëvalueerd. Een data-value wordt bewaard totdat het laatste gebruik in een rekentaak geëindigd is. Data segmentatie . Teneinde grote datasets beter behapbaar en in meerdere threads bewerkbaar te maken, kan de value-range van een entiteit gesegmenteerd worden. Gerelateerde attributen worden hiermee gesegmenteerd. De meeste rekenoperaties, met name die die per element gedefinieerd zijn, zijn zo opgezet dat deze per data-segment werken en dat de verwerking van verschillende data-segmenten over verschillende threads verdeeld worden. Zie ook: . | https://www.geodms.nl/GeoDMS_Academy | https://www.geodms.nl/Value_based_calculating | https://nl.wikipedia.org/wiki/Functioneel_programmeren | Taskflow: A Parallel and Heterogeneous Task Programming System Using Modern C++ - Tsung-Wei Huang https://www.youtube.com/watch?v=MX15huP5DsM&amp;t=2050s | Rust programming language concepts https://en.wikipedia.org/wiki/Rust_(programming_language) | . Verbeteropties . Virtuele data segmenten en pipelining . De huidige GeoDMS strategie van eenmalig berekenen en tot laatste gebruik bewaren van data-values is niet optimaal voor eenvoudig te (re)genereren data-values, zoals in . attribute` Aansluitwaarde(woning) := const(3[kW], woning);` `attribute`` NetCapaciteit (woning)):= Aansluitwaarde * GelijktijdigheidsFactor[woning_Categorie];` . Ook is het wenselijk pipelining van data-flow per segment uit te gaan voeren teneinde niet alle data-value segmenten van tussenresultaten tegelijk te hoeven bewaren. Verwerking van meerdere operaties per segment in plaats van alle segmenten per operatie te verwerken zal leiden tot kleiner benodigd geheugen. Voorgesteld wordt om het resultaat van een rekenoperatie niet altijd te laten bestaan uit een reeks array segmenten, maar soms uit een reeks functors die de array segmenten op aanvraag kunnen (her)berekenen, waarbij de gebruikende operatie (die nu een tile-read lock houdt) een shared owner is van het data-value segment. Slimmere herschrijving van rekenregels. Voordat rekenregels toegepast worden, vindt eerst toepassing van herschrijfregels plaats, waarmee o.a. sommige reken-operaties in termen van andere operaties worden gedefinieerd. Momenteel kunnen deze herschrijfregels niet selectief toegepast worden. Aangezien in Vesta/Mais en SAWEC 2.0 veel attributen woning specifiek moeten kunnen zijn tbv enkele woningmaatregelen maar voor de meeste woningmaatregelen een eenvoudige implementatie van 0 of een constante waarde hebben, is het zinvol hier gebruik van te maken in de verwerking van de rekenregels. Het herkennen van een factor of term met de waarde 0 kan voorkomen dat onnodig gerekend wordt en invulling van zulke specifieke rekenregels in een generiek sjabloon zou moeten kunnen leiden tot het wegsubstitueren van veel woning specifieke berekeningen. Het in bovenstaand voorbeeld herkennen dat een resultaat berekend kan worden en constant is per categorie van woningen, kan voorkomen dat voor een concrete subset van woningen en woningOpties voor ieder woning dezelfde berekening gemaakt wordt. Parallellisatie en sampling . Met parallellisatie wordt hier bedoeld: het over meerdere Azure Windows 10 machines verdelen van rekentaken teneinde sneller rekenresultaten te verkrijgen. Ieder machine heeft: . | een lokale kopie van de software, de source data, en lokale opslag voor tussenresultaten (SSD 64 GB), | lees/schrijf toegang tot gemeenschappelijke opslag, | en weet via environment variabelen hoeveel machines er ingezet worden en wat het volgnummer van de machine zelf is. | . Teneinde rekenwerk aan woningen en woninginvesteringen over meerdere rekenmachines te kunnen verdelen, is een mate van onafhankelijkheid van de keuzes wenselijk. Dit speelt met name bij: . | toepassing van subsidieregelingen met een gelimiteerd budget | toepassing van ambitie regels, waarbij na individuele investeringsbeslissingen bij een eventueel resterend quotum van de woningen een maatregel wordt toegepast. | . Distributie van gescheiden rekentaken . Wanneer SAWEC met een reeks van verschillende scenario-instellingen gedraaid moet worden, zoals bij een gevoeligheidsanalyse, is parallellisatie relatief eenvoudig. Een gemeenschappelijke lijst van taken en het gedistribueerde oppakken van die taken en wegschrijven van resultaten in een gedeelde folder tbv postprocessing volstaat. Random distributie van rekenwerk met restricties . Woning overstijgende subsidieregelingen en ambities kunnen beschouwd worden als een op de uitkomsten van toepassing zijnde restrictie met een bijbehorende schaduwprijs die onderscheidt welke woningen wel en niet mee doen. Bepaling van die schaduwprijs is een niet lokale berekening. Toepassing van die prijs wel. Als n woningen random over k machines worden verdeeld en fractie p := m/n van de woningen in aanmerking komt voor een regeling, is het verwacht aantal woningen dat op een specifieke machine in aanmerking komt voor een regeling: m/k, met als standaarddeviatie SQRT(n/k * m/n * (1-m/n)) = SQRT(m/k * (1-m/n)), dus iets kleiner dan SQRT(m/k). Wanneer een schaduwprijs op basis van een random geselecteerde deelverzamelingen worden bepaald door restricties volgens de opsplitsing mee te schalen, zullen een beperkt aantal woningen aan de verkeerde groep worden toegewezen en de werkelijke schaduwprijs zal ergens tussen de k gedistribueerd vastgestelde schaduwprijzen gevonden moeten worden. Het aantal dan centraal opnieuw te beschouwen woningen zijn de woningen die binnen de gevonden schaduwprijs range liggen, naar verwachting k* SQRT(m/k) = SQRT(m*k) woningen. Het wordt aanvaardbaar geacht om deze afwijkingen te negeren en regelingen pro rato gedistribueerd toe te passen. Dedicated distribution: . Functionele afwegingen: . | zijn woningen voldoende homogeen, of zouden juist subsets met verschillende mogelijke woninginvesteringen verdeeld moeten worden. | . key words: random sampling, task picking . Berekeningen specifiek voor geactiveerde woningen . Afwegingen voor een beperkte subset van alle woningen leiden tot status updates van kenmerken van die woningen. Een snelle operatie die woning attributen bijwerkt is gewenst: . status(woning) := actievewoning ? nieuweStatus(invert(activewoning_sel/woning_rel)) : VorigeStatus(woning) . Functionele guidelines tbv parallellisatie . Tbv segmentatie en parallelle verwerking is het wenselijk dat de berekening van woning gerelateerde kenmerken zo min mogelijk afhankelijk is van de rekenuitkomsten van andere woningen. | Voor SAWEC 2.0 is al gesteld dat toepassing van gebiedsopties (zoals warmtenetten) als exogeen beschouwd zullen worden. | Segmentering van verblijfsobjecten zou zodanig moeten geschieden dat appartementen in panden met gemeenschappelijke ketels altijd in dezelfde subset vallen, zodat ook investeringen in panden tbv alle appartementen daarin overwogen kunnen worden. | in het rekenmodel kan worden opgenomen hoe het machinenummer i en het aantal machines k een rol speelt in de selectie van de te verwerken woningen, zodanig dat dit ook werkt op een stand-alone workstation, dus wanneer k=1. | een synchronisatie functie zal moeten worden toegevoegd dat een proces laat wachten op de gereedkoming van k resultaten (files in een gedeelde netwerk-folder), waarna gedistributeerde berekening zich voort zet, bijvoorbeeld met een volgend jaar of iteratie - | . Structured Dataflows . Verwerking van huidige dataflow kan leiden tot veel items igv loop unrolling en lang vasthouden van grote tussenresultaten tbv gebruik in daarvan in meerdere eindresultaten. Een manier om beter aan te geven welke (aggregatie) stappen per iteratie uitgevoerd moeten worden voor met volgende rekenstappen verder te gaan, zou kunnen zijn het in de dafa-flow analyse expliciet rekening te houden met een hiërarchie van taken, waarbij de end-nodes van een sub-diagram eerst uitgerekend moeten zijn voor er verder gegaan wordt met een volgende. Zie ook: Taskflow: A Parallel and Heterogeneous Task Programming System Using Modern C++ - Tsung-Wei Huang: https://www.youtube.com/watch?v=MX15huP5DsM&amp;t=2050s . Heterogeneous processing . Gebruik van GPU’s voor eenvoudige vector bewerkingen kunnen de CPU’s behoorlijk versnellen en ontlasten . mogelijkheden . | GeoDMS wordt ontwikkeld met Visual Studio, waarmee array bewerkingen eenvoudig naar GPU’s te verplaatsen zijn mbv Accelerated Massive Parallelism (AMP). De GeoDMS rekenkern code is zodanig opgezet dat hier eenvoudig gebruik van kan worden gemaakt. | . kanttekeningen: . | beperkte winst wanneer data tussen RAM en disk de bottleneck is | winst neemt toe wanneer door geheugengebruik besparingen er minder via deze bottleneck moet | AMP is depreciated vanaf VC 2022, vermoedelijk wegens andere ontwikkelingen, met name: https://en.wikipedia.org/wiki/SYCL | . Zie ook: . | https://docs.microsoft.com/en-us/cpp/parallel/amp/cpp-amp-overview?view=msvc-160 | https://developer.nvidia.com/how-to-cuda-c-cpp | Taskflow: A Parallel and Heterogeneous Task Programming System Using Modern C++ - Tsung-Wei Huang https://www.youtube.com/watch?v=MX15huP5DsM&amp;t=2050s | . Horizontaal en verticaal schalen. thumb|horizontal vertical architecture|alt=|600x600px|none . Verticaal schalen: rekenproces verdelen over meer cores en RAM op 1 computer. Plafond wordt bepaald door: . | hardware: connectedness van fysieke cores en RAM | en door de mate waarin de software van meerdere cores gebruik kan maken en niet alle threads kluitjesvoetbal spelen. | . Bij het huidig aanbod op Azure lijken de rekenkosten bij horizontaal schalen lineair op te lopen tot aan 256 Cores in stappen van [8 cores + 16 GB ]. Horizontaal schalen: rekenproces verdelen over meerdere deelprocessen zodat verdeling over meerdere computers mogelijk wordt, . vereist onafhankelijkheid of tenminste beperkte afhankelijkheid van de deelprocessen . bijvoorbeeld doorrekening van woning partities of verdeling van meerdere runs . Plafond wordt bepaald door: . | hardware: binnen SAWEC context min of meer onbeperkt. | zinvolle grootte van een woning partities | of aantal runs | . Kosten . kosten azure [128/256 Cores + 64 GB] ram x 1 uur versus 16/32 x [8 cores + 16 GB ] x 2 uur zijn min of meer gelijk. Zolang een proces met verticaal schalen kan worden versneld, lijkt dit eenvoudiger en effectiever. inschatting performance en performance verbeteringen . De uiteindelijke rekentijd hangt van veel factoren af en het is lastig daar vooraf harde garanties voor te kunnen geven. Wel kan op basis van nu bekende informatie en kennis over effecten van veranderingen een inschatting te maken, . Uitgangspunten: . | rekentijd Vesta met 7 miljoen bestaande woningen, een beperkt aantal gebouw-opties, geen gebiedsopties, 21 zichtjaren . | op een Azure machine (GeoDms specificatie): 8 uur. | op een snelle thuis-desktop (8 cores, 4.3 GHz DDR4 2133 MHz): 2 uur | . | kalibratieresultaten en een dynamische woningtabel zijn ontkoppeld beschikbaar gemaakt mbv voorbewerkingen | geen gebiedsopties | rekenen met 400 woninginvesteringen in plaats van 4 gebouwopties: factor 100 langzamer | alleen doorrekenen van geactiveerde woningen, mits niet meer dan 5% per jaar geactiveerd en selectie en samenvoeg operaties hier goed op werken en niet bij de ambities weer alle woninginvesteringen voor alle andere woningen ook beschouwd hoeven worden: factor 10 sneller | ambities en subsidiebudgettten zijn goed op te delen over tenminste 256 rekenprocessen: factor 100 sneller | zonodig kunnen die Azure machines nu, danwel in de nabije toekomst, nog wel zwaarder en sneller geconfigureerd worden: 2 uur in plaats van 8 uur: factor 4 sneller | conclusie: 8 uur * 100 / 10 / 4 = 20 uur op 1 machine, 1 uur op ongeveer 32 machines en 12 minuten op ongeveer 256 machines. | . ",
    "url": "/docs/sawec-2.0-wp3-it-infra.html",
    
    "relUrl": "/docs/sawec-2.0-wp3-it-infra.html"
  },"2687": {
    "doc": "sawec-woninginvesting",
    "title": "sawec-woninginvesting",
    "content": "Begrippen: . | bouwdeel := { RO, RB, DR, PL, MG, MS, DS, DP } | bouwdeelkwaliteit := { L, M, H } | bouwdeelverbeterdoel := { X, M, H } | bouwdeelverbetering := { LM, MH, LH } | bouwdeelverbeterpakket := relevant bouwdeel (ten minste 1)-&gt; bouwdeelverbeterdoel | bouwdeelverbeteroptie := combinatie van bouwdeelverbeterpakketten waarin geen bouwdelen dubbel voor komen | activeringscriterium := (woning x zichtjaar) -&gt; ( bouwdeel -&gt; {actief, inactief } ) ; er mogen alleen verbeteringen plaats vinden aan actieve bouwdelen. | criteria voorbeelden: . | technische levensduur van bouwdelen (eerdere verbetering of proxy obv bouwjaar) of installatie of natuurlijk investeringsmoment. | beleid: geografie (bijvoorbeeld enkele CBS buurten), woningcategorie en/of eigendomssituatie. | mee-activatie: bouwdeelsubset actief -&gt; andere selecties ook actief | percentage overige woningen op bouwdeel(sub)set | . | of: (bouwdeel x zichtjaar) -&gt; woning -&gt; ( {actief, inactief } ) | of: bouwdeel -&gt; (woning x zichtjaar) -&gt; ( {actief, inactief } ) | . | WoningType := { Vrijstaand, 2 onder 1 kap, rijwoning hoek, rijwoning tussen, Meergezins max 4 verdiepingen, Meergezins &gt;4 verdiepingen } | Bouwjaarklasse := { 1930…., 1946…, 1965…, 1975…, 1992…, 1996…, 2000…, 2006…, 2011…, 2015 } | ModelObject := WoningType x Bouwjaarklasse | verbeterkostentabel := ModelObject -&gt; bouwdeel -&gt; bouwdeelverbetering -&gt; (min, max: €/m^2) | bouwdeelverbeterpakket-toepasbaarheids-tabel := bouwdeelverbetepakket -&gt; (woning x zichtjaar) -&gt; Boolean | . Bovenstaande bepaalt per (woning x zichtjaar) een set van toegestane bouwdeelverbeteropties. | issue: wat is de (qua performance) gewenste volgorde van toepassing bepaling set van bouwdeelverbeteropties. Eerst bouwdeelverbeteropties vaststellen en dan activeringscriteria checken of (beter) per bouwdeelverbeterpakket checken met het relevante deel van de activeringscriteria | . ",
    "url": "/docs/sawec-woninginvesting.html",
    
    "relUrl": "/docs/sawec-woninginvesting.html"
  },"2688": {
    "doc": "scale-dependent-visualisation",
    "title": "Example",
    "content": "unit&lt;uint32&gt; house :   StorageName = \"%SourceDataDir%/house.csv\" ,   StorageType = \"gdal.vect\" {    parameter&lt;float32&gt; ZoomInLimit  :=   0.00025f, DialogType = \"MinPixSize\";    parameter&lt;float32&gt; ZoomOutLimit := 200.0f    , DialogType = \"MaxPixSize\"; } . The ZoomInLimit parameter(The name of the subitem parameters have no functional meaning, but for transparency reasons it is advised to use clear names) with the property dialogtype configured to “MinPixSize”, configures the lower limit of the zoom range for all data items with house as domain unit.The ZoomOutLimit with the property DialogType configured to “MaxPixSize” configures the upper limit. The values for these limits are configured as expression in the metric of the coordinate system used, in the example meters. The configured parameters in the example define that this layer will be visualised if the zoom level is more than 0.00025 meter and less than 200.0 meter for one pixel. ",
    "url": "/docs/scale-dependent-visualisation.html#example",
    
    "relUrl": "/docs/scale-dependent-visualisation.html#example"
  },"2689": {
    "doc": "scale-dependent-visualisation",
    "title": "scale-dependent-visualisation",
    "content": "Layers in the map view can be made visualisation-style within a defined scale range. Detailed information can be shown if the user zooms in to a small area and more overview information if the user is zoomed out to a large area. The MinPixSize and MaxPixSize subitem parameter for the domain-unit of the layer can be used for scale dependent visualisation. ",
    "url": "/docs/scale-dependent-visualisation.html",
    
    "relUrl": "/docs/scale-dependent-visualisation.html"
  },"2690": {
    "doc": "scalesum",
    "title": "syntax",
    "content": ". | scalesum(proxy, a) | scalesum(proxy, relation, a) | . ",
    "url": "/docs/scalesum.html#syntax",
    
    "relUrl": "/docs/scalesum.html#syntax"
  },"2691": {
    "doc": "scalesum",
    "title": "definition",
    "content": ". | scalesum(proxy, a) disaggregates the values of parameter a, according to the distribution of the proxy attribute. The function results in a new attribute with the values-unit of argument a and the domain-unit of argument proxy. | scalesum(proxy, relation, a) disaggregates the values of attribute a, according to the distribution of the proxy attribute, grouped by relation. The function results in a new attribute with the values unit of argument a and the domain unit of arguments proxy and relation. | . ",
    "url": "/docs/scalesum.html#definition",
    
    "relUrl": "/docs/scalesum.html#definition"
  },"2692": {
    "doc": "scalesum",
    "title": "description",
    "content": "To avoid rounding off errors within the scalesum calculation, use a float32 of float64 value-type for arguments proxy and a. The sum of the result will equal the given quantity a, provided that the quantity can be related to any element of the disaggregated domain with a positive proxy value. To avoid loosing parts of the quantity, check that for each partition the total proxy value is positive (unless the quantity is zero). ",
    "url": "/docs/scalesum.html#description",
    
    "relUrl": "/docs/scalesum.html#description"
  },"2693": {
    "doc": "scalesum",
    "title": "conditions",
    "content": ". | The domain units of arguments proxy and relation must match. | The value type of arguments proxy and a must match. | . ",
    "url": "/docs/scalesum.html#conditions",
    
    "relUrl": "/docs/scalesum.html#conditions"
  },"2694": {
    "doc": "scalesum",
    "title": "example",
    "content": "1. attribute &lt;float32&gt; ssum_NrInh (CityDomain) := scalesum( City/Area // proxy variable for distribution ,550f // amount to be distributed ); 2. attribute&lt;uint32&gt; ssum_NrInh_per_region (CityDomain) := uint32( scalesum( City/Area ,City/Region_rel // relation from city to region ,float32(Region/NrInhabitants) ) ); . | City/Area | City/NrInhabitants | City/Region_rel | ssum_NrInh | ssum_NrInh_per_region | . | 2 | 550 | 0 | 120.55 | 550 | . | 0 | 525 | 1 | 100.69 | 531 | . | 1 | 300 | 2 | 49.31 | 300 | . | 0 | 500 | 1 | 89.04 | 493 | . | 1 | 200 | 3 | 27.40 | 111 | . | 1 | 175 | null | null | null | . | null | null | 3 | null | 88 | . domain City, nr of rows = 7 . | Region/NrInhabitants | . | 550 | . | 1025 | . | 300 | . | 200 | . | 0 | . domain Region, nr of rows = 5 . ",
    "url": "/docs/scalesum.html#example",
    
    "relUrl": "/docs/scalesum.html#example"
  },"2695": {
    "doc": "scalesum",
    "title": "scalesum",
    "content": "rescale-functions scalesum . ",
    "url": "/docs/scalesum.html",
    
    "relUrl": "/docs/scalesum.html"
  },"2696": {
    "doc": "segment",
    "title": "segment",
    "content": "A segment is an arc with two points (no intermediates). Segments can also be configured by a start and an end point. ",
    "url": "/docs/segment.html",
    
    "relUrl": "/docs/segment.html"
  },"2697": {
    "doc": "select-...-from-...-...",
    "title": "GeoDMS",
    "content": "The resulting domain unit in the GeoDMS of an cross join SQL statement can be configured with the combine function, see the example: . ",
    "url": "/docs/select-/.-from-/.-.html#geodms",
    
    "relUrl": "/docs/select-/.-from-/.-.html#geodms"
  },"2698": {
    "doc": "select-...-from-...-...",
    "title": "Example",
    "content": "unit&lt;uint32&gt; CartesianProduct := combine(src/Appartment,src/Building) { attribute&lt;string&gt; AppartmentId := src/Appartment/Id[nr_1]; attribute&lt;string&gt; Street := src/Appartment/Street[nr_1]; attribute&lt;uint32&gt; Number := src/Appartment/Number[nr_1]; attribute&lt;string&gt; ZipCode := src/Appartment/ZipCode[nr_1]; attribute&lt;string&gt; Town := src/Appartment/Town[nr_1]; attribute&lt;units/Year&gt; ConstructionYear := src/Building/ConstructionYear[nr_2]; attribute&lt;units/m2&gt; Footprint := src/Building/Footprint[nr_2]; } . ",
    "url": "/docs/select-/.-from-/.-.html#example",
    
    "relUrl": "/docs/select-/.-from-/.-.html#example"
  },"2699": {
    "doc": "select-...-from-...-...",
    "title": "select-...-from-...-...",
    "content": "Relational model versus Semantic arrays dml . Cross joins combine data from multiple tables/views in a new view with the Cartesian Product of the tables/views mentioned in the FROM part. A cross join can be defined as an Inner join without join condition. The following SQL Statement will make the Cartesian Product of the Apartment and Building tables. Select Apartment.Id, Apartment.Street, Apartment.Number, Apartment.ZipCode , Apartment.Town, Building.ConstructionYear, Building.Footprint From Apartment, Building . resulting in the following data: . The first 5 attribute result from the Apartment table, the last 2 attributes from the Building table. ",
    "url": "/docs/select-/.-from-/.-.html",
    
    "relUrl": "/docs/select-/.-from-/.-.html"
  },"2700": {
    "doc": "select-...-from-...-group-by-...",
    "title": "geographic relations",
    "content": "For aggregations (GROUP BY Statements) relations are needed. These relations can be calculated with the rlookup function, if they can be derived from the source attributes. In Geographic applications the relation is not always available in the source attributes, but can be derived from a Geographic relation. If the geography of the apartments (points) and of the towns (polygons) is known, the point_in_polygon function can be used to calculate a similar relation. ",
    "url": "/docs/select-/.-from-/.-group-by-.html#geographic-relations",
    
    "relUrl": "/docs/select-/.-from-/.-group-by-.html#geographic-relations"
  },"2701": {
    "doc": "select-...-from-...-group-by-...",
    "title": "multiple attributes",
    "content": "Assume the following SQL Statement: . Select ZipCode, Town, Sum(Surface) AS TownSurface FROM Appartment GROUP BY ZipCode, Town . In the GeoDMS, the rlookup and unique functions do not support multiple attributes. Therefore, to configure a SQL Group BY Statement with multiple Group BY fields, first concatenate these into one new attribute(see the distinct) example) and use this new attribute in the rlookup / unique functions. Select … From … Where … Group By … Having … Order By … . More complex Group By Statements in the GeoDMS are configured in multiple steps (see also Select From Where Order By). Use the following step order: . | Define the WHERE Clause with a selection-functions on the source domain. | Define the GROUP BY relation / aggregation-functions on the selection domain of step 1 towards the aggregated domain (see above). | Define the HAVING Clause with a subset on the aggregated domain. This is done in a similar way as the WHERE clause selection, only on the aggregated domain. | Define the ORDER BY Clause on the subset of the aggregated domain. | . ",
    "url": "/docs/select-/.-from-/.-group-by-.html#multiple-attributes",
    
    "relUrl": "/docs/select-/.-from-/.-group-by-.html#multiple-attributes"
  },"2702": {
    "doc": "select-...-from-...-group-by-...",
    "title": "select-...-from-...-group-by-...",
    "content": "Relational model versus Semantic arrays dml . The Select … From … Group By dml statement is used to aggregate fields to a new domain-unit. Assume the following SQL Statement: . Select Town, Sum(Surface) AS TownSurface FROM Appartment GROUP BY Town . This statement can be applied on our relational-model-versus-semantic-arrays, resulting in the following data: . In the GeoDMS the aggregated domain unit first needs to be configured. It can consist of a set of known defined values (e.g. all months of the year or all cities in the region, 1) or be derived from the data (2). 1. unit&lt;uint32&gt; DefinedTownDomain: nrofrows = 3    {       attribute&lt;string&gt; values: ['BTown','AVillage','CCity'];    } 2. unit&lt;uint32&gt; DerivedTownDomain := unique(src/Appartment/Town); . In this article the DefinedTownDomain will be used as aggregated unit. To aggregate fields from the source (Appartment) domain towards the aggregated (DefinedTownDomain) domain, a relation is needed between these two domains. In the GeoDMS such a relation, also called a partitioning, needs to consist of the index-numbers of the aggregated domain-unit, for each entry in the source domain. Relations are often made with the rlookup function. This function relates an attribute in the source domain (in our example the attribute: Town) to the values in the aggregated domain and results in the index numbers of the aggregated domain: . attribute&lt;DefinedTownDomain&gt; DefinedTownDomain_rel (src/Appartment) :=  rlookup(src/Appartment/Town, DefinedTownDomain/Values); . This new attribute has as values-unit the index numbers of the DefinedTownDomain and as domain unit Appartment. The postfix _rel is a naming-conventions to indicate the result is a relational attribute that can be used to aggregate data from the Appartment domain towards the DefinedTownDomain: . attribute&lt;units/m2&gt; TownSurface (DefinedTownDomain) := sum(src/Appartment/Surface, DefinedTownDomain_rel); . Resulting in the sum of the surfaces of the apartments per town. In CCity there are no apartments, so the result for this entry will be zero. ",
    "url": "/docs/select-/.-from-/.-group-by-.html",
    
    "relUrl": "/docs/select-/.-from-/.-group-by-.html"
  },"2703": {
    "doc": "select-...-from-...-inner-join-....-on-...",
    "title": "GeoDMS",
    "content": "A relation in the relational model is defined as a subset of the Cartesian product of n domains. The result of the inner join is a relation and therefore also such a subset. The resulting domain-unit the GeoDMS of an inner join SQL statement can be configured with the combine function (to create the Cartesian product) and the subset (to make the relevant subset), see example 2. In this case the subset domain is already configured in the GeoDMS. As mentioned, the resulting view from the inner join has the same number of rows and sequence as the AppartmentBuildingRelation table. Therefor the AppartmentBuildingRelation domain unit is the domain of the result, see example 1. Example 1, resulting domain unit already configured (the AppartmentBuildingRelation domain unit is configured in a src container) . unit&lt;uint32&gt; resultdomain := src/AppartmentBuildingRelation {   attribute&lt;string&gt; AppartmentId := src/AppartmentBuildingRelation/AppartmentId;   attribute&lt;string&gt; BuildingId   := src/AppartmentBuildingRelation/BuildingId;   attribute&lt;string&gt; Street       := rjoin(AppartmentId, src/Appartment/id, src/Appartment/Street);   attribute&lt;uint32&gt; Number       := rjoin(AppartmentId, src/Appartment/id, src/Appartment/Number);   attribute&lt;string&gt; ZipCode      := rjoin(AppartmentId, src/Appartment/id, src/Appartment/ZipCode);   attribute&lt;string&gt; Town         := rjoin(AppartmentId, src/Appartment/id, src/Appartment/Town);   attribute&lt;units/Year&gt; ConstructionYear := rjoin(BuildingId, src/Building/id, src/Building/ConstructionYear);    attribute&lt;units/m2&gt;   Footprint        := rjoin(BuildingId, src/Building/id, src/Building/Footprint); } . The rjoin function is used to relate attributes of two domains, Appartments and Building, using a third domain: AppartmentBuildingRelation. Example 2, resulting domain unit is configured with combine and select_with_org_rel functions . unit&lt;uint32&gt; CartesianProduct := combine(src/Appartment,src/Building) {    attribute&lt;string&gt; AppartmentId  := src/Appartment/id[nr_1];    attribute&lt;string&gt; BuildingId    := src/Building/id[nr_2];    attribute&lt;bool&gt;   JoinCondition :=        isDefined(          rlookup(             AppartmentId + '_' + BuildingId             ,  src/AppartmentBuildingRelation/AppartmentId + '_' +                 src/AppartmentBuildingRelation/BuildingId         )     ); } unit&lt;uint32&gt; ResultDomain := select_with_org_rel(CartesianProduct/JoinCondition) {    attribute&lt;string&gt; AppartmentId := CartesianProduct/AppartmentId[org_rel];    attribute&lt;string&gt; BuildingId   := CartesianProduct/BuildingId[org_rel];    attribute&lt;string&gt; Street       := rjoin(AppartmentId, src/Appartment/id, src/Appartment/Street);    attribute&lt;uint32&gt; Number       := rjoin(AppartmentId, src/Appartment/id, src/Appartment/Number);    attribute&lt;string&gt; ZipCode      := rjoin(AppartmentId, src/Appartment/id, src/Appartment/ZipCode);    attribute&lt;string&gt; Town         := rjoin(AppartmentId, src/Appartment/id, src/Appartment/Town);    attribute&lt;units/Year&gt; ConstructionYear := rjoin(BuildingId, src/Building/id, src/Building/ConstructionYear);     attribute&lt;units/m2&gt;   Footprint        := rjoin(BuildingId, src/Building/id, src/Building/Footprint); } . ",
    "url": "/docs/select-/.-from-/.-inner-join-/-on-.html#geodms",
    
    "relUrl": "/docs/select-/.-from-/.-inner-join-/-on-.html#geodms"
  },"2704": {
    "doc": "select-...-from-...-inner-join-....-on-...",
    "title": "select-...-from-...-inner-join-....-on-...",
    "content": "Relational model versus Semantic arrays dml . Joins relate tables/views to combine data from multiple tables/views in a new view, based on a JOIN condition. A typical inner join in our relational-model-versus-semantic-arrays would be to relate building information to the appartments that are related to these buildings, see the following SQL statement: . Select Appartment.Id, Appartment.Street, Appartment.Number, Appartment.ZipCode , Appartment.Town, Building.ConstructionYear, Building.Footprint From  Building Inner Join (Appartment Inner Join AppartmentBuildingRelation On Appartment.Id = AppartmentBuildingRelation.AppartmentId) On Appartment.Id = AppartmentBuildingRelation.AppartmentId . resulting in the following data: . The first 5 attribute result from the Appartment table, the last 2 attributes from the Building table. The AppartmentBuildingRelation table is used to relate the tables in the Join condition. The resulting view has the same number of rows as the AppartmentBuildingRelation table (as the combination of the AppartmentId/BuildingId in this table is unique). ",
    "url": "/docs/select-/.-from-/.-inner-join-/-on-.html",
    
    "relUrl": "/docs/select-/.-from-/.-inner-join-/-on-.html"
  },"2705": {
    "doc": "select-...-from-...-left_right-join-...-on-...",
    "title": "GeoDMS",
    "content": "As left joins are mostly used to relate data to existing domains, there is usually no need to configure new domain units. The following example show how to configure the left join SQL Statement in GeoDMS syntax: . unit&lt;uint32&gt; resultdomain := src/Appartment {   attribute&lt;string&gt; AppartmentId       := src/Appartment/Id;   attribute&lt;string&gt; Street             := src/Appartment/Street;   attribute&lt;uint32&gt; Number             := src/Appartment/Number;   attribute&lt;string&gt; ZipCode            := src/Appartment/ZipCode;   attribute&lt;string&gt; AverageTemperature := rjoin(ZipCode, src/PC6/ZipCode, src/PC6/AverageTemperature); } . The rjoin function is used to relate attribute of the two domain-unit: Appartment and PC6. ",
    "url": "/docs/select-/.-from-/.-left_right-join-/.-on-.html#geodms",
    
    "relUrl": "/docs/select-/.-from-/.-left_right-join-/.-on-.html#geodms"
  },"2706": {
    "doc": "select-...-from-...-left_right-join-...-on-...",
    "title": "difference",
    "content": "The results differ between the left join SQL Statement and the GeoDMS rjoin function in case the ZipCode attribute in the ZipCode table would nog be unique. In that case the resulting dataset of the SQL Statement would not be of the same domain as the Apartment table, but would contain more records with each combination of matching ZipCodes in both tables. This can result in records explosion and is often not desired, but can still be derived within the GeoDMS by configuring a new domain unit first (see example II on the Inner Join page) . The rjoin function in the GeoDMS will always result in an attribute for the configured domain. If the ZipCode attribute in the ZipCode table would not be unique, the rjoin function will result in the AverageTemperature of the first matching ZipCode. ",
    "url": "/docs/select-/.-from-/.-left_right-join-/.-on-.html#difference",
    
    "relUrl": "/docs/select-/.-from-/.-left_right-join-/.-on-.html#difference"
  },"2707": {
    "doc": "select-...-from-...-left_right-join-...-on-...",
    "title": "select-...-from-...-left_right-join-...-on-...",
    "content": "Relational model versus Semantic arrays dml . Joins relate tables/views to combine data from multiple tables/views in a new view, based on a JOIN condition. A typical left join in our relational-model-versus-semantic-arrays would be to relate ZipCode information to Appartments. Therefor we first introduce a new table with ZipCode information: . The following SQL Statement relates the ZipCode information to all Appartments: . Select Appartment.Id, Appartment.Street, Appartment.Number, Appartment.ZipCode , Appartment.Town, ZipCode.AverageTemperature From Appartment Left Join ZipCode ON Appartment.ZipCode = ZipCode.ZipCode . resulting in the following data: . The first 5 attributes result from the Appartment table, the last attribute from the ZipCode table. The resulting data is of the same domain as the Appartments table. In here the left join differs from the inner join. If an inner join was used, the last two rows (with the null values for average temperature) would not be part of the result. Left/right joins are usually used to relate data to a defined domain with null values if the relating data is missing for the requested entries. ",
    "url": "/docs/select-/.-from-/.-left_right-join-/.-on-.html",
    
    "relUrl": "/docs/select-/.-from-/.-left_right-join-/.-on-.html"
  },"2708": {
    "doc": "select-...-from-...-order-by...",
    "title": "single attribute ordering",
    "content": "Assume the following SQL Statement: . Select Street, Number, Zipcode, Town From Appartment Order By ZipCode . This statement can be applied on our relational-model-versus-semantic-arrays, resulting in the following data: . The GeoDMS works with semantic arrays, in which the sequence of elements matter. Therefore, for a SQL Statement with an Order By clause, in the GeoDMS a new domain-unit needs to be configured. The new domain unit has the same cardinality as the source domain and is often configured with the range function (see the example). For the source domain an index attribute need to be configured with the index function, with the attribute to be sorted as argument. In the example the index attribute is called ZipOrderAtt and results in the index-numbers of the source domain unit in the sorted order of the ZipCodes. The index attribute is used in the lookup functions for each requested attribute to get the elements in the new order. The lookup results have the same domain as the source domain, with the union_data function the data is converted to the new domain (ZipOrder). GeoDMS configuration (the Appartment domain unit is configured in a src container): . attribute&lt;src/Appartment&gt; ZipOrderAtt (src/Appartment) := index(src/Appartment/ZipCode); unit&lt;uint32&gt; ZipOrder := unique(ZipOrderAtt) {    attribute&lt;string&gt; Street  := (src/Apartment/Street[ZipOrderAtt])[Values];    attribute&lt;uint32&gt; Number  := (src/Apartment/Number[ZipOrderAtt])[Values];    attribute&lt;string&gt; ZipCode := (src/Apartment/ZipCode[ZipOrderAtt])[Values];    attribute&lt;string&gt; Town    := (src/Apartment/Town[ZipOrderAtt])[Values]; } . The resulting domain is sorted by ZipCode. For elements with the same ZipCode, the order in the source domain is maintained. ",
    "url": "/docs/select-/.-from-/.-order-by.html#single-attribute-ordering",
    
    "relUrl": "/docs/select-/.-from-/.-order-by.html#single-attribute-ordering"
  },"2709": {
    "doc": "select-...-from-...-order-by...",
    "title": "multiple attributes ordering",
    "content": "Assume the following SQL Statement: . Select Street, Number, Zipcode, Town From Appartment Order By ZipCode, Number . The GeoDMS configuration is similar to the single attribute ordering example, with one exception. The index function in the GeoDMS does not support multiple arguments. Therefore concatenate the ZipCode and Number attributes as strings, see the example: . attribute&lt;src/Appartment&gt; ZipNumberOrderAtt (src/Appartment) :=  index(src/Appartment/ZipCode + '_' + string(src/Appartment/Number)); . This ZipNumberOrderAtt attribute can now be used in the lookup functions in the same way as the ZipOrderAtt in the single attribute ordering example. ",
    "url": "/docs/select-/.-from-/.-order-by.html#multiple-attributes-ordering",
    
    "relUrl": "/docs/select-/.-from-/.-order-by.html#multiple-attributes-ordering"
  },"2710": {
    "doc": "select-...-from-...-order-by...",
    "title": "select-...-from-...-order-by...",
    "content": "Relational model versus Semantic arrays dml . The Select … From … Order By statement is used to select one or more attribute from a table with an Order By Clause (sort criterium). ",
    "url": "/docs/select-/.-from-/.-order-by.html",
    
    "relUrl": "/docs/select-/.-from-/.-order-by.html"
  },"2711": {
    "doc": "select-...-from-...-where-...-order-by...",
    "title": "select-...-from-...-where-...-order-by...",
    "content": "Relational model versus Semantic arrays dml . The Select … From … Where … Order By statement is used to select one or more attribute from a table with a Where Clause (selection criterium) and an Order By Clause (sort criterium). In GeoDMS configure this type of Statements in two steps: . | First configure the select-…-from-…-where-… part of the statement. | For the resulting selection configure the select-…-from-…-order-by… part. | . ",
    "url": "/docs/select-/.-from-/.-where-/.-order-by.html",
    
    "relUrl": "/docs/select-/.-from-/.-where-/.-order-by.html"
  },"2712": {
    "doc": "select-...-from-...-where-...",
    "title": "single attribute selection",
    "content": "Assume the following SQL Statement: . Select Street, Number, Zipcode, Town From Appartment Where Town = ’BTown’ . This statement can be applied on our relational-model-versus-semantic-arrays, resulting in the following data: . GeoDMS configuration (the Appartment domain unit is configured in a src container): . unit&lt;uint32&gt; singleAttSelection :=  select_with_attr_by_cond( DDL_Create/Apartment ,DDL_Create/Apartment/Town == 'BTown' ); . In the example the select_with_attr_by_cond function is used to select elements from the DDL_Create/Apartment domain unit. The part with_attr in the function name indicates all attributes from the first argument (DDL_Create/Apartment) become available for the selection domain. The condition is configured as second argument. Other selection-functions can also be used. ",
    "url": "/docs/select-/.-from-/.-where-.html#single-attribute-selection",
    
    "relUrl": "/docs/select-/.-from-/.-where-.html#single-attribute-selection"
  },"2713": {
    "doc": "select-...-from-...-where-...",
    "title": "multiple attributes selection",
    "content": "Assume the following SQL Statement: . Select Street, Number, Zipcode, Town From Appartment Where ZipCode = ’AA6681’ And Number = 3 . This statement can be applied on our relation model, resulting in the following data: . GeoDMS configuration (the Appartment domain unit is configured in a src container): . unit MultipleAttSelection := select_with_attr_by_cond( DDL_Create/Apartment ,DDL_Create/Apartment/ZipCode == 'AA6681' &amp;&amp; DDL_Create/Apartment/Number == 3 ); &lt;/pre&gt; . ",
    "url": "/docs/select-/.-from-/.-where-.html#multiple-attributes-selection",
    
    "relUrl": "/docs/select-/.-from-/.-where-.html#multiple-attributes-selection"
  },"2714": {
    "doc": "select-...-from-...-where-...",
    "title": "select-...-from-...-where-...",
    "content": "Relational model versus Semantic arrays dml . The Select … From … Where … statement is used to select records from a table/view that meet the condition defined in the Where Clause. In the GeoDMS first a new domain-unit needs to be configured with the e.g. the subset function, resulting in a subitem called Nr_OrgEntity with as values-unit the index-numbers of the original domain. This Nr_OrgEntity attribute can be used to get the data from the original domain for the new subset domain, using the lookup function (see examples). ",
    "url": "/docs/select-/.-from-/.-where-.html",
    
    "relUrl": "/docs/select-/.-from-/.-where-.html"
  },"2715": {
    "doc": "select-...-from-...",
    "title": "Select * From …",
    "content": "In SQL an * asterisk is used to refer to all fields of a table. In the GeoDMS attributes with the same domain unit can be configured at different locations in the configuration. The meaning of an * asterisk is less clear and therefore not used in the GeoDMS. With the subitem_propvalues / inherited_propvalues / subtree_propvalues it is possible to make a list of all (full) names of data items with the same domain unit in a container, branche or whole configuration. With a for_each expression such a list can be used to select all these items. ",
    "url": "/docs/select-/.-from-.html#select--from-",
    
    "relUrl": "/docs/select-/.-from-.html#select--from-"
  },"2716": {
    "doc": "select-...-from-...",
    "title": "select-...-from-...",
    "content": "Relational model versus Semantic arrays dml . The basic Select … From … statement is used to select one or more attributes from a table. Assume the following SQL Statement: . Select Street, Number, Zipcode, Town From Appartment . This statement can be applied on our relation model, resulting in the following data: . For such a SQL statement, in the GeoDMS no new domain-unit needs to be configured. The source domain is identical to the domain of the result. The SQL statement can be configured in the GeoDMS in two ways (the Appartment domain unit is configured in a src container): . example 1: . container result {    attribute&lt;string&gt; Street  (src/Appartment) := src/Appartment/Street;    attribute&lt;uint32&gt; Number  (src/Appartment) := src/Appartment/Number;    attribute&lt;string&gt; ZipCode (src/Appartment) := src/Appartment/ZipCode;    attribute&lt;string&gt; Town    (src/Appartment) := src/Appartment/Town; } . example 2: . unit&lt;uint32&gt; resultdomain := src/Appartment {    attribute&lt;string&gt; Street  := src/Appartment/Street;    attribute&lt;uint32&gt; Number  := src/Appartment/Number;    attribute&lt;string&gt; ZipCode := src/Appartment/ZipCode;    attribute&lt;string&gt; Town    := src/Appartment/Town;  } . In the first example a result container is configured. The subitem are the fields to be selected. As the resulting items are identical to the source items, the simple equal to (=) operator is used in the expression. The domain units of the resulting items are not their parent items, therefore they need to be configured explicitly. in the second example first a resultdomain domain unit is configured, equal to the source domain (src/Appartment). The same subitems are now configured, but as their parent items are now a domain unit equal to the src domain, the domain units do not have to be configured explicitly. This second approach is advisable if multiple subitems are requested. ",
    "url": "/docs/select-/.-from-.html",
    
    "relUrl": "/docs/select-/.-from-.html"
  },"2717": {
    "doc": "select",
    "title": "syntax",
    "content": ". | select(condition) | select_uint8(condition) | select_uint16(condition) | select_uint32(condition) | select_uint64(condition) | . ",
    "url": "/docs/select.html#syntax",
    
    "relUrl": "/docs/select.html#syntax"
  },"2718": {
    "doc": "select",
    "title": "definition",
    "content": "Like the subset function, the select(condition) function results in a new uint32 domain-unit for which the values of the condition argument are true. The difference with the subset/select_with_org_rel function is that the select does not result in a generated subitem (nr_OrgEntity for subset, org_rel for select_with_org_rel). This makes the select function useful to apply on large domain units for which the nr_OrgEntity or org_rel could use a substantial amount of memory. Between versions 7.305 and 8.7.2 the name select_unit was used for the select function. The explicit select_uint8, select_uint16, select_uint32 and select_uint64 functions can be used in the same manner as the select function, to create a new domain unit with the explicit value type. ",
    "url": "/docs/select.html#definition",
    
    "relUrl": "/docs/select.html#definition"
  },"2719": {
    "doc": "select",
    "title": "description",
    "content": "Use the select_data function to relate attribute to the new domain unit, see the example. ",
    "url": "/docs/select.html#description",
    
    "relUrl": "/docs/select.html#description"
  },"2720": {
    "doc": "select",
    "title": "applies to",
    "content": ". | condition must be a boolean attribute or subexpression resulting in boolean values. | . ",
    "url": "/docs/select.html#applies-to",
    
    "relUrl": "/docs/select.html#applies-to"
  },"2721": {
    "doc": "select",
    "title": "since version",
    "content": "8.8.0 . ",
    "url": "/docs/select.html#since-version",
    
    "relUrl": "/docs/select.html#since-version"
  },"2722": {
    "doc": "select",
    "title": "example",
    "content": "unit&lt;uint32&gt; ZHCities := select(City/RegionCode == 200) { attribute&lt;string&gt; name := select_data(., City/RegionCode == 200, City/Name); } . | City/RegionCode | City/Name | . | 100 | Amsterdam | . | 200 | Rotterdam | . | 300 | Utrecht | . | 200 | Den Haag | . | 400 | Eindhoven | . | null | Haarlem | . | 400 | Tilburg | . domain City, nr of rows = 7 . | ZHCities/name | . | Rotterdam | . | Den Haag | . domain ZHCities, nr of rows = 2 . ",
    "url": "/docs/select.html#example",
    
    "relUrl": "/docs/select.html#example"
  },"2723": {
    "doc": "select",
    "title": "see also",
    "content": ". | collect_by_cond | . ",
    "url": "/docs/select.html#see-also",
    
    "relUrl": "/docs/select.html#see-also"
  },"2724": {
    "doc": "select",
    "title": "select",
    "content": "selection-functions select . ",
    "url": "/docs/select.html",
    
    "relUrl": "/docs/select.html"
  },"2725": {
    "doc": "select_afew",
    "title": "select_afew",
    "content": "relational-functions select_afew . The select_afew is a depreciated name for the select_with_attr_by_org_rel function. It was used in the GeoDMS versions between 8.6.0 and 8.7.2. We advice to rename this function to it’s new name: select_with_attr_by_org_rel in your configurations. ",
    "url": "/docs/select_afew.html",
    
    "relUrl": "/docs/select_afew.html"
  },"2726": {
    "doc": "select_data",
    "title": "syntax",
    "content": ". | select_data(domain-unit, condition, attribute) | . ",
    "url": "/docs/select_data.html#syntax",
    
    "relUrl": "/docs/select_data.html#syntax"
  },"2727": {
    "doc": "select_data",
    "title": "definition",
    "content": "The select_data(domain unit, condition, attribute) function results relates the attribute argument to the domain unit argument, based on the condition argument. The select_data is mostly used together with the select_with_attr_by_cond function. ",
    "url": "/docs/select_data.html#definition",
    
    "relUrl": "/docs/select_data.html#definition"
  },"2728": {
    "doc": "select_data",
    "title": "applies to",
    "content": ". | unit domain unit with value-type uint32 | condition must be a boolean attribute or subexpression resulting in boolean values. | attribute: an attribute that must have matching value type and metric with the resulting attribute. | . ",
    "url": "/docs/select_data.html#applies-to",
    
    "relUrl": "/docs/select_data.html#applies-to"
  },"2729": {
    "doc": "select_data",
    "title": "since version",
    "content": "7.305 . ",
    "url": "/docs/select_data.html#since-version",
    
    "relUrl": "/docs/select_data.html#since-version"
  },"2730": {
    "doc": "select_data",
    "title": "example",
    "content": "unit&lt;uint32&gt; ZHCities := select_with_attr_by_cond(City, City/RegionCode == 200) {    attribute&lt;string&gt; name :=  select_data(., City/RegionCode == 200, CityLabels/Name); } . | City/RegionCode | CityLabels/Name | . | 100 | Amsterdam | . | 200 | Rotterdam | . | 300 | Utrecht | . | 200 | Den Haag | . | 400 | Eindhoven | . | null | Haarlem | . | 400 | Tilburg | . domain City, nr of rows = 7 . | ZHCities/name | . | Rotterdam | . | Den Haag | . domain ZHCities, nr of rows = 2 . ",
    "url": "/docs/select_data.html#example",
    
    "relUrl": "/docs/select_data.html#example"
  },"2731": {
    "doc": "select_data",
    "title": "see also",
    "content": ". | select_with_attr_by_cond | . ",
    "url": "/docs/select_data.html#see-also",
    
    "relUrl": "/docs/select_data.html#see-also"
  },"2732": {
    "doc": "select_data",
    "title": "select_data",
    "content": "selection-functions select_data . ",
    "url": "/docs/select_data.html",
    
    "relUrl": "/docs/select_data.html"
  },"2733": {
    "doc": "select_many",
    "title": "select_many",
    "content": "relational-functions select_many . The select_many is a depreciated name for the select_with_attr_by_cond function. It was used in the GeoDMS versions between 8.6.0 and 8.7.2. We advice to rename this function to it’s new name: select_with_attr_by_cond in your configurations. ",
    "url": "/docs/select_many.html",
    
    "relUrl": "/docs/select_many.html"
  },"2734": {
    "doc": "select_orgrel",
    "title": "select_orgrel",
    "content": "relational-functions select_orgrel . The select_orgrel is a depreciated name for the select_with_org_rel function. It was used in the GeoDMS versions between 8.044 and 8.7.2. We advice to rename this function to it’s new name: select_with_org_rel in your configurations. ",
    "url": "/docs/select_orgrel.html",
    
    "relUrl": "/docs/select_orgrel.html"
  },"2735": {
    "doc": "select_unit",
    "title": "select_unit",
    "content": "relational-functions select_unit . The select_unit is a depreciated name for the select function. It was used in the GeoDMS versions between 7.305 and 8.7.2. We advice to rename this function to it’s new name: select in your configurations. ",
    "url": "/docs/select_unit.html",
    
    "relUrl": "/docs/select_unit.html"
  },"2736": {
    "doc": "select_with_attr_by_cond",
    "title": "syntax",
    "content": ". | select_with_attr_by_cond(src_tree_item, condition) | select_uint8_with_attr_by_cond(src_tree_item, condition) | select_uint16_with_attr_by_cond(src_tree_item, condition) | select_uint32_with_attr_by_cond(src_tree_item, condition) | select_uint64_with_attr_by_cond(src_tree_item, condition) ",
    "url": "/docs/select_with_attr_by_cond.html#syntax",
    
    "relUrl": "/docs/select_with_attr_by_cond.html#syntax"
  },"2737": {
    "doc": "select_with_attr_by_cond",
    "title": "definition",
    "content": "| . select_with_attr_by_cond(src_tree_item, condition) results in a new domain-unit for which the values of the condition argument are true. Additionally, all subitem from the src_tree_item argument with the same domain unit as the condition become subitems of the resulting select_with_attr_by_cond unit and with this resulting unit as new domain unit. The resulting value-type of the domain unit is derived from the domain unit of the condition argument: . | uint32 for conditions with uint32, boolean, spoint or wpoint value-type | uint8 for conditions with uint8 value type | uint16 for conditions with uint16 value type | uint64 for conditions with uint64, ipoint or upoint value type | . The explicit select_uint8_with_attr_by_cond, select_uint16_with_attr_by_cond, select_uint32_with_attr_by_cond and select_uint64_with_attr_by_cond functions can be used in the same manner as the select_with_attr_by_cond function, to create a new domain unit with the explicit value type. Between versions 8.6.0 and 8.7.2 the name select_many was used for the select_with_attr_by_cond function. ",
    "url": "/docs/select_with_attr_by_cond.html#definition",
    
    "relUrl": "/docs/select_with_attr_by_cond.html#definition"
  },"2738": {
    "doc": "select_with_attr_by_cond",
    "title": "description",
    "content": "The select_with_attr_by_cond function does not generate a relation to the original domain, as the select_with_attr_by_org_rel function does. The select_with_attr_by_cond function is efficient for larger selections, think about selection with 3% or more of the entries of the original domain. For smaller selections, the select_with_attr_by_org_rel function is advised. The select_data function can be used in to relate attribute to the new domain unit. See this selection-operator-comparison for when to choose which selection operator is feasable. If you want to also collect attributes from a container with the same domain unit of the condition. You can use the collect_attr_by_org_rel. ",
    "url": "/docs/select_with_attr_by_cond.html#description",
    
    "relUrl": "/docs/select_with_attr_by_cond.html#description"
  },"2739": {
    "doc": "select_with_attr_by_cond",
    "title": "applies to",
    "content": ". | condition must be a boolean attribute or subexpression resulting in boolean values. | . ",
    "url": "/docs/select_with_attr_by_cond.html#applies-to",
    
    "relUrl": "/docs/select_with_attr_by_cond.html#applies-to"
  },"2740": {
    "doc": "select_with_attr_by_cond",
    "title": "since version",
    "content": "8.8.0 . ",
    "url": "/docs/select_with_attr_by_cond.html#since-version",
    
    "relUrl": "/docs/select_with_attr_by_cond.html#since-version"
  },"2741": {
    "doc": "select_with_attr_by_cond",
    "title": "example",
    "content": "unit&lt;uint32&gt; City: StorageName = \"city.csv\", StorageType = \"gdal.vect\", StoragReadOnly = \"True\" { attribute&lt;string&gt; name attribute&lt;uint32&gt; RegionCode; } unit&lt;uint32&gt; ZHCities := select_with_attr_by_cond(City, City/RegionCode == 200) . | City/RegionCode | City/Name | . | 100 | Amsterdam | . | 200 | Rotterdam | . | 300 | Utrecht | . | 200 | Den Haag | . | 400 | Eindhoven | . | null | Haarlem | . | 400 | Tilburg | . domain City, nr of rows = 7 . | ZHCities/name | ZHCities/regionCode | . | Rotterdam | 200 | . | Den Haag | 200 | . domain ZHCities, nr of rows = 2 . The subitems: name, regionCode are generated by the configured select_with_attr_by_cond function. ",
    "url": "/docs/select_with_attr_by_cond.html#example",
    
    "relUrl": "/docs/select_with_attr_by_cond.html#example"
  },"2742": {
    "doc": "select_with_attr_by_cond",
    "title": "see also",
    "content": ". | select_with_attr_by_org_rel | collect_attr_by_org_rel | . ",
    "url": "/docs/select_with_attr_by_cond.html#see-also",
    
    "relUrl": "/docs/select_with_attr_by_cond.html#see-also"
  },"2743": {
    "doc": "select_with_attr_by_cond",
    "title": "select_with_attr_by_cond",
    "content": "selection-functions select_with_attr_by_cond . ",
    "url": "/docs/select_with_attr_by_cond.html",
    
    "relUrl": "/docs/select_with_attr_by_cond.html"
  },"2744": {
    "doc": "select_with_attr_by_org_rel",
    "title": "syntax",
    "content": ". | select_with_attr_by_org_rel(src_tree_item, condition) | select_uint8_with_attr_by_org_rel(src_tree_item, condition) | select_uint16_with_attr_by_org_rel(src_tree_item, condition) | select_uint32_with_attr_by_org_rel(src_tree_item, condition) | select_uint64_with_attr_by_org_rel(src_tree_item, condition) | . ",
    "url": "/docs/select_with_attr_by_org_rel.html#syntax",
    
    "relUrl": "/docs/select_with_attr_by_org_rel.html#syntax"
  },"2745": {
    "doc": "select_with_attr_by_org_rel",
    "title": "definition",
    "content": "select_with_attr_by_org_rel(src_tree_item, condition) results in a new domain-unit with a relation to the entries of the domain unit of the condition argument, for which the values of the condition argument are true. Additionally, all subitem from the src_tree_item argument with the same domain unit as the condition become subitems of the resulting select_with_attr_by_org_rel unit and with this resulting unit as new domain unit. The only exception is if the src_tree_item contains an org_rel subitem, this subitem is not added as it would be ambiguous with the new resulting org_rel attribute. The resulting value-type of the domain unit is derived from the domain unit of the condition argument: . | uint32 for conditions with uint32, boolean, spoint or wpoint value-type | uint8 for conditions with uint8 value type | uint16 for conditions with uint16 value type | uint64 for conditions with uint64, ipoint or upoint value type | . The explicit select_uint8_with_attr_by_org_rel, select_uint16_with_attr_by_org_rel, select_uint32_with_attr_by_org_rel and select_uint64_with_attr_by_org_rel functions can be used in the same manner as the select_with_attr_by_org_rel function, to create a new domain unit with the explicit value type. Between versions 8.6.0 and 8.7.2 the name select_afew was used for the select_with_attr_by_org_rel function. ",
    "url": "/docs/select_with_attr_by_org_rel.html#definition",
    
    "relUrl": "/docs/select_with_attr_by_org_rel.html#definition"
  },"2746": {
    "doc": "select_with_attr_by_org_rel",
    "title": "description",
    "content": "The select_with_attr_by_org_rel function generates a subitem, named org_rel. This data-item contains the relation towards the domain unit of the condition argument. The select_with_attr_by_org_rel function is efficient for small selections, think about selection with less than 3% of the entries of the original domain. For larger selections, the select_with_attr_by_cond function is advised. The org_rel data-item can be used in a lookup function to relate attribute to the new domain unit. See this selection-operator-comparison for when to choose which selection operator is feasable. ",
    "url": "/docs/select_with_attr_by_org_rel.html#description",
    
    "relUrl": "/docs/select_with_attr_by_org_rel.html#description"
  },"2747": {
    "doc": "select_with_attr_by_org_rel",
    "title": "applies to",
    "content": ". | condition must be a boolean attribute or subexpression resulting in boolean values. | . ",
    "url": "/docs/select_with_attr_by_org_rel.html#applies-to",
    
    "relUrl": "/docs/select_with_attr_by_org_rel.html#applies-to"
  },"2748": {
    "doc": "select_with_attr_by_org_rel",
    "title": "since version",
    "content": "8.8.0 . ",
    "url": "/docs/select_with_attr_by_org_rel.html#since-version",
    
    "relUrl": "/docs/select_with_attr_by_org_rel.html#since-version"
  },"2749": {
    "doc": "select_with_attr_by_org_rel",
    "title": "example",
    "content": "unit&lt;uint32&gt; City: StorageName = \"city.csv\", StorageType = \"gdal.vect\", StoragReadOnly = \"True\" { attribute&lt;string&gt; name attribute&lt;uint32&gt; RegionCode; } unit&lt;uint32&gt; ZHCities := select_with_attr_by_org_rel(City, City/RegionCode == 200) . | City/RegionCode | City/Name | . | 100 | Amsterdam | . | 200 | Rotterdam | . | 300 | Utrecht | . | 200 | Den Haag | . | 400 | Eindhoven | . | null | Haarlem | . | 400 | Tilburg | . domain City, nr of rows = 7 . | ZHCities/name | ZHCities/regionCode | ZHCities/org_rel | . | Rotterdam | 200 | 1 | . | Den Haag | 200 | 3 | . domain ZHCities, nr of rows = 2 . The subitems: name, regionCode and org_rel are generated by the configured select_with_attr_by_org_rel function. ",
    "url": "/docs/select_with_attr_by_org_rel.html#example",
    
    "relUrl": "/docs/select_with_attr_by_org_rel.html#example"
  },"2750": {
    "doc": "select_with_attr_by_org_rel",
    "title": "see also",
    "content": ". | select_with_attr_by_cond | collect_attr_by_org_rel | . ",
    "url": "/docs/select_with_attr_by_org_rel.html#see-also",
    
    "relUrl": "/docs/select_with_attr_by_org_rel.html#see-also"
  },"2751": {
    "doc": "select_with_attr_by_org_rel",
    "title": "select_with_attr_by_org_rel",
    "content": "selection-functions select_with_attr_by_org_rel . ",
    "url": "/docs/select_with_attr_by_org_rel.html",
    
    "relUrl": "/docs/select_with_attr_by_org_rel.html"
  },"2752": {
    "doc": "select_with_org_rel",
    "title": "syntax",
    "content": ". | select_with_org_rel(condition) | select_uint8_with_org_rel(condition) | select_uint16_with_org_rel(condition) | select_uint32_with_org_rel(condition) | select_uint64_with_org_rel(condition) | . ",
    "url": "/docs/select_with_org_rel.html#syntax",
    
    "relUrl": "/docs/select_with_org_rel.html#syntax"
  },"2753": {
    "doc": "select_with_org_rel",
    "title": "definition",
    "content": "select_with_org_rel(condition) results in a new domain-unit with a relation to the entries of the domain unit of the condition, for which the values of the condition argument are true. The resulting value-type of the domain unit is derived from the domain unit of the condition argument: . | uint32 for conditions with uint32, boolean, spoint or wpoint value type | uint8 for conditions with uint8 value type | uint16 for conditions with uint16 value type | uint64 for conditions with uint64, ipoint or upoint value type | . Between versions 8.44 and 8.7.2 the name select_orgrel was used for the select_with_org_rel function. The explicit select_uint8_with_org_rel, select_uint16_with_org_rel, select_uint32_with_org_rel and select_uint64_with_org_rel functions can be used in the same manner as the select_with_org_rel function, to create a new domain unit with the explicit value type. ",
    "url": "/docs/select_with_org_rel.html#definition",
    
    "relUrl": "/docs/select_with_org_rel.html#definition"
  },"2754": {
    "doc": "select_with_org_rel",
    "title": "description",
    "content": "The select_with_org_rel function generates a subitem, named org_rel. This data-item contains the relation towards the domain unit of the condition argument. The select_with_org_rel and subset functions are similar, the only difference is that the subitem generated by the subset operator is called: Nr_OrgEntity, a name that does not meet with our naming-conventions. The org_rel data item can be used in a lookup function to relate attribute to the new domain unit, see the example. See this selection-operator-comparison for when to choose which selection operator is feasable. ",
    "url": "/docs/select_with_org_rel.html#description",
    
    "relUrl": "/docs/select_with_org_rel.html#description"
  },"2755": {
    "doc": "select_with_org_rel",
    "title": "applies to",
    "content": ". | condition must be a boolean attribute or subexpression resulting in boolean values. | . ",
    "url": "/docs/select_with_org_rel.html#applies-to",
    
    "relUrl": "/docs/select_with_org_rel.html#applies-to"
  },"2756": {
    "doc": "select_with_org_rel",
    "title": "since version",
    "content": "8.8.0 . ",
    "url": "/docs/select_with_org_rel.html#since-version",
    
    "relUrl": "/docs/select_with_org_rel.html#since-version"
  },"2757": {
    "doc": "select_with_org_rel",
    "title": "example",
    "content": "unit&lt;uint32&gt; ZHCities := select_with_org_rel(City/RegionCode == 200) { attribute&lt;string&gt; name := org_rel -&gt; Name; } . | City/RegionCode | City/Name | . | 100 | Amsterdam | . | 200 | Rotterdam | . | 300 | Utrecht | . | 200 | Den Haag | . | 400 | Eindhoven | . | null | Haarlem | . | 400 | Tilburg | . domain City, nr of rows = 7 . | ZHCities/org_rel | ZHCities/name | . | 1 | Rotterdam | . | 3 | Den Haag | . domain ZHCities, nr of rows = 2 . ",
    "url": "/docs/select_with_org_rel.html#example",
    
    "relUrl": "/docs/select_with_org_rel.html#example"
  },"2758": {
    "doc": "select_with_org_rel",
    "title": "see also",
    "content": ". | select | select_data | . ",
    "url": "/docs/select_with_org_rel.html#see-also",
    
    "relUrl": "/docs/select_with_org_rel.html#see-also"
  },"2759": {
    "doc": "select_with_org_rel",
    "title": "select_with_org_rel",
    "content": "selection-functions select_with_org_rel . ",
    "url": "/docs/select_with_org_rel.html",
    
    "relUrl": "/docs/select_with_org_rel.html"
  },"2760": {
    "doc": "select_with_org_rel_with_attr_by_cond",
    "title": "select_with_org_rel_with_attr_by_cond",
    "content": "Works as select_with_attr_by_cond but also produces an org_rel attribute that relates the produced subset to the domain of the provided condition attribute. ",
    "url": "/docs/select_with_org_rel_with_attr_by_cond.html",
    
    "relUrl": "/docs/select_with_org_rel_with_attr_by_cond.html"
  },"2761": {
    "doc": "selection-functions",
    "title": "selection-functions",
    "content": "Selection operators-and-functions are used to create new domain-unit with selection of elements from other domain units. | select_with_org_rel or subset - configures a new unit, based on a condition | select_uint8_16_32_64_with_org_rel - versions of the select_with_org_rel function, resulting in a unit with the explicit value type | select and select_data - similar to select_with_org_rel, but faster and less memory intensive in case of dense subsets | select_uint8_16_32_64 - versions of the select function, resulting in a unit with the explicit value type | select_with_attr_by_org_rel - similar to select_with_org_rel/subset, resulting in a unit and a set of attributes | select_uint8_16_32_64_with_attr_by_org_rel - versions of the select_with_attr_by_org_rel function, resulting in a unit with the explicit value type | select_with_attr_by_cond - similar to select_with_org_rel, resulting in a unit and a set of attributes | select_uint8_16_32_64_with_attr_by_cond - versions of the select_with_attr_by_cond function, resulting in a unit with the explicit value type | select_with_org_rel_with_attr_by_cond - similar to select_with_attr_by_cond: condition is used for all collections, but an org_rel is also produced | select_uint8_16_32_64_with_attr_by_cond - versions of the select_with_attr_by_cond function, resulting in a unit with the explicit value type | . ",
    "url": "/docs/selection-functions.html",
    
    "relUrl": "/docs/selection-functions.html"
  },"2762": {
    "doc": "selection-operator-comparison",
    "title": "selection-operator-comparison",
    "content": "|   | subset | select_with_org_rel | select | select_with_attr_by_org_rel | select_with_attr_by_cond | . | active in current GeoDMS version | | | | | | . | recommended for use in current GeoDMS version | | | | | | . | automatically generated subitems | | | | | | . | optimal to use for small percentage of set | | | | | | . | optimal to use for large percentage of set | | | | | | . | generates org_rel/nr_orgentity | | | | | | . ",
    "url": "/docs/selection-operator-comparison.html",
    
    "relUrl": "/docs/selection-operator-comparison.html"
  },"2763": {
    "doc": "sequence-functions",
    "title": "sequence-functions",
    "content": "Sequence operators-and-functions are used to process data-item with one-dimensional sequences . | uint8seq | uint16seq | uint32seq | uint64seq | . | int8seq | int16seq | int32seq | int64seq | . | float32seq | float64seq | . See also: . | sequence2points - all vertices of each arc/polygon as separate points | points2sequence - constructs arc/polygon from vertices | . ",
    "url": "/docs/sequence-functions.html",
    
    "relUrl": "/docs/sequence-functions.html"
  },"2764": {
    "doc": "sequence2points",
    "title": "syntax",
    "content": ". | sequence2points(arc_polygon_data_item) | . ",
    "url": "/docs/sequence2points.html#syntax",
    
    "relUrl": "/docs/sequence2points.html#syntax"
  },"2765": {
    "doc": "sequence2points",
    "title": "definition",
    "content": "sequence2points(arc_polygon_data_item) results in a new domain-unit with all points from the arcs/polygons of the arc_polygon_data_item . The function generates three subitem: . | Point: a data-item with the points of all arcs/polygons of the arc_polygon_data_item | SequenceNr: a relation towards the domain unit of the arc_polygon_data_item | Ordinal: a uint32 data item with the order of each point in the arc_polygon_data_item | . ",
    "url": "/docs/sequence2points.html#definition",
    
    "relUrl": "/docs/sequence2points.html#definition"
  },"2766": {
    "doc": "sequence2points",
    "title": "applies to",
    "content": "data item arc_polygon_data_item with fpoint or dpoint value-type and composition type arc or polygon. ",
    "url": "/docs/sequence2points.html#applies-to",
    
    "relUrl": "/docs/sequence2points.html#applies-to"
  },"2767": {
    "doc": "sequence2points",
    "title": "example",
    "content": "unit&lt;uint32&gt; RoadPointSet := sequence2points(road/geometry); . | road/geometry | . | {2 {399246, 112631}{398599, 111866}} | . | {3 {398599, 111866}{399495, 111924} {401801,111524}} | . | {2 {401529, 114921}{398584, 114823}} | . domain Road, nr of rows = 3 . | point | SequenceNr | Ordinal | . | {399246, 112631} | 0 | 0 | . | {398599, 111866} | 0 | 1 | . | {398599, 111866} | 1 | 0 | . | {399495, 111924} | 1 | 1 | . | {401801, 111524} | 1 | 2 | . | {401529, 114921} | 2 | 0 | . | {398584, 114823} | 2 | 1 | . domain RoadPointSet, nr of rows = 7 . ",
    "url": "/docs/sequence2points.html#example",
    
    "relUrl": "/docs/sequence2points.html#example"
  },"2768": {
    "doc": "sequence2points",
    "title": "see also",
    "content": ". | points2sequence | arc2segm | . ",
    "url": "/docs/sequence2points.html#see-also",
    
    "relUrl": "/docs/sequence2points.html#see-also"
  },"2769": {
    "doc": "sequence2points",
    "title": "sequence2points",
    "content": "geometric-functions sequence2points . ",
    "url": "/docs/sequence2points.html",
    
    "relUrl": "/docs/sequence2points.html"
  },"2770": {
    "doc": "service_area",
    "title": "syntax",
    "content": ". | service_area(F1, F2, dijkstra/traceback) | . ",
    "url": "/docs/service_area.html#syntax",
    
    "relUrl": "/docs/service_area.html#syntax"
  },"2771": {
    "doc": "service_area",
    "title": "definition",
    "content": "service_area(F1, F2, dijkstra/traceback) calculates service areas for nodes in the network. A service area is defined as the relation to the nearest destination node for each node in the node set. The results are based on the results of impedance-obsolete-dijkstra calculations. The service_area function requests three argument: . | F1: relation to the first node of a linkset; | F2: relation to the last node of a linkset; | dijkstra/traceback: the traceback item, a generated subitem by the dijkstra function. | . ",
    "url": "/docs/service_area.html#definition",
    
    "relUrl": "/docs/service_area.html#definition"
  },"2772": {
    "doc": "service_area",
    "title": "description",
    "content": "The function results in a relation to the nodes in the nodeset. Use the lookup function to relate these numbers to the origin locations (see example). ",
    "url": "/docs/service_area.html#description",
    
    "relUrl": "/docs/service_area.html#description"
  },"2773": {
    "doc": "service_area",
    "title": "applies to",
    "content": "attribute F1, F2 and dijkstra/traceback with uint32 value-type . ",
    "url": "/docs/service_area.html#applies-to",
    
    "relUrl": "/docs/service_area.html#applies-to"
  },"2774": {
    "doc": "service_area",
    "title": "conditions",
    "content": "The domain-unit of attributes F1 and F2 must match. ",
    "url": "/docs/service_area.html#conditions",
    
    "relUrl": "/docs/service_area.html#conditions"
  },"2775": {
    "doc": "service_area",
    "title": "example",
    "content": "attribute&lt;meter&gt;       dist           (nodeset) := dijkstra(dist, F1, F2, nr_DestNode); attribute&lt;destination&gt; servicearea_ns (nodeset) :=     rlookup(       service_area(           F1           ,F2          ,dist/TraceBack        )        , nr_DestNode    );  attribute&lt;destination&gt; servicearea (origin) := servicearea_ns[nr_OrgNode]; . | F1 | F2 | . | 8 | 7 | . | 1 | 4 | . | 16 | 15 | . | 2 | 3 | . | 5 | 4 | . | 6 | 7 | . | 9 | 10 | . | 12 | 11 | . | 14 | 15 | . | 18 | 20 | . | 19 | 17 | . | 3 | 0 | . | 4 | 11 | . | 7 | 1 | . | 10 | 3 | . | 11 | 13 | . | 13 | 17 | . | 15 | 10 | . | 20 | 21 | . | 17 | 20 | . domain linkset, nr of rows = 19 . | nr_DestNode | . | 14 | . | 6 | . | 2 | . | 19 | . domain destination, nr of rows = 5 . | servicearea | . | 0 | . | 1 | . | 2 | . | 3 | . | 1 | . domain origin, nr of rows = 5 . ",
    "url": "/docs/service_area.html#example",
    
    "relUrl": "/docs/service_area.html#example"
  },"2776": {
    "doc": "service_area",
    "title": "service_area",
    "content": "network-functions service_area . ",
    "url": "/docs/service_area.html",
    
    "relUrl": "/docs/service_area.html"
  },"2777": {
    "doc": "session-specific",
    "title": "session-specific versus Persistent",
    "content": "Session-specific means calculation results are available for re-use during a session, but are deleted when the application is closed. These results need to be recalculated when a new session is started. Session-specific is the opposite of persistent. In the GeoDMS persistent means results are also available after closing and reopening an application. ",
    "url": "/docs/session-specific.html#session-specific-versus-persistent",
    
    "relUrl": "/docs/session-specific.html#session-specific-versus-persistent"
  },"2778": {
    "doc": "session-specific",
    "title": "session-specific functions",
    "content": "Some functions result in calculation results are related to the GeoDMS session with which they are calculated. Think for example of the GeoDMSVersion function, a new session with another version of the GeoDMS would result in different results. These functions are called session-specific. Direct or any indirect results of a these functions are always session-specific. ",
    "url": "/docs/session-specific.html#session-specific-functions",
    
    "relUrl": "/docs/session-specific.html#session-specific-functions"
  },"2779": {
    "doc": "session-specific",
    "title": "store results persistently",
    "content": ". | session-specific functions | . If in a calculation chain a session-specific function is used, the whole tree needs to be recalculated when a new session is started. To avoid this, use an indirect expression with in iif function, see the example: . parameter` version := = (GeoDmsVersion() &lt; 7.120) ? 'oud' : 'nieuw';` . In this example, the GeoDMSVersion function is evaluated when updating the meta information. In the derived expression the session-specific GeoDMSVersion function will not longer occur. The calculation results of the item self and all the derived items can now be stored persistently in the CalcCache. | composite functions | . The direct subitems generated by a composite function, and direct references to these items, are always session-specific. The following example shows a way to still store these results in the CalcCache . attribute ` DistTo (TestGrid) := GridDist(resistance/grid,Test/PointSet/gridnr, const(0, Test/PointSet, impedance));` . attribute` session_specific (TestGrid)d:= DistTo;` `attribute`` persistent       (TestGrid)i:= DistTo + float32(0);` . In this example the [[/attribute]*session_specific*_will_not_be_stored_persistently,_as_the[[expression|attribute] session_specific will not be stored persistently, as the expression is a direct reference to the DistTo attribute, a subitem generated by the griddist function. The expression of the persistent item adds a value 0 to the session_specific item, resulting in the same calculation results, but in an item that can be stored persistently (of it meets the conditions for storing results in the CalcCache). ",
    "url": "/docs/session-specific.html#store-results-persistently",
    
    "relUrl": "/docs/session-specific.html#store-results-persistently"
  },"2780": {
    "doc": "session-specific",
    "title": "session-specific",
    "content": "CalcCache Session Specific . ",
    "url": "/docs/session-specific.html",
    
    "relUrl": "/docs/session-specific.html"
  },"2781": {
    "doc": "setup-geodms-language-file-in-notepad",
    "title": "setup-geodms-language-file-in-notepad",
    "content": "GeoDMS language file . The GeoDMS language file is called: GeoDMS_npp_def.xml. It can be found in the same folder where your GeoDMS version is installed (default: %ProgramFiles%/ObjectVision/GeoDmsversion). import GeoDMS language file . 1) Open Notepad++ . 2) Go to Language &gt; User defined Language &gt; Define your language. 3) Click import and select the .xml-file that you just downloaded, “Import successful.”. 4) Restart Notepad++, this makes sure the language file is accessible. 5) Renavigate to the Language dropdown menu and select GeoDMS at the bottom. If you now open a .dms file you should see the syntax highlighted appropriately. Note: for non-white background Notepad++ themes the C++ language definition is operable. ",
    "url": "/docs/setup-geodms-language-file-in-notepad.html",
    
    "relUrl": "/docs/setup-geodms-language-file-in-notepad.html"
  },"2782": {
    "doc": "simplify-geometry",
    "title": "example",
    "content": "container Simplified := Simplify(iter_domain, 50);  // domain and number of iterations    template Simplify {    // begin case parameters    unit&lt;uint32&gt; iter_domain;    parameter&lt;uint32&gt; nrIterations;    // end case parameters        unit&lt;uint32&gt; iter := range(uint32, 0, nrIterations)    {       attribute&lt;string&gt; name     := 'I' + string(id(.));       attribute&lt;string&gt; PrevName := MakeDefined(name[id(.)-1], 'StartingState');    }    container StartingState     {       unit&lt;uint32&gt; NextValue := sequence2points(iter_domain/geometry_rd);    }    container Iters     := for_each_ne(Iter/name, 'IterT('+Iter/PrevName+', iter_domain)');    container LastIterI := =last('Iters/'+Iter/name);               template IterT    {        &lt;I&gt;//  begin case parameters&lt;/I&gt;        container PrevIterator;        unit&lt;uint32&gt; domain;        &lt;I&gt;//  end case parameters&lt;/I&gt;        unit&lt;uint32&gt;  PrevValue   := PrevIterator/NextValue;        container     ConvexHullT := MakeConvexHullT(domain, PrevValue);        unit&lt;uint32&gt;  NextValue   := ConvexHullT/sequence/Convex_hull_points;   }   container MakeFinal     {       unit &lt;uint32&gt; domain_with_endpoints := union_unit(iter_domain, LastIter/NextValue)       {          attribute&lt;geometries/rdc&gt; point :=  union_data(., LastIter/NextValue/point, first(LastIter/NextValue/point, LastIter/NextValue/SequenceNr));          attribute&lt;uint32&gt;         SequenceNr := union_data(., LastIter/NextValue/SequenceNr, ID(Iteratie_domain));       }       attribute&lt;geometries/rdc&gt; convex_hull (iter_domain, poly) :=  points2sequence(domain_with_endpoints /point, domain_with_endpoints /SequenceNr);     }       template MakeConvexHullT    {        &lt;I&gt;//  begin case parameters&lt;/I&gt;         unit&lt;uint32&gt; domain;         unit&lt;uint32&gt; seq;        &lt;I&gt;//  end case parameters&lt;/I&gt;         unit&lt;uint32&gt; sequence := seq         {            attribute&lt;geometries/rdc&gt;  point              := seq/point;            attribute&lt;uint32&gt;          SequenceNr         := seq/SequenceNr;            attribute&lt;uint32&gt;          min_index (domain) := min_index(id(.), SequenceNr);            attribute&lt;uint32&gt;          max_index (domain) := max_index(id(.), SequenceNr);            attribute&lt;bool&gt;            IsFirst  := id(.) == min_index[SequenceNr];            attribute&lt;bool&gt;            IsLast   := id(.) == max_index[SequenceNr];            attribute&lt;uint32&gt;          prev_id  := IsFirst ? rjoin(SequenceNr, id(domain), max_index) : ID(.)-1;            attribute&lt;uint32&gt;          next_id  := Islast  ? rjoin(SequenceNr, id(domain), min_index) : ID(.)+1;            attribute&lt;geometries/rdc&gt;  A        := point[prev_id];            attribute&lt;geometries/rdc&gt;  B        := point;            attribute&lt;geometries/rdc&gt;  C        := point[next_id];            attribute&lt;geometries/rdc&gt;  p        := B - A;            attribute&lt;geometries/rdc&gt;  q        := C - B;            attribute&lt;float32&gt;         Px       := pointcol(P);            attribute&lt;float32&gt;         Py       := pointrow(P);            attribute&lt;float32&gt;         Qx       := pointcol(Q);            attribute&lt;float32&gt;         Qy       := pointrow(Q);                        attribute&lt;float32&gt;         det      := Px*Qy - Py*Qx;                        unit&lt;uint32&gt; Convex_hull_points :=  select_with_org_rel(det &lt;= 0f &amp;&amp; (point != rjoin(prev_id, id(.), point)))            {               attribute&lt;geometries/rdc&gt; point       := ../point[org_rel];               attribute&lt;uint32&gt;         SequenceNr  := ../SequenceNr[org_rel];            }       }    } } . ",
    "url": "/docs/simplify-geometry.html#example",
    
    "relUrl": "/docs/simplify-geometry.html#example"
  },"2783": {
    "doc": "simplify-geometry",
    "title": "see also:",
    "content": ". | bg_simplify_polygon | . ",
    "url": "/docs/simplify-geometry.html#see-also",
    
    "relUrl": "/docs/simplify-geometry.html#see-also"
  },"2784": {
    "doc": "simplify-geometry",
    "title": "simplify-geometry",
    "content": "configuration-examples Simplify geometry . The script presents an example how you can simplify the geometry of a polygon. It will delete convex points from the geometry. Compare it with putting a rubber band around the shape, see also convex hull . To what extent the simplifying is executed depends on the amount of iterations implemented. Tip: use the sequence2points function and take the maximum value for ordinal, you’ll get the maximum amount of points for a single polygon. This is the theoretical maximum amount of iterations necessary. Since GeoDMS version 7.408 you can use the bg_simplify_polygon function to simplify a polygon and since 8.031 the bg_simplify_linestring function to simplify an arc. We advice to use these functions, the following example can still be used but is not advised. ",
    "url": "/docs/simplify-geometry.html",
    
    "relUrl": "/docs/simplify-geometry.html"
  },"2785": {
    "doc": "sin",
    "title": "syntax",
    "content": ". | sin(angle) | . ",
    "url": "/docs/sin.html#syntax",
    
    "relUrl": "/docs/sin.html#syntax"
  },"2786": {
    "doc": "sin",
    "title": "definition",
    "content": "sin(angle) results in the sine of data-item angle. ",
    "url": "/docs/sin.html#definition",
    
    "relUrl": "/docs/sin.html#definition"
  },"2787": {
    "doc": "sin",
    "title": "description",
    "content": "data item angle need to be expressed in the unit radian (radiaal), the SI unit for angles. ",
    "url": "/docs/sin.html#description",
    
    "relUrl": "/docs/sin.html#description"
  },"2788": {
    "doc": "sin",
    "title": "applies to",
    "content": "data item angle with float32 or float64 value-type . ",
    "url": "/docs/sin.html#applies-to",
    
    "relUrl": "/docs/sin.html#applies-to"
  },"2789": {
    "doc": "sin",
    "title": "since version",
    "content": "5.18 . ",
    "url": "/docs/sin.html#since-version",
    
    "relUrl": "/docs/sin.html#since-version"
  },"2790": {
    "doc": "sin",
    "title": "example",
    "content": "attribute&lt;float64&gt; Angle_rad (ADomain) := Angle * pi() / 180.0; attribute&lt;float64&gt; sinAngle_rad (ADomain) := sin(Angle_rad); . | Angle(°) | Angle_rad(rad) | sinAngle_radA | . | 0 | 0 | 0 | . | 30 | 0.52 | 0.5 | . | 45 | 0.79 | 0.71 | . | 420 | 7.33 | 0.87 | . | null | null | null | . ADomain, nr of rows = 5 . ",
    "url": "/docs/sin.html#example",
    
    "relUrl": "/docs/sin.html#example"
  },"2791": {
    "doc": "sin",
    "title": "see also",
    "content": ". | cos | tan | . ",
    "url": "/docs/sin.html#see-also",
    
    "relUrl": "/docs/sin.html#see-also"
  },"2792": {
    "doc": "sin",
    "title": "sin",
    "content": "trigonometric-functions sin(e) . ",
    "url": "/docs/sin.html",
    
    "relUrl": "/docs/sin.html"
  },"2793": {
    "doc": "skinning",
    "title": "skinning",
    "content": "Some Elements of the GeoDmsGUI can easily be customized to provide a visual appearance for specific projects. Customizable GuiElements are: . | the SplashScreen, displayed during loading a project configuration, usually an image with an widht of 350 pixels and a hight of 200 | the AboutBox, accessible from the main menu Help-&gt;About, usually presenting the developers of the project, and version info. | the TitleCaption, the text shown in the tile bar of the main window. | the ProgramIcon, which is shown in the start-bar and on the desktop, usually a small image of Earth. | the ToolbarImage, a small image (say: 100 x 35 pixels) that will be shown in the Toolbar at the right. | . They can be defined in a Dynamic Link Library, usually %projdir%/bin/DmsProject.dll. The GeoDmsGui.exe opens the DLL before reading a configuration file in order to display the SplashScreen. The usual name and location of the DLL can be overridden by the DmsProjectDll key in the general section of the Config.ini . ",
    "url": "/docs/skinning.html",
    
    "relUrl": "/docs/skinning.html"
  },"2794": {
    "doc": "smooth-pycnophylactic-interpolation",
    "title": "notes",
    "content": "Since . \\[(\\textbf{D}z) := z_{i} − z_{i−1}\\] one can derive that \\(\\( ((D z)^T D z) = (z^T D^T D z) \\sum\\limits_{i1}^n(z_i - z_{i-1})^2\\sum\\limits_{i1}^n(z_i^2 + z_{i-1}^2 - 2 z_i z_{i-1}) z_0^2 + \\sum\\limits_{i1}^n(2 z_i^2 - 2 z_i z_{i-1}) - z_n^2 \\)\\) . and \\(\\frac{\\partial f(z)}{\\partial z_i} = (z^T D^T D)^T_i + (D^T D z)_i = (D^T D^{TT} z)_i + (D^T D z)_i = 2(D^T D z)_i\\) . this convex optimization problem can be reformulated as: \\(\\( \\frac{\\partial\\[ f(z) + \\sum\\limits_{r} \\lambda_{r} (\\sum\\limits_{i} z_i \\*q_i^r - Z_r)}\\]{\\partial z_i}\\) . ",
    "url": "/docs/smooth-pycnophylactic-interpolation.html#notes",
    
    "relUrl": "/docs/smooth-pycnophylactic-interpolation.html#notes"
  },"2795": {
    "doc": "smooth-pycnophylactic-interpolation",
    "title": "0",
    "content": "\\[\\sum\\limits_{i \\in \\{ x, y \\} } 4 z_i - 2 z_{i-1} - 2 z_{i+1} + \\sum\\limits_{r} \\lambda_{r} q_i^r ) \\),\\] subject to \\(\\forall r: \\sum\\limits_{i} z_i \\* q_i^r = Z_r\\) . from which follows that \\(\\( z_{x,y} = {1 \\over 4} (z_{x-1,y} +\\) \\(z_{x+1,y} + z_{x,y-1} + z_{x,y+1} ) - {1 \\over 8} \\sum\\limits_{r}\\) \\(\\lambda_{r} q_i^r \\)\\) . ",
    "url": "/docs/smooth-pycnophylactic-interpolation.html#0",
    
    "relUrl": "/docs/smooth-pycnophylactic-interpolation.html#0"
  },"2796": {
    "doc": "smooth-pycnophylactic-interpolation",
    "title": "Links",
    "content": "Tobblers work, 1979 . ",
    "url": "/docs/smooth-pycnophylactic-interpolation.html#links",
    
    "relUrl": "/docs/smooth-pycnophylactic-interpolation.html#links"
  },"2797": {
    "doc": "smooth-pycnophylactic-interpolation",
    "title": "smooth-pycnophylactic-interpolation",
    "content": "Smooth Pycnophylactic Interpolation is a disaggregation where zi have minimal quadratic slopes subject to the Pycnophylactic Principle. Mathematically: minimize f(z) := (Dxz)TDxz + (Dyz)TDyz subject to: $\\forall r: \\sum\\limits_{i} z_i * q_i^r = Z_r$, where Dx and Dy are the linear operations that result in the partial discrete difference in the x and y directions respectively. ",
    "url": "/docs/smooth-pycnophylactic-interpolation.html",
    
    "relUrl": "/docs/smooth-pycnophylactic-interpolation.html"
  },"2798": {
    "doc": "social-domain",
    "title": "introductie",
    "content": "Vanaf de jaren ‘90 zijn we, in samenwerking met de Stichting voor Toegepaste Gerontologie VU, betrokken bij de ontwikkeling van informatieproducten in het sociaal domein, op het brede vraagstuk van Wonen, Zorg en Welzijn. Eén van de eerste toepassingen was het programma RELEVANT (REsidential Location EValuation ANalysis Tool). Met deze tool werden geschikte woningen voor ouderen in kaart gebracht, rekening houdend met loopafstanden naar relevante voorzieningen. De functies van deze tool zijn inmiddels geïntegreerd in de GeoDMS omgeving en uitgebreid met functionaliteiten om Vraag en Aanbod in het bede domein van Wonen, Zorg en Welzijn in kaart te brengen en te analyseren. ",
    "url": "/docs/social-domain.html#introductie",
    
    "relUrl": "/docs/social-domain.html#introductie"
  },"2799": {
    "doc": "social-domain",
    "title": "vraagzijde",
    "content": "De vraag naar een geschikte woningen en/of een passend aanbod aan zorg en welzijn, hangt sterk samen met de aandoeningen/beperkingen die iemand ondervindt. Door een gedetailleerd ruimtelijk beeld te geven van verschillende doelgroepen (ouderen, personen met somatische en/of psychiatrische klachten), kan de vraag naar specifieke woonvormen en het gewenste zorg/welzijnsaanbod in de buurt inzichtelijk gemaakt worden. Voor het bepalen van de vraag maken we gebruik van: . demografische gegevens . left . Op basis van demografische data kan inzicht worden verkregen in de ruimtelijke verdeling van leeftijdsgroepen. Wij gebruiken hiervoor een methode om patronen van groepen te berekenen en te visualiseren. Omdat er niet alleen behoefte bestaat aan de huidige situatie, maar ook aan prognoses maken we deze ook als patronen beschikbaar. De bron voor de persoonsgegevens is vaak de geanonimiseerde BRP van gemeentes. Essentieel daarbij is dat er op een goede manier met de privacy van data wordt omgegaan, zie onze privacy verklaring. de WoonZorgWijzer . left|link=https://www.woonzorgwijzer.info . De WoonZorgwijzer is een instrument dat op een laag geografisch schaalniveau inzichtelijk maakt waar mensen met een bepaalde aandoening wonen en welke beperkingen zij mogelijk ervaren. Dit instrument hebben we ontwikkeld samen met Stichting Infact en Baasgeo. Het instrument is initieel ontwikkeld voor het Ministerie van Binnenlandse Zaken en de provincie Zuid-Holland. Inmiddels zijn er vele toepassingen in andere provincies, regio’s en gemeenten, zie WoonZorgwijzer, sectie toepassingen. Voor dit instrument maken we gebruik van onze methode om patronen van groepen te berekenen en te visualiseren. ",
    "url": "/docs/social-domain.html#vraagzijde",
    
    "relUrl": "/docs/social-domain.html#vraagzijde"
  },"2800": {
    "doc": "social-domain",
    "title": "aanbodzijde",
    "content": "Aan de aanbodzijde gaat het om het analyseren en in kaart brengen van het aanbod van geschikte woningen en een passend zorg en welzijnsaanbod. Denk daarbij aan vragen als: . | fysieke kenmerken: In hoeverre zijn de woningen geschikt voor wonen met mobiliteisbeperkingen, rollator en/of rolstoel? | bereikbaarheid voorzieningen: Zijn dagelijkse voorzieningen als supermarkt en openbaar vervoer, maar ook zorg en welzijnsvoorzieningen op loopafstand bereikbaar? | looproutes: In hoeverre is de openbare ruimte voldoende toegankelijke om de voorzieningen ook te kunnen bereiken? | . ",
    "url": "/docs/social-domain.html#aanbodzijde",
    
    "relUrl": "/docs/social-domain.html#aanbodzijde"
  },"2801": {
    "doc": "social-domain",
    "title": "confrontatie vraag en aanbod",
    "content": "De essentie of aanbod passend zit in de ruimtelijke confrontatie met de vraag. In een gebied waar veel personen mobiel zijn (of over een auto beschikken) zal de nabijheid van voorzieningen een andere rol spelen dan voor gebieden met personen met mobiliteitsproblemen. Kaartbeelden kunnen helpen om deze confrontatie helder te analyseren en te visualiseren. Vandaar dat in veel van de toepassingen die we maken in dit domein gebruik maken van kaartbeelden. ",
    "url": "/docs/social-domain.html#confrontatie-vraag-en-aanbod",
    
    "relUrl": "/docs/social-domain.html#confrontatie-vraag-en-aanbod"
  },"2802": {
    "doc": "social-domain",
    "title": "samenwerking",
    "content": "In het sociaal domein zijn veel partijen betrokken, denk aan gemeentes, woningbouwcorporaties, zorg &amp; welzijnsaanbieders en cliënten organisaties. Alleen bij een goede samenwerking tussen deze verschillen partijen kan een geschikt aanbod voor de cliënten gerealiseerd worden. Deze samenwerking vraagt ons inziens om een vertrouwen tussen partners en het delen van informatie kan daarbij een belangrijke spelen. Daarom streven wij ernaar om de informatie producten die we beschikbaar stellen zo open mogelijk beschikbaar te stellen (open websites). De vraag gerichte informatie, die gebaseerd is op persoonsgegevens, zijn daarbij altijd zo bewerkt dat ze niet meer naar personen herleidbaar zijn en dat de persoonsgegevens vertaald zijn naar gebiedsgegevens. Wij werken samen met meerdere partners samen in het initiatief: anders kijken/beter benutten van geonovum. ",
    "url": "/docs/social-domain.html#samenwerking",
    
    "relUrl": "/docs/social-domain.html#samenwerking"
  },"2803": {
    "doc": "social-domain",
    "title": "toepassingen",
    "content": "De toepassingen in het sociaal domein maken we momenteel vooral beschikbaar via open websites met vooral kaartbeelden. Zie bijvoorbeeld: . left|link=https://wonenenzorgopdekaart.nl . Wonen en Zorg op de kaart . is een toepassing in de regio Kennemerland/IJmond. De gemeentes in deze regio werken samen en maken deze site mogelijk met veel relevante informatie voor het Wonen, Zorg en Welzijn domein. De basis voor de vraagzijde is de WoonZorgwijzer, aangevuld met demografische data en prognoses, gegevens over de woningvoorraad, de (bereikbaarheid) van voorzieningen en het gebruik van de WMO. left|link=https://Leiden.wzwkaart.info . Sterke Sociale Basis . is een toepassing in de gemeente Leiden met de focus op thema’s als Rondkomen, Opgroeien, Gezondheid, Samen Doen en Leefbaarheid. Daarnaast is een breed scala aan voorzieningen opgenomen en wordt de WoonZorgwijzer als basis voor de vraagzijde gebruikt. left|link=https://hw.wzwkaart.info . Atlas Plus Hoeksche Waard . is een toepassing van Hoeksche Waard op Kaart, gericht op meerdere aspecten van het sociaal domein. Ook hier is de WoonZorgwijzer als basis voor de vraagzijde genomen. Naast de demografie worden ook een aantal sociaal-economische indicatoren getoond. Ook worden combinatiekaarten van de bereikbaarheid van voorzieningen gepresenteerd. Meer toepassingen zijn te vinden via de WoonZorgwijzer, sectie: toepassingen. ",
    "url": "/docs/social-domain.html#toepassingen",
    
    "relUrl": "/docs/social-domain.html#toepassingen"
  },"2804": {
    "doc": "social-domain",
    "title": "social-domain",
    "content": "left . The pages for this domain are in Dutch as all our applications in this domain are in the Netherlands and related to the Dutch situation (although they can also be relevant in other contexts) . ",
    "url": "/docs/social-domain.html",
    
    "relUrl": "/docs/social-domain.html"
  },"2805": {
    "doc": "software",
    "title": "components",
    "content": "The GeoDMS software consists of three components: . | geodms-engine: component to control and calculate results of models, modelruns and/or scenarios | geodms-gui: component to view data/metadata in different views | geodmsrun: An executable used to update tree items from a command line or batch file | . ",
    "url": "/docs/software.html#components",
    
    "relUrl": "/docs/software.html#components"
  },"2806": {
    "doc": "software",
    "title": "install and use",
    "content": ". | geodms-setups: for installing the software | license: copyright notice, license conditions and disclaimer | system-requirements: hard- and software requirements for running the software | installation-instructions: how to install the GeoDMS software, configurations and (meta) data | folders-and-placeholders : how to work with placeholders and folders | configuration-file-editor: editors for reading and writing configurations | bugs-and-features: how to notify bugs and feauture requests | compiling-the-geodms: how to compile the GeoDMS source code | git-or-subversion-server-access: how to use subversion/git and relevant software tools | (registry)-settings: User/Machine specific settings | . ",
    "url": "/docs/software.html#install-and-use",
    
    "relUrl": "/docs/software.html#install-and-use"
  },"2807": {
    "doc": "software",
    "title": "tests",
    "content": ". | tests | . ",
    "url": "/docs/software.html#tests",
    
    "relUrl": "/docs/software.html#tests"
  },"2808": {
    "doc": "software",
    "title": "developments",
    "content": ". | recent-developments: recent developments in the software | planned-developments: planned developments in the software | under-study: topics under study, results might be implemented in future versions | . ",
    "url": "/docs/software.html#developments",
    
    "relUrl": "/docs/software.html#developments"
  },"2809": {
    "doc": "software",
    "title": "software",
    "content": " ",
    "url": "/docs/software.html",
    
    "relUrl": "/docs/software.html"
  },"2810": {
    "doc": "sort",
    "title": "syntax",
    "content": ". | sort(a) | . ",
    "url": "/docs/sort.html#syntax",
    
    "relUrl": "/docs/sort.html#syntax"
  },"2811": {
    "doc": "sort",
    "title": "definition",
    "content": "The sort(a) function sorts a numeric, point or boolean attribute in an numeric ascending order. | null values become the first elements in the resulting order | in boolean items False values are sorted before True values | in two-dimensional-domain data-item, the sort order is based on the first coordinate. | . The sort_str function sort string attributes in alphabetic order. ",
    "url": "/docs/sort.html#definition",
    
    "relUrl": "/docs/sort.html#definition"
  },"2812": {
    "doc": "sort",
    "title": "applies to",
    "content": "attribute with Numeric, Point or bool value-type . ",
    "url": "/docs/sort.html#applies-to",
    
    "relUrl": "/docs/sort.html#applies-to"
  },"2813": {
    "doc": "sort",
    "title": "example",
    "content": "attribute&lt;float32&gt; sortA (CDomain) := sort(A); . | A | sortA | . | 0 | null | . | 1 | null | . | 2.5 | null | . | -100 | -100 | . | 999 | 0 | . | null | 0 | . | null | 1 | . | 0 | 2.5 | . | null | 100 | . | 100 | 999 | . CDomain, nr of rows = 10 . ",
    "url": "/docs/sort.html#example",
    
    "relUrl": "/docs/sort.html#example"
  },"2814": {
    "doc": "sort",
    "title": "see also",
    "content": ". | sort_str | reverse | . ",
    "url": "/docs/sort.html#see-also",
    
    "relUrl": "/docs/sort.html#see-also"
  },"2815": {
    "doc": "sort",
    "title": "sort",
    "content": "ordering-functions Sort . ",
    "url": "/docs/sort.html",
    
    "relUrl": "/docs/sort.html"
  },"2816": {
    "doc": "sort_str",
    "title": "syntax",
    "content": ". | sort_str(string_dataitem) | . ",
    "url": "/docs/sort_str.html#syntax",
    
    "relUrl": "/docs/sort_str.html#syntax"
  },"2817": {
    "doc": "sort_str",
    "title": "definition",
    "content": "sort_str(string_dataitem) sorts data-item string_dataitem in ascending order (ASCII sort sequence). ",
    "url": "/docs/sort_str.html#definition",
    
    "relUrl": "/docs/sort_str.html#definition"
  },"2818": {
    "doc": "sort_str",
    "title": "description",
    "content": "The sort_str function is case sensitive. Use the reverse function on a sorted string to sort in descending order (see example). ",
    "url": "/docs/sort_str.html#description",
    
    "relUrl": "/docs/sort_str.html#description"
  },"2819": {
    "doc": "sort_str",
    "title": "applies to",
    "content": ". | data item string_dataitem with string value-type | . ",
    "url": "/docs/sort_str.html#applies-to",
    
    "relUrl": "/docs/sort_str.html#applies-to"
  },"2820": {
    "doc": "sort_str",
    "title": "example",
    "content": "1. attribute&lt;string&gt; sortA_asc  (ADomain) := sort_str(A); 2. attribute&lt;string&gt; sortA_desc (ADomain) := reverse(sortA_asc); . | A | sortA_asc | srtA_desc | . | ‘Test’ | ’ test met spatie’ | ‘twee woorden’ | . | ‘88hallo99’ | ’+)’ | ‘Test’ | . | ’+)’ | ‘88hallo99’ | ‘88hallo99’ | . | ‘twee woorden’ | ‘Test’ | ’+)’ | . | ’ test met spatie’ | ‘twee woorden’ | ’ test met spatie’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/sort_str.html#example",
    
    "relUrl": "/docs/sort_str.html#example"
  },"2821": {
    "doc": "sort_str",
    "title": "see also",
    "content": ". | sort | reverse | . ",
    "url": "/docs/sort_str.html#see-also",
    
    "relUrl": "/docs/sort_str.html#see-also"
  },"2822": {
    "doc": "sort_str",
    "title": "sort_str",
    "content": "string-functions sort_str(ing) . ",
    "url": "/docs/sort_str.html",
    
    "relUrl": "/docs/sort_str.html"
  },"2823": {
    "doc": "source",
    "title": "source",
    "content": "The Source property is optional and can be used for descriptive information on the source, e.g. about copyrights. The GeoDMS keeps track of all source data used in a model calculation. The configured source descriptions for each source and derived item can be requested in the Source Description Detail Page. ",
    "url": "/docs/source.html",
    
    "relUrl": "/docs/source.html"
  },"2824": {
    "doc": "sourcedatadir",
    "title": "sourcedatadir",
    "content": "The SourceDataDir is the root folder for source files/databases used in your project. The data in this folder (and subfolders) is usually read-only. You can adjust the path on your local machine for the SourceDataDir from the geodms-gui with the menu option: Tools &gt; Options &gt; Advanced Tab. In your configuration you can use the folders-and-placeholders %SourceDataDir% to refer to this folder. ",
    "url": "/docs/sourcedatadir.html",
    
    "relUrl": "/docs/sourcedatadir.html"
  },"2825": {
    "doc": "spatial-join",
    "title": "spatial-join",
    "content": "To sum population per origin over all destiantions within 120 km Euclidian: . unit&lt;uint64&gt; Combine_OrgDest := combine_unit_uint64(Orgs, Dests) { attribute&lt;Orgs&gt; Orgs_rel := convert(id(.) / uint64(#Dests), Orgs); attribute&lt;uint32&gt; Dests_rel := convert(id(.) % uint64(#Dests), Dests); attribute&lt;float64&gt; Distance2 := sqrdist(Orgs/geometry[Orgs_rel], Dests/geometry[Dests_rel]); attribute&lt;uint32&gt; NearbyPopulation := Dests/Population[Dests_rel] * uint32(Distance2 &lt; sqr(120000d)); } attribute&lt;uint32&gt; Population_within_120km (Orgs) := sum(Combine_OrgDest/NearbyPopulation, Combine_OrgDest/Orgs_rel); . ",
    "url": "/docs/spatial-join.html",
    
    "relUrl": "/docs/spatial-join.html"
  },"2826": {
    "doc": "spatial-overlap",
    "title": "script",
    "content": "container SpatialOverlap {    unit&lt;fpoint&gt;  point_rd_wms : format = \"EPSG:28992\";    unit&lt;fpoint&gt;  point_rd     := range(point_rd_wms, point(300000f,0f), point(625000f,280000f));  // the polygon set that might contain overlap is configured here &lt;;    unit&lt;uint32&gt; src_poly:       StorageName     = \"%SourceDataDir%/CBS/2019/cbs_gem_2019_si.shp\"    ,  StorageType     = \"gdal.vect\"    ,  StorageReadOnly = \"True\"    {       attribute&lt;point_rd&gt; geometry (poly);    }    container grid    {       unit&lt;spoint&gt; domain :=  range(          gridset(              point_rd             ,point(-100f, 100f, point_rd)             ,point(625000f, 10000f, point_rd)             ,spoint          )             ,point(0s, 0s)             ,point(3250s, 2700s)          )       ,   DialogType = \"point_rd\";        // a reverse domain is configured with the same number of rows as the source polygon domain,  only with the geometries in reverse order        unit&lt;uint32&gt; reverse_poly := range(uint32, 0, #src_poly)       {          attribute&lt;point_rd&gt; geometry   (poly)  := src_poly/geometry[#reverse_poly - (id(reverse_poly) + 1)];          attribute&lt;src_poly&gt; src_poly_rel       := #. - (id(.) + 1);       }       // for both the source polygon domain and the reverse domain the poly2grid function is applied , the results are made comparable       attribute&lt;src_poly&gt;     src_poly_rel               (domain) := poly2grid(src_poly/geometry    , domain);       attribute&lt;reverse_poly&gt; reverse_poly_rel           (domain) := poly2grid(reverse_poly/geometry, domain);       attribute&lt;src_poly&gt;     reverse_poly_src_poly_rel  (domain) := reverse_poly/src_poly_rel[reverse_poly_rel];       attribute&lt;bool&gt;         hasOverlap                 (domain) := src_poly_rel &lt;&gt; reverse_poly_src_poly_rel;       parameter&lt;bool&gt; anyOverlapa := any(hasOverlap);    }    container vector    {       unit&lt;float32&gt; m  := baseunit('m', float32);       unit&lt;float32&gt; m2 := m * m;       unit&lt;ipoint&gt;  point_rd_mm :=          gridset(              point_rd             ,point(0.001f, 0.001f, point_rd)             ,point(0f    , 0f    , point_rd)             ,ipoint          );        // the  polygon_connectivity results in the set of connected/overlapping polygons        unit&lt;uint32&gt; overlap_vector := polygon_connectivity(ipolygon(src_poly/geometry[point_rd_mm]))       {          attribute&lt;point_rd&gt; geometry_F1 (poly) := src_poly/geometry[F1];          attribute&lt;point_rd&gt; geometry_F2 (poly) := src_poly/geometry[F2];              attribute &lt;ipoint&gt;  intersect   (poly) :=  ipolygon(geometry_F1[point_rd_mm]) * ipolygon(geometry_F2[point_rd_mm]);          attribute&lt;m2&gt;       area               := area(intersect[point_rd], m2);       }       unit&lt;uint32&gt; met_overlap_vector := select_with_org_rel(overlap_vector/area &gt; 0[m2])       {          attribute&lt;point_rd&gt; geometry (poly)  := value(overlap_vector/intersect[org_rel], point_rd);          attribute&lt;m2&gt;       area             := overlap_vector/area[org_rel];       }    } } . ",
    "url": "/docs/spatial-overlap.html#script",
    
    "relUrl": "/docs/spatial-overlap.html#script"
  },"2827": {
    "doc": "spatial-overlap",
    "title": "spatial-overlap",
    "content": "configuration-examples Spatial Overlap . In polygon layers, polygons might overlap. This can cause issues for instance with the point_in_polygon function in the GeoDMS (the sequence of polygons then defines the result, which is often undesired). It can be useful, before working with a polygon layer, to first find out if in the layer polygons do overlap. For that purpose the following script shows two options. | grid approach. This gives a fast indication for substantial overlap. By reducing the grid size, the approach becomes more precise. The grid approach uses the poly2grid function for all polygon geometries in the order of the src file and the reverse order. If these approaches result in different outcomes, there must be overlap. The resulting boolean parameter: anyOverlap indicates if overlap does occur. | vector approach. This apporach is more time consuming, but give an exact area of overlap for the overlapping polygons. The polygon_connectivity function is used to find out which polygons are connected. For this set the multiplication function result in the overlap between these polygons. With the area function, the surface of the overlap is calculated. | . ",
    "url": "/docs/spatial-overlap.html",
    
    "relUrl": "/docs/spatial-overlap.html"
  },"2828": {
    "doc": "spatialreference",
    "title": "example",
    "content": "The following example shows how to configure the Dutch coordinate system (Rijksdriehoekmeting): . unit&lt;float32&gt; m := baseunit('m', float32); unit&lt;fpoint&gt; point_rd_base: SpatialReference = \"EPSG:28992\"; . ",
    "url": "/docs/spatialreference.html#example",
    
    "relUrl": "/docs/spatialreference.html#example"
  },"2829": {
    "doc": "spatialreference",
    "title": "spatialreference",
    "content": "The SpatialReference property is used to configure a how-to-configure-a-coordinate-system. By configuring this property, the GeoDMS becomes aware of the coordinate system and how to interpret the values. With GDAL it is easy to convert coordinates between coordinate systems. In a GeoDMS Map view only coordinates of one coordinate system can be combined. If an EPSG code is configured, it is shown in the title of the Map View in which these coordinates are used. Until 8.7.0 the format property was used instead of SpatialReference. ",
    "url": "/docs/spatialreference.html",
    
    "relUrl": "/docs/spatialreference.html"
  },"2830": {
    "doc": "special-characters",
    "title": "escape characters",
    "content": "In the GeoDMS escape characters can be used to configure special characters, see the examples: . parameter&lt;string&gt; SingleQuote  := '\\'''; parameter&lt;string&gt; DoubleQuote  := '\\\"';  //  The double quote with an escape character is needed in the expression syntax with expr = \"..\" //, as the double quote is also used in this syntax to indicate the start and end of the expression. parameter&lt;string&gt; tab          := '\\t'; parameter&lt;string&gt; newline      := '\\n'; parameter&lt;string&gt; backslash : ['\\\\']; parameter&lt;string&gt; forwardslash : ['//']; . ",
    "url": "/docs/special-characters.html#escape-characters",
    
    "relUrl": "/docs/special-characters.html#escape-characters"
  },"2831": {
    "doc": "special-characters",
    "title": "missing data",
    "content": "Missing data (null values) can be configured, based on the value-type, in different ways; see the examples: . parameter&lt;uint32&gt; null_u32    := 4294967295; parameter&lt;uint32&gt; null_u32    := 0 / 0; // The null value for uint32 is used as the transparent colour in items with colour visualisation style. parameter&lt;uint8&gt;  null_u8     := 255b; or parameter&lt;uint32&gt; null_u8     := 0b / 0b; parameter&lt;string&gt; null_string := string(0 / 0); parameter&lt;string&gt; emptystring := ''; . The emptystring parameter does not configure a null value, but a string with no characters. ",
    "url": "/docs/special-characters.html#missing-data",
    
    "relUrl": "/docs/special-characters.html#missing-data"
  },"2832": {
    "doc": "special-characters",
    "title": "special-characters",
    "content": "configuration-examples Special characters . ",
    "url": "/docs/special-characters.html",
    
    "relUrl": "/docs/special-characters.html"
  },"2833": {
    "doc": "split_partitioned_union_polygon",
    "title": "syntax",
    "content": ". | split_partitioned_union_polygon(polygon_data_item, relation) | . ",
    "url": "/docs/split_partitioned_union_polygon.html#syntax",
    
    "relUrl": "/docs/split_partitioned_union_polygon.html#syntax"
  },"2834": {
    "doc": "split_partitioned_union_polygon",
    "title": "description",
    "content": "split_partitioned_union_polygon(polygon_data_item, relation) results in a new uint32 domain-unit with single polygons for each (multi)polygon in the polygon_data_item argument, and also dissolves over the relation. ",
    "url": "/docs/split_partitioned_union_polygon.html#description",
    
    "relUrl": "/docs/split_partitioned_union_polygon.html#description"
  },"2835": {
    "doc": "split_partitioned_union_polygon",
    "title": "applies to",
    "content": "attribute polygon_data_item with an ipoint or spoint value-type . ",
    "url": "/docs/split_partitioned_union_polygon.html#applies-to",
    
    "relUrl": "/docs/split_partitioned_union_polygon.html#applies-to"
  },"2836": {
    "doc": "split_partitioned_union_polygon",
    "title": "conditions",
    "content": ". | The composition of the polygon_data_item argument needs to be polygon. | The domain unit of the polygon_data_item argument must be of value type uint32. | . ",
    "url": "/docs/split_partitioned_union_polygon.html#conditions",
    
    "relUrl": "/docs/split_partitioned_union_polygon.html#conditions"
  },"2837": {
    "doc": "split_partitioned_union_polygon",
    "title": "since version",
    "content": "7.042 . ",
    "url": "/docs/split_partitioned_union_polygon.html#since-version",
    
    "relUrl": "/docs/split_partitioned_union_polygon.html#since-version"
  },"2838": {
    "doc": "split_partitioned_union_polygon",
    "title": "example",
    "content": "unit&lt;uint32&gt; split_dissolve := split_partitioned_union_polygon(multipolygon/geometry, id(multipolygon)) . ",
    "url": "/docs/split_partitioned_union_polygon.html#example",
    
    "relUrl": "/docs/split_partitioned_union_polygon.html#example"
  },"2839": {
    "doc": "split_partitioned_union_polygon",
    "title": "see also",
    "content": ". | union_polygon-(dissolve) | . ",
    "url": "/docs/split_partitioned_union_polygon.html#see-also",
    
    "relUrl": "/docs/split_partitioned_union_polygon.html#see-also"
  },"2840": {
    "doc": "split_partitioned_union_polygon",
    "title": "split_partitioned_union_polygon",
    "content": "geometric-functions split_partitioned_union_polygon . ",
    "url": "/docs/split_partitioned_union_polygon.html",
    
    "relUrl": "/docs/split_partitioned_union_polygon.html"
  },"2841": {
    "doc": "split_polygon",
    "title": "syntax",
    "content": ". | split_polygon(polygon_data_item) | . ",
    "url": "/docs/split_polygon.html#syntax",
    
    "relUrl": "/docs/split_polygon.html#syntax"
  },"2842": {
    "doc": "split_polygon",
    "title": "description",
    "content": "split_polygon(polygon_data_item) results in a new uint32 domain-unit with single polygons for each (multi)polygon in the polygon_data_item argument. If the original polygon_data_item only contains single polygons, the resulting domain unit has the same number of elements as the domain unit of the polygon_data_item argument. The figure illustrates a source polygon_data_item (left image) of a domain unit with four entries. Each color represents an entry in the polygon_data_item, the red and green areas are multipolygons. The resulting domain unit of the split_polygon function for this polygon_data_item will contain seven entries, with a single polygon for each entry (right image). The split_polygon functions generates two (and since GeoDMS 8) 3 subitems: . | geometry: the geometry of the single polygons. This attribute has the same values-unit as the polygon_data_item argument. | nr_OrgEntity: a relation for the new domain towards the domain of the polygon_data_item argument. | polygon_rel: a relation for the new domain towards the domain of the polygon_data_item argument. This data item is a copy of the nr_OrgEntity, but whith a name that meets our naming-conventions. The nr_OrgEntity argument is still generated for backward compatibility. | . We advice to use the polygon_rel argument, the nr_OrgEntity argument will be phased out. ",
    "url": "/docs/split_polygon.html#description",
    
    "relUrl": "/docs/split_polygon.html#description"
  },"2843": {
    "doc": "split_polygon",
    "title": "applies to",
    "content": "attribute polygon_data_item with an ipoint or spoint value-type . ",
    "url": "/docs/split_polygon.html#applies-to",
    
    "relUrl": "/docs/split_polygon.html#applies-to"
  },"2844": {
    "doc": "split_polygon",
    "title": "conditions",
    "content": ". | The composition of the polygon_data_item argument needs to be polygon. | The domain unit of the polygon_data_item argument must be of value type uint32. | . This function results in problems for (integer) coordinates larger than 2^25 (after translation where the first point is moved to (0, 0)). If your integer coordinates for instance represent mm, 2^25[mm] = about 33 [km]. The reason is that for calculating intersections, products of coordinates are calculated and casted to float64 with a 53 bits mantissa (in the development/test environment of boost::polygon these were float80 values with a 64 bits mantissa). We advise to keep the size of your integer coordinates for polygons limited and for instance do not use a mm precision for country borders (meter or kilometer might be sufficient). ",
    "url": "/docs/split_polygon.html#conditions",
    
    "relUrl": "/docs/split_polygon.html#conditions"
  },"2845": {
    "doc": "split_polygon",
    "title": "since version",
    "content": "7.042 . ",
    "url": "/docs/split_polygon.html#since-version",
    
    "relUrl": "/docs/split_polygon.html#since-version"
  },"2846": {
    "doc": "split_polygon",
    "title": "example",
    "content": "unit&lt;uint32&gt; single_polygons := split_polygon(multipolygon/geometry); . ",
    "url": "/docs/split_polygon.html#example",
    
    "relUrl": "/docs/split_polygon.html#example"
  },"2847": {
    "doc": "split_polygon",
    "title": "see also",
    "content": ". | union_polygon-(dissolve) | . ",
    "url": "/docs/split_polygon.html#see-also",
    
    "relUrl": "/docs/split_polygon.html#see-also"
  },"2848": {
    "doc": "split_polygon",
    "title": "split_polygon",
    "content": "geometric-functions split_polygon . ",
    "url": "/docs/split_polygon.html",
    
    "relUrl": "/docs/split_polygon.html"
  },"2849": {
    "doc": "spoint",
    "title": "concept",
    "content": ". | spoint is a Point(Group) value-type with two coordinates of the 16 bits (2 bytes) signed integer value type: int16. | spoint() is a function converting other point data-item or unit to the spoint value-type. | . This page describes the spoint() function. ",
    "url": "/docs/spoint.html#concept",
    
    "relUrl": "/docs/spoint.html#concept"
  },"2850": {
    "doc": "spoint",
    "title": "syntax",
    "content": ". | spoint(a) | . ",
    "url": "/docs/spoint.html#syntax",
    
    "relUrl": "/docs/spoint.html#syntax"
  },"2851": {
    "doc": "spoint",
    "title": "definition",
    "content": "spoint(a) converts the coordinates of a point tree-item a to the spoint (int16 coordinates) value type. ",
    "url": "/docs/spoint.html#definition",
    
    "relUrl": "/docs/spoint.html#definition"
  },"2852": {
    "doc": "spoint",
    "title": "applies to",
    "content": ". | data item or unit with PointGroup value-type | . ",
    "url": "/docs/spoint.html#applies-to",
    
    "relUrl": "/docs/spoint.html#applies-to"
  },"2853": {
    "doc": "spoint",
    "title": "example",
    "content": "attribute&lt;spoint&gt; spointA (ADomain) := spoint(A); . | A(fpoint) | spointA | . | {0,0} | {0,0} | . | {1,1} | {1,1} | . | {1000000,10000000} | null | . | {-2.5, 2.5} | {-2,2} | . | {99.9, 99.9} | {99,99} | . ADomain, nr of rows = 5 . ",
    "url": "/docs/spoint.html#example",
    
    "relUrl": "/docs/spoint.html#example"
  },"2854": {
    "doc": "spoint",
    "title": "spoint",
    "content": "conversion-functions spoint . ",
    "url": "/docs/spoint.html",
    
    "relUrl": "/docs/spoint.html"
  },"2855": {
    "doc": "spolygon",
    "title": "syntax",
    "content": ". | spolygon(a) | . ",
    "url": "/docs/spolygon.html#syntax",
    
    "relUrl": "/docs/spolygon.html#syntax"
  },"2856": {
    "doc": "spolygon",
    "title": "definition",
    "content": "spolygon(a) converts the coordinates of a point tree-item a with a sequence of points (arc or polygon) to the spoint (int16 coordinates) value-type. ",
    "url": "/docs/spolygon.html#definition",
    
    "relUrl": "/docs/spolygon.html#definition"
  },"2857": {
    "doc": "spolygon",
    "title": "applies to",
    "content": ". | data-item with Point value-type and composition arc or polygon | . ",
    "url": "/docs/spolygon.html#applies-to",
    
    "relUrl": "/docs/spolygon.html#applies-to"
  },"2858": {
    "doc": "spolygon",
    "title": "example",
    "content": "attribute&lt;spoint&gt; spolygonA (SDomain, polygon) := spolygon(A); . | A(fpolygon) | spolygonA | . | {2:{0,0},{1,1}} | {2:{0,0},{1,1}} | . | {3: {1E+007,1E+007},{-2.5,-2.5},{99.9,99.9}} | {3: {null,null},{-2,-2},{99,99}} | . ",
    "url": "/docs/spolygon.html#example",
    
    "relUrl": "/docs/spolygon.html#example"
  },"2859": {
    "doc": "spolygon",
    "title": "spolygon",
    "content": "conversion-functions spolygon . ",
    "url": "/docs/spolygon.html",
    
    "relUrl": "/docs/spolygon.html"
  },"2860": {
    "doc": "sqlstring",
    "title": "Examples",
    "content": "Example 1 . unit&lt;uint32&gt; Read_Utrecht_gpkg_org : StorageName = \"%dataDir%/Plan_2022/Plan_openbaar_na_join.gpkg\" , StorageType = \"gdal.vect\" , StorageReadOnly = \"true\" , SqlString = \"SELECT * FROM Plan_openbaar_na_join WHERE status =='Hard' OR status =='Zacht' OR status =='Onbekend'\"; . Example 2 . container Import := for_each_nxs(rest_red/naam_underscore, uint32, rest_red/SqlString) , StorageName = \"%RSLDataDir%/Energie/RES/Analysekaarten/3_elektriciteit_aanbod_potentieel/wind/merge_wnd_hard_wt56_nat_ana_v3.gdb\" , StorageReadOnly = \"True\" , SyncMode = \"Attr\" , StorageType = \"gdal.vect\" , SqlString = \"=rest_red/SqlString\" { unit&lt;uint32&gt; Beperkt_kwetsbare_gebouwen : sqlstring=\"SELECT * FROM merge_wnd_hard_wt56_nat_ana_v3 WHERE rest_red = 'Beperkt kwetsbare gebouwen'\" { attribute&lt;rdc_meter&gt; geometry(poly); } } . Example 3 . container Read_Roads_pbf : StorageName = \"= dir + '/'+Regio+'-'+date+'.osm.pbf'\" , StorageType = \"gdal.vect\" , StorageReadOnly = \"True\" , SyncMode = \"None\" , DialogData = \"wgs84\" { unit&lt;uint32&gt; multilinestrings : sqlstring = \"SELECT * FROM multilinestrings\" { attribute&lt;wgs84&gt; geometry (arc); attribute&lt;string&gt; other_tags; } unit&lt;uint32&gt; lines : sqlstring = \"SELECT * FROM lines\" { attribute&lt;wgs84&gt; geometry (arc); attribute&lt;string&gt; highway; attribute&lt;string&gt; other_tags; attribute&lt;int32&gt; z_order; } } . ",
    "url": "/docs/sqlstring.html#examples",
    
    "relUrl": "/docs/sqlstring.html#examples"
  },"2861": {
    "doc": "sqlstring",
    "title": "sqlstring",
    "content": "The SqlString property is used to specify which data and in which order will be selected from the database. The SqlString property requests a valid SQL statement. It is used to: . | Select the relevant attribute. If the names in the database do not correspond with the tree-item names use the AS keyword to relate these names. | Select the table(s), view(s)/query(ies) with a FROM clause | If needed, make a selection with a WHERE condition | Define the sort order with the ORDER BY. This is important, as if no ORDER BY clause is configured, the sort order of the records read is undefined. As the GeoDMS calculates with arrays, the sequence is relevant. Therefor it is is important to always specify the ORDER BY clause in the SqlString property. | . The SqlString property is used to select data. Use only the following SQL key words: SELECT, AS, FROM, WHERE and ORDER BY. If a SQL Statement with a JOIN or a GROUP BY is needed, define this as a view or query in the database and use it as source for the GeoDMS. We advice to make complex selections, for instance with substrings, within the GeoDMS and not in the WHERE clause. The SqlString property can not be used to modify data, UPDATE, SELECT INTO and DELETE statements are not allowed. ",
    "url": "/docs/sqlstring.html",
    
    "relUrl": "/docs/sqlstring.html"
  },"2862": {
    "doc": "sqr",
    "title": "syntax",
    "content": ". | sqr(a) | . ",
    "url": "/docs/sqr.html#syntax",
    
    "relUrl": "/docs/sqr.html#syntax"
  },"2863": {
    "doc": "sqr",
    "title": "definition",
    "content": "sqr(a) results in the square number of the values of data-item a, synonym for a2. ",
    "url": "/docs/sqr.html#definition",
    
    "relUrl": "/docs/sqr.html#definition"
  },"2864": {
    "doc": "sqr",
    "title": "applies to",
    "content": "Data item or unit with Numeric value-type . ",
    "url": "/docs/sqr.html#applies-to",
    
    "relUrl": "/docs/sqr.html#applies-to"
  },"2865": {
    "doc": "sqr",
    "title": "example",
    "content": "attribute&lt;float32&gt; sqrA (ADomain) := sqr(A); . | A | sqrA | . | 0 | 0 | . | 1 | 1 | . | -2 | 4 | . | 3.6 | 12.96 | . | 999 | 998001 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/sqr.html#example",
    
    "relUrl": "/docs/sqr.html#example"
  },"2866": {
    "doc": "sqr",
    "title": "sqr",
    "content": "arithmetic-functions square number (a2) . ",
    "url": "/docs/sqr.html",
    
    "relUrl": "/docs/sqr.html"
  },"2867": {
    "doc": "sqrdist",
    "title": "syntax",
    "content": ". | sqrdist(destination, origin) | . ",
    "url": "/docs/sqrdist.html#syntax",
    
    "relUrl": "/docs/sqrdist.html#syntax"
  },"2868": {
    "doc": "sqrdist",
    "title": "definition",
    "content": "sqrdist(destination, origin) calculates the square distance (as the crow flies) between origin and destination point of the same domain-unit. The resulting data-item has a float32 value-type without metric. Use the value function to convert the result to the requested values-unit. ",
    "url": "/docs/sqrdist.html#definition",
    
    "relUrl": "/docs/sqrdist.html#definition"
  },"2869": {
    "doc": "sqrdist",
    "title": "description",
    "content": "The sqrdist calculates faster than the dist function and can be used if only the distance order is relevant. ",
    "url": "/docs/sqrdist.html#description",
    
    "relUrl": "/docs/sqrdist.html#description"
  },"2870": {
    "doc": "sqrdist",
    "title": "applies to",
    "content": ". | destination and origin are data items with Point value type | . ",
    "url": "/docs/sqrdist.html#applies-to",
    
    "relUrl": "/docs/sqrdist.html#applies-to"
  },"2871": {
    "doc": "sqrdist",
    "title": "conditions",
    "content": "The values unit and domain unit of the destination and origin argument must match. ",
    "url": "/docs/sqrdist.html#conditions",
    
    "relUrl": "/docs/sqrdist.html#conditions"
  },"2872": {
    "doc": "sqrdist",
    "title": "example",
    "content": "attribute&lt;m2&gt; sqrdistOD (ADomain) := value(sqrdist(destination, origin), m2); . | destination | origin | sqrdistOD | . | {401331, 115135} | {401331, 115135} | 0 | . | {399501, 111793} | {399476, 111803} | 725 | . | {399339, 114883} | {399289, 114903} | 2900 | . | {401804, 111323} | {401729, 111353} | 6525 | . | {398796, 111701} | {398696, 111741} | 11600 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/sqrdist.html#example",
    
    "relUrl": "/docs/sqrdist.html#example"
  },"2873": {
    "doc": "sqrdist",
    "title": "see also",
    "content": ". | dist | . ",
    "url": "/docs/sqrdist.html#see-also",
    
    "relUrl": "/docs/sqrdist.html#see-also"
  },"2874": {
    "doc": "sqrdist",
    "title": "sqrdist",
    "content": "geometric-functions sq(ua)r(e)dist(ance) . ",
    "url": "/docs/sqrdist.html",
    
    "relUrl": "/docs/sqrdist.html"
  },"2875": {
    "doc": "sqrt",
    "title": "syntax",
    "content": ". | sqrt(a) | . ",
    "url": "/docs/sqrt.html#syntax",
    
    "relUrl": "/docs/sqrt.html#syntax"
  },"2876": {
    "doc": "sqrt",
    "title": "definition",
    "content": "sqrt(a) results in the square root of the values of data-item a, synonym with √a. ",
    "url": "/docs/sqrt.html#definition",
    
    "relUrl": "/docs/sqrt.html#definition"
  },"2877": {
    "doc": "sqrt",
    "title": "description",
    "content": "The sqrt function results in null values for negative values in the argument. ",
    "url": "/docs/sqrt.html#description",
    
    "relUrl": "/docs/sqrt.html#description"
  },"2878": {
    "doc": "sqrt",
    "title": "applies to",
    "content": "data item or unit with Numeric value-type . ",
    "url": "/docs/sqrt.html#applies-to",
    
    "relUrl": "/docs/sqrt.html#applies-to"
  },"2879": {
    "doc": "sqrt",
    "title": "example",
    "content": "attribute&lt;float32&gt; sqrtA (ADomain) := sqrt(A); . | A | sqrtA | . | 0 | 0 | . | 1 | 1 | . | -2 | null | . | 3.6 | 1.897 | . | 999 | 31.6 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/sqrt.html#example",
    
    "relUrl": "/docs/sqrt.html#example"
  },"2880": {
    "doc": "sqrt",
    "title": "sqrt",
    "content": "arithmetic-functions square root (√a) . ",
    "url": "/docs/sqrt.html",
    
    "relUrl": "/docs/sqrt.html"
  },"2881": {
    "doc": "standard-deviance(sd)",
    "title": "syntax",
    "content": ". | sd(a) | sd(a, relation) | . ",
    "url": "/docs/standard-deviance(sd).html#syntax",
    
    "relUrl": "/docs/standard-deviance(sd).html#syntax"
  },"2882": {
    "doc": "standard-deviance(sd)",
    "title": "definition",
    "content": ". | sd(a) results in a parameter with the standard deviance of the non null values of attribute a. | sd(a, relation) results in an attribute with the standard deviance of the non null values of attribute a, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | . ",
    "url": "/docs/standard-deviance(sd).html#definition",
    
    "relUrl": "/docs/standard-deviance(sd).html#definition"
  },"2883": {
    "doc": "standard-deviance(sd)",
    "title": "description",
    "content": "The standard deviation is calculated as the square of the sum of the differences of each value related to the mean value. This square is divided by the number of values (n) and from this division the square root is taken. This way of calculating the standard deviation is different from e.g. the ms Excel STDEV function, which divides the sum of the differences by n -1. ",
    "url": "/docs/standard-deviance(sd).html#description",
    
    "relUrl": "/docs/standard-deviance(sd).html#description"
  },"2884": {
    "doc": "standard-deviance(sd)",
    "title": "applies to",
    "content": ". | attribute a with Numeric value-type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/standard-deviance(sd).html#applies-to",
    
    "relUrl": "/docs/standard-deviance(sd).html#applies-to"
  },"2885": {
    "doc": "standard-deviance(sd)",
    "title": "conditions",
    "content": ". | The value type of argument a and the resulting data-item must match. | The domain of arguments a and relation must match. | . ",
    "url": "/docs/standard-deviance(sd).html#conditions",
    
    "relUrl": "/docs/standard-deviance(sd).html#conditions"
  },"2886": {
    "doc": "standard-deviance(sd)",
    "title": "example",
    "content": "1. parameter&lt;float32&gt; sdNrInh                := sd(float32(City/NrInhabitants));result = 155.46 2. attribute&lt;float32&gt; sdNrInhRegion (Region) := sd(float32(City/NrInhabitants), City/Region_rel); . | City/NrInhabitants | City/Region_rel | . | 550 | 0 | . | 525 | 1 | . | 300 | 2 | . | 500 | 1 | . | 200 | 3 | . | 175 | null | . | null | 3 | . domain City, nr of rows = 7 . | sdNrInhRegion | . | 0 | . | 12.5 | . | 0 | . | 0 | . | null | . domain Region, nr of rows = 5 . ",
    "url": "/docs/standard-deviance(sd).html#example",
    
    "relUrl": "/docs/standard-deviance(sd).html#example"
  },"2887": {
    "doc": "standard-deviance(sd)",
    "title": "see also",
    "content": ". | variance | . ",
    "url": "/docs/standard-deviance(sd).html#see-also",
    
    "relUrl": "/docs/standard-deviance(sd).html#see-also"
  },"2888": {
    "doc": "standard-deviance(sd)",
    "title": "standard-deviance(sd)",
    "content": "aggregation-functions standard deviance . ",
    "url": "/docs/standard-deviance(sd).html",
    
    "relUrl": "/docs/standard-deviance(sd).html"
  },"2889": {
    "doc": "statusflags",
    "title": "example",
    "content": "\"C:\\Program Files\\ObjectVision\\GeoDms7317\\GeoDmsRun.exe\" /S1 /S2 \"C:\\prj\\cfg\\dms.dms\" /Results . runs the GeoDMSRun with Multi Tasking flags 1 and 2 set . ",
    "url": "/docs/statusflags.html#example",
    
    "relUrl": "/docs/statusflags.html#example"
  },"2890": {
    "doc": "statusflags",
    "title": "statusflags",
    "content": "The geodms-gui and geodmsrun maintain a status word with binary flags, which is read from registry key @@@ and saved to that key by the GUI when editing Tools -&gt; Options. They can also be set from the command line of the executables. with Sx or Cx which sets or clears a flag with ‘x’ processed as following: . | A : Admin mode | . | S: SuspendForGUI | . | C: ShowStateColor | . | V: TreeViewVisible; | . | D: DetailsVisible; | E: EventLogVisible; | T: ToolBarVisible; | I: CurrentItemBarHidden; | R: DynamicROI | . Multi Tasking: . | 0: Suspend View Updates to favour GUI | 1: Multi Tasking flag for Tile/segment tasks | 2: Multi Tasking flag for Multiple operations simultaneously | 3: Pipelined Tile operations | . Note that: for GeoDMSRun only the Multi Tasking flags are relevant . StatusFlags need to be placed after the name of the executable and the optional logfile name and before the name of the configuration file. The SatusFlags selves can be configured in any order. ",
    "url": "/docs/statusflags.html",
    
    "relUrl": "/docs/statusflags.html"
  },"2891": {
    "doc": "storage_name",
    "title": "syntax",
    "content": ". | storage_name(item_with_storage) | . ",
    "url": "/docs/storage_name.html#syntax",
    
    "relUrl": "/docs/storage_name.html#syntax"
  },"2892": {
    "doc": "storage_name",
    "title": "definition",
    "content": "storage_name(item_with_storage) results in a string parameter with the value of the storagename property configured for the item_with_storage. folders-and-placeholders are expanded in the result. ",
    "url": "/docs/storage_name.html#definition",
    
    "relUrl": "/docs/storage_name.html#definition"
  },"2893": {
    "doc": "storage_name",
    "title": "applies to",
    "content": ". | data-item item_with_storage with a configured storage. | . ",
    "url": "/docs/storage_name.html#applies-to",
    
    "relUrl": "/docs/storage_name.html#applies-to"
  },"2894": {
    "doc": "storage_name",
    "title": "example",
    "content": "1. attribute&lt;uint8&gt;  griddata (GridUnit): StorageName = \"%projdir%/data/testgrid.asc\"; 2. parameter&lt;string&gt; storage_name := storage_name(griddata); . result: storage_name = ‘c:/prj/tst/data/testgrid.asc’ . ",
    "url": "/docs/storage_name.html#example",
    
    "relUrl": "/docs/storage_name.html#example"
  },"2895": {
    "doc": "storage_name",
    "title": "see also",
    "content": ". | propvalue | . ",
    "url": "/docs/storage_name.html#see-also",
    
    "relUrl": "/docs/storage_name.html#see-also"
  },"2896": {
    "doc": "storage_name",
    "title": "storage_name",
    "content": "file,-folder-and-read-functions storage_name . ",
    "url": "/docs/storage_name.html",
    
    "relUrl": "/docs/storage_name.html"
  },"2897": {
    "doc": "storagemanager",
    "title": "example",
    "content": "The following example show the configuration of the dbf StorageManager for reading data form a region.dbf file. unit&lt;uint32&gt; Table :   StorageName     = \"%SourceDataDir%/CBS/region.dbf\" ,   StorageType     = \"dbf\" ,   Source          = \"dbf example source\" ,   StorageReadOnly = \"True\" ,   SyncMode        = \"None\" ,   SqlString       = \"SELECT * FROM TestTable ORDER BY ID\" {      attribute&lt;int32&gt; att;      attribute&lt;int32&gt; att2 := att * att, DisableStorage = \"True\";          ` } . ",
    "url": "/docs/storagemanager.html#example",
    
    "relUrl": "/docs/storagemanager.html#example"
  },"2898": {
    "doc": "storagemanager",
    "title": "properties",
    "content": "A StorageManager is configured by setting property to a data item or it’s parent-item. | storagename | storagetype | source | storagereadonly | disablestorage | syncmode | sqlstring | . ",
    "url": "/docs/storagemanager.html#properties",
    
    "relUrl": "/docs/storagemanager.html#properties"
  },"2899": {
    "doc": "storagemanager",
    "title": "formats",
    "content": ". | vector-data (esri-shapefile) | grid-data (geotiff, …) | ascii-files (csv) | xml | dbf | database (geopackage) | geodms-own-formats | . ",
    "url": "/docs/storagemanager.html#formats",
    
    "relUrl": "/docs/storagemanager.html#formats"
  },"2900": {
    "doc": "storagemanager",
    "title": "storagemanager",
    "content": "A StorageManager is part of the GeoDMS software used to read or write data from and to files or databases. If a StorageManager is configured, data is . | read-data the storage when requested in a view or calculation. | write-data the storage when a data-item is updated (results of the expression are calculated). | . Requesting data in a view triggers the GeoDMS to update items, as well as the submenu items Update Treeitem and Update Subtree in the geodms-gui. Since 6.045 (read) and 7.408 (write) we use the gdal library to read data from and write data to multiple formats, additional to the GeoDMS StorageManagers that are also still useful in specific cases. ",
    "url": "/docs/storagemanager.html",
    
    "relUrl": "/docs/storagemanager.html"
  },"2901": {
    "doc": "storagename",
    "title": "storagename",
    "content": "The StorageName property needs to refer to the name of a primary data source (a file or database). It can be configured to a domain-unit, a data-item or container, based on the storagemanager. Use placeholders in path names, like %SourceDataDir%, to make the configurations easily transferable to other locations/machines, see folders-and-placeholders. For some StorageManagers, the file extension indicates which StorageManager will be used (.dbf, .shp, .tif). This can be overruled with the storagetype property. ",
    "url": "/docs/storagename.html",
    
    "relUrl": "/docs/storagename.html"
  },"2902": {
    "doc": "storagereadonly",
    "title": "storagereadonly",
    "content": "The StorageReadOnly property can be configured to True, indicating the storage is used to read data from, but not to write data to. The default value for this property is: False. ",
    "url": "/docs/storagereadonly.html",
    
    "relUrl": "/docs/storagereadonly.html"
  },"2903": {
    "doc": "storagetype",
    "title": "storagetype",
    "content": "The StorageType property determines which storagemanager is used. For some StorageManagers the default StorageType is derived from the extension of the filename, configured as storagename. When the StorageManager cannot be derived from the StorageName or is different from its default, you need to configure it. List of available types: . | for raster data: “gdal.grid”, “TIF”, “BMP”, | for feature layers, tables and layer sets: “gdal.vect”, “Shp”, “DBF” | for direct mapping of GeoDMS data: “fss”, “cfs” | for value &lt;-&gt; file storage: “str”, “strfiles”. | . ",
    "url": "/docs/storagetype.html",
    
    "relUrl": "/docs/storagetype.html"
  },"2904": {
    "doc": "str-storagemanager",
    "title": "str",
    "content": "Example: . parameter&lt;string&gt; StringParam :  StorageName = \"%projDir%/data/file01.txt\" ,  StorageType = \"str\"; . In this example the data for the parameter StringParam is read from the file file01.txt. Both storagename and storagetype properties need to be configured for this parameter: . | The StorageName property needs to refer to the filename from which the data is read and or written to. | The StorageType property needs to be configured to str. | . This StorageManager is also used in the tablechopper-(read-ascii-file) / tablecomposer-(write-ascii-file) to read/write csv files and in combination with the parse_xml function to read xml files. ",
    "url": "/docs/str-storagemanager.html#str",
    
    "relUrl": "/docs/str-storagemanager.html#str"
  },"2905": {
    "doc": "str-storagemanager",
    "title": "strfiles",
    "content": "Example: . unit&lt;uint32&gt; FileSet: nrofrows = 5 {    attribut&lt;string&gt; StringAtt    :  StorageName = \"%projDir%/data/StrFiles\"    ,  StorageType = \"strfiles\";    attribute&lt;string&gt; FileName:       ['file01.kml','file02.kml','file03.kml','file04.kml','file05.kml']; } . In this example the data for the five elements of attribute StringAtt is read from the text files: file01.kml .. file05.kml. Both StorageName and StorageType properties need to be configured for the attribute: . | The StorageName property needs to refer to the foldername in which the files occur, from which the data is read (and or written to). | The StorageType property needs to be configured to strfiles. | A string attribute with the name FileName needs to be configured in the same container. This attribute needs to contain the names of the files from which the data is read and/or written to. In this example the file names are read from the configuration file with the [..] syntax. | . ",
    "url": "/docs/str-storagemanager.html#strfiles",
    
    "relUrl": "/docs/str-storagemanager.html#strfiles"
  },"2906": {
    "doc": "str-storagemanager",
    "title": "str-storagemanager",
    "content": "The values of a string data item can be read from and written to a (set of) ASCII file(s) with the str/strfiles storagemanager . | The str StorageManager is used to read parameters values from and write parameters values to a single ASCII file. | The strfiles StorageManager is used to read attributes from and write attributes to a set of ASCII files. | . ",
    "url": "/docs/str-storagemanager.html",
    
    "relUrl": "/docs/str-storagemanager.html"
  },"2907": {
    "doc": "strcount",
    "title": "syntax",
    "content": ". | strcount(source, key) | . ",
    "url": "/docs/strcount.html#syntax",
    
    "relUrl": "/docs/strcount.html#syntax"
  },"2908": {
    "doc": "strcount",
    "title": "definition",
    "content": "strcount(source, key) results in a uint32 data-item with the number of occurences of the substring key in the argument source. ",
    "url": "/docs/strcount.html#definition",
    
    "relUrl": "/docs/strcount.html#definition"
  },"2909": {
    "doc": "strcount",
    "title": "description",
    "content": "The strcount function is case sensitive. ",
    "url": "/docs/strcount.html#description",
    
    "relUrl": "/docs/strcount.html#description"
  },"2910": {
    "doc": "strcount",
    "title": "applies to",
    "content": "data item source and key with string value-type . ",
    "url": "/docs/strcount.html#applies-to",
    
    "relUrl": "/docs/strcount.html#applies-to"
  },"2911": {
    "doc": "strcount",
    "title": "conditions",
    "content": "The domain-unit of both argument must match or be void (literals or parameter can be compared to data items of any domain unit). ",
    "url": "/docs/strcount.html#conditions",
    
    "relUrl": "/docs/strcount.html#conditions"
  },"2912": {
    "doc": "strcount",
    "title": "example",
    "content": "attribute&lt;uint32&gt; strcountA (ADomain) := strcount(A, 't'); . | A | strcountA | . | ‘Test’ | 1 | . | ‘88hallo99’ | 0 | . | ’+)’ | 0 | . | ‘twee woorden’ | 1 | . | ’ test met spatie’ | 4 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/strcount.html#example",
    
    "relUrl": "/docs/strcount.html#example"
  },"2913": {
    "doc": "strcount",
    "title": "strcount",
    "content": "string-functions strcount . ",
    "url": "/docs/strcount.html",
    
    "relUrl": "/docs/strcount.html"
  },"2914": {
    "doc": "string-functions",
    "title": "string-functions",
    "content": "String operators-and-functions operate on data-item with a string value-type like left or strcount . | concatenation_(+) - combine two or more string values | strlen - get the amount of characters in a string value | strlen64 - same as strlen, but return the value as a uint64 value | substr - extract a part of a string value | left - extract a part of string value starting from the left | right - extract a part of a string value starting from the right | strpos - get the first character position of a specific character | strrpos - get the first character position of a specific character, starting from the right | strcount - count the number a of occurrences of a substring in a string value | sort_str - sort string values in ascending order | . | quote - add single quotes around a string value | unquote - remove single quotes from a string value | dquote - add double quotes around a string value | undquote - remove double quotes from a string value | . | uppercase - convert a string value to uppercases | lowercase - convert a string value to lowercases | replace - replace a substring within a string value | replace_value - replace a string value with a string value that fully matches | repeat - repeat a string value a specific number of times | trim - remove spaces before and after non-space characters in a string value | ltrim - remove spaces from the left until non-space characters in a string value | rtrim - remove spaces from the right until non-space characters in a string value | . | aslist - aggregates string values to a new string data item with a configurable character separator | asexprlist - aggregates string values to a new string data item, semicolon delimited and single quoted | asitemlist - aggregates string values to a new string data item, comma delimited | asdatastring - aggregates string values to a new string parameter, comma delimited and single quoted | . | expand - expand a placeholder | from_utf - convert a UTF-8 formatted string to ASCII characters | asitemname - converts a string to a valid GeoDMS tree-item-name | . ",
    "url": "/docs/string-functions.html",
    
    "relUrl": "/docs/string-functions.html"
  },"2915": {
    "doc": "string",
    "title": "concept",
    "content": ". | string is a string value-type. | string() is a function converting data-item or unit of other value types to the string value type. | . This page describes the string() function. ",
    "url": "/docs/string.html#concept",
    
    "relUrl": "/docs/string.html#concept"
  },"2916": {
    "doc": "string",
    "title": "syntax",
    "content": ". | string(a) | . ",
    "url": "/docs/string.html#syntax",
    
    "relUrl": "/docs/string.html#syntax"
  },"2917": {
    "doc": "string",
    "title": "definition",
    "content": ". | string(a) results in a string data-item converted from tree-item a. | . ",
    "url": "/docs/string.html#definition",
    
    "relUrl": "/docs/string.html#definition"
  },"2918": {
    "doc": "string",
    "title": "applies to",
    "content": ". | data item or unit with Numeric, uint2, uint4, or bool value type | . ",
    "url": "/docs/string.html#applies-to",
    
    "relUrl": "/docs/string.html#applies-to"
  },"2919": {
    "doc": "string",
    "title": "example",
    "content": "attribute&lt;string&gt; stringA (ADomain) := string(A); . | A(int32) | stringA | . | 0 | ‘0’ | . | 1 | ‘1’ | . | 256 | ‘256’ | . | -100 | ‘-100’ | . | 9999 | ‘-9999’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/string.html#example",
    
    "relUrl": "/docs/string.html#example"
  },"2920": {
    "doc": "string",
    "title": "string",
    "content": "conversion-functions String . ",
    "url": "/docs/string.html",
    
    "relUrl": "/docs/string.html"
  },"2921": {
    "doc": "strlen",
    "title": "syntax",
    "content": ". | strlen(string_dataitem) | . ",
    "url": "/docs/strlen.html#syntax",
    
    "relUrl": "/docs/strlen.html#syntax"
  },"2922": {
    "doc": "strlen",
    "title": "definition",
    "content": "strlen(string_dataitem) results in an uint32 data-item with the length of each string value of argument string_dataitem. ",
    "url": "/docs/strlen.html#definition",
    
    "relUrl": "/docs/strlen.html#definition"
  },"2923": {
    "doc": "strlen",
    "title": "applies to",
    "content": "data-item string_dataitem with string value-type . ",
    "url": "/docs/strlen.html#applies-to",
    
    "relUrl": "/docs/strlen.html#applies-to"
  },"2924": {
    "doc": "strlen",
    "title": "example",
    "content": "attribute&lt;uint32&gt; strlenA (ADomain) := strlen(A); . | A | strlenA | . | ‘Test’ | 4 | . | ‘88hallo99’ | 9 | . | ’+)’ | 2 | . | ‘twee woorden’ | 12 | . | ’ test met spatie’ | 16 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/strlen.html#example",
    
    "relUrl": "/docs/strlen.html#example"
  },"2925": {
    "doc": "strlen",
    "title": "see also",
    "content": ". | strlen64 | . ",
    "url": "/docs/strlen.html#see-also",
    
    "relUrl": "/docs/strlen.html#see-also"
  },"2926": {
    "doc": "strlen",
    "title": "strlen",
    "content": "string-functions strlen(gth) . ",
    "url": "/docs/strlen.html",
    
    "relUrl": "/docs/strlen.html"
  },"2927": {
    "doc": "strlen64",
    "title": "syntax",
    "content": ". | strlen64(string_dataitem) | . ",
    "url": "/docs/strlen64.html#syntax",
    
    "relUrl": "/docs/strlen64.html#syntax"
  },"2928": {
    "doc": "strlen64",
    "title": "definition",
    "content": "strlen64(string_dataitem) is a variant of the strlen function, resulting in an uint64 data-item. ",
    "url": "/docs/strlen64.html#definition",
    
    "relUrl": "/docs/strlen64.html#definition"
  },"2929": {
    "doc": "strlen64",
    "title": "since version",
    "content": "7.184 . ",
    "url": "/docs/strlen64.html#since-version",
    
    "relUrl": "/docs/strlen64.html#since-version"
  },"2930": {
    "doc": "strlen64",
    "title": "see also",
    "content": ". | strlen | . ",
    "url": "/docs/strlen64.html#see-also",
    
    "relUrl": "/docs/strlen64.html#see-also"
  },"2931": {
    "doc": "strlen64",
    "title": "strlen64",
    "content": "string-functions strlen(gth)64 . ",
    "url": "/docs/strlen64.html",
    
    "relUrl": "/docs/strlen64.html"
  },"2932": {
    "doc": "strpos",
    "title": "syntax",
    "content": ". | strpos(source, key) | . ",
    "url": "/docs/strpos.html#syntax",
    
    "relUrl": "/docs/strpos.html#syntax"
  },"2933": {
    "doc": "strpos",
    "title": "description",
    "content": "The strpos(source, key) function results in the character offset (position) of the first occurrence of the key argument value in the source argument, starting from the begin of the string value. If no key value occurs as a substring in the source argument, the resulting value is null. The strpos function is case sensitive. ",
    "url": "/docs/strpos.html#description",
    
    "relUrl": "/docs/strpos.html#description"
  },"2934": {
    "doc": "strpos",
    "title": "condition",
    "content": "The domain-unit of both arguments must match or be void (literals or parameter can be combined with data-item of any domain unit). ",
    "url": "/docs/strpos.html#condition",
    
    "relUrl": "/docs/strpos.html#condition"
  },"2935": {
    "doc": "strpos",
    "title": "example",
    "content": "attribute&lt;uint32&gt; strposA (ADomain) := strpos(A, 't'); . | A | strposA | . | ‘Test’ | 3 | . | ‘88hallo99’ | null | . | ’+)’ | null | . | ‘twee woorden’ | 0 | . | ’ test met spatie’ | 1 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/strpos.html#example",
    
    "relUrl": "/docs/strpos.html#example"
  },"2936": {
    "doc": "strpos",
    "title": "see also",
    "content": ". | strrpos | . ",
    "url": "/docs/strpos.html#see-also",
    
    "relUrl": "/docs/strpos.html#see-also"
  },"2937": {
    "doc": "strpos",
    "title": "strpos",
    "content": "string-functions strpos(ition) . ",
    "url": "/docs/strpos.html",
    
    "relUrl": "/docs/strpos.html"
  },"2938": {
    "doc": "strrpos",
    "title": "syntax",
    "content": ". | strrpos(source, key) | . ",
    "url": "/docs/strrpos.html#syntax",
    
    "relUrl": "/docs/strrpos.html#syntax"
  },"2939": {
    "doc": "strrpos",
    "title": "description",
    "content": "The strrpos(source, key) function results in the character offset (position) of the first occurence of the key argument value in the source argument, starting from the end of the string value. If no key value occurs as a substring in the source argument, the resulting value is null. The strrpos function is case sensitive. ",
    "url": "/docs/strrpos.html#description",
    
    "relUrl": "/docs/strrpos.html#description"
  },"2940": {
    "doc": "strrpos",
    "title": "condition",
    "content": "The domain-unit of both arguments must match or be void (literals or parameter can be combined with data-item of any domain unit). ",
    "url": "/docs/strrpos.html#condition",
    
    "relUrl": "/docs/strrpos.html#condition"
  },"2941": {
    "doc": "strrpos",
    "title": "example",
    "content": "attribute&lt;uint32&gt; strrposA (ADomain) := strrpos(A, 't'); . | A | strposA | . | ‘Test’ | 0 | . | ‘88hallo99’ | null | . | ’+)’ | null | . | ‘twee woorden’ | 11 | . | ’ test met spatie’ | 2 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/strrpos.html#example",
    
    "relUrl": "/docs/strrpos.html#example"
  },"2942": {
    "doc": "strrpos",
    "title": "see also",
    "content": ". | strpos | . ",
    "url": "/docs/strrpos.html#see-also",
    
    "relUrl": "/docs/strrpos.html#see-also"
  },"2943": {
    "doc": "strrpos",
    "title": "strrpos",
    "content": "string-functions strr(ight)pos(ition) . ",
    "url": "/docs/strrpos.html",
    
    "relUrl": "/docs/strrpos.html"
  },"2944": {
    "doc": "sub-(difference)",
    "title": "syntax",
    "content": ". | sub(polygon_data_itemA, polygon_data_itemB) | polygon_data_itemA - polygon_data_itemB | . ",
    "url": "/docs/sub-(difference).html#syntax",
    
    "relUrl": "/docs/sub-(difference).html#syntax"
  },"2945": {
    "doc": "sub-(difference)",
    "title": "definition",
    "content": "sub(polygon_data_itemA, polygon_data_itemB) or polygon_data_itemA . | polygon_data_itemB results in a new polygon data-item with the difference of the two argument: polygon_data_itemA and polygon_data_itemB | . The left part of the figure illustrates the arguments: polygon_data_itemA and polygon_data_itemB. The resulting polygon (right side of the image) is the original square (polygon_data_itemA) minus the ditstrict polygon_data_itemB. ",
    "url": "/docs/sub-(difference).html#definition",
    
    "relUrl": "/docs/sub-(difference).html#definition"
  },"2946": {
    "doc": "sub-(difference)",
    "title": "description",
    "content": "The sub function can for example be used to create a mask polygon. ",
    "url": "/docs/sub-(difference).html#description",
    
    "relUrl": "/docs/sub-(difference).html#description"
  },"2947": {
    "doc": "sub-(difference)",
    "title": "applies to",
    "content": "data items polygon_data_itemA and polygon_data_itemB with an ipoint or spoint value-type. ",
    "url": "/docs/sub-(difference).html#applies-to",
    
    "relUrl": "/docs/sub-(difference).html#applies-to"
  },"2948": {
    "doc": "sub-(difference)",
    "title": "conditions",
    "content": ". | The composition of the arguments items needs to be polygon. | The domain of the arguments must match of be void. | . ",
    "url": "/docs/sub-(difference).html#conditions",
    
    "relUrl": "/docs/sub-(difference).html#conditions"
  },"2949": {
    "doc": "sub-(difference)",
    "title": "since version",
    "content": "7.112 . ",
    "url": "/docs/sub-(difference).html#since-version",
    
    "relUrl": "/docs/sub-(difference).html#since-version"
  },"2950": {
    "doc": "sub-(difference)",
    "title": "example",
    "content": "parameter&lt;ipoint&gt; geometry (poly) := square/geometry[0] - union_polygon/geometry; . ",
    "url": "/docs/sub-(difference).html#example",
    
    "relUrl": "/docs/sub-(difference).html#example"
  },"2951": {
    "doc": "sub-(difference)",
    "title": "see also",
    "content": ". | sub | mul-(overlap) | . ",
    "url": "/docs/sub-(difference).html#see-also",
    
    "relUrl": "/docs/sub-(difference).html#see-also"
  },"2952": {
    "doc": "sub-(difference)",
    "title": "sub-(difference)",
    "content": "geometric-functions sub (difference) . ",
    "url": "/docs/sub-(difference).html",
    
    "relUrl": "/docs/sub-(difference).html"
  },"2953": {
    "doc": "sub-byte-element",
    "title": "sub-byte-element",
    "content": ". | Sub Byte Elements are values of type bool, uint2, or uint4, which require less than a byte for storage. | All Sub Byte Elements are Unsigned (aka non-negative). | Attributes store their values in arrays. Arrays of Sub Byte Elements are a multiple of 4 bytes long (DWORD) which each store 32 / NrOfBitsPerValue values per DWORD. | All units of Sub Byte Element Values have a pre-defined cardinality of 2NrBits, which cannot be overridden, their first value is 0. | There is no extra undefined value indicator for Sub Byte Elements. | . ",
    "url": "/docs/sub-byte-element.html",
    
    "relUrl": "/docs/sub-byte-element.html"
  },"2954": {
    "doc": "sub",
    "title": "syntax",
    "content": ". | sub(a, b) | a - b | . ",
    "url": "/docs/sub.html#syntax",
    
    "relUrl": "/docs/sub.html#syntax"
  },"2955": {
    "doc": "sub",
    "title": "definition",
    "content": "sub(a, b) or a - b results in the element-by-element subtraction of the values of data-item b from the corresponding values of data item a. If the result of the subtraction exceeds the MinValue or MaxValue of the value-type, an error is generated. Use the sub_or_null function if a null value is requested in these cases. ",
    "url": "/docs/sub.html#definition",
    
    "relUrl": "/docs/sub.html#definition"
  },"2956": {
    "doc": "sub",
    "title": "applies to",
    "content": "Data items with Numeric or Point value-type . ",
    "url": "/docs/sub.html#applies-to",
    
    "relUrl": "/docs/sub.html#applies-to"
  },"2957": {
    "doc": "sub",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void (literals or parameter can be subtracted from data items of any domain). | argument must have matching: . | value-type | metric | . | . ",
    "url": "/docs/sub.html#conditions",
    
    "relUrl": "/docs/sub.html#conditions"
  },"2958": {
    "doc": "sub",
    "title": "example",
    "content": "1. attribute&lt;float32&gt; AminB (ADomain) := sub(A, B); 2. attribute&lt;float32&gt; AminB (ADomain) := A - B; . | A | B | AminB | . | 0 | 1 | -1 | . | 1 | -1 | 2 | . | -2 | 2 | -4 | . | 3.6 | 1.44 | 2.16 | . | 999 | 111 | 888 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/sub.html#example",
    
    "relUrl": "/docs/sub.html#example"
  },"2959": {
    "doc": "sub",
    "title": "See also",
    "content": ". | sub_or_null | sub-(difference) | . ",
    "url": "/docs/sub.html#see-also",
    
    "relUrl": "/docs/sub.html#see-also"
  },"2960": {
    "doc": "sub",
    "title": "sub",
    "content": "arithmetic-functions subtract(-) . ",
    "url": "/docs/sub.html",
    
    "relUrl": "/docs/sub.html"
  },"2961": {
    "doc": "sub_or_null",
    "title": "syntax",
    "content": ". | sub_or_null(a, b) | . ",
    "url": "/docs/sub_or_null.html#syntax",
    
    "relUrl": "/docs/sub_or_null.html#syntax"
  },"2962": {
    "doc": "sub_or_null",
    "title": "definition",
    "content": "sub_or_null(a, b) results in the element-by-element subtraction of corresponding values of the data-item: a and b. If the result of the addition exceeds the MinValue or MaxValue of the value-type, the sub_or_null function results in the value null. ",
    "url": "/docs/sub_or_null.html#definition",
    
    "relUrl": "/docs/sub_or_null.html#definition"
  },"2963": {
    "doc": "sub_or_null",
    "title": "applies to",
    "content": "Data items with Numeric, Point, or String value-type. ",
    "url": "/docs/sub_or_null.html#applies-to",
    
    "relUrl": "/docs/sub_or_null.html#applies-to"
  },"2964": {
    "doc": "sub_or_null",
    "title": "conditions",
    "content": ". | domain-unit of the argument must match or be void, (literals or parameter can be added to data items of any domain). | Arguments must have matching: . | value type | metric | . | . ",
    "url": "/docs/sub_or_null.html#conditions",
    
    "relUrl": "/docs/sub_or_null.html#conditions"
  },"2965": {
    "doc": "sub_or_null",
    "title": "example",
    "content": "1. attribute&lt;uint8&gt; sub_or_null_AB (ADomain) := sub_or_null(A, B); . | A | B | sub_or_null_AB | . | 0 | 1 | null | . | 1 | null | null | . | 200 | 54 | 146 | . | 50 | 100 | null | . | 222 | 111 | 111 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/sub_or_null.html#example",
    
    "relUrl": "/docs/sub_or_null.html#example"
  },"2966": {
    "doc": "sub_or_null",
    "title": "see also",
    "content": ". | sub | . ",
    "url": "/docs/sub_or_null.html#see-also",
    
    "relUrl": "/docs/sub_or_null.html#see-also"
  },"2967": {
    "doc": "sub_or_null",
    "title": "sub_or_null",
    "content": "arithmetic-functions sub_or_null . ",
    "url": "/docs/sub_or_null.html",
    
    "relUrl": "/docs/sub_or_null.html"
  },"2968": {
    "doc": "subexpression",
    "title": "reasons",
    "content": "This splitting up of expressions in their atomic steps is done for two reasons: . | If in another expression the result of the subexpression: A + B is used too, for example in an expression: A + B + D, the result of the subexpression A + B can be re-used. | Expressions can refer to a large number of data-item. If all these data items need to be loaded and kept in internal memory, the size of this memory can become a problem. By dividing expression in atomic steps, this problem can be solved. | . ",
    "url": "/docs/subexpression.html#reasons",
    
    "relUrl": "/docs/subexpression.html#reasons"
  },"2969": {
    "doc": "subexpression",
    "title": "subexpression",
    "content": "The GeoDMS splits expression into atomic steps, called subexpressions. Assume the following expression is configured: A + B + C. The GeoDMS first calculates the result of the subexpression: A + B. Next, item C is added to the intermediary result. ",
    "url": "/docs/subexpression.html",
    
    "relUrl": "/docs/subexpression.html"
  },"2970": {
    "doc": "subitem",
    "title": "Subitem() function",
    "content": "The subitem function can be used to refer to a tree-item, see the example: . example . attribute&lt;uint32&gt; att (ADomain) := subitem(unique/Regions,'Values'); . results in a reference to the values subitem of unique/Regions . ",
    "url": "/docs/subitem.html#subitem-function",
    
    "relUrl": "/docs/subitem.html#subitem-function"
  },"2971": {
    "doc": "subitem",
    "title": "subitem",
    "content": "The GeoDMS uses a hierarchical structure for tree-item-name tree-item in a configuration. The subitems of item A are the items one level lower, for which tree item A is the parent-item. The leaves in the tree of a configuration have no subitems. Sometimes a distinction is made between direct and indirect subitems. Direct subitems are a synonym for subitems as defined above. Indirect subitems are subitems at lower levels. ",
    "url": "/docs/subitem.html",
    
    "relUrl": "/docs/subitem.html"
  },"2972": {
    "doc": "subitem_propvalues",
    "title": "syntax",
    "content": ". | Subitem_PropValues(item, property) | Subitem_PropValues(item, attribute) | . ",
    "url": "/docs/subitem_propvalues.html#syntax",
    
    "relUrl": "/docs/subitem_propvalues.html#syntax"
  },"2973": {
    "doc": "subitem_propvalues",
    "title": "definition",
    "content": ". | Subitem_PropValues(item, property) results in a new uint32 domain-unit with a string attribute containing the property values of the direct subitem of the item argument. The name of this attribute is the name of the property. | Subitem_PropValues(item, attribute) results in a new uint32 domain unit with a set of string attributes containing multiple property values of the direct subitems of the item argument. The names of the resulting attributes are the names of the properties. | . ",
    "url": "/docs/subitem_propvalues.html#definition",
    
    "relUrl": "/docs/subitem_propvalues.html#definition"
  },"2974": {
    "doc": "subitem_propvalues",
    "title": "applies to",
    "content": ". | argument item can be any tree-item. | argument property needs to be a valid property name, the list of all properties can be found property. | argument attribute needs to a string data-item. | . ",
    "url": "/docs/subitem_propvalues.html#applies-to",
    
    "relUrl": "/docs/subitem_propvalues.html#applies-to"
  },"2975": {
    "doc": "subitem_propvalues",
    "title": "since version",
    "content": "7.102 . ",
    "url": "/docs/subitem_propvalues.html#since-version",
    
    "relUrl": "/docs/subitem_propvalues.html#since-version"
  },"2976": {
    "doc": "subitem_propvalues",
    "title": "example",
    "content": "1. container PropValueSource { parameter&lt;string&gt; label:['ABC']; parameter&lt;uint32&gt; sumNrInhabitants (ADomain): [2,5,3,2,0]; unit&lt;uint32&gt; domainA: nrofrows = 9; unit&lt;float64&gt; valuesB := baseunit('b', float64); container sublevel { attribute&lt;uint32&gt; meanNrInhabitants (PropValueSource): [1,2,1,1,0]; } } unit&lt;uint32&gt; name := SubItem_PropValues(PropValueSource,'name'); unit&lt;uint32&gt; expr := SubItem_PropValues(PropValueSource,'expr'); . 2. unit&lt;uint32&gt; property : nrofrows = 2 { parameter&lt;string&gt; name: ['name','expr']; } unit&lt;uint32&gt; name_and_expr := SubItem_PropValues(PropValueSource, property/name); . | name | . | label | . | sumNrInhabitants | . | domainA | . | valuesB | . | sublevel | . domain name, nr of rows = 5 . | expr | . |   | . |   | . |   | . | baseunit(‘b’,float64) | . |   | . domain expr, nr of rows = 5 . | name | expr | . | label |   | . | sumNrInhabitants |   | . | domainA |   | . | valuesB | baseunit(‘b’,float64) | . | sublevel |   | . domain name_and_expr, nr of rows = 5 . ",
    "url": "/docs/subitem_propvalues.html#example",
    
    "relUrl": "/docs/subitem_propvalues.html#example"
  },"2977": {
    "doc": "subitem_propvalues",
    "title": "see also",
    "content": ". | propvalue | inherited_propvalues | subtree_propvalues | . ",
    "url": "/docs/subitem_propvalues.html#see-also",
    
    "relUrl": "/docs/subitem_propvalues.html#see-also"
  },"2978": {
    "doc": "subitem_propvalues",
    "title": "subitem_propvalues",
    "content": "metascript-functions Subitem_PropValues . ",
    "url": "/docs/subitem_propvalues.html",
    
    "relUrl": "/docs/subitem_propvalues.html"
  },"2979": {
    "doc": "subset",
    "title": "syntax",
    "content": ". | subset(condition) | . ",
    "url": "/docs/subset.html#syntax",
    
    "relUrl": "/docs/subset.html#syntax"
  },"2980": {
    "doc": "subset",
    "title": "definition",
    "content": "subset(condition) results in a new domain-unit with a relation to the entries of the domain unit of the condition, for which the values of the condition argument are true. The resulting value-type of the domain unit is derived from the domain unit of the condition argument: . | uint32 for conditions with uint32, boolean, spoint or wpoint value-type | uint8 for conditions with uint8 value type | uint16 for conditions with uint16 value type | uint64 for conditions with uint64, ipoint or upoint value type | . The explicit subset_uint32, subset_uint16 and subset_uint8 functions can be used in the same manner as the subset function, to create a new domain unit with an explicit value type. ",
    "url": "/docs/subset.html#definition",
    
    "relUrl": "/docs/subset.html#definition"
  },"2981": {
    "doc": "subset",
    "title": "description",
    "content": "The subset function generates a subitem, named Nr_OrgEntity. This data-item contains the relation towards the domain unit of the condition argument. The Nr_OrgEntity data-item can be used in a lookup function to relate attribute to the new domain unit, see the example. See this selection-operator-comparison for when to choose which selection operator is feasable. ",
    "url": "/docs/subset.html#description",
    
    "relUrl": "/docs/subset.html#description"
  },"2982": {
    "doc": "subset",
    "title": "applies to",
    "content": ". | condition must be a boolean attribute or subexpression resulting in boolean values. | . ",
    "url": "/docs/subset.html#applies-to",
    
    "relUrl": "/docs/subset.html#applies-to"
  },"2983": {
    "doc": "subset",
    "title": "selecting attributes of a table",
    "content": "The subset function results in a new domain unit. Attributes for this new domain need to be configured explicitly, see the example. It is possible to configure all attributes (e.g. read from a .csv file) for the Subset domain unit with a script example presented below in the example, selecting all attributes paragraph. ",
    "url": "/docs/subset.html#selecting-attributes-of-a-table",
    
    "relUrl": "/docs/subset.html#selecting-attributes-of-a-table"
  },"2984": {
    "doc": "subset",
    "title": "example",
    "content": "unit&lt;uint32&gt; ZHCities := subset(City/RegionCode == 200) { attribute&lt;string&gt; name := City/Name[Nr_OrgEntity]; } . | City/RegionCode | City/Name | . | 100 | Amsterdam | . | 200 | Rotterdam | . | 300 | Utrecht | . | 200 | Den Haag | . | 400 | Eindhoven | . | null | Haarlem | . | 400 | Tilburg | . domain City, nr of rows = 7 . | ZHCities/nr_OrgEntity | ZHCities/name | . | 1 | Rotterdam | . | 3 | Den Haag | . domain ZHCities, nr of rows = 2 . ",
    "url": "/docs/subset.html#example",
    
    "relUrl": "/docs/subset.html#example"
  },"2985": {
    "doc": "subset",
    "title": "example, selecting all attributes",
    "content": "For this purpose we advice the new select_with_attr_by_org_rel or select_with_attr_by_cond functions. ",
    "url": "/docs/subset.html#example-selecting-all-attributes",
    
    "relUrl": "/docs/subset.html#example-selecting-all-attributes"
  },"2986": {
    "doc": "subset",
    "title": "see also",
    "content": ". | select | select_data | . ",
    "url": "/docs/subset.html#see-also",
    
    "relUrl": "/docs/subset.html#see-also"
  },"2987": {
    "doc": "subset",
    "title": "subset",
    "content": "relational-functions subset . Starting form version 8.6.0, we advice to use the select_with_attr_by_org_rel or select_with_attr_by_cond functions in stead of the subset function, for 2 reasons: - it is easier to configure new attributes for the resulting domain. - the select_with_attr_by_org_rel function results in a subitem org_rel, meeting our naming conventions. In the future the subset function becomes obsolete. ",
    "url": "/docs/subset.html",
    
    "relUrl": "/docs/subset.html"
  },"2988": {
    "doc": "substr",
    "title": "syntax",
    "content": ". | substr(string_dataitem, startposition, length) | substr(string_dataitem, startposition) | . ",
    "url": "/docs/substr.html#syntax",
    
    "relUrl": "/docs/substr.html#syntax"
  },"2989": {
    "doc": "substr",
    "title": "definition",
    "content": ". | substr(string_dataitem, startposition, length) results in a substring of string_dataitem with the number of characters of the length argument, starting from the startposition argument. | substr(string_dataitem, startposition) results in a substring of string_dataitem with all characters from the startposition argument. | . ",
    "url": "/docs/substr.html#definition",
    
    "relUrl": "/docs/substr.html#definition"
  },"2990": {
    "doc": "substr",
    "title": "applies to",
    "content": ". | data-item string_dataitem with string value-type | literal or parameter startposition with uint32 value type | literal or parameter length with uint32 value type | . ",
    "url": "/docs/substr.html#applies-to",
    
    "relUrl": "/docs/substr.html#applies-to"
  },"2991": {
    "doc": "substr",
    "title": "since version",
    "content": ". | substr(string_dataitem, startposition, length) : 5.15 | substr(string_dataitem, startposition) : 7.142 | . ",
    "url": "/docs/substr.html#since-version",
    
    "relUrl": "/docs/substr.html#since-version"
  },"2992": {
    "doc": "substr",
    "title": "example",
    "content": "attribute&lt;string&gt; substrA (ADomain) := substr(A, 1, 3); attribute&lt;string&gt; substr2A (ADomain) := substr(A, 1); . | A | substrA | substr2A | . | ‘Test’ | ‘est’ | ‘est’ | . | ‘88hallo99’ | ‘8ha’ | ‘8hallo99’ | . | ’+)’ | ’)’ | ’)’ | . | ‘twee woorden’ | ‘wee’ | ‘wee woorden’ | . | ’ test met spatie’ | ‘tes’ | ‘test met spatie’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/substr.html#example",
    
    "relUrl": "/docs/substr.html#example"
  },"2993": {
    "doc": "substr",
    "title": "see also",
    "content": ". | left | right | . ",
    "url": "/docs/substr.html#see-also",
    
    "relUrl": "/docs/substr.html#see-also"
  },"2994": {
    "doc": "substr",
    "title": "substr",
    "content": "string-functions substr(ing) . ",
    "url": "/docs/substr.html",
    
    "relUrl": "/docs/substr.html"
  },"2995": {
    "doc": "subtree_propvalues",
    "title": "syntax",
    "content": ". | SubTree_PropValues(item, property) | SubTree_PropValues(item, attribute) | . ",
    "url": "/docs/subtree_propvalues.html#syntax",
    
    "relUrl": "/docs/subtree_propvalues.html#syntax"
  },"2996": {
    "doc": "subtree_propvalues",
    "title": "definition",
    "content": ". | SubTree_PropValues(item, property) results in a new uint32 domain-unit with a string attribute containing the property values of the subitem of the item argument. The name of this attribute is the name of the property. | SubTree_PropValues(item, attribute) results in a new uint32 domain unit with a set of string attributes containing multiple property values of the subitems of the item argument. The names of the resulting attributes are the names of the properties. | . ",
    "url": "/docs/subtree_propvalues.html#definition",
    
    "relUrl": "/docs/subtree_propvalues.html#definition"
  },"2997": {
    "doc": "subtree_propvalues",
    "title": "applies to",
    "content": ". | argument tree-item can be any tree item. | argument property needs to be a valid property name, the list of all properties can be found here. | argument attribute needs to a string data-item. | . ",
    "url": "/docs/subtree_propvalues.html#applies-to",
    
    "relUrl": "/docs/subtree_propvalues.html#applies-to"
  },"2998": {
    "doc": "subtree_propvalues",
    "title": "since version",
    "content": "7.103 . ",
    "url": "/docs/subtree_propvalues.html#since-version",
    
    "relUrl": "/docs/subtree_propvalues.html#since-version"
  },"2999": {
    "doc": "subtree_propvalues",
    "title": "example",
    "content": "1. container PropValueSource { parameter&lt;string&gt; label : ['ABC']; parameter&lt;uint32&gt; sumNrInhabitants (ADomain): [2,5,3,2,0]; unit&lt;uint32&gt; domainA: nrofrows = 9; unit&lt;float64&gt; valuesB:= baseunit('b',float64); container sublevel { attribute&lt;uint32&gt; meanNrInhabitants(PropValueSource): [1,2,1,1,0]; } } unit&lt;uint32&gt; name := SubTree_PropValues(PropValueSource,'name'); unit&lt;uint32&gt; expr := SubTree_PropValues(PropValueSource,'Expr'); . 2. unit&lt;uint32&gt; property : nrofrows = 2 { parameter&lt;string&gt; name: ['name','expr']; } unit&lt;uint32&gt; name_and_expr := SubTree_PropValues(PropValueSource, property/name); . | name | . | label | . | sumNrInhabitants | . | domainA | . | valuesB | . | sublevel | . | meanNrInhabitants | . domain name, nr of rows = 6 . | expr | . |   | . |   | . |   | . | baseunit(‘b’,float64) | . |   | . |   | . domain expr, nr of rows = 6 . | name | expr | . | label |   | . | sumNrInhabitants |   | . | domainA |   | . | valuesB | baseunit(‘b’,float64) | . | sublevel |   | . | meanNrInhabitants |   | . domain name_and_expr, nr of rows = 6 . ",
    "url": "/docs/subtree_propvalues.html#example",
    
    "relUrl": "/docs/subtree_propvalues.html#example"
  },"3000": {
    "doc": "subtree_propvalues",
    "title": "see also",
    "content": ". | propvalue | subitem_propvalues | inherited_propvalues | . ",
    "url": "/docs/subtree_propvalues.html#see-also",
    
    "relUrl": "/docs/subtree_propvalues.html#see-also"
  },"3001": {
    "doc": "subtree_propvalues",
    "title": "subtree_propvalues",
    "content": "metascript-functions SubTree_PropValues . ",
    "url": "/docs/subtree_propvalues.html",
    
    "relUrl": "/docs/subtree_propvalues.html"
  },"3002": {
    "doc": "suitabilitymaps",
    "title": "definition",
    "content": "SuitabilityMaps is the third argument of the discrete_alloc function. This argument needs to refer to container with as subitem attribute for each land use type. These attributes define the suitability for the land use type for each land unit. It is advised to configure a monetary values-unit (e.g. EuroPerHa) for these attributes. The domain-unit of these attributes need to be the LandUnitDomain. ",
    "url": "/docs/suitabilitymaps.html#definition",
    
    "relUrl": "/docs/suitabilitymaps.html#definition"
  },"3003": {
    "doc": "suitabilitymaps",
    "title": "applies",
    "content": "The values unit of the each SuitabilityMap with value type:int32 . ",
    "url": "/docs/suitabilitymaps.html#applies",
    
    "relUrl": "/docs/suitabilitymaps.html#applies"
  },"3004": {
    "doc": "suitabilitymaps",
    "title": "conditions",
    "content": "The names of the SuitabilityMap attributes need to match with the values of the TypeNames argument. ",
    "url": "/docs/suitabilitymaps.html#conditions",
    
    "relUrl": "/docs/suitabilitymaps.html#conditions"
  },"3005": {
    "doc": "suitabilitymaps",
    "title": "example",
    "content": "container source {    container Suitability    {      attribute&lt;EurM2&gt; Living (GridDomain):         [         1 , 2,  5,  4,  3, 1,         2,  5,  8,  9,  7, 3,         4, 10, 12, 13, 12, 6,         5, 11, 13, 14, 12, 6,         4,  9,  9,  5,  3, 2,         2,  2,  4,  3,  1, 1        ];        attribute&lt;EurM2&gt; Working (GridDomain):        [         1, 1, 2,  3,  4,  6,         2, 3, 4,  6,  8,  9,         2, 4, 9, 11, 12, 10,         1, 3, 5,  9, 10,  6,         2, 4, 5,  5,  3,  2,         1, 1, 2,  1,  1,  1        ];        attribute&lt;EurM2&gt; Nature (GridDomain):        [         3, 3, 3, 2, 2, 2,         3, 3, 2, 2, 2, 2,         3, 2, 1, 1, 1, 1,         3, 2, 1, 1 ,1, 2,         3, 3, 2, 1, 2, 2,         3, 3, 3, 3, 3, 3        ];     } } container Compacted {    unit&lt;uint32&gt; ADomain := select_with_org_rel(FreeLand = True), label = \"allocation domain\";    unit&lt;uint32&gt; SuitabilityMaps := Adomain    {       attribute&lt;EurM2&gt; Living  := Suitability/Living[ADomain/org_rel];       attribute&lt;EurM2&gt; Working := Suitability/Working[ADomain/org_rel];       attribute&lt;EurM2&gt; Nature  := Suitability/Nature[ADomain/org_rel];     } } . ",
    "url": "/docs/suitabilitymaps.html#example",
    
    "relUrl": "/docs/suitabilitymaps.html#example"
  },"3006": {
    "doc": "suitabilitymaps",
    "title": "suitabilitymaps",
    "content": "allocation-functions, argument 3: SuitabilityMaps . ",
    "url": "/docs/suitabilitymaps.html",
    
    "relUrl": "/docs/suitabilitymaps.html"
  },"3007": {
    "doc": "sum",
    "title": "syntax",
    "content": ". | sum(a) | sum(a, relation) | | sum_x(a) or sum_x(a, relation) where x in {( | u)int(8 | 16 | 32 | 64), float64, (i | u | d)point } | . | . ",
    "url": "/docs/sum.html#syntax",
    
    "relUrl": "/docs/sum.html#syntax"
  },"3008": {
    "doc": "sum",
    "title": "definition",
    "content": ". | sum(a) results in a parameter with the sum of the non null values of attribute a. | sum(a, relation) results in an attribute with the sum of the non null values of attribute a, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation. | sum_x(a) or sum_x(a, relation) results in an attribute with the sum of the non null values of attribute a, optionally grouped by relation with as resulting value-type the value type x. | . ",
    "url": "/docs/sum.html#definition",
    
    "relUrl": "/docs/sum.html#definition"
  },"3009": {
    "doc": "sum",
    "title": "applies to",
    "content": ". | attribute a with Numeric value-type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/sum.html#applies-to",
    
    "relUrl": "/docs/sum.html#applies-to"
  },"3010": {
    "doc": "sum",
    "title": "conditions",
    "content": ". | The values unit of the resulting data item should match with regard to value type and metric with the values unit of attribute a. | The domain unit of argument a and relation must match. | . ",
    "url": "/docs/sum.html#conditions",
    
    "relUrl": "/docs/sum.html#conditions"
  },"3011": {
    "doc": "sum",
    "title": "example",
    "content": "parameter&lt;uint32&gt; sumNrInh := sum(City/NrInhabitants); result = 2250 parameter&lt;float64&gt; sum_float64NrInh := sum_float64(City/NrInhabitants); result = 2250 as float64 attribute&lt;uint32&gt; sumNrInhRegion (Region) := sum(City/NrInhabitants, City/Region_rel); . | City/NrInhabitants | City/Region_rel | . | 550 | 0 | . | 525 | 1 | . | 300 | 2 | . | 500 | 1 | . | 200 | 3 | . | 175 | null | . | null | 3 | . domain City, nr of rows = 7 . | sumNrInhRegion | . | 550 | . | 1025 | . | 300 | . | 200 | . | 0 | . domain Region, nr of rows = 5 . ",
    "url": "/docs/sum.html#example",
    
    "relUrl": "/docs/sum.html#example"
  },"3012": {
    "doc": "sum",
    "title": "sum",
    "content": "aggregation-functions sum . ",
    "url": "/docs/sum.html",
    
    "relUrl": "/docs/sum.html"
  },"3013": {
    "doc": "supplier",
    "title": "supplier",
    "content": "A supplier in GeoDMS terms is an argument / subexpression that needs to be calculated first, in order to calculate the expression of a tree-item. ",
    "url": "/docs/supplier.html",
    
    "relUrl": "/docs/supplier.html"
  },"3014": {
    "doc": "switchcase",
    "title": "syntax",
    "content": ". | switch(case1(condition, value),..,casen(condition, value), othervalue) | . ",
    "url": "/docs/switchcase.html#syntax",
    
    "relUrl": "/docs/switchcase.html#syntax"
  },"3015": {
    "doc": "switchcase",
    "title": "definition",
    "content": "Switch case results in different values depending on conditions, specified as different cases. Each case is specified with the syntax: case(condition, value). Cases are separated by commas. The last specified value (without condition) must be configured for the values that do not meet any condition (case other). ",
    "url": "/docs/switchcase.html#definition",
    
    "relUrl": "/docs/switchcase.html#definition"
  },"3016": {
    "doc": "switchcase",
    "title": "description",
    "content": "The switch case function is comparable to the select case function in Visual Basic. Use the iif function if only one case (and the case other) is needed. ",
    "url": "/docs/switchcase.html#description",
    
    "relUrl": "/docs/switchcase.html#description"
  },"3017": {
    "doc": "switchcase",
    "title": "applies to",
    "content": ". | condition data-item with bool value-type | value subexpression | . ",
    "url": "/docs/switchcase.html#applies-to",
    
    "relUrl": "/docs/switchcase.html#applies-to"
  },"3018": {
    "doc": "switchcase",
    "title": "conditions",
    "content": ". | The domain-unit of the conditions, values and the resulting data item must match or be void (literals or parameter can be combined with data items of any domain). | The values-unit of the values and the resulting data item must match. | . ",
    "url": "/docs/switchcase.html#conditions",
    
    "relUrl": "/docs/switchcase.html#conditions"
  },"3019": {
    "doc": "switchcase",
    "title": "example",
    "content": "attribute&lt;string&gt; switchA (ADomain) :=    switch(         case(Source/floatA &lt;  Source/floatB, 'A &lt; B')       , case(Source/floatA &gt;  Source/floatB, 'A &gt; B')       , case(Source/floatA == Source/floatB, 'A = B')       , 'Missing'    ); . | A(float32) | B(float32) | switchA | . | 0 | 2 | ‘A &lt; B’ | . | 1 | 2 | ‘A &lt; B’ | . | 2 | 2 | ‘A = B’ | . | 3 | 2 | ‘A &gt; B’ | . | null | 2 | ‘Missing’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/switchcase.html#example",
    
    "relUrl": "/docs/switchcase.html#example"
  },"3020": {
    "doc": "switchcase",
    "title": "see also",
    "content": ". | iif ( ? : ) | . ",
    "url": "/docs/switchcase.html#see-also",
    
    "relUrl": "/docs/switchcase.html#see-also"
  },"3021": {
    "doc": "switchcase",
    "title": "switchcase",
    "content": "logical-functions switchcase . ",
    "url": "/docs/switchcase.html",
    
    "relUrl": "/docs/switchcase.html"
  },"3022": {
    "doc": "symbolfont",
    "title": "own font",
    "content": "Windows fonts can be used to visualize point layers with symbols in a MapView. If no font is configured, the GeoDMS own font is used. This font is part of the GeoDMS installation. The font contains the following characters: . Use the SymbolIndex parameter to configure a character from this set, see the example: . example character in font . parameter&lt;int16&gt; SymbolIndex := 35s, DialogType = \"SymbolIndex\"; // results in character 35, a house symbol. ",
    "url": "/docs/symbolfont.html#own-font",
    
    "relUrl": "/docs/symbolfont.html#own-font"
  },"3023": {
    "doc": "symbolfont",
    "title": "other fonts",
    "content": "Other fonts can be used as well. They need to be configured with the SymbolFont parameter, see exanple: . parameter&lt;string&gt; SymbolFont := 'Tahoma' , DialogType = \"SymbolFont\"; parameter&lt;string&gt; SymbolFont := 'Wingdings', DialogType = \"SymbolFont\"; . Use e.g. MsWord &gt; Insert &gt; Symbols to find the SymbolIndex for a specific character in the installed font. ",
    "url": "/docs/symbolfont.html#other-fonts",
    
    "relUrl": "/docs/symbolfont.html#other-fonts"
  },"3024": {
    "doc": "symbolfont",
    "title": "see also",
    "content": ". | point-visualisation | . ",
    "url": "/docs/symbolfont.html#see-also",
    
    "relUrl": "/docs/symbolfont.html#see-also"
  },"3025": {
    "doc": "symbolfont",
    "title": "symbolfont",
    "content": " ",
    "url": "/docs/symbolfont.html",
    
    "relUrl": "/docs/symbolfont.html"
  },"3026": {
    "doc": "syncmode",
    "title": "syncmode",
    "content": "The SyncMode property is used to indicate which tables, views/queries and which attribute of these tables, views/queries or files need to be read from a database or file. The property has three possible values: . | AllTables (for databases only): All tables and views/queries from the database will be read. Default values and domain-unit will be used for non configured tables/views and attributes. The option is mainly useful for a quick overview of a whole database. If attributes will be used in calculations, it is advised to configure these attributes explicitly to use more meaningful values-unit and domain units. | Attr (default value): Only the tables and views/queries that are configured are read from the database. From these tables all attributes are read, also not configured attributes. | None: Only the configured attributes are read from the database. | . The default value for this property is: Attr . ",
    "url": "/docs/syncmode.html",
    
    "relUrl": "/docs/syncmode.html"
  },"3027": {
    "doc": "system-architecture",
    "title": "system architecture",
    "content": ". | (planned) parallel-processing-and-gpu-acceleration, Intel Performance Primitives, GDI (for the obsolete gdi_poly2grid function) | Full 64 bits support. | . ",
    "url": "/docs/system-architecture.html#system-architecture",
    
    "relUrl": "/docs/system-architecture.html#system-architecture"
  },"3028": {
    "doc": "system-architecture",
    "title": "system-architecture",
    "content": "expression fast calculations: System Architecture . ",
    "url": "/docs/system-architecture.html",
    
    "relUrl": "/docs/system-architecture.html"
  },"3029": {
    "doc": "system-requirements",
    "title": "hardware",
    "content": ". | processor: Intel Pentium or Pentium compatible | external storage: . | GeoDMS Program Files: 70 Mb | Project data: project specific | Local (for calculation results): project specific | . | screen: High resolution with supporting video card (dual-screen recommended) | . ",
    "url": "/docs/system-requirements.html#hardware",
    
    "relUrl": "/docs/system-requirements.html#hardware"
  },"3030": {
    "doc": "system-requirements",
    "title": "software",
    "content": ". | Windows Operating System, version 10 or later. | A configuration-file-editor | . ",
    "url": "/docs/system-requirements.html#software",
    
    "relUrl": "/docs/system-requirements.html#software"
  },"3031": {
    "doc": "system-requirements",
    "title": "system-requirements",
    "content": "On this page we document the minimal requirements for working with the GeoDMS software. Many GeoDMS projects calculate with large datasets. This often requires additional requirements in terms of internal memory and/or harddisk space. See for the additional requirements the project documentation. ",
    "url": "/docs/system-requirements.html",
    
    "relUrl": "/docs/system-requirements.html"
  },"3032": {
    "doc": "table-view",
    "title": "Table View",
    "content": "All data-item can be visualized in table view. One table presents data-item or a set of data items of the same domain-unit. The table is the default view for items that cannot be visualized in a map-view, these items can be: . | Data items for which the domain unit cannot be georeferenced, in the treeview indicated by the icon: | Containers with data items as subitems (first level subitems). The first data item of this container determines the domain unit of the Table, all data items that have this same common domain unit are added to the table. These items are indicated by the icon: | . example of a table for a selection of municipalities in a region . This table presents 4 columns (attribute for the domain-unit: cbs_gemeente (selection of 13 municipality). The name and cardinality of this domain is presented in the title of the view. For tables with attributes a first column is always automatically added, called id. This column presents the index-numbers of the domain (for parameter, such a column is not added). In this table, after the index number a name of the municipality is presented, between brackets). This can be achieved by configuring a label string attribute as subitem of the domain unit. In tables where relation to this domain are presented, these labels are also shown. ",
    "url": "/docs/table-view.html#table-view",
    
    "relUrl": "/docs/table-view.html#table-view"
  },"3033": {
    "doc": "table-view",
    "title": "activate table view",
    "content": "As with the map view, a new table can be activated for a tree item, or the tree item can be added to an already opened table (if this opened view is of the same domain unit as the requested data item). The following table shows the possible actions to visualize a tree item in a Table and the results of the actions. | action | no active table for the requested domain | active table for the requested domain | active table for other domain | . | Double click on active tree-item (if Table is default viewer, indicated by the or icon) | New Table window with the requested data item or all the subitems at the first level of the found domain. | Data item or subitems at the first level with the same domain unit are added to the active table. | New Table window with the requested data item or all the subitems at the first level of the found domain. | . | Main/pop-up menu option Default View (only if the Table is the default viewer, indicated by the or icon) on active tree-item | New Table window with the requested data item or all the subitems at the first level of the found domain. | Data item or subitems at the first level with the same domain unit are added to the active table. | New Table window with the requested data item or all the subitems at the first level of the found domain. | . | Main/pop-up menu option Table View on active tree-item | New Table window with the requested data item or all the subitems at the first level of the found domain. | Data item or subitems at the first level with the same domain unit are added to the active table. | New Table window with the requested data item or all the subitems at the first level of the found domain. | . | Ctrl-D on active tree-item | New Table window with the requested data item or all the subitems at the first level of the found domain. | Data item or subitems at the first level with the same domain unit are added to the active table. | New Table window with the requested data item or all the subitems at the first level of the found domain. | . | Drag and drop active tree-item to view area/active Table View | New Table window with the requested data item or all the subitems at the first level of the found domain. | Data item or subitems at the first level with the same domain unit are added to the active table. | New Table window with the requested data item or all the subitems at the first level of the found domain. | . ",
    "url": "/docs/table-view.html#activate-table-view",
    
    "relUrl": "/docs/table-view.html#activate-table-view"
  },"3034": {
    "doc": "table-view",
    "title": "working with tables",
    "content": "The width of the columns can be adapted by moving the mouse to the header row, on the border between two columns. A mouse pointer with two arrows appear. Click with the left mouse button, keep this button pressed and move the mouse to the left or the right to change the size of the columns. The sequence of columns can be adapted with drag and drop on the column header. Click with left mouse button on a header, keep the mouse pressed and move the mouse to the requested position. In the table, a cell or a column can get the focus. Click on a cell or a column header to set the focus. Also, a focus rectangle can be used to set the focus to multiple cells. Therefore, first set the focus to one cell and use a left mouse-click or the arrow keys to enlarge the focus rectangle (colored black). Still in a focus rectangle, there is always one focus cell (colored blue). By double clicking on a cell, a valueinfo window appears. ",
    "url": "/docs/table-view.html#working-with-tables",
    
    "relUrl": "/docs/table-view.html#working-with-tables"
  },"3035": {
    "doc": "table-view",
    "title": "menu",
    "content": ". With a right mouse click on the label a pop-up menu for the column is activated, with the following options: . | Sort on layer on data item name: sort values ascending or descending. | Relative Display (as % or total): present the numeric values as percentage of the total. | GoTo (Ctrl-G): take clipboard contents as row number and go there : paste the contents of the clipboard, interpret it as row number and jump to this row in the table. | FindNextValue (Ctrl-F): take clipboard contents as value and search for it, starting after the current position : paste the contents of the clipboard, interpret it as search value number and jump to the first cell in the table, starting from the current position. | Value info for row x of layer: active the value info for the cell with the focus. | Remove layer: remove the column from the table. | Ramp Values: ramp the values of a distribution, mainly relevant in classifications. This option is only available for not derived, numeric data items with more than one entry. | . ",
    "url": "/docs/table-view.html#menu",
    
    "relUrl": "/docs/table-view.html#menu"
  },"3036": {
    "doc": "table-view",
    "title": "tools",
    "content": "| tool | description | . | | save to file as semicolon delimited text. | . | | copy as semicolon delimited text to the clipboard. | . | | copy the visible contents as image to the clipboard. | . |   |   | . | | show the first selected row. | . | | select row(s) by mouse-click (use Shift to add or Ctrl to deselect). | . | | select all elements in the active layer. | . | | deselect all elements in the active layer. | . | | show only selected elements. | . |   |   | . | | groupby the hightlighted columns. | . ",
    "url": "/docs/table-view.html#tools",
    
    "relUrl": "/docs/table-view.html#tools"
  },"3037": {
    "doc": "table-view",
    "title": "table-view",
    "content": "user-guide-geodms-gui - table view . ",
    "url": "/docs/table-view.html",
    
    "relUrl": "/docs/table-view.html"
  },"3038": {
    "doc": "tablechopper-(read-ascii-file)",
    "title": "example",
    "content": "container TableChopper { parameter&lt;string&gt;  filename := '%projdir%/data/TableChopper.csv'; unit&lt;uint8&gt;        domain : nrofrows = 5; parameter&lt;string&gt;  fieldseparator := ';'; parameter&lt;string&gt; filedata    : StorageType = \"str\"   , StorageName = \"=filename\"; parameter&lt;string&gt; headerline := readLines(filedata, void, 0); unit&lt;uint32&gt;field := Range(uint32, 0, strcount(headerline, fieldseparator) + 1)    {       attribute&lt;string&gt; name := ReadArray(headerline , field, string, 0);    }          attribute&lt;string&gt; bodylines (domain) := readLines(filedata, domain, headerline/ReadPos); container data := for_each_nedv(           field/name          ,'ReadElems(              BodyLines             ,string            ,'+ MakeDefined(field/name[id(field)-1] + '/ReadPos','const(0, domain)')+'          )'          ,domain          ,string       ); } . ",
    "url": "/docs/tablechopper-(read-ascii-file).html#example",
    
    "relUrl": "/docs/tablechopper-(read-ascii-file).html#example"
  },"3039": {
    "doc": "tablechopper-(read-ascii-file)",
    "title": "explanation",
    "content": ". | The filename parameter refers to the ASCII file being read. | The uint8 configured domain-unit domain is used as domain_unit for the resulting attributes, in the example with a cardinality of 5. | The fieldseparator parameter configures the separator used in the ASCII file between the fields. | . When the TableChopper is used as a template to read multiple files, these first three items are often used as case-parameter. | The filedata string parameter refers to all the data from the ASCII file. It is read with the Str StorageManager. | The parameter headerline will read the first line from the filedata parameter. | The domain unit field is configured with as subitem name. This name attribute contains the names of the fields read from the header of the ASCII file. | The bodylines attribute will read the other (none header) lines from the filedata parameter. | . The resulting data container will result in a subitem for each field. The bodylines attribute is split up in the separate values per field. The resulting tree-item are all string attributes. Use conversion functions to convert the string values to desired values-unit / value-type. ",
    "url": "/docs/tablechopper-(read-ascii-file).html#explanation",
    
    "relUrl": "/docs/tablechopper-(read-ascii-file).html#explanation"
  },"3040": {
    "doc": "tablechopper-(read-ascii-file)",
    "title": "tablechopper-(read-ascii-file)",
    "content": "configuration-examples TableChopper . The TableChopper is a scriptblock using the str-storagemanager and a set of GeoDMS functions to read data from a delimited ascii-files. Delimited ASCII_Files are often csv files. The gdal.vect storagemanager is advised to read these files, use the TableChopper for very large files or for files with other separators as comma or semicolon. To write data to delimited ASCII Files, use the tablecomposer-(write-ascii-file). ",
    "url": "/docs/tablechopper-(read-ascii-file).html",
    
    "relUrl": "/docs/tablechopper-(read-ascii-file).html"
  },"3041": {
    "doc": "tablechopper-decimal-seperator",
    "title": "tablechopper-decimal-seperator",
    "content": "The tablechopper-(read-ascii-file) can be used to read ASCII files, both with a point (default) and a comma as decimal separator. The next example script assumes a point as decimal separator. container data :=     for_each_nedv(        Field/Name       ,'ReadElems(           BodyLines          ,string          ,'+ MakeDefined(              Field/Name[ID(Field)-1] + '/ReadPos'             ,'const(0, Domain)'          ) + '       )'       ,Domain       ,string    ); . To read files with a comma as separator, edit the following code: . container data :=    for_each_nedv(         Field/Name        ,'ReadElems(            BodyLines           ,string           ,'+MakeDefined(               Field/Name[ID(Field)-1] + '/ReadPos'              ,'const(0,Domain)'           )+',1        )'        ,Domain        ,string   ); . Be aware of the last argument of the readelems function (in bold and italic). This last argument is optional, with two possible values: . | 0 (default value): indicating a point is considered as decimal separator. | 1: indicating a comma is considered as decimal separator. | . ",
    "url": "/docs/tablechopper-decimal-seperator.html",
    
    "relUrl": "/docs/tablechopper-decimal-seperator.html"
  },"3042": {
    "doc": "tablechopper-results",
    "title": "results",
    "content": "An ASCII file with the following data: . is processed with the example tablechopper-(read-ascii-file) script, resulting in the following data items: . With this ASCII file the LinesAreSignedIntegerStringOrEmpy data-item will result in True values for each row, except for the Corop area 2 (Delfzijl e.o) as this row contains floating point values. ",
    "url": "/docs/tablechopper-results.html#results",
    
    "relUrl": "/docs/tablechopper-results.html#results"
  },"3043": {
    "doc": "tablechopper-results",
    "title": "tablechopper-results",
    "content": " ",
    "url": "/docs/tablechopper-results.html",
    
    "relUrl": "/docs/tablechopper-results.html"
  },"3044": {
    "doc": "tablechopper-versus-odbc",
    "title": "tablechopper-versus-odbc",
    "content": "A third (except from gdal.vect and the tablechopper-(read-ascii-file)) alternative for reading ASCII files is the ODBC text driver, but this is not is advised for the following reasons: . | With ODBC the decimal separator is based on the regional settings of the system, which causes problems if the application is used on multiple systems with different regional settings. | The ODBC text driver requires meta information stored in a schema.ini file in the same directory as the source data files. This is easily forgotten, resulting in unexpected errors. | The ODBC text driver locks source files exclusively, which is undesirable as it is often useful to view the same data at least in a read-only mode in another application. | Although the 64 bits versions of the GeoDMS can be used to read ODBC sources, this causes problems on systems with 32 bits versions of Ms Office installed. To use the 64 bits GeoDMS version, 64 bits ODBC drivers need to be installed, conflicting with the 32 bits MsOffice ODBC drivers. | . ",
    "url": "/docs/tablechopper-versus-odbc.html",
    
    "relUrl": "/docs/tablechopper-versus-odbc.html"
  },"3045": {
    "doc": "tablecomposer-(write-ascii-file)",
    "title": "example",
    "content": "1) container for exporting header with names and values in .csv file . container TableComposer { // assume ExportDomain is a configured domain unit with two attributes as subitems: id &amp; dist&lt;/I&gt;   unit&lt;uint32&gt; context := ExportDomain;    parameter&lt;string&gt; fieldlist      := 'id;Dist';   parameter&lt;string&gt; fieldseparator := ';';   parameter&lt;string&gt; filename       := '%LocalDataProjDir%/dist.csv';   unit&lt;uint32&gt; field := range(uint32, 0,strcount(fieldlist, ';') +1)   {       attribute&lt;string&gt; name := ReadArray(FieldList, ., string, 0);   }   parameter&lt;string&gt; newline := '\\n';   parameter&lt;string&gt; header  := FieldList;   attribute&lt;string&gt; body (context) := = AsList(         +'string(context/' + field/name + ')',' + '+quote(fieldseparator)+' +'      );     parameter&lt;string&gt; result := header + newline + AsList(body, newline)   ,  StorageName = \"= filename\"   ,  StorageType = \"str\"; } . 2) template for exporting header with names and metric and values in .csv file .  template TableComposerWithMetric  {     // begin case parameters ;     unit&lt;uint32&gt; table;     parameter&lt;string&gt; fieldlist;     parameter&lt;string&gt; filename;      // end case parameters ;      container impl: isHidden = \"True\"      {          unit&lt;uint32&gt; field := range(uint32,0,strcount(fieldlist,';')+1)          {             attribute&lt;string&gt; FieldDescr  := ReadArray(fieldlist,.,string,0);             attribute&lt;uint32&gt; SepPos      := strpos(FieldDescr, ':');             attribute&lt;string&gt; name        := IsDefined(SepPos) ? substr(FieldDescr, 0, SepPos): FieldDescr;             attribute&lt;string&gt; NameInTable  := IsDefined(SepPos) ? substr(FieldDescr, SepPos+1, strlen(FieldDescr)) : FieldDescr;             attribute&lt;string&gt; metric      :=   ='union_data(.,'+                   AsList('+PropValue(ValuesUnit(table/'+impl/Field/NameInTable+'),'+quote('metric') + ')', ',') +                 ')';            }         }         parameter&lt;string&gt; header  := AsList(Quote(impl/Field/name +(impl/field/metric==*?* : ' [' + impl/Field/metric +']')), ';');         parameter&lt;string&gt; body_expr     := AsList('AsExprList(table/' + impl/field/NameInTable + ', id(table))',' + *;* + ');         attribute&lt;string&gt; body (table) := = body_expr;         parameter&lt;string&gt; result := header + '\\n' + AsList(body+'\\n', '')         , StorageName  = \"=filename\"         , StorageType  = \"str\";  } . ",
    "url": "/docs/tablecomposer-(write-ascii-file).html#example",
    
    "relUrl": "/docs/tablecomposer-(write-ascii-file).html#example"
  },"3046": {
    "doc": "tablecomposer-(write-ascii-file)",
    "title": "Explanation",
    "content": ". | The context unit refers to the configured domain-unit ExportDomain. All attribute to be exported need to be configured as direct subitem of this domain unit. | The fieldlist parameter configures the names of the attributes to be exported, semicolon delimited. | The fieldseparator parameter configures the separator used in the ASCII file between the fields. In most cases the semicolon is used. | The filename parameter configures the file name to be exported. In the example a folders-and-placeholders for the file path is used. | . When the TableComposer is used as a template to write multiple files, these first three items are often used as case-parameter. | The field unit is the domain unit of the set of fields to be exported. In this example the cardinality of this domain is two, derived from the number of semicolons in the fieldlist string value. The field unit has one subitem: the name of the field (in this example: id and Dist). These names are read with the readarray function from the fieldlist string value. | A parameter newline is configured with as expression : \\n. This code indicates a new line character and is used to split the contents of the resulting file over multiple lines. | The header parameter refers to the fieldlist parameter. | The body parameter will contain the actual primary data from the attributes to be exported. The contents of the attributes are concatenated, with the fieldseperator as delimiter (in the example a semicolon is used). With the aslist function, the concatenated values are combined to one string per element. | The result parameter combines the header, a new line and the body as a string parameter, separated by new lines. The StorageName and the StorageType properties are configured for the result parameter. | . ",
    "url": "/docs/tablecomposer-(write-ascii-file).html#explanation",
    
    "relUrl": "/docs/tablecomposer-(write-ascii-file).html#explanation"
  },"3047": {
    "doc": "tablecomposer-(write-ascii-file)",
    "title": "Optional extra lines",
    "content": "Other property can also be exported to the delimited ASCII file. The example shows how to add an extra line between the header and the body with the metric of the attributes to be exported. parameter&lt;string&gt; metric := = AsList(        quote('[')+'+PropValue(          ValuesUnit(context/' + field/name +')          ,' + quote('metric') + '       ) + ' + quote(']' )       , '+' + quote(fieldseparator) + '+'     ); . This parameter results in the metric of each exported attribute between square brackets, separated by the fieldseparator parameter. To add this parameter to the resulting file, replace the configuration of the resulting parameter result by: . parameter&lt;string&gt; result := header + newline + metric + newline + AsList(body, newline) ,  StorageName = \"=FileName\" ,  StorageType = \"str\"; . ",
    "url": "/docs/tablecomposer-(write-ascii-file).html#optional-extra-lines",
    
    "relUrl": "/docs/tablecomposer-(write-ascii-file).html#optional-extra-lines"
  },"3048": {
    "doc": "tablecomposer-(write-ascii-file)",
    "title": "tablecomposer-(write-ascii-file)",
    "content": "configuration-examples TableComposer . The TableComposer is a scriptblock using the str-storagemanager and a set of GeoDMS functions to write data from a delimited ascii-files. The TableComposer is used to write data, use the tablechopper-(read-ascii-file) to read data from delimited ASCII Files. ",
    "url": "/docs/tablecomposer-(write-ascii-file).html",
    
    "relUrl": "/docs/tablecomposer-(write-ascii-file).html"
  },"3049": {
    "doc": "tan",
    "title": "syntax",
    "content": ". | tan(angle) | . ",
    "url": "/docs/tan.html#syntax",
    
    "relUrl": "/docs/tan.html#syntax"
  },"3050": {
    "doc": "tan",
    "title": "definition",
    "content": "tan(angle) results in the tangent of data-item angle. ",
    "url": "/docs/tan.html#definition",
    
    "relUrl": "/docs/tan.html#definition"
  },"3051": {
    "doc": "tan",
    "title": "description",
    "content": "data-item angle need to be expressed in the unit radian (radiaal), the SI unit for angles. ",
    "url": "/docs/tan.html#description",
    
    "relUrl": "/docs/tan.html#description"
  },"3052": {
    "doc": "tan",
    "title": "applies to",
    "content": "data item angle with float32 or float64 value-type . ",
    "url": "/docs/tan.html#applies-to",
    
    "relUrl": "/docs/tan.html#applies-to"
  },"3053": {
    "doc": "tan",
    "title": "since version",
    "content": "5.18 . ",
    "url": "/docs/tan.html#since-version",
    
    "relUrl": "/docs/tan.html#since-version"
  },"3054": {
    "doc": "tan",
    "title": "example",
    "content": "attribute&lt;float64&gt; Angle_rad (ADomain) := Angle * pi() / 180.0; attribute&lt;float64&gt; tanAngle_rad (ADomain) := tan(Angle_rad); . | Angle(Â) | Angle_rad(rad) | tanAngle_radA | . | 0 | 0 | 1 | . | 30 | 0.52 | 0.58 | . | 45 | 0.79 | 1 | . | 420 | 7.33 | 1.73 | . | null | null | null | . ADomain, nr of rows = 5 . ",
    "url": "/docs/tan.html#example",
    
    "relUrl": "/docs/tan.html#example"
  },"3055": {
    "doc": "tan",
    "title": "see also",
    "content": ". | sin | cos | atan | . ",
    "url": "/docs/tan.html#see-also",
    
    "relUrl": "/docs/tan.html#see-also"
  },"3056": {
    "doc": "tan",
    "title": "tan",
    "content": "trigonometric-functions tan(gent) . ",
    "url": "/docs/tan.html",
    
    "relUrl": "/docs/tan.html"
  },"3057": {
    "doc": "targetgroup",
    "title": "introduction",
    "content": "In many policy areas the awareness increases that effective policy depends on the characteristics of the people in an area. Therefore knowledge on the demographics, socio-economic etc. of a population in an neighborhood is important. Using administrative areas has some disadvantages. Therefore we implemented within the GeoDMS technics to present a clear and spatially explict view on the distribution of population characteristics, in which data can never be related to individual persons. ",
    "url": "/docs/targetgroup.html#introduction",
    
    "relUrl": "/docs/targetgroup.html#introduction"
  },"3058": {
    "doc": "targetgroup",
    "title": "WoonZorgWijzer",
    "content": "[](File:Wzw20.png \"wikilink\") . An example in which we use this approach is for instance the WoonZorgwijzer. ",
    "url": "/docs/targetgroup.html#woonzorgwijzer",
    
    "relUrl": "/docs/targetgroup.html#woonzorgwijzer"
  },"3059": {
    "doc": "targetgroup",
    "title": "targetgroup",
    "content": " ",
    "url": "/docs/targetgroup.html",
    
    "relUrl": "/docs/targetgroup.html"
  },"3060": {
    "doc": "template",
    "title": "how to configure a template",
    "content": "The following example shows a template used to: . | Calculate the farest distance of two distance attributes and | case-instantiation that aggregates the results to different spatial levels | . Template CombineDistWithANDcond { // begin case parameters attribute&lt;meter&gt; dist1 (bag/vbo); attribute&lt;meter&gt; dist2 (bag/vbo); // end case parameters attribute&lt;meter&gt; farest_dist (bag/vbo) := max_elem(dist1, dist1); container aggregations := Aggtemplate(farest_dist); } . ",
    "url": "/docs/template.html#how-to-configure-a-template",
    
    "relUrl": "/docs/template.html#how-to-configure-a-template"
  },"3061": {
    "doc": "template",
    "title": "name",
    "content": "The template CombineDistWithANDcond is the parent item of the template and also in use as name of the template. Don’t use operators-and-functions names for templates. ",
    "url": "/docs/template.html#name",
    
    "relUrl": "/docs/template.html#name"
  },"3062": {
    "doc": "template",
    "title": "case parameters",
    "content": "In the example two case parameters are configured: dist1 and dist2. Case parameters are always configured as the first subitem of the template. ",
    "url": "/docs/template.html#case-parameters",
    
    "relUrl": "/docs/template.html#case-parameters"
  },"3063": {
    "doc": "template",
    "title": "model logic",
    "content": "After the configuration of the case parameter, an attribute and a container are configured. These items contain the model logic of this template. The case parameters are supplier of the first attribute. This first attribute is supplier in the expression of the second item, the container aggregations. This container calls another template, called Aggtemplate and uses the first attribute as case parameter for this Aggtemplate to configure a case instantiation. This way a nested structure of templates calling other templates can be set up. ",
    "url": "/docs/template.html#model-logic",
    
    "relUrl": "/docs/template.html#model-logic"
  },"3064": {
    "doc": "template",
    "title": "original syntax",
    "content": "Until GeoDMS version 7.120 the syntax: . container templateName: IsTemplate = \"True\" . was used. This syntax is still supported, but the new syntax is advised as it is shorter. ",
    "url": "/docs/template.html#original-syntax",
    
    "relUrl": "/docs/template.html#original-syntax"
  },"3065": {
    "doc": "template",
    "title": "template",
    "content": "In modelling with data, it is often useful to apply the same model logic on different sets of parameters. The GeoDMS therefore uses templates. A template is defined as a set of calculation rules (model logic) with at least one case-parameter. A template can be compared with a function in a programming language. In a template data-item can not be calculated, as the value(s) for the case-parameter are not known. To calculate the results, values need to be set for the case parameters. A case is defined as an instantiated template with values set for each case parameter. With the GeoDMS results of cases can easily be compared, as results of multiple cases can be available as different tree-item simultaneously. ",
    "url": "/docs/template.html",
    
    "relUrl": "/docs/template.html"
  },"3066": {
    "doc": "test",
    "title": "test",
    "content": "\\[\\\\begin{align} SSM_{i,1} &amp;:= ssm(1..i) CB_{i,1} &amp;:= 1 \\\\end{align}\\] ",
    "url": "/docs/test.html",
    
    "relUrl": "/docs/test.html"
  },"3067": {
    "doc": "tests",
    "title": "performance/expected results",
    "content": "Until October 2021 we tested our software on OVDB01, an Intel(R) Core(TM) i7-2600 CPU @ 3.40GH machine with 4 cores and 16 GB RAM memory. For our new projects we prefer to test on a machine with more cores and RAM memory. Therefore since October 2021 we migrated our tests to OVSRV05, an AMD Ryzen 9 5900X CPU @ 3.70GH machine with 24 cores and 64 GB RAM memory. OVSRV05: . Since 8.6.2 we make the test results available with the release . | Versions 8.043 .. 8.036 | Versions 8.039 .. 8.036 | Versions 8.033 .. 7.412 | Versions 7.412 .. 7.410 | Versions 7.410 .. 7.314 | . OVDB01: . | Versions 7.318 .. 7.202 | . | Versions 7.229 .. 7.168 | Versions 7.198 .. 7.168 | Versions 7.175 .. 7.168 | . ",
    "url": "/docs/tests.html#performanceexpected-results",
    
    "relUrl": "/docs/tests.html#performanceexpected-results"
  },"3068": {
    "doc": "tests",
    "title": "tests",
    "content": "The GeoDMS software is tested on multiple aspects (improving our test process is an ongoing process): . ",
    "url": "/docs/tests.html",
    
    "relUrl": "/docs/tests.html"
  },"3069": {
    "doc": "threshold",
    "title": "definition",
    "content": "Treshold is the tenth argument of the discrete_alloc function. Treshold is a parameter defining the minimum suitability value that a land use type should have to get allocated. The values-unit of this parameter needs to match with the values-unit of the subitem of the SuitabilityMaps argument. If a land unit has a suitability value less than the Treshold for all land use types, this land unit will not be allocated. The return value from the discrete_alloc function for this land unit will be the value null. ",
    "url": "/docs/threshold.html#definition",
    
    "relUrl": "/docs/threshold.html#definition"
  },"3070": {
    "doc": "threshold",
    "title": "applies to",
    "content": "parameter Treshold with value type: int32 . ",
    "url": "/docs/threshold.html#applies-to",
    
    "relUrl": "/docs/threshold.html#applies-to"
  },"3071": {
    "doc": "threshold",
    "title": "example",
    "content": "parameter&lt;EurM2&gt; treshold := 0[EurM2]; . ",
    "url": "/docs/threshold.html#example",
    
    "relUrl": "/docs/threshold.html#example"
  },"3072": {
    "doc": "threshold",
    "title": "threshold",
    "content": "allocation-functions, argument 10: Threshold . ",
    "url": "/docs/threshold.html",
    
    "relUrl": "/docs/threshold.html"
  },"3073": {
    "doc": "tile-by-tile-heuristic",
    "title": "expected error",
    "content": "To quantify the possible deviation from a perfect (feasible + optimal) allocation, lets assume there are: . | N Land Units which is assumed to be a multiple of | T Tiles | 2 Land Use Types: urban and other | 1 Claim Region | 1 Strict Equality claim for urban of U land units (and therefore N-U for other). | . The difference (S_io - S_iu) between suitability S_iu for urban and S_io for other land use is considered as the comparative advantage of other land use . Note that there is 1 Urban facet facing land units with a comparative advantage of other land use (in the generalized case of k Land Use Types there are (k-1) of such Urban facets and k*(k-1) facets in total, more if there are more than 1 claim regions). For a perfect allocation there is one split of the comparative advantages separating urban land units from other land units with price Lambda_u (Lambda_o is assumed to be zero, since only 1 claim needs to be binding) and Lambda_u is chosen as such that there are exactly U land units with S_iu+Lambda_u &gt; S_io. Now let’s consider the scaled allocation of the first tile with n := (N / T) Land Units and a scaled claim for urban Land Use of (U / T). Take X as the stochastic number of land units in the first tile that should be allocated to Urban, which is equal to taking n times a drawing without replacement from a pot of U urban cells and (N-U) other cells, thus with an initial probability of (U/N) of drawing an Urban land unit. The expected value (the mean) of X then is n*(U/N) = U/T, since X has the Hypergeometric distribution and . P(underline{X}=k) = {(matrix{2}{1}{U k}) (matrix{2}{1})} / (matrix{2}{1}{N n}) . Thus the variance of X is {u (1-u) n (N-n)}/{N-1} with u := U/N . and the standard deviation for X is the square root of (n-1)/n times the variance, which is sqrt{(n-1) u (1-u) (N-n)}/{N-1} . which (with larger N) approximates sqrt{(1-T^{-1}) u (1-u) N} . See how that approximates the Binomial distribution when T becomes large. And the probability of X to be exactly the claimed (U/T) is only … . As a numeric example, take N = 2000000, U = 200000 and T = 2, thus n= 1000000 and u = 10%. Then the expected (standard) deviation from the scaled claim U/T = 100000 units in the first tile to be Urban in the in a perfect allocation is about 212 units. Note that this implies that an expected amount of 212 units will be mis-allocated in the first tile to meet the scaled claim of U/T units and that these mis-allocations usually represent a small total comparative disadvantage compared to the same amount of cells that will be reversely mis-allocated in the subsequent tiles. However, if suitability decreases steeply beyond the splitter as can be the case for non-urban land use if transition from urban to non-urban is prohibited, any amount of mis-allocated units in a first tile may result in much lower total suitability or even infeasibility if insufficient units remain available in the last tile to be non-urban. ",
    "url": "/docs/tile-by-tile-heuristic.html#expected-error",
    
    "relUrl": "/docs/tile-by-tile-heuristic.html#expected-error"
  },"3074": {
    "doc": "tile-by-tile-heuristic",
    "title": "possible improvements",
    "content": ". | To avoid the mentioned issues, a 64 bit version of the GeoDmsRun.exe would be useful that would process an allocation without resorting to tiling. | Within the limitations of allocating memory in a 32 bit process, one could possibly keep the allocation results of one or several already processed tiles into the virtual address space and also keep (the upper parts of) the facet-heaps that refer to reallocation options within those tiles. This would require: . | a change to the interpretation of the indices that are stored in the facet-heaps, since now they are relative to the beginning of the current tile. | inclusion of comparative advantages with these indices for processed tiles to allow the processed suitability map tiles to be released (for the current tile, the priority heaps only contain indices which are prioritized by looking at the corresponding suitability maps from which the comparative advantages are (re)calculated dyanmically | the formulation and testing of a selection criterion for maintaining reallocation options into the heap (now only the absolute threshold works as a gatekeeper for allowing alternatives). | . | An alternative improvement would be to first process all tiles separately (as is done now) and the combine the found tile-splitters. Note that the true splitter must be within the convex hull formed by the tile-splitters (TODO: prove this). Then rerun the allocation tile by tile by using the convex hull as a threshold: alternatives that are outside the hull are never useful for the to be found true splitter. This would require: . | a fast way to determine if a point is in (or acceptably nearby) a convex hull of T (k-1)-points or its bounding box thereof. | some indication that this would succifiently filter the available alternatives to compensate the extra required memory for storing the selected reallocation alternatives including the comparative disadvantage for all tiles. | An adaptation of the current Solve to deal with this inter-tile-heaps. | . | . See also: . | A shortest augmenting path algorithm for dense and sparse linear assignment problems, R. Jonker and A. Volgenant, COMPUTING Volume 38, Number 4, 325-340. | . ",
    "url": "/docs/tile-by-tile-heuristic.html#possible-improvements",
    
    "relUrl": "/docs/tile-by-tile-heuristic.html#possible-improvements"
  },"3075": {
    "doc": "tile-by-tile-heuristic",
    "title": "tile-by-tile-heuristic",
    "content": "The Tile by Tile Heuristic is a heuristic for the discrete-allocation, implemented by the Function: discrete alloc for processing large allocation problems, larger than what can fit into the Virtual Address Space of a 32-bit process. The discrete_alloc function supports the domain of the suitabilityMaps and atomicRegionMap to be tiled aka segmented by processing subsets of subsequent tiles as scaled versions of the total allocation where the allocations of the tiles before the current are frozen. So the processing of each tile only considers alternatives for UpdateSplitterDown within that tile. This starts with only the first tile aka tile 0, then the second tile aka tile 1 with claims scaled to the number of land units of both tiles minus what has already been allocated in the first tile, etc. During the processing of a tile, only that segment of the used suitability maps, the used atomic region map and the resulting landuse is FileMapped into the Virtual Address Space of the GeoDms process. The heaps for each facet also only store alternatives within that tile since reallocations of landuse in earlier tiles cannot be performed anymore since those tiles of the resulting landuse are no longer directly accessible. After processing a tile, the heaps for all facets are cleared to make space for allocation alternatives of the next tile. The shadow_prices aka spitter that result from allocating the scaled claims to a tile are used as starting point for a next tile since the random perputation of the land units among tiles guarantee that scaled versions of the allocation result in reasonable (but not necessarily perfect) splitters. With an unfortunate permutation of the domain, this can result in choices in the first tile(s) that are not optimal or even results in an Infeasible Solution when taking the alternatives of later tiles into account. ",
    "url": "/docs/tile-by-tile-heuristic.html",
    
    "relUrl": "/docs/tile-by-tile-heuristic.html"
  },"3076": {
    "doc": "tile",
    "title": "Tiled/segmented data",
    "content": "The GeoDMS calculates with memory arrays. These arrays can be split up in a set of smaller arrays for two reasons: . | If the array size exceeds the available internal memory (especially in 32 bits mode) | performance | . For one-dimensional domain-unit, the resulting data is called segmented (do not confuss the term segmented with segment). For two-dimensional domain units (grid) the resulting data is called tiled. The resulting domain unit is called a tiled domain. Use The tiledunit function to configure an explicit tiled domain. ",
    "url": "/docs/tile.html#tiledsegmented-data",
    
    "relUrl": "/docs/tile.html#tiledsegmented-data"
  },"3077": {
    "doc": "tile",
    "title": "tile",
    "content": " ",
    "url": "/docs/tile.html",
    
    "relUrl": "/docs/tile.html"
  },"3078": {
    "doc": "tiled-domain",
    "title": "tiles as a set of Ranges",
    "content": "Each domain unit has a range of valid values, determined by the inclusive Lower Bound and exclusive Upper Bound. For Point value types this result in a rectangular box of valid values. ",
    "url": "/docs/tiled-domain.html#tiles-as-a-set-of-ranges",
    
    "relUrl": "/docs/tiled-domain.html#tiles-as-a-set-of-ranges"
  },"3079": {
    "doc": "tiled-domain",
    "title": "tiled-domain",
    "content": "A tiled domain is a domain-unit with an additional tiling. For one-dimensional domain units the word segmented is the synonym for a tiled domain. A tiled domain can be configured with the tiledunit function. Domain units with value-type of more that 2 bytes can be tiled, so: . | all Points Type value types: spoint, ipoint, wpoint, upoint | uint32 | int32 | uint64 | int64 | . thus not (u)int16, (u)int8, nor uint4, uint2 or bool can be tiled. ",
    "url": "/docs/tiled-domain.html",
    
    "relUrl": "/docs/tiled-domain.html"
  },"3080": {
    "doc": "tiledunit",
    "title": "syntax",
    "content": ". | TiledUnit(tilesize) | . ",
    "url": "/docs/tiledunit.html#syntax",
    
    "relUrl": "/docs/tiledunit.html#syntax"
  },"3081": {
    "doc": "tiledunit",
    "title": "definition",
    "content": "The TiledUnit function results in a tiled-domain, the tilesize argument defines the size of each tile. The values-unit of the “tilesize” argument must be the original domain-unit from which the tiled unit is made. TiledUnits are often used for grid-domain. The tilesize argument for these two-dimensional domain is also two-dimensional Point value type. For one-dimensional (tables) domains, the tilesize argument is one-dimensional. For these domains the concept segmented domain is also used as synonym of tiled domain. ",
    "url": "/docs/tiledunit.html#definition",
    
    "relUrl": "/docs/tiledunit.html#definition"
  },"3082": {
    "doc": "tiledunit",
    "title": "description",
    "content": "Tiled units are useful if the original domain has a very large number of items (think for example of a grid unit of 100 meter cells for the whole of Europe). Calculating with data items might cause memory problems (in a win32 environment). Tiling the original units can solve these problems. If a tiled unit is configured as domain unit, calculations are processed on each tile separately. The results are presented to the user in the same manner as untiled domains. ",
    "url": "/docs/tiledunit.html#description",
    
    "relUrl": "/docs/tiledunit.html#description"
  },"3083": {
    "doc": "tiledunit",
    "title": "applies to",
    "content": ". | parameter or literal tilesize | . ",
    "url": "/docs/tiledunit.html#applies-to",
    
    "relUrl": "/docs/tiledunit.html#applies-to"
  },"3084": {
    "doc": "tiledunit",
    "title": "conditions",
    "content": ". | the values unit of the tilesize argument must match be the original domain unit, from which the tiled unit is derived. | . ",
    "url": "/docs/tiledunit.html#conditions",
    
    "relUrl": "/docs/tiledunit.html#conditions"
  },"3085": {
    "doc": "tiledunit",
    "title": "since version",
    "content": "6.024 . ",
    "url": "/docs/tiledunit.html#since-version",
    
    "relUrl": "/docs/tiledunit.html#since-version"
  },"3086": {
    "doc": "tiledunit",
    "title": "example",
    "content": "1: uint32 domain unit . unit&lt;uint32&gt; building_untiled: nrofrows = 100000000 unit&lt;uint32&gt; building := TiledUnit(25000[building]) { attribute&lt;float32&gt; a_attribute := union_data(.,building_untiled/a_attribute); } . result: a tiled/segmented domain of buildings, with tiles of 25000 entries each. 2: spoint (grid) domain . unit&lt;spoint&gt; gridunit_untiled := range(gridset(          point/Source/point_rd         ,point(-1f    , 1f     , point/Source/point_rd)         ,point(405600f, 111300f, point/Source/point_rd)         ,spoint\"      ),point( 0s, 0s), point(500s, 400s)   ); unit&lt;spoint&gt; gridunit := TiledUnit(point(100s, 200s, gridunit_untiled)); . result: a tiled grid unit, called TiledUnit with 10 tiles of 100 * 200 cells each. ",
    "url": "/docs/tiledunit.html#example",
    
    "relUrl": "/docs/tiledunit.html#example"
  },"3087": {
    "doc": "tiledunit",
    "title": "tiledunit",
    "content": "unit-functions TiledUnit . ",
    "url": "/docs/tiledunit.html",
    
    "relUrl": "/docs/tiledunit.html"
  },"3088": {
    "doc": "tmp-calcache-no-longer-in-use",
    "title": "tmp-calcache-no-longer-in-use",
    "content": "recent-developments: tmp CalCache no longer in use . The .tmp part of the CalcCache was used to store non persistent intermediary results on disk, during a GeoDMS session. Since 7.196 all non-persistent intermediary results are not longer stored on disk, but in the (system page file backed) heap. EmptyWorkingSet is called when in stress. Removing the tmp CalcCache increases performance as it limits the disk I/O. ",
    "url": "/docs/tmp-calcache-no-longer-in-use.html",
    
    "relUrl": "/docs/tmp-calcache-no-longer-in-use.html"
  },"3089": {
    "doc": "todo",
    "title": "index",
    "content": ". | Land Use Scanner | Vesta | 2UP | EFDM | FUSION | . ",
    "url": "/docs/todo.html#index",
    
    "relUrl": "/docs/todo.html#index"
  },"3090": {
    "doc": "todo",
    "title": "MathJaxText",
    "content": "Here follows some test code for installation of MathJax. I added a code-link by using document.write on http://wiki.objectvision.nl/index.php/MediaWiki:Common.js and that works (on my version of Chrome). I started with the following expression, redered by PhpMathPublisher: Accessibility_{i} = sum{j}{}{ Attraction_{j} \\* f(C_{ij}) } . Which is in LaTeX: \\(Accessibility_{i} = \\\\sum\\\\limits_{j} { Attraction_{j} \\\\times f(C_{ij}) }\\) . Inlined LaTeX: $Accessibility_{i} = \\sum\\limits_j { Attraction_{j} \\times f(C_{ij}) }$ . ",
    "url": "/docs/todo.html#mathjaxtext",
    
    "relUrl": "/docs/todo.html#mathjaxtext"
  },"3091": {
    "doc": "todo",
    "title": "GDAL documentation",
    "content": "Useful links: For specifying sqlString: . | http://www.gdal.org/ogr/classOGRDataSource.html#aa6acc228db6513784a56ce12334a8c33 | . For FileGDB: . | http://www.data.gov.bc.ca/local/dbc/docs/geo/services/standards-procedures/file_geodatabase_standards.pdf | . ",
    "url": "/docs/todo.html#gdal-documentation",
    
    "relUrl": "/docs/todo.html#gdal-documentation"
  },"3092": {
    "doc": "todo",
    "title": "new pages",
    "content": ". | Skinning | . ",
    "url": "/docs/todo.html#new-pages",
    
    "relUrl": "/docs/todo.html#new-pages"
  },"3093": {
    "doc": "todo",
    "title": "todo",
    "content": "The following lemma’s require initial discussion. | Tiled Domain | logit regression | European Geoportals | . ",
    "url": "/docs/todo.html",
    
    "relUrl": "/docs/todo.html"
  },"3094": {
    "doc": "tools-and-downloads",
    "title": "data &amp; tools",
    "content": "We offer data data products and tools, freely available under GNU-GPL version 3 license conditions, based on GeoDMS calculations: . GeoParaat . Download the BAG for the whole of the Netherlands and open, view and analyse it with QGis….. Use GeoParaat ! . For GeoParaat we work together with Baasgeo. Download free a GeoPackage file or make your own GeoPackage with the open source scripts. De GeoPackages can easily be used in QGis of ArcGIS and can be imported in PostgreSQL_PostGIS. Since April 2021, the GeoPackage will contain the BAG 2.0. OD PC4 tot PC 4 matrix . For the VPRO multimedia project Nederland van Boven, we calculated and made available a PC4 travel time matrix. In 2019 this data was updated. The results can be downloaded here. BAG Toolkit . With our BAG Toolkit you can process the BAG 2, make snapshots with extra attributes or geocode your addresses. BRK Toolkit . With our BRK_Extract you can process the BRK . MONDAINE-Vesta . Within the MONDAINE project we have edited the Vesta model to used within the MONDAINE suite. This means that it can be used for several use cases and has output that can be converted into the ESDL-language and then be used in other energy transition models. How that works is described on the MONDAINE page. ",
    "url": "/docs/tools-and-downloads.html#data--tools",
    
    "relUrl": "/docs/tools-and-downloads.html#data--tools"
  },"3095": {
    "doc": "tools-and-downloads",
    "title": "learning the GeoDMS",
    "content": "There are different ways we assist you in starting to work and learning more about the GeoDMS: . | In the section how-to-model, you can find relevant information on how to make a model with the GeoDMS. | In the section configuration-examples, you can find: . | small configuration blocks for specific tasks | full projects on specific themes.You can download zip files with configuration files and data. The configuration can be opened with the GeoDMS and the results of all calculations can be requested. | . | . | The GeoDMS Academy contains an academy with modules. The academy is suitable for self-study, but we can also assist you. | . ",
    "url": "/docs/tools-and-downloads.html#learning-the-geodms",
    
    "relUrl": "/docs/tools-and-downloads.html#learning-the-geodms"
  },"3096": {
    "doc": "tools-and-downloads",
    "title": "tools-and-downloads",
    "content": " ",
    "url": "/docs/tools-and-downloads.html",
    
    "relUrl": "/docs/tools-and-downloads.html"
  },"3097": {
    "doc": "trace_back",
    "title": "syntax",
    "content": ". | trace_back(F1, F2, dijkstra/traceback, capacity) | . ",
    "url": "/docs/trace_back.html#syntax",
    
    "relUrl": "/docs/trace_back.html#syntax"
  },"3098": {
    "doc": "trace_back",
    "title": "definition",
    "content": "trace_back(F1, F2, dijkstra/traceback, capacity) calculates flows in a network. Based on the results of impedance-obsolete-dijkstra calculations, the trace_back function results in the amount of flow for each link in the network. The trace_back function requests four arguments: . | F1: relation to the from node of each link; | F2: relation to the to node of each link; | dijkstra/traceback: the node to edge traceback item, a generated subitem by the impedance-obsolete-dijkstra | capacity: capacity indicator for each node. | . ",
    "url": "/docs/trace_back.html#definition",
    
    "relUrl": "/docs/trace_back.html#definition"
  },"3099": {
    "doc": "trace_back",
    "title": "applies to",
    "content": ". | attribute F1, F2 and dijkstra/traceback with uint32 value-type | attribute capacity with Numeric value type | . ",
    "url": "/docs/trace_back.html#applies-to",
    
    "relUrl": "/docs/trace_back.html#applies-to"
  },"3100": {
    "doc": "trace_back",
    "title": "conditions",
    "content": "The domain-unit of attributes F1 and F2 must match. ",
    "url": "/docs/trace_back.html#conditions",
    
    "relUrl": "/docs/trace_back.html#conditions"
  },"3101": {
    "doc": "trace_back",
    "title": "example",
    "content": "attribute&lt;meter&gt;   dist (NodeSet) := dijkstra(dist, F1, F2, nr_DestNode); attribute&lt;nr_pers&gt; flow (LinkSet) :=    value(       trace_back(            F1          , F2          , dist/TraceBack          , pcount(nr_OrgNode)       )       , nr_pers    ); . | F1 | F2 | flow | . | 8 | 7 | 0 | . | 1 | 4 | 2 | . | 16 | 15 | 0 | . | 2 | 3 | 1 | . | 5 | 4 | 1 | . | 6 | 7 | 2 | . | 9 | 10 | 1 | . | 12 | 11 | 1 | . | 14 | 15 | 0 | . | 18 | 20 | 1 | . | 19 | 17 | 1 | . | 3 | 0 | 0 | . | 4 | 11 | 1 | . | 7 | 1 | 2 | . | 10 | 3 | 1 | . | 11 | 13 | 0 | . | 13 | 17 | 0 | . | 15 | 10 | 0 | . | 20 | 21 | 0 | . | 17 | 20 | 1 | . domain Linkset, nr of rows = 19 . | nr_OrgNode | . | 14 | . | 12 | . | 9 | . | 18 | . | 5 | . domain Origin, nr of rows = 5 . ",
    "url": "/docs/trace_back.html#example",
    
    "relUrl": "/docs/trace_back.html#example"
  },"3102": {
    "doc": "trace_back",
    "title": "trace_back",
    "content": "network-functions trace_back . ",
    "url": "/docs/trace_back.html",
    
    "relUrl": "/docs/trace_back.html"
  },"3103": {
    "doc": "transcendental-functions",
    "title": "transcendental-functions",
    "content": "Transcedental operators-and-functions “transcend” algebra, they cannot be expressed in a finite sequence of algebraic operations: addition, multiplication, and root extraction. | exponent | logarithm | . ",
    "url": "/docs/transcendental-functions.html",
    
    "relUrl": "/docs/transcendental-functions.html"
  },"3104": {
    "doc": "transpose",
    "title": "example",
    "content": "container PerActor := for_each_nedv( Classifications/Actors/name , 'PerActorType/' + Classifications/Actors/name + '/sum' , Classifications/WoningType , float32 ); container PerWoningType := for_each_nedv( Classifications/WoningType/name , 'union_data(Classifications/Actors,'+replace(AsItemList('PerActor/'+Classifications/Actors/name+'[Classifications/WoningType/V/@WT@]'),'@WT@', Classifications/WoningType/Name)+')' , Classifications/Actors , float32 ); . ",
    "url": "/docs/transpose.html#example",
    
    "relUrl": "/docs/transpose.html#example"
  },"3105": {
    "doc": "transpose",
    "title": "transpose",
    "content": "configuration-examples Transpose . Transposing a table means changing the rows to columns and columns to rows. ",
    "url": "/docs/transpose.html",
    
    "relUrl": "/docs/transpose.html"
  },"3106": {
    "doc": "tree-item-name",
    "title": "Syntax",
    "content": "tree-item names . | may contain (alpha)numeric characters &lt;pre&gt;A..Z, a..z, 0..9, _(underscore, U+005F)&lt;/pre&gt; | may not start with a numeric character | for version 7.315 and later: UTF characters U+0080 and higher codes are also allowed, such as: €, °, ß, π, δ, Δ . | Mathematical characters are also allowed (with or without sub and superscripts), such as: σₓ, σᵧ, σₓᵧ, α, β, ŷ, ȳ, x̄, ∑ | . | The following characters can not be used in tree item names: . | Characters with specific meaning in calculation rules, more specifically: all operator , ( ) and [ ] brackets, comma (U+002C), quotes, spaces (U+0020). | Characters that have specific meaning in the GeoDms language, more specifically: {, }, ;, and \" | Control characters (U+0000 .. U+001F) | . | The following character is reserved for future use and should not be used in item names: @ (U+0040) | . ",
    "url": "/docs/tree-item-name.html#syntax",
    
    "relUrl": "/docs/tree-item-name.html#syntax"
  },"3107": {
    "doc": "tree-item-name",
    "title": "Case Sensitivity",
    "content": "tree-item names are case insensitive with regard to the UTF alphabetical characters below U+0080, thus A is identified with a, B with b , … and Z with z. Other characters, such as from the Greek alphabet are case sensitive. We advice to use upper or lowercase characters consistently in tree item names as we are preparing and planning to make tree item names and GeoDMS configurations case sensitive, possibly with a fallback option during a migration period. ",
    "url": "/docs/tree-item-name.html#case-sensitivity",
    
    "relUrl": "/docs/tree-item-name.html#case-sensitivity"
  },"3108": {
    "doc": "tree-item-name",
    "title": "Naming Conventions",
    "content": "For the naming of tree items see naming-conventions. ",
    "url": "/docs/tree-item-name.html#naming-conventions",
    
    "relUrl": "/docs/tree-item-name.html#naming-conventions"
  },"3109": {
    "doc": "tree-item-name",
    "title": "Implementation in the GeoDMS",
    "content": "The checking of treeItem names is done by the functions itemNameFirstChar_test and itemNameNextChar_test, defined in %geodmsfolder%\\rtc\\dll\\src\\utl\\Encodes.h . ",
    "url": "/docs/tree-item-name.html#implementation-in-the-geodms",
    
    "relUrl": "/docs/tree-item-name.html#implementation-in-the-geodms"
  },"3110": {
    "doc": "tree-item-name",
    "title": "tree-item-name",
    "content": " ",
    "url": "/docs/tree-item-name.html",
    
    "relUrl": "/docs/tree-item-name.html"
  },"3111": {
    "doc": "tree-item",
    "title": "definition",
    "content": "All elements that occur in a configuration are called tree items. Four types of tree items are distinguished: . | unit | data-item | container | template | . ",
    "url": "/docs/tree-item.html#definition",
    
    "relUrl": "/docs/tree-item.html#definition"
  },"3112": {
    "doc": "tree-item",
    "title": "name",
    "content": "Each tree item is configured with a keyword (unit, attribute, parameter, container or template) and at least a tree-item-name. ",
    "url": "/docs/tree-item.html#name",
    
    "relUrl": "/docs/tree-item.html#name"
  },"3113": {
    "doc": "tree-item",
    "title": "full name",
    "content": "Based on the hierarchical structure, a full name can be derived for each tree item. This full name includes the name of the item and the name of all it’s parents. This full name is comparable to a full file path in a directory structure. ",
    "url": "/docs/tree-item.html#full-name",
    
    "relUrl": "/docs/tree-item.html#full-name"
  },"3114": {
    "doc": "tree-item",
    "title": "properties",
    "content": "Properties can be configured as relevant characteristics for an item. To configure a property use: . | A colon (:) after the name of the item, before the first property. | Commas (,) as separators between properties | . ",
    "url": "/docs/tree-item.html#properties",
    
    "relUrl": "/docs/tree-item.html#properties"
  },"3115": {
    "doc": "tree-item",
    "title": "example",
    "content": "attribute&lt;meter&gt; length (road) := arc_length(geometry), descr = \"length of the road\"; . In the example an attribute tree item is configured with as: . | values-unit: meter | tree-item-name: length | domain-unit: road | two property, an expression: arc_length(geometry) and a description: length of the road. | . ",
    "url": "/docs/tree-item.html#example",
    
    "relUrl": "/docs/tree-item.html#example"
  },"3116": {
    "doc": "tree-item",
    "title": "tree-item",
    "content": " ",
    "url": "/docs/tree-item.html",
    
    "relUrl": "/docs/tree-item.html"
  },"3117": {
    "doc": "treeview",
    "title": "introduction",
    "content": ". The Treeview is the main navigation component of the application. It presents the hierarchical structure of a configuration in a view like the Windows Explorer. By default, the first level items are shown (the root item is not shown, it’s name in presented in the title bar). Each item in the tree (called a tree-item) is presented with a tree-item-name and an icon. The selected item in the Treeview is the active item in the application. This is an important concept, as many functions of the application work on the active tree item. By clicking the right mouse button a pop-up menu can be activated, with a set of menu options that work on this active tree item. The detail-pages also present information on this active item. ",
    "url": "/docs/treeview.html#introduction",
    
    "relUrl": "/docs/treeview.html#introduction"
  },"3118": {
    "doc": "treeview",
    "title": "icons",
    "content": "The main purpose of the icons is to inform the user on the type of item and, if relevant, show which default viewer will be used for the item. Double-clicking or pressing the Enter key on a selected tree item activates this viewer. The following icons are in use: . | icon | description | . | | A data-item that can be viewed in a map. This implies the domain-unit of the data item has a geographic relation (see how-to-model for how-to-configure-a-coordinate-system). Dependent on the geographic domain, the data is visualized in a grid, point, arc or polygon layer | . | | A data item that cannot be visualized on a map (it has no geographic relation), it’s default viewer is a table. | . | | A data item that contains a palette (a set of color values, corresponding to a classification). | . | | A container, not containing data items as direct subitems. | . | | A container, containing data items as direct subitems, it’s default viewer is a table. | . | | A tree item with no data item and no subitems, e.g. a unit. | . ",
    "url": "/docs/treeview.html#icons",
    
    "relUrl": "/docs/treeview.html#icons"
  },"3119": {
    "doc": "treeview",
    "title": "colors",
    "content": "The color used for a tree item name indicate it’s status. Three statuses are distinguished: . | Not yet calculated: an item is are not yet calculated. | Valid: the results are calculated successfully and the integrity checks configured for the item and its suppliers are met. | Failed: the application failed in updating the results or the integrity checks are not met. In the first case, the results are not available; an error is raised indicating what problem occurred while updating the tree item. In the second case, the results are available and can be presented in a view; a warning color indicates the results are not valid. | . The colors for these statuses can be viewed or edited with the Settings &gt; GUI options dialog, section TreeView, Show state colors. The application controls when and how to update tree items. If a user requests a view on a data item, the required tree items are first updated, before the results are presented in the view. If a tree item has become valid, this status is ‘stored’ until changes are made in the calculation rules. This means the second time the same view (or another view requiring the same data items) is requested, the data item is already valid and the results can be visualized immediately. ",
    "url": "/docs/treeview.html#colors",
    
    "relUrl": "/docs/treeview.html#colors"
  },"3120": {
    "doc": "treeview",
    "title": "pop-up/context menu",
    "content": ". With a right mouse click, a pop-up menu can be requested for actions on the active tree item. This menu contains the following options, some options are only available for data items of for items with the status: failed . | export-primary-data : exports the contents of the active data item (or the subitems of a container) with the export dialog. | Step up to FailReason: if a data item is failed, this option activates the first failed supplier. | Run up to Causa Prima (i.e. repeated Step up): if a data item is failed, the GeoDMS tries to find the the item for which the first error occurs. | Open in Editor: Opens the current item in the configuration-file-editor as configured in the Settings &gt; Local machine options dialog, section Configuration File Editor. | Update TreeItem: update the tree item, without showing the result in a view. The process is visualized with a process scheme. | Update SubTree: update the tree item and all it’s subitems, without showing the result in a view. The process is visualized with a process scheme. | Code Analysis: Four options to find out if the item configured is used in calculating results . | set source: set the item as source item to be analysed | set target: set the item as target item for the calculation process | add target: add the item as target item for the calculation process | clear target: clear the item as target item for the calculation process | . | Default: calculate the results and use the default views (indicated by the icon) to view the results. | Table: calculate the results and present the results in a table view | Map: calculate the results and present the results in a map view | Statistics: calculate the results and present the results in a statistics window | . ",
    "url": "/docs/treeview.html#pop-upcontext-menu",
    
    "relUrl": "/docs/treeview.html#pop-upcontext-menu"
  },"3121": {
    "doc": "treeview",
    "title": "treeview",
    "content": "user-guide-geodms-gui - TreeView . ",
    "url": "/docs/treeview.html",
    
    "relUrl": "/docs/treeview.html"
  },"3122": {
    "doc": "trigonometric-functions",
    "title": "trigonometric-functions",
    "content": "Trigonometric operators-and-functions (also called circular functions) are functions of an angle; . | sin | cos | tan | atan | . ",
    "url": "/docs/trigonometric-functions.html",
    
    "relUrl": "/docs/trigonometric-functions.html"
  },"3123": {
    "doc": "trim",
    "title": "syntax",
    "content": ". | trim(string_dataitem) | . ",
    "url": "/docs/trim.html#syntax",
    
    "relUrl": "/docs/trim.html#syntax"
  },"3124": {
    "doc": "trim",
    "title": "definition",
    "content": "trim(string_dataitem) removes space characters before the first and after the last non space character in string_dataitem. ",
    "url": "/docs/trim.html#definition",
    
    "relUrl": "/docs/trim.html#definition"
  },"3125": {
    "doc": "trim",
    "title": "applies to",
    "content": "data-item string_dataitem with string value-type . ",
    "url": "/docs/trim.html#applies-to",
    
    "relUrl": "/docs/trim.html#applies-to"
  },"3126": {
    "doc": "trim",
    "title": "example",
    "content": "attribute&lt;string&gt; trimA (ADomain) := trim(A); . | A | trimA | . | ‘Test’ | ‘Test’ | . | ‘88hallo99’ | ‘88hallo99’ | . | ’+)’ | ’+)’ | . | ‘twee woorden’ | ‘twee woorden’ | . | ’ test met spatie’ | ‘test met spatie’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/trim.html#example",
    
    "relUrl": "/docs/trim.html#example"
  },"3127": {
    "doc": "trim",
    "title": "see also",
    "content": ". | ltrim | rtrim | . ",
    "url": "/docs/trim.html#see-also",
    
    "relUrl": "/docs/trim.html#see-also"
  },"3128": {
    "doc": "trim",
    "title": "trim",
    "content": "string-functions trim . ",
    "url": "/docs/trim.html",
    
    "relUrl": "/docs/trim.html"
  },"3129": {
    "doc": true,
    "title": "syntax",
    "content": ". | true | . ",
    "url": "/docs/true.html#syntax",
    
    "relUrl": "/docs/true.html#syntax"
  },"3130": {
    "doc": true,
    "title": "definition",
    "content": "True: the logical value true defined for boolean data-item . ",
    "url": "/docs/true.html#definition",
    
    "relUrl": "/docs/true.html#definition"
  },"3131": {
    "doc": true,
    "title": "applies to",
    "content": "data item with bool value-type . ",
    "url": "/docs/true.html#applies-to",
    
    "relUrl": "/docs/true.html#applies-to"
  },"3132": {
    "doc": true,
    "title": "example",
    "content": "parameter&lt;bool&gt; paramTrue := True; . ",
    "url": "/docs/true.html#example",
    
    "relUrl": "/docs/true.html#example"
  },"3133": {
    "doc": true,
    "title": "see also",
    "content": "false . ",
    "url": "/docs/true.html#see-also",
    
    "relUrl": "/docs/true.html#see-also"
  },"3134": {
    "doc": true,
    "title": true,
    "content": "constant-functions true . ",
    "url": "/docs/true.html",
    
    "relUrl": "/docs/true.html"
  },"3135": {
    "doc": "two-dimensional-domain",
    "title": "two-dimensional-domain",
    "content": "In a two-dimensional domain-unit each element represents the value of a cell in a two-dimensional structure. A two-dimensional domain in the GeoDMS is a synonym for a grid-domain. ",
    "url": "/docs/two-dimensional-domain.html",
    
    "relUrl": "/docs/two-dimensional-domain.html"
  },"3136": {
    "doc": "typenames",
    "title": "definition",
    "content": "TypeNames is the first argument of the discrete_alloc function. TypeNames is an attribute with the name of each land use type. The domain-unit of this attribute is the set of land use types. ",
    "url": "/docs/typenames.html#definition",
    
    "relUrl": "/docs/typenames.html#definition"
  },"3137": {
    "doc": "typenames",
    "title": "applies to",
    "content": "attribute TypeNames with value-type: string . ",
    "url": "/docs/typenames.html#applies-to",
    
    "relUrl": "/docs/typenames.html#applies-to"
  },"3138": {
    "doc": "typenames",
    "title": "conditions",
    "content": "The names of the land use types need to match with the name of the subitem of the following arguments of the discrete_alloc function: . | suitabilitymaps | minclaims | maxclaims | . ",
    "url": "/docs/typenames.html#conditions",
    
    "relUrl": "/docs/typenames.html#conditions"
  },"3139": {
    "doc": "typenames",
    "title": "example",
    "content": "unit&lt;uint8&gt;&gt; lu_type: nrofrows = 3 {    attribute&lt;string&gt; Name: ['Living','Working','Nature'];` } . ",
    "url": "/docs/typenames.html#example",
    
    "relUrl": "/docs/typenames.html#example"
  },"3140": {
    "doc": "typenames",
    "title": "typenames",
    "content": "allocation-functions, argument 1: TypeNames . ",
    "url": "/docs/typenames.html",
    
    "relUrl": "/docs/typenames.html"
  },"3141": {
    "doc": "uint16",
    "title": "concept",
    "content": ". | uint16 is a 16 bits (2 bytes) unsigned integer value-type. | uint16() is a function converting data-item or unit of other value types to the uint16 value type. | . This page describes the uint16() function. ",
    "url": "/docs/uint16.html#concept",
    
    "relUrl": "/docs/uint16.html#concept"
  },"3142": {
    "doc": "uint16",
    "title": "syntax",
    "content": ". | uint16(a) | literalw | . ",
    "url": "/docs/uint16.html#syntax",
    
    "relUrl": "/docs/uint16.html#syntax"
  },"3143": {
    "doc": "uint16",
    "title": "definition",
    "content": "uint16(a) results in a 16 bits(2 bytes) unsigned integer tree-item converted from item a. The function results for: . | integer data items: the integer value is interpreted as uint16 value, if the value exceeds the allowed value range for the uint16 value type, the resulting value will be null; | float32/64 data items: the value before the decimal point (so 1.9 will be rounded off to 1 and 2.0 to 2). If the value exceeds the allowed value range for the uint16 value type, the resulting value will be null; | boolean data items : 1 for True values and 0 for False values; | string data items, if the value starts with an allowed numeric value for the value type, this value is converted to a uint16 value type. Other characters after the numeric values are ignored. If the string does not start with an allowed numeric value for the value-type, the resulting value will be null; | units, a 16 bits(2 bytes) unsigned integer unit of the converted unit. | . ",
    "url": "/docs/uint16.html#definition",
    
    "relUrl": "/docs/uint16.html#definition"
  },"3144": {
    "doc": "uint16",
    "title": "applies to",
    "content": ". | data item or unit with Numeric, uint2, uint4, bool or string value type | . ",
    "url": "/docs/uint16.html#applies-to",
    
    "relUrl": "/docs/uint16.html#applies-to"
  },"3145": {
    "doc": "uint16",
    "title": "since version",
    "content": ". | 5.15 | w suffix: since 7.105 | . ",
    "url": "/docs/uint16.html#since-version",
    
    "relUrl": "/docs/uint16.html#since-version"
  },"3146": {
    "doc": "uint16",
    "title": "example",
    "content": "1. parameter&lt;uint16&gt; uint16Numeric1 := uint16(1); 2. parameter&lt;uint16&gt; uint16Numeric1 := 1w; 3. attribute&lt;uint16&gt; uint16A (ADomain) := uint16(A); 4. attribute&lt;uint16&gt; uint16B (ADomain) := uint16(B); . | A(float32) | B(string) | uint16A | uint16B | . | 0 | ‘Hello’ | 0 | null | . | 1 | ‘Test’ | 1 | null | . | 1000000 | null | null | null | . | -2.5 | ‘Two words’ | null | null | . | 99.9 | ‘88a’ | 99 | 88 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/uint16.html#example",
    
    "relUrl": "/docs/uint16.html#example"
  },"3147": {
    "doc": "uint16",
    "title": "uint16",
    "content": "conversion-functions uint16 . ",
    "url": "/docs/uint16.html",
    
    "relUrl": "/docs/uint16.html"
  },"3148": {
    "doc": "uint16seq",
    "title": "syntax",
    "content": ". | uint16Seq(a) | . ",
    "url": "/docs/uint16seq.html#syntax",
    
    "relUrl": "/docs/uint16seq.html#syntax"
  },"3149": {
    "doc": "uint16seq",
    "title": "definition",
    "content": "uint16Seq(a) results in a sequence of 16 bits unsigned integers derived from string data-item a. The syntax for string argument a need to be: {10: 41 9999 42 10 600 1 7 116 0 110}. In this string: . | The curly brackets {..} indicate the start and end of the sequence. | The first number (10) indicates the number of elements of the sequence followed by a colon. The elements of the sequence follow this colon, separated by spaces. | . The composition need to be configured to poly. The sequence2points function can be used to make a pointset domain. ",
    "url": "/docs/uint16seq.html#definition",
    
    "relUrl": "/docs/uint16seq.html#definition"
  },"3150": {
    "doc": "uint16seq",
    "title": "applies to",
    "content": ". | data-item a with a string value-type | . ",
    "url": "/docs/uint16seq.html#applies-to",
    
    "relUrl": "/docs/uint16seq.html#applies-to"
  },"3151": {
    "doc": "uint16seq",
    "title": "since version",
    "content": "7.130 . ",
    "url": "/docs/uint16seq.html#since-version",
    
    "relUrl": "/docs/uint16seq.html#since-version"
  },"3152": {
    "doc": "uint16seq",
    "title": "example",
    "content": "parameter&lt;string&gt; param := '{10: 41 9999 42 10 600 1 7 116 0 110}'; parameter&lt;uint16&gt; param_uint16 (poly) := uint16Seq(source/param); . | param_uint16 | . | {10: 41 9999 42 10 600 7 116 0 110} | . ",
    "url": "/docs/uint16seq.html#example",
    
    "relUrl": "/docs/uint16seq.html#example"
  },"3153": {
    "doc": "uint16seq",
    "title": "uint16seq",
    "content": "sequence-functions uint16Seq . ",
    "url": "/docs/uint16seq.html",
    
    "relUrl": "/docs/uint16seq.html"
  },"3154": {
    "doc": "uint2",
    "title": "concept",
    "content": ". | uint2 is a 2 bits unsigned integer sub-byte-element. | uint2() is a function converting data-item or unit of other value-type to the uint2 value type. | . This page describes the uint2() function. ",
    "url": "/docs/uint2.html#concept",
    
    "relUrl": "/docs/uint2.html#concept"
  },"3155": {
    "doc": "uint2",
    "title": "syntax",
    "content": ". | uint2(a) | literalu2 | . ",
    "url": "/docs/uint2.html#syntax",
    
    "relUrl": "/docs/uint2.html#syntax"
  },"3156": {
    "doc": "uint2",
    "title": "definition",
    "content": "uint2(a) results in a 2 bits unsigned integer tree-item converted from item a. The function results for: . | integer data items: the integer value is interpreted as uint2 value, if the value exceeds the allowed value range for the uint2 value type, the resulting value will be 0; | float32/64 data items: the value before the decimal point (so 1.9 will be rounded off to 1 and 2.0 to 2). If the value exceeds the allowed value range for the uint2 value type, the resulting value will be 0; boolean data items: 1 for True values and 0 for False values; | string data-item, if the value starts with an allowed numeric value for the value-type, this value is converted to a uint2 value type. Other characters after the numeric values are ignored. If the string does not start with an allowed numeric value for the value type, the resulting value will be 0; | units, a 2 bits unsigned integer unit of the converted unit. | . ",
    "url": "/docs/uint2.html#definition",
    
    "relUrl": "/docs/uint2.html#definition"
  },"3157": {
    "doc": "uint2",
    "title": "applies to",
    "content": ". | data item or unit with Numeric, uint4, bool or string value type | . ",
    "url": "/docs/uint2.html#applies-to",
    
    "relUrl": "/docs/uint2.html#applies-to"
  },"3158": {
    "doc": "uint2",
    "title": "since version",
    "content": ". | 5.15 | u2 suffix: since 7.105 | . ",
    "url": "/docs/uint2.html#since-version",
    
    "relUrl": "/docs/uint2.html#since-version"
  },"3159": {
    "doc": "uint2",
    "title": "example",
    "content": "1. parameter&lt;uint2&gt; uint2Numeric1 := uint2(1); 2. parameter&lt;uint2&gt; uint2Numeric1 := 1u2; 3. attribute&lt;uint2&gt; uint2A (ADomain) := uint2(A); 4. attribute&lt;uint2&gt; uint2B (ADomain) := uint2(B); . | A(float32) | B(string) | uint2A | uint2B | . | 0 | ‘Hello’ | 0 | 0 | . | 1 | ‘Test’ | 1 | 0 | . | 1000000 | null | 0 | 0 | . | -2.5 | ‘Two words’ | 0 | 0 | . | 99.9 | ‘88a’ | 0 | 0 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/uint2.html#example",
    
    "relUrl": "/docs/uint2.html#example"
  },"3160": {
    "doc": "uint2",
    "title": "uint2",
    "content": "conversion-functions Uint2 . ",
    "url": "/docs/uint2.html",
    
    "relUrl": "/docs/uint2.html"
  },"3161": {
    "doc": "uint32",
    "title": "concept",
    "content": ". | uint32 is a 32 bits (4 bytes) unsigned integer value-type. | uint32() is a function converting data-item or unit of other value types to the uint32 value type. | . This page describes the uint32() function. ",
    "url": "/docs/uint32.html#concept",
    
    "relUrl": "/docs/uint32.html#concept"
  },"3162": {
    "doc": "uint32",
    "title": "syntax",
    "content": ". | uint32(a) | literalu | . ",
    "url": "/docs/uint32.html#syntax",
    
    "relUrl": "/docs/uint32.html#syntax"
  },"3163": {
    "doc": "uint32",
    "title": "description",
    "content": "The uint32() function may be used to denote a literal to a uint32 value type but this is not necessary, as literals are by default considered as uint32. ",
    "url": "/docs/uint32.html#description",
    
    "relUrl": "/docs/uint32.html#description"
  },"3164": {
    "doc": "uint32",
    "title": "definition",
    "content": "uint32(a) results in a 32 bits(4 bytes) unsigned integer tree-item converted from item a. The function results for: . | integer data items: the integer value is interpreted as uint32 value, if the value exceeds the allowed value range for the uint32 value type, the resulting value will be null; | float32/64 data items: the value before the decimal point (so 1.9 will be rounded off to 1 and 2.0 to 2). If the value exceeds the allowed value range for the uint32 value type, the resulting value will be null; | boolean data items: 1 for True values and 0 for False values; | string data items, if the value starts with an allowed numeric value for the value type, this value is converted to a uint32 value type. Other characters after the numeric values are ignored. If the string does not start with an allowed numeric value for the value type, the resulting value will be null; | units, a 32 bits(4 bytes) unsigned integer unit of the converted unit. | . ",
    "url": "/docs/uint32.html#definition",
    
    "relUrl": "/docs/uint32.html#definition"
  },"3165": {
    "doc": "uint32",
    "title": "applies to",
    "content": ". | data item or unit with Numeric, uint2, uint4, bool or string value type | . ",
    "url": "/docs/uint32.html#applies-to",
    
    "relUrl": "/docs/uint32.html#applies-to"
  },"3166": {
    "doc": "uint32",
    "title": "since version",
    "content": ". | 5.15 | u suffix: since 7.105 | . ",
    "url": "/docs/uint32.html#since-version",
    
    "relUrl": "/docs/uint32.html#since-version"
  },"3167": {
    "doc": "uint32",
    "title": "example",
    "content": "1. parameter&lt;uint32&gt; uint32Numeric1 := uint32(1); 2. parameter&lt;uint32&gt; uint32Numeric1 := 1u; 3. attribute&lt;uint32&gt; uint32A (ADomain) := uint32(A); 4. attribute&lt;uint32&gt; uint32B (ADomain) := uint32(B); . | A(float32) | B(string) | uint32A | uint32B | . | 0 | ‘Hello’ | 0 | null | . | 1 | ‘Test’ | 1 | null | . | 1000000 | null | 1000000 | null | . | -2.5 | ‘Two words’ | null | null | . | 99.9 | ‘88a’ | 99 | 88 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/uint32.html#example",
    
    "relUrl": "/docs/uint32.html#example"
  },"3168": {
    "doc": "uint32",
    "title": "uint32",
    "content": "conversion-functions uint32 . ",
    "url": "/docs/uint32.html",
    
    "relUrl": "/docs/uint32.html"
  },"3169": {
    "doc": "uint32seq",
    "title": "syntax",
    "content": ". | uint32Seq(a) | . ",
    "url": "/docs/uint32seq.html#syntax",
    
    "relUrl": "/docs/uint32seq.html#syntax"
  },"3170": {
    "doc": "uint32seq",
    "title": "definition",
    "content": "uint32Seq(a) results in a sequence of 32 bits unsigned integers derived from string data-item a. The syntax for string argument a need to be: {10: 41 9999 42 10 600 1 7 116 0 110}. In this string: . | The curly brackets {..} indicate the start and end of the sequence. | The first number (10) indicates the number of elements of the sequence followed by a colon. The elements of the sequence follow this colon, separated by spaces. | . The composition need to be configured to poly. The sequence2points function can be used to make a pointset domain. ",
    "url": "/docs/uint32seq.html#definition",
    
    "relUrl": "/docs/uint32seq.html#definition"
  },"3171": {
    "doc": "uint32seq",
    "title": "applies to",
    "content": ". | data-item a with a string value-type | . ",
    "url": "/docs/uint32seq.html#applies-to",
    
    "relUrl": "/docs/uint32seq.html#applies-to"
  },"3172": {
    "doc": "uint32seq",
    "title": "since version",
    "content": "7.130 . ",
    "url": "/docs/uint32seq.html#since-version",
    
    "relUrl": "/docs/uint32seq.html#since-version"
  },"3173": {
    "doc": "uint32seq",
    "title": "example",
    "content": "parameter&lt;string&gt; param := '{10: 41 9999 42 10 600 1 7 116 0 110}'; parameter&lt;uint32&gt; param_uint32 (poly) := uint32Seq(source/param); . | param_uint32 | . | {10: 41 9999 42 10 600 7 116 0 110} | . ",
    "url": "/docs/uint32seq.html#example",
    
    "relUrl": "/docs/uint32seq.html#example"
  },"3174": {
    "doc": "uint32seq",
    "title": "uint32seq",
    "content": "sequence-functions uint32Seq . ",
    "url": "/docs/uint32seq.html",
    
    "relUrl": "/docs/uint32seq.html"
  },"3175": {
    "doc": "uint4",
    "title": "concept",
    "content": ". | uint4 is a 4 bits unsigned integer sub-byte-element. | uint4() is a function converting data-item or unit of other value-type to the uint4 value type. | . This page describes the uint4() function. ",
    "url": "/docs/uint4.html#concept",
    
    "relUrl": "/docs/uint4.html#concept"
  },"3176": {
    "doc": "uint4",
    "title": "syntax",
    "content": ". | uint4(a) | literalu4 | . ",
    "url": "/docs/uint4.html#syntax",
    
    "relUrl": "/docs/uint4.html#syntax"
  },"3177": {
    "doc": "uint4",
    "title": "definition",
    "content": "uint4(a) results in a 4 bits unsigned integer tree-item converted from tree item a. The function results for: . | integer data items: the integer value is interpreted as uint4 value, if the value exceeds the allowed value range for the uint4 value type, the resulting value will be 0; | float32/64 data items: the value before the decimal point (so 1.9 will be rounded off to 1 and 2.0 to 2). If the value exceeds the allowed value range for the uint4 value type, the resulting value will be 0; | boolean data items: 1 for True values and 0 for False values; | string data items, if the value starts with an allowed numeric value for the value type, this value is converted to a uint4 value type. Other characters after the numeric values are ignored. If the string does not start with an allowed numeric value for the value type, the resulting value will be 0; | units, a 4 bits unsigned integer unit of the converted unit. | . ",
    "url": "/docs/uint4.html#definition",
    
    "relUrl": "/docs/uint4.html#definition"
  },"3178": {
    "doc": "uint4",
    "title": "applies to",
    "content": ". | data item or unit with Numeric, uint2, bool or string value type | . ",
    "url": "/docs/uint4.html#applies-to",
    
    "relUrl": "/docs/uint4.html#applies-to"
  },"3179": {
    "doc": "uint4",
    "title": "since version",
    "content": ". | 5.15 | u4 suffix: since 7.105 | . ",
    "url": "/docs/uint4.html#since-version",
    
    "relUrl": "/docs/uint4.html#since-version"
  },"3180": {
    "doc": "uint4",
    "title": "example",
    "content": "1. parameter&lt;uint4&gt; uint4Numeric1 := uint4(1); 2. parameter&lt;uint4&gt; uint4Numeric1 := 1u4; 3. attribute&lt;uint4&gt; uint4A (ADomain) := uint4(A); 4. attribute&lt;uint4&gt; uint4B (ADomain) := uint4(B); . | A(float32) | B(string) | uint4A | uint4B | . | 0 | ‘Hello’ | 0 | 0 | . | 1 | ‘Test’ | 1 | 0 | . | 1000000 | null | 0 | 0 | . | -2.5 | ‘Two words’ | 0 | 0 | . | 99.9 | ‘88a’ | 0 | 0 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/uint4.html#example",
    
    "relUrl": "/docs/uint4.html#example"
  },"3181": {
    "doc": "uint4",
    "title": "uint4",
    "content": "conversion-functions uint4 . ",
    "url": "/docs/uint4.html",
    
    "relUrl": "/docs/uint4.html"
  },"3182": {
    "doc": "uint64",
    "title": "concept",
    "content": ". | uint64 is a 64 bits (8 bytes) unsigned integer value-type. | uint64() is a function converting data items or unit of other value types to the uint64 value type. | . This page describes the uint64() function. ",
    "url": "/docs/uint64.html#concept",
    
    "relUrl": "/docs/uint64.html#concept"
  },"3183": {
    "doc": "uint64",
    "title": "syntax",
    "content": ". | uint64(a) | literalu64 | . ",
    "url": "/docs/uint64.html#syntax",
    
    "relUrl": "/docs/uint64.html#syntax"
  },"3184": {
    "doc": "uint64",
    "title": "definition",
    "content": "uint64(a) results in a 64 bits(8 bytes) unsigned integer tree-item converted from item a. The function results for: . | integer data-item: the integer value is interpreted as uint64 value, if the value exceeds the allowed value range for the uint64 value-type, the resulting value will be null; | float32/64 data items: the value before the decimal point (so 1.9 will be rounded off to 1 and 2.0 to 2). If the value exceeds the allowed value range for the uint64 value type, the resulting value will be null; | boolean data items: 1 for True values and 0 for False values; | string data items, if the value starts with an allowed numeric value for the value type, this value is converted to a uint64 value type. Other characters after the numeric values are ignored. If the string does not start with an allowed numeric value for the value type, the resulting value will be null; | units, a 64 bits(8 bytes) unsigned integer unit of the converted unit. | . ",
    "url": "/docs/uint64.html#definition",
    
    "relUrl": "/docs/uint64.html#definition"
  },"3185": {
    "doc": "uint64",
    "title": "applies to",
    "content": ". | data item or unit with Numeric, uint2, uint4, bool or string value type | . ",
    "url": "/docs/uint64.html#applies-to",
    
    "relUrl": "/docs/uint64.html#applies-to"
  },"3186": {
    "doc": "uint64",
    "title": "since version",
    "content": ". | 5.95 | u64 suffix: since 7.105 | . ",
    "url": "/docs/uint64.html#since-version",
    
    "relUrl": "/docs/uint64.html#since-version"
  },"3187": {
    "doc": "uint64",
    "title": "example",
    "content": "1. parameter&lt;uint64&gt; uint64Numeric1 := uint64(1); 2. parameter&lt;uint64&gt; uint64Numeric1 := 1u64; 3. attribute&lt;uint64&gt; uint64A (ADomain) := uint64(A); 4. attribute&lt;uint64&gt; uint64B (ADomain) := uint64(B); . | A(float32) | B(string) | uint64A | uint64B | . | 0 | ‘Hello’ | 0 | null | . | 1 | ‘Test’ | 1 | null | . | 1000000 | null | 1000000 | null | . | -2.5 | ‘Two words’ | null | null | . | 99.9 | ‘88a’ | 99 | 88 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/uint64.html#example",
    
    "relUrl": "/docs/uint64.html#example"
  },"3188": {
    "doc": "uint64",
    "title": "uint64",
    "content": "conversion-functions uint64 . ",
    "url": "/docs/uint64.html",
    
    "relUrl": "/docs/uint64.html"
  },"3189": {
    "doc": "uint64seq",
    "title": "syntax",
    "content": ". | uint64Seq(a) | . ",
    "url": "/docs/uint64seq.html#syntax",
    
    "relUrl": "/docs/uint64seq.html#syntax"
  },"3190": {
    "doc": "uint64seq",
    "title": "definition",
    "content": "uint64Seq(a) results in a sequence of 64 bits unsigned integers derived from string data-item a. The syntax for string argument a need to be: {10: 41 9999 42 10 600 1 7 116 0 110}. In this string: . | The curly brackets {..} indicate the start and end of the sequence. | The first number (10) indicates the number of elements of the sequence followed by a colon. The elements of the sequence follow this colon, separated by spaces. | . The composition need to be configured to poly. The sequence2points function can be used to make a pointset domain. ",
    "url": "/docs/uint64seq.html#definition",
    
    "relUrl": "/docs/uint64seq.html#definition"
  },"3191": {
    "doc": "uint64seq",
    "title": "applies to",
    "content": ". | data-item a with a string value-type | . ",
    "url": "/docs/uint64seq.html#applies-to",
    
    "relUrl": "/docs/uint64seq.html#applies-to"
  },"3192": {
    "doc": "uint64seq",
    "title": "since version",
    "content": "7.130 . ",
    "url": "/docs/uint64seq.html#since-version",
    
    "relUrl": "/docs/uint64seq.html#since-version"
  },"3193": {
    "doc": "uint64seq",
    "title": "example",
    "content": "parameter&lt;string&gt; param := '{10: 41 9999 42 10 600 1 7 116 0 110}'; parameter&lt;uint64&gt; param_uint64 (poly) := uint64Seq(source/param); . | param_uint64 | . | {10: 41 9999 42 10 600 7 116 0 110} | . ",
    "url": "/docs/uint64seq.html#example",
    
    "relUrl": "/docs/uint64seq.html#example"
  },"3194": {
    "doc": "uint64seq",
    "title": "uint64seq",
    "content": "sequence-functions uint64Seq . ",
    "url": "/docs/uint64seq.html",
    
    "relUrl": "/docs/uint64seq.html"
  },"3195": {
    "doc": "uint8",
    "title": "concept",
    "content": ". | uint8 is a 8 bits (1 byte) unsigned integer value-type. | uint8() is a function converting data-item or unit of other value types to the uint8 value type. | . This page describes the uint8() function. ",
    "url": "/docs/uint8.html#concept",
    
    "relUrl": "/docs/uint8.html#concept"
  },"3196": {
    "doc": "uint8",
    "title": "syntax",
    "content": ". | uint8(a) | literalb | . ",
    "url": "/docs/uint8.html#syntax",
    
    "relUrl": "/docs/uint8.html#syntax"
  },"3197": {
    "doc": "uint8",
    "title": "definition",
    "content": "uint8(a) results in a 8 bits(1 byte) unsigned integer tree-item converted from item a. The function results for: . | integer data items: the integer value is interpreted as uint8 value, if the value exceeds the allowed value range for the uint8 value type, the resulting value will be null; | float32/64 data items: the value before the decimal point (so 1.9 will be rounded off to 1 and 2.0 to 2). If the value exceeds the allowed value range for the uint8 value type, the resulting value will be null; | boolean data items: 1 for True values and 0 for False values; | string data items, if the value starts with an allowed numeric value for the value type, this value is converted to a uint8 value type. Other characters after the numeric values are ignored. If the string does not start with an allowed numeric value for the value type, the resulting value will be null; | units, a 8 bits(1 byte) unsigned integer unit of the converted unit. | . ",
    "url": "/docs/uint8.html#definition",
    
    "relUrl": "/docs/uint8.html#definition"
  },"3198": {
    "doc": "uint8",
    "title": "applies to",
    "content": ". | data item or unit with Numeric, uint2, uint4, bool or string value type | . ",
    "url": "/docs/uint8.html#applies-to",
    
    "relUrl": "/docs/uint8.html#applies-to"
  },"3199": {
    "doc": "uint8",
    "title": "since version",
    "content": ". | 5.15 | b suffix: since 7.105 | . ",
    "url": "/docs/uint8.html#since-version",
    
    "relUrl": "/docs/uint8.html#since-version"
  },"3200": {
    "doc": "uint8",
    "title": "example",
    "content": "1. parameter&lt;uint8&gt; uint8Numeric1 := uint8(1); 2. parameter&lt;uint8&gt; uint8Numeric1 := 1b; 3. attribute&lt;uint8&gt; uint8A (ADomain) := uint8(A); 4. attribute&lt;uint8&gt; uint8B (ADomain) := uint8(B); . | A(float32) | B(string) | uint8A | uint8B | . | 0 | ‘Hello’ | 0 | null | . | 1 | ‘Test’ | 1 | null | . | 1000000 | null | null | null | . | -2.5 | ‘Two words’ | null | null | . | 99.9 | ‘88a’ | 99 | 88 | . ADomain, nr of rows = 5 . ",
    "url": "/docs/uint8.html#example",
    
    "relUrl": "/docs/uint8.html#example"
  },"3201": {
    "doc": "uint8",
    "title": "uint8",
    "content": "conversion-functions uint8 . ",
    "url": "/docs/uint8.html",
    
    "relUrl": "/docs/uint8.html"
  },"3202": {
    "doc": "uint8seq",
    "title": "syntax",
    "content": ". | uint8Seq(a) | . ",
    "url": "/docs/uint8seq.html#syntax",
    
    "relUrl": "/docs/uint8seq.html#syntax"
  },"3203": {
    "doc": "uint8seq",
    "title": "definition",
    "content": "uint8Seq(a) results in a sequence of 8 bits unsigned integers derived from string data-item a. The syntax for string argument a need to be: {10: 41 9999 42 10 600 1 7 116 0 110}. In this string: . | The curly brackets {..} indicate the start and end of the sequence. | The first number (10) indicates the number of elements of the sequence followed by a colon. The elements of the sequence follow this colon, separated by spaces. | . The composition need to be configured to poly. The sequence2points function can be used to make a pointset domain. ",
    "url": "/docs/uint8seq.html#definition",
    
    "relUrl": "/docs/uint8seq.html#definition"
  },"3204": {
    "doc": "uint8seq",
    "title": "applies to",
    "content": ". | data-item a with a string value-type | . ",
    "url": "/docs/uint8seq.html#applies-to",
    
    "relUrl": "/docs/uint8seq.html#applies-to"
  },"3205": {
    "doc": "uint8seq",
    "title": "since version",
    "content": "7.130 . ",
    "url": "/docs/uint8seq.html#since-version",
    
    "relUrl": "/docs/uint8seq.html#since-version"
  },"3206": {
    "doc": "uint8seq",
    "title": "example",
    "content": "parameter&lt;string&gt; param := '{10: 41 9999 42 10 600 1 7 116 0 110}'; parameter&lt;uint8&gt; param_uint8 (poly) := uint8Seq(source/param); . | param_uint8 | . | {10: 41 null 42 10 null 1 7 116 0 110} | . ",
    "url": "/docs/uint8seq.html#example",
    
    "relUrl": "/docs/uint8seq.html#example"
  },"3207": {
    "doc": "uint8seq",
    "title": "uint8seq",
    "content": "sequence-functions Uint8Seq . ",
    "url": "/docs/uint8seq.html",
    
    "relUrl": "/docs/uint8seq.html"
  },"3208": {
    "doc": "under-study",
    "title": "topics",
    "content": ". | Reading pyramid info from tiff file and use for visualisations at different zoom levels in the map view | Reading multiple attributes with gdal . | event-log-improvements | error-dialog-improvements . | value-based-calculating | [[template typing]] | tree-item with very long full paths can cause issues with regard to long path names for Calccache files (default maximum length of a path in Windows is 260 characters). | error-tracking-in-indirect-expressions | geodms-on-linux | checking-consistency-of-values-and-domains | . ",
    "url": "/docs/under-study.html#topics",
    
    "relUrl": "/docs/under-study.html#topics"
  },"3209": {
    "doc": "under-study",
    "title": "see also",
    "content": ". | planned-developments | . ",
    "url": "/docs/under-study.html#see-also",
    
    "relUrl": "/docs/under-study.html#see-also"
  },"3210": {
    "doc": "under-study",
    "title": "under-study",
    "content": "The following topics are under study and results might be implemented in future versions of the GeoDMS. ",
    "url": "/docs/under-study.html",
    
    "relUrl": "/docs/under-study.html"
  },"3211": {
    "doc": "undquote",
    "title": "syntax",
    "content": ". | undquote(string_dataitem) | . ",
    "url": "/docs/undquote.html#syntax",
    
    "relUrl": "/docs/undquote.html#syntax"
  },"3212": {
    "doc": "undquote",
    "title": "definition",
    "content": "undquote(string_dataitem) removes double quotes from the values of data-item string_dataitem. ",
    "url": "/docs/undquote.html#definition",
    
    "relUrl": "/docs/undquote.html#definition"
  },"3213": {
    "doc": "undquote",
    "title": "applies to",
    "content": "data item string_dataitem with string value-type . ",
    "url": "/docs/undquote.html#applies-to",
    
    "relUrl": "/docs/undquote.html#applies-to"
  },"3214": {
    "doc": "undquote",
    "title": "example",
    "content": "attribute&lt;string&gt; undquoteA (ADomain) := undquote(A); . | A | unquoteA | . | ‘“Test”’ | ‘Test’ | . | ‘“88hallo99”’ | ‘88hallo99’ | . | ’”+)”’ | ’+)’ | . | ‘“twee woorden”’ | ‘twee woorden’ | . | ’” test met spatie”’ | ’ test met spatie’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/undquote.html#example",
    
    "relUrl": "/docs/undquote.html#example"
  },"3215": {
    "doc": "undquote",
    "title": "see also",
    "content": ". | dquote | unquote | . ",
    "url": "/docs/undquote.html#see-also",
    
    "relUrl": "/docs/undquote.html#see-also"
  },"3216": {
    "doc": "undquote",
    "title": "undquote",
    "content": "string-functions und(ouble)quote . ",
    "url": "/docs/undquote.html",
    
    "relUrl": "/docs/undquote.html"
  },"3217": {
    "doc": "union",
    "title": "syntax",
    "content": ". | union(a, b) | . ",
    "url": "/docs/union.html#syntax",
    
    "relUrl": "/docs/union.html#syntax"
  },"3218": {
    "doc": "union",
    "title": "definition",
    "content": "union(a, b) results in a new uint32 domain-unit with all elements of the attribute a and b. ",
    "url": "/docs/union.html#definition",
    
    "relUrl": "/docs/union.html#definition"
  },"3219": {
    "doc": "union",
    "title": "description",
    "content": "The description for the union function is only available for backward compatibility purposes. The function has become obsolete in version 8.7.0. In new configurations, use the union_unit and union_data functions instead. ",
    "url": "/docs/union.html#description",
    
    "relUrl": "/docs/union.html#description"
  },"3220": {
    "doc": "union",
    "title": "since version",
    "content": "5.15 . ",
    "url": "/docs/union.html#since-version",
    
    "relUrl": "/docs/union.html#since-version"
  },"3221": {
    "doc": "union",
    "title": "union",
    "content": "relational-functions union . ",
    "url": "/docs/union.html",
    
    "relUrl": "/docs/union.html"
  },"3222": {
    "doc": "union_data",
    "title": "syntax",
    "content": ". | union_data(domain-unit, a, b, .. n) | . ",
    "url": "/docs/union_data.html#syntax",
    
    "relUrl": "/docs/union_data.html#syntax"
  },"3223": {
    "doc": "union_data",
    "title": "definition",
    "content": "union_data(domain unit, a, b, .. n) results in a new attribute with as domain-unit the first argument: domainunit. The resulting attribute contains the values of the data-item a, b, .., n. ",
    "url": "/docs/union_data.html#definition",
    
    "relUrl": "/docs/union_data.html#definition"
  },"3224": {
    "doc": "union_data",
    "title": "description",
    "content": "The first argument domainunit, is often made with the union_unit function. The union_data function results in an attribute with as values-unit the values units of data items a, b, ..n and as domain-unit the first argument of the function (domainunit). In other words, it appends b to a and then c to a and b, etc. union_data(newdomain, att_old_domain) can be used to convert attributes from a source to a target domain unit. ",
    "url": "/docs/union_data.html#description",
    
    "relUrl": "/docs/union_data.html#description"
  },"3225": {
    "doc": "union_data",
    "title": "applies to",
    "content": ". | unit domainunit with value-type from the group CanBeDomainUnit | data items a, b, … n with Numeric, Point, uint2, uint4, bool or string value type | . ",
    "url": "/docs/union_data.html#applies-to",
    
    "relUrl": "/docs/union_data.html#applies-to"
  },"3226": {
    "doc": "union_data",
    "title": "conditions",
    "content": ". | The values unit of data items a, b, … n must match. | . ",
    "url": "/docs/union_data.html#conditions",
    
    "relUrl": "/docs/union_data.html#conditions"
  },"3227": {
    "doc": "union_data",
    "title": "example",
    "content": "unit&lt;uint32&gt; HollandCity := union_unit(NHCity, ZHCity) { attribute&lt;string&gt; name := union_data(., NHCity/name, ZH/City/name); } . | HollandCity/name | . | Amsterdam | . | Haarlem | . | Alkmaar | . | Rotterdam | . | DenHaag | . | Leiden | . | Dordrecht | . | Leiden | . domain HollandCity, nr of rows = 8 . | NHCity/name | . | Amsterdam | . | Haarlem | . | Alkmaar | . domain NHCity, nr of rows = 3 . | ZHCity/name | . | Rotterdam | . | DenHaag | . | Leiden | . | Dordrecht | . | Leiden | . domain ZHCity, nr of rows = 5 . ",
    "url": "/docs/union_data.html#example",
    
    "relUrl": "/docs/union_data.html#example"
  },"3228": {
    "doc": "union_data",
    "title": "see also",
    "content": ". | union_unit | . ",
    "url": "/docs/union_data.html#see-also",
    
    "relUrl": "/docs/union_data.html#see-also"
  },"3229": {
    "doc": "union_data",
    "title": "union_data",
    "content": "relational-functions union_data . ",
    "url": "/docs/union_data.html",
    
    "relUrl": "/docs/union_data.html"
  },"3230": {
    "doc": "union_polygon-(dissolve)",
    "title": "syntax",
    "content": ". | union_polygon(polygon_data_item) | . ",
    "url": "/docs/union_polygon-(dissolve).html#syntax",
    
    "relUrl": "/docs/union_polygon-(dissolve).html#syntax"
  },"3231": {
    "doc": "union_polygon-(dissolve)",
    "title": "description",
    "content": "union_polygon(polygon_data_item) results in a parameter with all polygons of the polygon_data_item, in which the lines between adjacent polygons are removed. In other GIS software the term dissolve is often used for this operation. ",
    "url": "/docs/union_polygon-(dissolve).html#description",
    
    "relUrl": "/docs/union_polygon-(dissolve).html#description"
  },"3232": {
    "doc": "union_polygon-(dissolve)",
    "title": "applies to",
    "content": "attribute polygon_data_item with an ipoint or spoint value-type . ",
    "url": "/docs/union_polygon-(dissolve).html#applies-to",
    
    "relUrl": "/docs/union_polygon-(dissolve).html#applies-to"
  },"3233": {
    "doc": "union_polygon-(dissolve)",
    "title": "conditions",
    "content": ". | The composition type of the polygon_data_item item needs to be polygon. | The domain-unit of the polygon_data_item item must be of value type uint32. | The order of points in the polygon_data_item needs to be clockwise for exterior bounds and counter clockwise for holes in polygons (right-hand-rule). | . This function result in problems for (integer) coordinates larger than 2^25 (after translation where the first point is moved to (0, 0)). If your integer coordinates for instance represent mm, 2^25[mm] = about 33[km]. The reason is that for calculating intersections, products of coordinates are calculated and casted to float64 with a 53 bits mantissa (in the development/test environment of boost::polygon these were float80 values with a 64 bits mantissa). We advise to keep the size of your integer coordinates for polygons limited and for instance do not use a mm precision for country borders (meter or kilometer might be sufficient). ",
    "url": "/docs/union_polygon-(dissolve).html#conditions",
    
    "relUrl": "/docs/union_polygon-(dissolve).html#conditions"
  },"3234": {
    "doc": "union_polygon-(dissolve)",
    "title": "since version",
    "content": "7.042 . ",
    "url": "/docs/union_polygon-(dissolve).html#since-version",
    
    "relUrl": "/docs/union_polygon-(dissolve).html#since-version"
  },"3235": {
    "doc": "union_polygon-(dissolve)",
    "title": "example",
    "content": "parameter&lt;ipoint&gt; geometry (polygon) := union_polygon(ipolygon(District/geometry)); . ",
    "url": "/docs/union_polygon-(dissolve).html#example",
    
    "relUrl": "/docs/union_polygon-(dissolve).html#example"
  },"3236": {
    "doc": "union_polygon-(dissolve)",
    "title": "see also",
    "content": ". | partitioned_union_polygon-(dissolve-by-attribute) | add-(union) | . ",
    "url": "/docs/union_polygon-(dissolve).html#see-also",
    
    "relUrl": "/docs/union_polygon-(dissolve).html#see-also"
  },"3237": {
    "doc": "union_polygon-(dissolve)",
    "title": "union_polygon-(dissolve)",
    "content": "geometric-functions union_polygon (dissolve) . ",
    "url": "/docs/union_polygon-(dissolve).html",
    
    "relUrl": "/docs/union_polygon-(dissolve).html"
  },"3238": {
    "doc": "union_unit",
    "title": "syntax",
    "content": ". | union_unit(a, b, … , n) | . ",
    "url": "/docs/union_unit.html#syntax",
    
    "relUrl": "/docs/union_unit.html#syntax"
  },"3239": {
    "doc": "union_unit",
    "title": "definition",
    "content": "union_unit(a, b, … , n) results in a uint32 domain-unit, based on the domain units: a, b, .., n. The number of elements of the new domain unit is the sum of the number of elements of the domain units: a, b, .., n. ",
    "url": "/docs/union_unit.html#definition",
    
    "relUrl": "/docs/union_unit.html#definition"
  },"3240": {
    "doc": "union_unit",
    "title": "description",
    "content": "Use the union_data function to union data-item for new domain units. The union_unit function results in a uint32 domain unit. Use a union_unit_uint8_16_32_64 function to configure a domain of another value-type. ",
    "url": "/docs/union_unit.html#description",
    
    "relUrl": "/docs/union_unit.html#description"
  },"3241": {
    "doc": "union_unit",
    "title": "applies to",
    "content": "Units a, b, .., n with value types from the group CanBeDomainUnit . ",
    "url": "/docs/union_unit.html#applies-to",
    
    "relUrl": "/docs/union_unit.html#applies-to"
  },"3242": {
    "doc": "union_unit",
    "title": "example",
    "content": "unit&lt;uint32&gt; HollandCity := union_unit(NHCity, ZHCity);  Result = domain unit with 8 rows unit&lt;uint32&gt; NHCity: nrofrows = 3; unit&lt;uint32&gt; ZHCity: nrofrows = 5; . ",
    "url": "/docs/union_unit.html#example",
    
    "relUrl": "/docs/union_unit.html#example"
  },"3243": {
    "doc": "union_unit",
    "title": "see also",
    "content": ". | union_unit_uint8_16_32_64 | union_data | . ",
    "url": "/docs/union_unit.html#see-also",
    
    "relUrl": "/docs/union_unit.html#see-also"
  },"3244": {
    "doc": "union_unit",
    "title": "union_unit",
    "content": "relational-functions union_unit . ",
    "url": "/docs/union_unit.html",
    
    "relUrl": "/docs/union_unit.html"
  },"3245": {
    "doc": "union_unit_uint8_16_32_64",
    "title": "syntax",
    "content": ". | union_unit_uint8(a, b, … , n) | union_unit_uint16(a, b, … , n) | union_unit_uint32(a, b, … , n) | union_unit_uint64(a, b, … , n) | . ",
    "url": "/docs/union_unit_uint8_16_32_64.html#syntax",
    
    "relUrl": "/docs/union_unit_uint8_16_32_64.html#syntax"
  },"3246": {
    "doc": "union_unit_uint8_16_32_64",
    "title": "definition",
    "content": "These functions work in the same way as the union_unit function, only they result in domain-unit of respectively uint8, uint16, uint32 or uint64 value-type. ",
    "url": "/docs/union_unit_uint8_16_32_64.html#definition",
    
    "relUrl": "/docs/union_unit_uint8_16_32_64.html#definition"
  },"3247": {
    "doc": "union_unit_uint8_16_32_64",
    "title": "union_unit_uint8_16_32_64",
    "content": "relational-functions union_unit_uint8, union_unit_uint16, union_unit_uint32, union_unit_uint64 . ",
    "url": "/docs/union_unit_uint8_16_32_64.html",
    
    "relUrl": "/docs/union_unit_uint8_16_32_64.html"
  },"3248": {
    "doc": "unique-values",
    "title": "example",
    "content": "container SourceData {    unit&lt;uint32&gt; indicators    : StorageName     = \"%SourceDataProjDir%/Indicators/datapacakage.csv\"    , StorageType     = \"gdal.vect\"    , StorageReadOnly = \"True\"    {       attribute&lt;string&gt;           HeatOption; // HeatOption must be an attribute in the csv file       attribute&lt;HeatOptionUnique&gt; HeatOptionUnique_rel := rlookup(HeatOption, HeatOptionUnique/values);    }    unit&lt;uint32&gt; HeatOptionUnique := unique(indicators/HeatOption)    {       attribute&lt;uint32&gt; number := pcount(indicators/HeatOptionUnique_rel);    } } . ",
    "url": "/docs/unique-values.html#example",
    
    "relUrl": "/docs/unique-values.html#example"
  },"3249": {
    "doc": "unique-values",
    "title": "unique-values",
    "content": "configuration-examples Unique Values . This example shows how to read data from a .csv file and make a domain-unit with the unique values of an attribute. ",
    "url": "/docs/unique-values.html",
    
    "relUrl": "/docs/unique-values.html"
  },"3250": {
    "doc": "unique",
    "title": "syntax",
    "content": ". | unique(a) | . ",
    "url": "/docs/unique.html#syntax",
    
    "relUrl": "/docs/unique.html#syntax"
  },"3251": {
    "doc": "unique",
    "title": "definition",
    "content": "unique(a) results in a new uint32 domain-unit with the unique occurences of attribute a. ",
    "url": "/docs/unique.html#definition",
    
    "relUrl": "/docs/unique.html#definition"
  },"3252": {
    "doc": "unique",
    "title": "description",
    "content": "The unique function generates a subitem, named Values. This data-item contains the unique occurences of attribute a, sorted ascending. The Values data item can be used in a lookup (in case attribute a is a relation) or a rjoin function, to relate attributes to the new domain unit, see the example. ",
    "url": "/docs/unique.html#description",
    
    "relUrl": "/docs/unique.html#description"
  },"3253": {
    "doc": "unique",
    "title": "applies to",
    "content": ". | attribute a with Numeric, Point, uint2, uint4, bool or string value type | . ",
    "url": "/docs/unique.html#applies-to",
    
    "relUrl": "/docs/unique.html#applies-to"
  },"3254": {
    "doc": "unique",
    "title": "example",
    "content": "unit&lt;uint32&gt; Region := unique(City/RegionCode) { attribute&lt;string&gt; name := rjoin(Values, City/RegionCode, City/RegionName); } . | City/RegionCode | City/RegionName | . | 100 | Noord Holland | . | 200 | Zuid Holland | . | 300 | Utrecht | . | 200 | Zuid Holland | . | 400 | Noord Brabant | . | null | null | . | 400 | null | . domain City, nr of rows = 7 . | Region/Values | Region/name | . | 100 | Noord Holland | . | 200 | Zuid Holland | . | 300 | Utrecht | . | 400 | Noord Brabant | . | null | null | . domain Region, nr of rows = 5 . ",
    "url": "/docs/unique.html#example",
    
    "relUrl": "/docs/unique.html#example"
  },"3255": {
    "doc": "unique",
    "title": "see also",
    "content": ". | unique_uint8_16_32_64 | . ",
    "url": "/docs/unique.html#see-also",
    
    "relUrl": "/docs/unique.html#see-also"
  },"3256": {
    "doc": "unique",
    "title": "unique",
    "content": "relational-functions unique . ",
    "url": "/docs/unique.html",
    
    "relUrl": "/docs/unique.html"
  },"3257": {
    "doc": "unique_uint8_16_32_64",
    "title": "syntax",
    "content": ". | unique_uint8(a) | unique_uint16(a) | unique_uint32(a) | unique_uint64(a) | . ",
    "url": "/docs/unique_uint8_16_32_64.html#syntax",
    
    "relUrl": "/docs/unique_uint8_16_32_64.html#syntax"
  },"3258": {
    "doc": "unique_uint8_16_32_64",
    "title": "definition",
    "content": "These functions work in the same way as the unique function, only they result in domain-unit of respectively uint8, uint16, uint32 or uint64 value-type . ",
    "url": "/docs/unique_uint8_16_32_64.html#definition",
    
    "relUrl": "/docs/unique_uint8_16_32_64.html#definition"
  },"3259": {
    "doc": "unique_uint8_16_32_64",
    "title": "unique_uint8_16_32_64",
    "content": "relational-functions unique_uint8, unique_uint16, unique_uint32, unique_uint64 . ",
    "url": "/docs/unique_uint8_16_32_64.html",
    
    "relUrl": "/docs/unique_uint8_16_32_64.html"
  },"3260": {
    "doc": "unit-functions",
    "title": "unit-functions",
    "content": "Unit operators-and-functions are used to define and get information of unit, like range and lowerbound . | baseunit - configure values units as base units, e.g. meter or second. | . | tiledunit - configure segmented/tiled domain unit | . | nrofrows - set the number of elements of a domain unit | range - sets the range for a unit | cat_range - sets the range for a categorical unit | gridset - configures a grid domain with a projection to a coordinate system | . | lowerbound - the minimum allowed value for the unit argument | upperbound - the maximum allowed value for the unit argument | boundcenter - the mean value for the unit argument | boundrange - the size of the range of the unit | . | domainunit - a reference to the domain unit of attribute a | valuesunit - a reference to the values unit of attribute a | defaultunit - the literal valuetype | . | getprojectionbase - get the unit used for the coordinate system | getprojectionoffset - get the coordinate of the top left grid cell in the coordinate system | getprojectionfactor - get the gridsize in both X and Y directions. | getmetricfactor - get the factor in the metric of the unit used for the coordinate system | . ",
    "url": "/docs/unit-functions.html",
    
    "relUrl": "/docs/unit-functions.html"
  },"3261": {
    "doc": "unit-metric-consistency",
    "title": "Unit_metric consistency in calculations",
    "content": "The GeoDMS controls the model logic by checking the metric, domain-unit and values-unit of each calculation step. Three types of consistency checks are illustrated by the next example: . container UnitConsistencies {    container Units    {       unit&lt;uint32&gt;  NrInhabitants      := BaseUnit('NrInhabitants', 'uint32');       unit&lt;uint32&gt;  NrCows             := BaseUnit('NrCows', 'uint32');       unit&lt;float32&gt; NrHa               := BaseUnit('NrHa', 'float32');       unit&lt;float32&gt; NrInhabitantsPerHa := NrInhabitants / NrHa;    }    container RegionalInformation    :  Using       = \"Units\",    ,  StorageName = \"%projDir%/data/regionalinfo.mdb\"    {       unit&lt;uint32&gt; Country: SqlString = \"SELECT * FROM Country ORDER BY CountryID\"       {          attribute&lt;NrInhabitants&gt; Inhabitants;          attribute&lt;NrCows&gt;        Cows;          attribute&lt;NrHa&gt;          Area;       }       unit&lt;uint32&gt; EU15:  SqlString = \"SELECT * FROM EU15 ORDER BY EU15ID\"       {          attribute&lt;NrInhabitants&gt; Inhabitants;          attribute&lt;NrHa&gt;          Area;       }       container Calculations: Using = \"RegionalInformation\"`       {          attribute&lt;uint32&gt;             SumInhabitantsAndCows  (Country) := Country/Inhabitants + Country/Cows;          attribute&lt;NrInhabitants&gt;      SumInhabitants         (Country) := Country/Inhabitants + EU15/Inhabitants;          attribute&lt;NrInhabitantsPerHa&gt; NrInhabitantsPerHa     (Country) := Country/Inhabitants / Country/Area;       }    } } . ",
    "url": "/docs/unit-metric-consistency.html#unit_metric-consistency-in-calculations",
    
    "relUrl": "/docs/unit-metric-consistency.html#unit_metric-consistency-in-calculations"
  },"3262": {
    "doc": "unit-metric-consistency",
    "title": "metric consistency",
    "content": "The metric indicates how the values of a data item need to be interpreted. A parameter e.g. does not only have a value 300, but a value of 300 meter (in which meter is the metric for this item). The GeoDMS is aware for each operators-and-functions if and how data-item with a different metric can be combined. The parameter in meters can for instance not be summed with a parameter in seconds, but it can be divided by a parameter with as metric: seconds. The functionality to check the metric in calculations is an important quality control aspect of the GeoDMS and already has traced multiple errors in incorrect factor and metric combinations. To facilitate this quality control, for each data item a metric needs to be configured. This metric is part of the configuration of the values-unit. error . In the example above, the first attribute in the Calculations container, SumInhabitantsAndCows raises the following error if the data item is requested. The error generated is: “Operator add Error: Arguments must have compatible units, but arg1 has Metric NrInhabitants and arg2 has Metric NrCows”. | This error is generated because the metric of both unit does not match (which is requested for the [+ | add]] operator). It is not logical to add data items with a different metric. For each operator &amp; function is defined if the data items need to match with regard to their metric, see the description of each operator &amp; function. In case an expression is configured, conflicting with these rules, an error is generated. If it is still desired to add the number of cows with the number of people, they both should be configured in a values unit with the same metric (e.g. NrLivingCreatures). | . ",
    "url": "/docs/unit-metric-consistency.html#metric-consistency",
    
    "relUrl": "/docs/unit-metric-consistency.html#metric-consistency"
  },"3263": {
    "doc": "unit-metric-consistency",
    "title": "domain unit consistency",
    "content": "Tthe GeoDMS checks the consistency of the domain unit in calculations. Most operators and functions can only combine data items of the same domain unit , except e.g. the relational functions . error . The second attribute in the Calculations container, SumInhabitants, tries to add the attribute inhabitants per country with the attribute inhabitants for EU15. This is not a logical operation as only data items of the same domain unit can be logically summed. The following error is generated: . The error generated is: “Domain unification of /RegionalInformation/Country (: UInt32) with /RegionalInformation/EU15 (: UInt32) is not possible because of Domain incompatibiliy due to missing or different calculation rule” . This error indicates an inconsistency as the two domain units (Country and EU15 in this example) differ, which is not allowed for the + operator. For each operator &amp; function is defined if the data items need to match with regard to their domain units, see the description of each see the description of each operator &amp; function. In case an expression is configured, conflicting with these rules, an error is generated. Domain inconsistencies do not occur for data items combined with parameter. ",
    "url": "/docs/unit-metric-consistency.html#domain-unit-consistency",
    
    "relUrl": "/docs/unit-metric-consistency.html#domain-unit-consistency"
  },"3264": {
    "doc": "unit-metric-consistency",
    "title": "value type consistency",
    "content": "Within the GeoDMS multiple value types are used. We advice to use a value type with the smallest size that fits to your data. This make calculations faster and less memory consuming. Combining data items with multiple value types is not trivial. Therefore in many cases data items need to be casted to other value types, before they can be combined in expressions. error . The third derived attribute in the Calculations container, NrInhabitantsPerHa, seems to have a logical expression. Still an error is generated: . The error generated is: “div Error: Cannot find operator for these arguments. Possible cause: argument type mismatch. Check the types of the used arguments.” . This error indicates the GeoDMS can not divide directly two data items with different value types (in this case uint32 and float32). For each operator &amp; function is defined which value types can be combined. The applies section of the documentation of each operator/function refers to the valid signatures, describing the allowed combinations. In case an expression is configured, conflicting with these rules, an error is generated. As the resulting data item in the example is configured with a float32 value type, the divide operator also requests float32 data_item. The number of inhabitants supplier in the expression need to be converted to a float32 value type. See the conversion-functions for an overview of all conversion functions. The following expression will solve the problem: . := float32(Country/Inhabitants) / CountryInfo/Area; . With this expression the attribute NrInhabitantsPerHa can be calculated. ",
    "url": "/docs/unit-metric-consistency.html#value-type-consistency",
    
    "relUrl": "/docs/unit-metric-consistency.html#value-type-consistency"
  },"3265": {
    "doc": "unit-metric-consistency",
    "title": "unit-metric-consistency",
    "content": " ",
    "url": "/docs/unit-metric-consistency.html",
    
    "relUrl": "/docs/unit-metric-consistency.html"
  },"3266": {
    "doc": "unit-testing",
    "title": "unit-testing",
    "content": "Boost test framework . https://www.boost.org/doc/libs/1_76_0/libs/test/doc/html/header/boost/test/framework_hpp.html framework . ",
    "url": "/docs/unit-testing.html",
    
    "relUrl": "/docs/unit-testing.html"
  },"3267": {
    "doc": "unit",
    "title": "data items and units",
    "content": "The GeoDMS calculates with data-item. A data item represents a mapping between a domain-unit set and a value set. These sets are represented in the GeoDMS by unit items. For configured data items, the domain unit (attribute only) and values-unit need to be configured explicitly. The units are used to unit-metric-consistency in calculations. Unit consistency checks are an important feature of the GeoDMS to improve the quality of models, as modelling errors are often related with incorrect use of units and related conversion factors. See also http://en.wikipedia.org/wiki/Units_conversion_by_factor-label. For each operators-and-functions is defined if data of different units can be combined in a meaningful way. The add operator can e.g. not meaningfully combine values expressed in meters with values expressed in seconds. These values can however be meaningfully combined with the div operator, resulting in a velocity attribute with values expressed in meter per second. More information on this topic can be found on the page dimensional analysis. ",
    "url": "/docs/unit.html#data-items-and-units",
    
    "relUrl": "/docs/unit.html#data-items-and-units"
  },"3268": {
    "doc": "unit",
    "title": "syntax",
    "content": "Each unit is configured with the key word: unit. The value-type is indicated between the less than (&lt;) and greater than (&gt;) characters, followed by the tree-item-name of the unit e.g. unit&lt;uint32&gt; municipality2022: nrofrows = 335 . This results in a unit with 335 entries, to be used for all municipalities in 2022 in the Netherlands. ",
    "url": "/docs/unit.html#syntax",
    
    "relUrl": "/docs/unit.html#syntax"
  },"3269": {
    "doc": "unit",
    "title": "roles",
    "content": "A GeoDMS unit can have two roles: . | domain-unit | values-unit | . This is similar to links forming a network by having an origin node and a destination node. The domain unit specifies the source of the mapping (entity) represented by a data-item. The domain unit must be countable with a defined range (i.e. integer or a 2D rectangular integer rasterpointset or void). The values unit indicates in which value type and metric the values of a data items are expressed. 2D values (points, lines, polygons) can be a Projection, i.e. two affine translation of a basic coordinate System. It is important to understand that the same unit can have multiple roles in one configuration. Assume we have a set of houses and a set of regions. The domain_unit house and region are configured, indicating the number of elements and order for the attributes of these domains. If we make a relation which defines for each house in which region it is located, this would result in an attribute with as domain unit house and as values unit: region. So the unit region is used for both roles. ",
    "url": "/docs/unit.html#roles",
    
    "relUrl": "/docs/unit.html#roles"
  },"3270": {
    "doc": "unit",
    "title": "element types",
    "content": "Elements can be: . | one-dimensional | two-dimensional | a single value | sequence of values | . The values can be (un)signed, integer or float, or text-string (implemented as a sequence of characters). Each element has a value type that determines how its value(s) is/are represented in memory and which determines its minimum and maximum value and its granularity. operators-and-functions are implemented to operate on data items of (combinations of) value types. Usually, different combinations are dealt with by different instantiations of an operator/function, to avoid time on processing value type conversion or larger than required memory-footprints. With conversion-functions, data items can be converted to other values units and value types. ",
    "url": "/docs/unit.html#element-types",
    
    "relUrl": "/docs/unit.html#element-types"
  },"3271": {
    "doc": "unit",
    "title": "unit",
    "content": " ",
    "url": "/docs/unit.html",
    
    "relUrl": "/docs/unit.html"
  },"3272": {
    "doc": "unquote",
    "title": "syntax",
    "content": ". | unquote(string_dataitem) | . ",
    "url": "/docs/unquote.html#syntax",
    
    "relUrl": "/docs/unquote.html#syntax"
  },"3273": {
    "doc": "unquote",
    "title": "definition",
    "content": "unquote(string_dataitem) removes single quotes from the values of data-item string_dataitem. ",
    "url": "/docs/unquote.html#definition",
    
    "relUrl": "/docs/unquote.html#definition"
  },"3274": {
    "doc": "unquote",
    "title": "applies to",
    "content": "data item string_dataitem with string value-type . ",
    "url": "/docs/unquote.html#applies-to",
    
    "relUrl": "/docs/unquote.html#applies-to"
  },"3275": {
    "doc": "unquote",
    "title": "example",
    "content": "attribute&lt;string&gt; unquoteA (ADomain) := unquote(A); . | A | unquoteA | . | ‘Test’ | ‘Test’ | . | ‘88hallo99’ | ‘88hallo99’ | . | ’+)’ | ’+)’ | . | ‘twee woorden’ | ‘twee woorden’ | . | ’ test met spatie’ | ’ test met spatie’ | . ADomain nr of rows = 5 . ",
    "url": "/docs/unquote.html#example",
    
    "relUrl": "/docs/unquote.html#example"
  },"3276": {
    "doc": "unquote",
    "title": "see also",
    "content": ". | quote | undquote | . ",
    "url": "/docs/unquote.html#see-also",
    
    "relUrl": "/docs/unquote.html#see-also"
  },"3277": {
    "doc": "unquote",
    "title": "unquote",
    "content": "string-functions unquote . ",
    "url": "/docs/unquote.html",
    
    "relUrl": "/docs/unquote.html"
  },"3278": {
    "doc": "update-mechanism",
    "title": "(in)validated results",
    "content": "Calculation results are invalidated due to changes in: . | The direct and indirect expression used to calculate results; | The storagemanager used. | . After updating(recalculating) the invalidated calculation steps, all results are valid again and can be presented to the user. Valid here means the results are consistent with the most recent version of the source data and configured expressions. ",
    "url": "/docs/update-mechanism.html#invalidated-results",
    
    "relUrl": "/docs/update-mechanism.html#invalidated-results"
  },"3279": {
    "doc": "update-mechanism",
    "title": "update-mechanism",
    "content": "The focus in the GeoDMS is on a controlled and fast calculation process. Still, when the number of calculation steps increases and the datasets become larger, the time to calculate end results can become substantial. As the GeoDMS is also intended to work with in an interactive manner, in which multiple alternatives need to be calculated, evaluated and (re)adapted, it is essential to limit the calculation speed but also to make full potential of the fact that certain (intermediate) results are already calculated and can be re-used. For this reason, the GeoDMS contains an intelligent incremental update mechanism. This mechanism guarantees that if data results are requested, they are always (made) valid, minimizing the calculation speed. Only invalidated results are recalculated. ",
    "url": "/docs/update-mechanism.html",
    
    "relUrl": "/docs/update-mechanism.html"
  },"3280": {
    "doc": "upoint",
    "title": "concept",
    "content": ". | upoint is a Point(Group) value-type with two coordinates of the 32 bits (4 bytes) unsigned integer value type: uint32. | upoint() is a function converting other point data-item or unit to the upoint value type. | . This page describes the upoint() function. ",
    "url": "/docs/upoint.html#concept",
    
    "relUrl": "/docs/upoint.html#concept"
  },"3281": {
    "doc": "upoint",
    "title": "syntax",
    "content": ". | upoint(a) | . ",
    "url": "/docs/upoint.html#syntax",
    
    "relUrl": "/docs/upoint.html#syntax"
  },"3282": {
    "doc": "upoint",
    "title": "definition",
    "content": "upoint(a) converts the coordinates of a point tree-item a to the upoint (uint32 coordinates) value-type. ",
    "url": "/docs/upoint.html#definition",
    
    "relUrl": "/docs/upoint.html#definition"
  },"3283": {
    "doc": "upoint",
    "title": "applies to",
    "content": ". | data item or unit with PointGroup value type | . ",
    "url": "/docs/upoint.html#applies-to",
    
    "relUrl": "/docs/upoint.html#applies-to"
  },"3284": {
    "doc": "upoint",
    "title": "example",
    "content": "attribute&lt;upoint&gt; upointA (ADomain) := upoint(A); . | A(fpoint) | upointA | . | {0,0} | {0,0} | . | {1,1} | {1,1} | . | {1000000,10000000} | {1000000,10000000} | . | {-2.5, 2.5} | null | . | {99.9, 99.9} | {99,99} | . ADomain, nr of rows = 5 . ",
    "url": "/docs/upoint.html#example",
    
    "relUrl": "/docs/upoint.html#example"
  },"3285": {
    "doc": "upoint",
    "title": "upoint",
    "content": "conversion-functions upoint . ",
    "url": "/docs/upoint.html",
    
    "relUrl": "/docs/upoint.html"
  },"3286": {
    "doc": "upolygon",
    "title": "syntax",
    "content": ". | upolygon(a) | . ",
    "url": "/docs/upolygon.html#syntax",
    
    "relUrl": "/docs/upolygon.html#syntax"
  },"3287": {
    "doc": "upolygon",
    "title": "definition",
    "content": "upolygon(a) converts the coordinates of a point tree-item a with a sequence of points (arc or polygon) to the upoint (uint32 coordinates) value-type. ",
    "url": "/docs/upolygon.html#definition",
    
    "relUrl": "/docs/upolygon.html#definition"
  },"3288": {
    "doc": "upolygon",
    "title": "applies to",
    "content": ". | data-item with Point value type and composition arc or polygon | . ",
    "url": "/docs/upolygon.html#applies-to",
    
    "relUrl": "/docs/upolygon.html#applies-to"
  },"3289": {
    "doc": "upolygon",
    "title": "example",
    "content": "attribute&lt;spoint&gt; upolygonA (SDomain, polygon) := upolygon(A); . | A(fpolygon) | upolygonA | . | {2:{0,0},{1,1}} | {2:{0,0},{1,1}} | . | {3: {1E+007,1E+007},{-2.5,-2.5},{99.9,99.9}} | {3: {9999999,9999999},{null,null},{99,99}} | . ",
    "url": "/docs/upolygon.html#example",
    
    "relUrl": "/docs/upolygon.html#example"
  },"3290": {
    "doc": "upolygon",
    "title": "upolygon",
    "content": "conversion-functions upolygon . ",
    "url": "/docs/upolygon.html",
    
    "relUrl": "/docs/upolygon.html"
  },"3291": {
    "doc": "upper_bound",
    "title": "syntax",
    "content": ". | upper_bound(polygon_data_item) | . ",
    "url": "/docs/upper_bound.html#syntax",
    
    "relUrl": "/docs/upper_bound.html#syntax"
  },"3292": {
    "doc": "upper_bound",
    "title": "definition",
    "content": "upper_bound(polygon_data_item) results in a point data-item with the highest X and Y value of the points in the polygon_data_item. In the Dutch RD coordinate system, the upper_bound is the top right coordinate. ",
    "url": "/docs/upper_bound.html#definition",
    
    "relUrl": "/docs/upper_bound.html#definition"
  },"3293": {
    "doc": "upper_bound",
    "title": "applies to",
    "content": "data item polygon_data_item with fpoint or dpoint value-type and composition polygon . ",
    "url": "/docs/upper_bound.html#applies-to",
    
    "relUrl": "/docs/upper_bound.html#applies-to"
  },"3294": {
    "doc": "upper_bound",
    "title": "example",
    "content": "attribute&lt;point_rd&gt; ub (district) := upper_bound(district/geometry); . | district/geometry | ub | . | {21 {403025, 113810}{4 | {403552, 113810} | . | {17 {400990, 113269}{4 | {401597, 113291} | . | {19 {401238, 115099}{4 | {401642, 115164} | . domain district, nr of rows = 3 . ",
    "url": "/docs/upper_bound.html#example",
    
    "relUrl": "/docs/upper_bound.html#example"
  },"3295": {
    "doc": "upper_bound",
    "title": "see also",
    "content": ". | lower_bound | center_bound | . ",
    "url": "/docs/upper_bound.html#see-also",
    
    "relUrl": "/docs/upper_bound.html#see-also"
  },"3296": {
    "doc": "upper_bound",
    "title": "upper_bound",
    "content": "geometric-functions upper_bound . ",
    "url": "/docs/upper_bound.html",
    
    "relUrl": "/docs/upper_bound.html"
  },"3297": {
    "doc": "upperbound",
    "title": "syntax",
    "content": ". | upperbound(unit) | . ",
    "url": "/docs/upperbound.html#syntax",
    
    "relUrl": "/docs/upperbound.html#syntax"
  },"3298": {
    "doc": "upperbound",
    "title": "definition",
    "content": "upperbound(unit) results in the maximum allowed value for the unit argument. If a range is configured for a unit, the upperbound function results in the maximum value of this range. If not, the upperbound results in the default maximum value for the value-type of the unit. ",
    "url": "/docs/upperbound.html#definition",
    
    "relUrl": "/docs/upperbound.html#definition"
  },"3299": {
    "doc": "upperbound",
    "title": "applies to",
    "content": ". | unit unit with Numeric or Point value type | . ",
    "url": "/docs/upperbound.html#applies-to",
    
    "relUrl": "/docs/upperbound.html#applies-to"
  },"3300": {
    "doc": "upperbound",
    "title": "example",
    "content": "unit&lt;float32&gt; unit_defined            := range(float32, 2.0, 7.5); unit&lt;float32&gt; upperbound_unit_defined := upperbound(unit_defined); . result upperbound_unit_defined = 7.5 . ",
    "url": "/docs/upperbound.html#example",
    
    "relUrl": "/docs/upperbound.html#example"
  },"3301": {
    "doc": "upperbound",
    "title": "see also",
    "content": ". | lowerbound | boundcenter | boundrange | . ",
    "url": "/docs/upperbound.html#see-also",
    
    "relUrl": "/docs/upperbound.html#see-also"
  },"3302": {
    "doc": "upperbound",
    "title": "upperbound",
    "content": "unit-functions upperbound . ",
    "url": "/docs/upperbound.html",
    
    "relUrl": "/docs/upperbound.html"
  },"3303": {
    "doc": "uppercase",
    "title": "syntax",
    "content": ". | UpperCase(string_dataitem) | . ",
    "url": "/docs/uppercase.html#syntax",
    
    "relUrl": "/docs/uppercase.html#syntax"
  },"3304": {
    "doc": "uppercase",
    "title": "definition",
    "content": "UpperCase(string_dataitem) translates all lowercase characters of data-item string_dataitem to uppercases. ",
    "url": "/docs/uppercase.html#definition",
    
    "relUrl": "/docs/uppercase.html#definition"
  },"3305": {
    "doc": "uppercase",
    "title": "applies to",
    "content": "data item string_dataitem with string value-type . ",
    "url": "/docs/uppercase.html#applies-to",
    
    "relUrl": "/docs/uppercase.html#applies-to"
  },"3306": {
    "doc": "uppercase",
    "title": "since version",
    "content": "5.90 . ",
    "url": "/docs/uppercase.html#since-version",
    
    "relUrl": "/docs/uppercase.html#since-version"
  },"3307": {
    "doc": "uppercase",
    "title": "example",
    "content": "attribute&lt;string&gt; UpperCaseA (ADomain) := UpperCase(A); . | A | UpperCaseA | . | ‘Test’ | ‘TEST’ | . | ‘88hallo99’ | ‘88HALLO99’ | . | ’+)’ | ’+)’ | . | ‘twee woorden’ | ‘TWEE WOORDEN’ | . | ’ test met spatie’ | ’ TEST MET SPATIE’ | . ADomain, nr of rows = 5 . ",
    "url": "/docs/uppercase.html#example",
    
    "relUrl": "/docs/uppercase.html#example"
  },"3308": {
    "doc": "uppercase",
    "title": "see also",
    "content": ". | lowercase | . ",
    "url": "/docs/uppercase.html#see-also",
    
    "relUrl": "/docs/uppercase.html#see-also"
  },"3309": {
    "doc": "uppercase",
    "title": "uppercase",
    "content": "string-functions UpperCase . ",
    "url": "/docs/uppercase.html",
    
    "relUrl": "/docs/uppercase.html"
  },"3310": {
    "doc": "urban-attractivity-index",
    "title": "urban-attractivity-index",
    "content": "The Urban Attractivity Index describes the presence of four types of urban amenities: historic buildings and monuments; cultural facilities; shops; hotels, restaurants and other catering establishments. The numbers of units per amenity type are counted per 500 m grid cell, rescaled to a maximum value of 0.25 per type, added up and averaged out over a 2.5 km radius (Broitman and Koomen, 2015). container UrbanAttractivityIndex { parameter&lt;string&gt; Year := '2021'; //2018 2021 unit&lt;uint32&gt; vbo := ='brondata/BAG/Snapshots/VBOs/Y'+Year+'01/vbo'; unit&lt;uint32&gt; pand := ='brondata/BAG/Snapshots/Panden/Y'+Year+'01/Pand'; attribute&lt;float32&gt; Utiliteit_opp (NL_grid/domain) := value(vbo/GebruiksdoelSets/UtiliteitsFucties/oppervlakte_ha, float32); attribute&lt;float32&gt; Detailhandel_opp (NL_grid/domain) := vbo/GebruiksdoelSets/winkel/GebruiksdoelSet/Voorraad/oppervlakte_ha[float32]; attribute&lt;float32&gt; HorecaCultuur_count (NL_grid/domain) := vbo/GebruiksdoelSets/bijeenkomst/GebruiksdoelSet/Voorraad/count_ha[float32] + vbo/GebruiksdoelSets/logies/GebruiksdoelSet/Voorraad/count_ha[float32]; attribute&lt;float32&gt; Fractie_monumentaal (NL_grid/domain) := MakeDefined( pand/Voorraad/pand_met_vbo/monumentale_panden[float32] &gt;= 3f ? pand/Voorraad/pand_met_vbo/monumentale_panden[float32] / pand/Voorraad/pand_met_vbo/count_ha[float32] : 0f , 0f); attribute&lt;float32&gt; Utiliteit (NL_grid/domain) := potential(Utiliteit_opp, geometries/potentialen/pot5000m/potrange/AbsWeight_w_center); parameter&lt;float32&gt; Max_Utiliteit := max(Utiliteit); attribute&lt;float32&gt; Detailhandel (NL_grid/domain) := potential(Detailhandel_opp, geometries/potentialen/pot5000m/potrange/AbsWeight_w_center); parameter&lt;float32&gt; Max_Detailhandel := max(Detailhandel); attribute&lt;float32&gt; Horeca (NL_grid/domain) := potential(HorecaCultuur_count, geometries/potentialen/pot5000m/potrange/AbsWeight_w_center); parameter&lt;float32&gt; Max_Horeca := max(Horeca); attribute&lt;float32&gt; Monumentaal (NL_grid/domain) := potential(Fractie_monumentaal, geometries/potentialen/pot5000m/potrange/AbsWeight_w_center); parameter&lt;float32&gt; Max_Monumentaal := max(Monumentaal); attribute&lt;float32&gt; Utiliteit_norm (NL_grid/domain) := Utiliteit / Max_Utiliteit; attribute&lt;float32&gt; Detailhandel_norm (NL_grid/domain) := Detailhandel / Max_Detailhandel; attribute&lt;float32&gt; Horeca_norm (NL_grid/domain) := Horeca / Max_Horeca; attribute&lt;float32&gt; Monumentaal_norm (NL_grid/domain) := Monumentaal / Max_Monumentaal; attribute&lt;float32&gt; UAI (NL_grid/domain) := Utiliteit_norm + Detailhandel_norm + Horeca_norm + Monumentaal_norm; attribute&lt;float32&gt; UAI_smoothed (NL_grid/domain) := potential(UAI, geometries/potentialen/pot2000m/potrange/AbsWeight_w_center); parameter&lt;float32&gt; Max_UAI_smoothed := max(UAI_smoothed); attribute&lt;float32&gt; UAI_smoothed_norm (NL_grid/domain) := UAI_smoothed / Max_UAI_smoothed; attribute&lt;float32&gt; Make_Tiff (NL_grid/domain) := UAI_smoothed_norm, StorageName = \"='%SourceDataDir%/SpatialData/UAI_'+Year+'.tif'\"; } . ",
    "url": "/docs/urban-attractivity-index.html",
    
    "relUrl": "/docs/urban-attractivity-index.html"
  },"3311": {
    "doc": "use-freedata-property-to-keep-your-calccache-size-limited",
    "title": "FreeData property",
    "content": "Since GeoDMS version 7.122 calculation results are by default not any longer stored persistently in the CalcCache. The default value for the FreeData property is changed to: true. By configuring the FreeData property to false, calculation results, if they meet all other conditions, are stored persistently in the CalcCache. If the property is configured for an item it applies to this item and all it’s subitems. In general it is advised to store only results that are time consuming to recalculate and that are re-used in the same of in new sessions. This keeps your CalcCache size limited and results might be available faster, as less disk I/O is needed. It requests some experience on which expressions are time-consuming to calculate. ",
    "url": "/docs/use-freedata-property-to-keep-your-calccache-size-limited.html#freedata-property",
    
    "relUrl": "/docs/use-freedata-property-to-keep-your-calccache-size-limited.html#freedata-property"
  },"3312": {
    "doc": "use-freedata-property-to-keep-your-calccache-size-limited",
    "title": "use-freedata-property-to-keep-your-calccache-size-limited",
    "content": "CalcCache Managing Files . ",
    "url": "/docs/use-freedata-property-to-keep-your-calccache-size-limited.html",
    
    "relUrl": "/docs/use-freedata-property-to-keep-your-calccache-size-limited.html"
  },"3313": {
    "doc": "use-mutiple-calccaches-within-a-project",
    "title": "introduction",
    "content": "As CalcCaches should only be deleted as a whole, a way of managing is also to use multiple smaller CalcCaches for different alternatives/scenarios within a project. By default the CalcCache folder name is derived from the project’s folder name. It can be overruled by the environment variable GEODMS_DIRECTORIES_CALCCACHEDIR (starting from GeoDMS version 7.029). This offers two ways of working with multiple CalcCaches: . | Copying/renaming the project folder; | Running the GeoDmsGui.exe or GeoDmsRun.exe from a batch file in which you control the location of the CalcCache folder, see example. | . The following two commands can be used to run GeoDMS version 7.031, installed on it’s default location with as project: MicroTst.dms and with as CalcCacheDir: C:\\Localdata\\MyNewCalcCache. The easiest way to execute these commands is by creating a batch file with these commands and run the batch file. SET GEODMS_DIRECTORIES_CALCCACHEDIR=C:\\localdata\\MyNewCalcCache . \"C:\\Program Files (x86)\\ObjectVision\\GeoDms7031\\GeoDmsGui.exe\"  \"C:\\GeoDms\\tst\\Operator\\cfg\\MicroTst.dms\" . The result will be an activated GeoDMS GUI. Intermediate (results) will be stored in a subfolder of the CalcCache folder: C:\\Localdata\\MyNewCalcCache. This also applies when a new project is opened with this GUI (File &gt; Open Configuration File). The CalcCacheDir for this new project will then still be C:\\Localdata\\MyNewCalcCache, as long the GUI is running within this context . ",
    "url": "/docs/use-mutiple-calccaches-within-a-project.html#introduction",
    
    "relUrl": "/docs/use-mutiple-calccaches-within-a-project.html#introduction"
  },"3314": {
    "doc": "use-mutiple-calccaches-within-a-project",
    "title": "use-mutiple-calccaches-within-a-project",
    "content": "CalcCache Managing Files . ",
    "url": "/docs/use-mutiple-calccaches-within-a-project.html",
    
    "relUrl": "/docs/use-mutiple-calccaches-within-a-project.html"
  },"3315": {
    "doc": "user-guide-geodms-gui-older-variants-(delphi)",
    "title": "user-guide-geodms-gui-older-variants-(delphi)",
    "content": "User Guides of the geodms-gui are still available for older versions of the GeoDMS GUI (Delphi variants). These guides are available in pdf format. They can also be used for intermediate versions, as the changes to the GUI per versions are usually limited. | version 7309, examples LUS Demo (1.5 mb) | version 7198, examples LUS Demo (1.5 mb) | version 7180, examples LUS Demo (1.7 mb) | version 7130, examples GeoDMS Course (1.5 mb) | version 5.88, examples Wonen, Zorg en WelzijnVerkenner (1 mb) | version 5.64, examples Ruimtescanner (2.5 mb) | . ",
    "url": "/docs/user-guide-geodms-gui-older-variants-(delphi).html",
    
    "relUrl": "/docs/user-guide-geodms-gui-older-variants-(delphi).html"
  },"3316": {
    "doc": "user-guide-geodms-gui",
    "title": "introduction",
    "content": "This guide focuses mainly on the user, who views the primary data, calculates model results, initiates new cases and makes limited extensions and editions to the configuration. A detailed description of the structure of the client application, the different viewers and the composers are, therefore, described. This user guide does not contain sufficient information for modelers to set up a new configuration or a new calculation scheme. For this purpose, we refer to the section how-to-model, describing the basics on how to configure a model with the GeoDMS. The GeoDMS GUI is a Windows-based application. This user guide does not describe the generic Windows functionality like how to close, maximize or minimize a window. For more information on these topics refer to your Windows user guide. An Internet connection and installed browser are preferred, as the most actual help can be found at the above-mentioned website. ",
    "url": "/docs/user-guide-geodms-gui.html#introduction",
    
    "relUrl": "/docs/user-guide-geodms-gui.html#introduction"
  },"3317": {
    "doc": "user-guide-geodms-gui",
    "title": "topics",
    "content": ". | desktop-components | treeview | main-menu | detail-pages | map-view . | map-view-layers | map-view-tools | map-view-legend | . | table-view | valueinfo | eventlog | classification-and-palette-editor | export-primary-data | gui-options-dialog | local-machine-options-dialog | config-options-dialog | . ",
    "url": "/docs/user-guide-geodms-gui.html#topics",
    
    "relUrl": "/docs/user-guide-geodms-gui.html#topics"
  },"3318": {
    "doc": "user-guide-geodms-gui",
    "title": "user-guide-geodms-gui",
    "content": ". ",
    "url": "/docs/user-guide-geodms-gui.html",
    
    "relUrl": "/docs/user-guide-geodms-gui.html"
  },"3319": {
    "doc": "user-guide-geodms-run",
    "title": "user-guide-geodms-run",
    "content": "To run the geodmsrun, activate the Command Prompt Window. The GeoDMSRun.exe can then be activated from the command line. The following parameters can/need to be specified: . | (Optional) /Llogfilename (since version 5.55) | (Optional) any combination of /C1 /S1 /C2 /S2 /C3 /S3 to Clear or Set Multiple Threading level 1, 2, or 3. If these parameters are not configured, the default settings (see the GUI, Tools&gt; Options&gt; Advanced dialog) are used. S3 will be used for tile pipelining in the near future, at the moment this setting this parameter has no effect. | (Required) ConfigFileName | zero or more tree-item names (space separated) to be calculated. Multiple item names can be specified, calculated results will be saved in storage’s were configured. | . examples . 1: Update the result item in the C:\\prj\\test\\cfg\\stam.dms configuration . \"C:\\Program Files\\ObjectVision\\GeoDms7317\\GeoDmsRun.exe\" \"C:\\prj\\test\\cfg\\stam.dms\" /result          ` . 2: Update the Arithmetics/plus/test_attr and Arithmetics/sub/test_attr items in the C:\\prj\\test\\cfg\\operator.dms configuration . \"C:\\Program Files\\ObjectVision\\GeoDms7317\\GeoDmsRun.exe\" \"C:\\prj\\test\\cfg\\operator.dms\"  /Arithmetics/plus/test_attr /Arithmetics/sub/test_attr        . 3: Update the results item in the C:\\prj\\test\\cfg\\stam.dms configuration with log information stored in the C:\\tmp\\log.txt file. \"C:\\Program Files\\ObjectVision\\GeoDms7317\\GeoDmsRun.exe\" \"/LC:\\tmp\\log.txt\" \"C:\\prj\\test\\cfg\\stam.dms\" /result . 4: Update the result item in the C:\\prj\\test\\cfg\\stam.dms configuration with Multi Tasking statusflags 1 and 2 set (even if these are not the default settings). \"C:\\Program Files\\ObjectVision\\GeoDms7317\\GeoDmsRun.exe\" /S1 /S2 \"C:\\prj\\test\\cfg\\stam.dms\" /result . Quotes in the examples are needed for the file names, as spaces may occur in these names. In the tree-item names quotes are not needed, as spaces are not allowed in these names. Note that: The value for localdatadir is read from the registry key Software\\ObjectVision\\DMS\\LocalDataDir (default: C:\\LocalData) which can be changed in the Tools -&gt; Options dialog from the geodms-gui. The GeoDMS GUI settings about logging as saved in the registry is ignored for the GeoDMSRun, use the /L option to enable logging. Commands can also be combined in a batch file. statistics . With the GeoDMS run it is also possible to get similar statistics as the Statistics detail page of a data-item, presented in a command box or written to a file. | use the command @statistics after the name of the configuration and before the item name to get the statistics in the command box | use the command @file after the item name with a filename to store the statistics in a file | . see the following two examples: . 1: Generate the statistics for the results/att item in the C:\\prj\\test\\cfg\\stam.dms configuration in a command box . \"C:\\Program Files\\ObjectVision\\GeoDms7317\\GeoDmsRun.exe\" \"C:\\prj\\test\\cfg\\stam.dms\"  @statistics /results/att . 2: Generate the statistics for the results/att item in the C:\\prj\\test\\cfg\\stam.dms configuration and write the results to the file: D:\\log\\stat_att.txt . \"C:\\Program Files\\ObjectVision\\GeoDms7317\\GeoDmsRun.exe\" \"C:\\svn\\GeoDMS\\dev\\webgen\\cfg\\dms.dms\"  @statistics /results/att @file D:\\log\\stat_att.txt . ",
    "url": "/docs/user-guide-geodms-run.html",
    
    "relUrl": "/docs/user-guide-geodms-run.html"
  },"3320": {
    "doc": "user-guide",
    "title": "User Guides",
    "content": "User Guides are available for the: . | user-guide-geodms-gui | user-guide-geodms-gui-older-variants-(delphi) | user-guide-geodms-run | . ",
    "url": "/docs/user-guide.html#user-guides",
    
    "relUrl": "/docs/user-guide.html#user-guides"
  },"3321": {
    "doc": "user-guide",
    "title": "user-guide",
    "content": "User’s Guides are available in assisting users how to work with the geodms-gui and geodmsrun for available projects. In the section how-to-model information van be found on editing a model configuration or setting up a new project. ",
    "url": "/docs/user-guide.html",
    
    "relUrl": "/docs/user-guide.html"
  },"3322": {
    "doc": "using-mondaine-vesta",
    "title": "opening a single strategy",
    "content": "thumb|300x300px|GeoDMS GUI landing screen You can open a single strategy, for example, s2d_D_Restwarmte. By opening the run file in the GeoDMS GUI from ProjDir\\VestaDV\\Runs\\s2d_D_Restwarmte.dms . You will then see the GeoDMS GUI as displayed here on the right. If you navigate to SharedInvoer, you’ll see a set of parameter settings which are the input variables for the model and which you can change. Right click on SharedInvoer and choose Edit Config Source. You will now be redirected to a text editor in which you can these parameters. If not, visit Module 0: Install GeoDMS GUI and setup a configuration and see the section about setting up a configuration file editor. thumb|300x300px|SharedInvoer.dms in a configuration file editor . You should see the text editor as in the figure on the right. Here you can should the study area (StudieGebied_config) and choose whether there is flip file used, and which Scenario for that study area will be used. If you change anything, save the file and reopen the project in the GeoDMS by pressing Alt + R, or choosing Yes when returning to the GeoDMS. To view and calculate results for the strategy you are in, navigate to LeidraadResultaten/Exports/ESDL. Here you can find several items which when opened will generate the results for that strategy and save the output files. For example, Generate_PerPlanRegio_All_metRES will export all indicators for the study area and also the entire RES area for all years (start year, 2030, 2040, 2050). To view the results for, say 2050 and only the study area, navigate to /LeidraadResultaten/Exports/ESDL/PerRekenstap/Res2050/PerStudyArea/Regio_selectie. ",
    "url": "/docs/using-mondaine-vesta.html#opening-a-single-strategy",
    
    "relUrl": "/docs/using-mondaine-vesta.html#opening-a-single-strategy"
  },"3323": {
    "doc": "using-mondaine-vesta",
    "title": "calculating all strategies for a scenario-study area combination",
    "content": "First close the GeoDMS GUI completely. Then in windows explorer navigate to C:\\GeoDMS\\ProjDir\\VestaDV\\Runs\\path and open the file called set.bat with a text editor. Here change the directories to the paths which your computers uses. Then, for example for the use case Havenstad, open the file located in C:\\GeoDMS\\ProjDir\\VestaDV\\Runs called batch_leidraad_ESDL - Amsterdam.bat by double-clicking it. This should open a windows prompt window and start calculating. This could take a while depending on the computing power of you machine. ",
    "url": "/docs/using-mondaine-vesta.html#calculating-all-strategies-for-a-scenario-study-area-combination",
    
    "relUrl": "/docs/using-mondaine-vesta.html#calculating-all-strategies-for-a-scenario-study-area-combination"
  },"3324": {
    "doc": "using-mondaine-vesta",
    "title": "using-mondaine-vesta",
    "content": "When you have downloaded in installed GeoDMS and downloaded and prepared the Vesta configuration and sourcedata you can begin. If you do not know how something works, you can read the GeoDMS tutorials in the GeoDMS Academy. ",
    "url": "/docs/using-mondaine-vesta.html",
    
    "relUrl": "/docs/using-mondaine-vesta.html"
  },"3325": {
    "doc": "using",
    "title": "using",
    "content": "As described on the namespace page, the GeoDMS uses a search path to find referred tree-item. parent-item names can be added to find in other branches. Some branches are used multiple times in references, for example units in a Units container are often referred to from other branches. In stead of having to configure the parent item Units/ for each item in the reference, the Using property can be added to make the GeoDMS aware items can also be found in another branche. The Using property is used to configure in which container, except from the GeoDMS source path, referred items can be found. Example: . container Units {    unit&lt;float32&gt; meter;    unit&lt;spoint&gt;  EuroPoints; } container SourceData: Using = \"Units\" {    attribute&lt;meter&gt; altitude (EuroPoints): StorageName = \"%projDir%/data/grid/Elevation.asc\"; } . The unit meter and EuroPoints can not be found in the search path of the altitude item. Two options to solve this: . | Add the parent name Units to both items meter and EuroPoints | Configure the Using = “Units” property to the SourceData container, as in the example. This makes the GeoDMS aware items can also be found in the Units container. | . Items in the Using property can be combined with the semicolon (;) delimiter, e.g. Using = “Units;SourceData” refers to both the Units and the Sourcedata container. Although Using properties are powerful to reduce code, they should be used carefully. Multiple Using properties make search paths complex and confusing. In most configurations they are only in use for Units, Classifications and sometimes Geography containers. ",
    "url": "/docs/using.html",
    
    "relUrl": "/docs/using.html"
  },"3326": {
    "doc": "value-based-calculating",
    "title": "related issues",
    "content": ". | Issue: 1064 | sawec-2.0-wp3-it-infra | . ",
    "url": "/docs/value-based-calculating.html#related-issues",
    
    "relUrl": "/docs/value-based-calculating.html#related-issues"
  },"3327": {
    "doc": "value-based-calculating",
    "title": "breaking changes of GeoDMS 8",
    "content": "The following changes may break configurations that worked with GeoDms 7.4xx and might have to be updated. | reading unit range data from a .fss | processing item names that were generated from a gdal.vect storage manager for columns that have multiple operators and/or spaces, as now AsItemName function is used. | . ",
    "url": "/docs/value-based-calculating.html#breaking-changes-of-geodms-8",
    
    "relUrl": "/docs/value-based-calculating.html#breaking-changes-of-geodms-8"
  },"3328": {
    "doc": "value-based-calculating",
    "title": "external links",
    "content": "Taskflow: A Parallel and Heterogeneous Task Programming System Using Modern C++ - Tsung-Wei Huang: https://www.youtube.com/watch?v=MX15huP5DsM&amp;t=2050s . Rust programming language concepts: https://en.wikipedia.org/wiki/Rust_(programming_language) . Functional programming: https://en.wikipedia.org/wiki/Monad_(functional_programming) [^] . I See a Monad in Your Future: https://www.youtube.com/watch?v=BFnhhPehpKw . Managarm: A Fully Asynchronous OS Based on Modern C++ - Alexander van der Grinten: https://www.youtube.com/watch?v=BzwpdOpNFpQ . Polyhedral Compilation, Domain Sets, Tiling, calculation step fusion / tile pipelining, compiler tools for DSLs, Convolution, Dependencies, Locality, Albert Cohen - PLISS, 2019: . | (1/2): https://www.youtube.com/watch?v=mt6pIpt5Wk0 | (2:2): https://www.youtube.com/watch?v=3TNT5rFVTUY | . ",
    "url": "/docs/value-based-calculating.html#external-links",
    
    "relUrl": "/docs/value-based-calculating.html#external-links"
  },"3329": {
    "doc": "value-based-calculating",
    "title": "value-based-calculating",
    "content": "under-study Value based calculating . The GeoDMS is controlled by a declarative scripting language, which is used to define data-values, and not variables with intermediary states. This helps to make the modelling logically transparent and results traceable. There are still many changes that could affect the validity of calculated values, such as external data changes, changes of calculation rules and the introduction of new items or removal of existing items. We will take time to think and write about a more rigorous approach to identify CalcCache entries, also how this relates to working more interactively with the geodms-gui. definitions . named and cached items . A named item is a item that is configured, instantiated from a template, or representing a template instantiation argument . | A named item has a parent (the name of the root container is nowhere used and is now irrelevant). | Parent is a namespace and associates a unique name with a named item. | A parent is also a named item or the config root | instantiated items are copies of template or function definition items or created by a for_each operator (or the depreciated loop operator) | moniking items refer to operator result sub items. | . values and futures . A future T: . | holds a task or a T or a ErrMsg | has a sequence of supplying future Args…, which form a DAG | can be shared and over multiple threads, similar to std::shared_future | can be constructed with a functor(Args…) -&gt; T and a list of future...) | can be executed inline or by a DAG aware scheduler | . A task: . | has a functor (Args…)-&gt;T that produces T or an exception, | results in a T or a ErrMsg, | P.M.: a dedicated rapid complexity bound estimator: functor() -&gt; { time, intermediate memory, resulting memory } | . Each named attribute can: . | produce a future&lt; tileDataProducer &gt; | . tileDataProducer . | is a functor (0..nrTiles-1) -&gt; future&lt; elemArray &gt; | can be implemented as an array of elemArray, reduced to a singe elemArray when the number of tiles = 1. | . struct tileContainer&lt;T&gt; {    array&lt;elemArray&lt;T&gt; m_Segs;    future&lt;elemArray&lt;T&gt; operator(tile_id t) const { return m_Segs[t]; } } . | can be implemented as | . std:shared_ptr&lt;tileDataProducer&lt; U &gt; &gt; ...argProducers;  [argProducers](tile_id t) {    return future&lt; elemArray&lt;T&gt; &gt;(       [](elemArray&lt; U &gt; . . . args){ elemArray&lt;T&gt;  result; for(i: domain) result.emplace_back(f(args[i]...)); return result; }       , *argProducers(t)...); } . elemArray . | is an array of a T for each tile-elem-index | once produced, can be shared over multiple threads | can be a heap_array or a file_mapped_array | . elemArray&lt;sequence\\&gt; . | is an array of sequences of T for each tile-elem-index | once produced, can be shared over multiple threads | can be a heap_sequnce_array or a file_mapped_sequence_array | . Each named unit can have a .   future&lt;unitdata&lt;T&gt; &gt; .   . with . unitdata&lt;t&gt; :=  {   Metric or Projection;    range&lt;T&gt;;     nrTiles: tileid;      GetTileRange(0..nrTiles-1) -&gt; range&lt;T&gt;   } . migration path . This scheme replaces InterestCounting, DataReadLock, DataWriteLock, ItemReadLock, ItemWriteLock, WritableTileLock, ReadableTileLock . A (Prepared)DataRead can now contain an ItemReadLock, a DataReadLockAtom, and a ReadableTileLock. A DataWriteLock now contains a WritableTileLock . Checks are/should be added that: . | each DataReadLock was Prepared in advance and shielded by a pre-existing ItemReadLock | each DataWriteLock is shielded by an ItemWriteLock | no TileLock is requested with the DataLock. | all TileLocks are shielded by a DataLock | unique WritableTileLock -&gt; std::shared_ptr&lt;elemArray\\&gt; | . ReadableTileLock -&gt; ado-&gt;GetLockedDataRead() -&gt; future&lt;elemArray\\&gt;.get() WritableTileLock -&gt; ado-&gt;GetLockedDataWrite() -&gt; sets a value and fills a promise upon commit or sets a promise to canceled when demand was gone or sets it to the currently active ErrMsg if stack was unwound exceptionally. | item::PrepareDataUsage should return a future | OperationContext -&gt; future . | OperationContext CTOR takes m_FuncDC and Func and additinal otherSuppliers, nothing later | FuncDC::m_OperContext’s CreateResult stuff moves back to FuncDC | argsReady()-&gt;bool becomes the negative of hasConnectedSuppliers(); check that connectArgs | . | ItemReadLock and ItemWriteLock operate on TreeItem::m_SharableLock of type similar to ItemLocks.cpp::impl::treeitem_production_task | . Extent of data_locks . shared_data_locks (fka ItemReadLocks) now lock container (fna parent) first, unique_data_locks (fna ItemWriteLocks) don’t. This effectively implies that a unique_lock of a container doesn’t allow for a shared_lock for any of it’s components (fna sub-items). | consider reversing this | (now) the extent of a unique_data_lock on a cache root includes all data of its components | the (final) release of a shared_read_lock should consider freeing the data resources of the related item and its components. KeepData, other shared_read_locks on components, and herisitics of data size, calculation time indication, and usage patterns should be considered. | DC::GetResult() returns a geodms_future: i.e. a shared_ptr, shared_read_lock or a ErrMsg, and should/does cover all components of the cache item. | a shared_read_lock or ErrMsg can be returned when the related OperationContext is completed or when the data of the cacheItem and its components are in cache or memory. Evaluation of this should be synchronized with other shared_read_lock operations | DC(subitem(x, name))::GetResult() returns, a shared_read_lock to the sub_item only, releasing ownership of x, which can release shared ownership of data of other components of x. | when x::GetResult() returns the geodms_future shared_ptr, DC(subitem(x, name))::GetResult() returns a new shared_ptr that owns the original one and requests a shared_data_lock on named component from the shared_data_lock of the container. | . | . TimeStamps and invalidations . ExplainValue . P.M. integrity checks and data validation . Now IntegrityChecked data is the 3rd level of Progress. Data (TI) . IcData(ConfigItem) := { Data(ConfigItem), IcMsg(ConfigItem) } . IcMsg(ConfigItem) := merge(IcMsg(Suppliers(ConfigItem))…, IcMsg(parent(ConfigItem), IcCheck(ConfigItem)) . IcCheck(ConfigItem) := IC(Item)==empty ? empty : eval(item, IC(Item)) . source data changes, model changes and reevaluation’ . P.M. commits and other external effects’ . P.M. ",
    "url": "/docs/value-based-calculating.html",
    
    "relUrl": "/docs/value-based-calculating.html"
  },"3330": {
    "doc": "value-type",
    "title": "examples of the usage of the value type float32",
    "content": "1. unit&lt;float32&gt;  meter  := baseunit('m', &lt;float32&gt;); 2. parameter&lt;meter&gt;  RealWagonLength := 22[meter]; 3. parameter&lt;float32&gt; MarklinHO := float32(1.0 / 87.0); 4. parameter&lt;meter&gt; ScaledWagonLength := MarklinHO * RealWagonLength; . Available value types . | Name | Description | Size | MinValue | MaxValue | MissingValue | CanBeDomainUnit | NumericGroup | SignedGroup | PointGroup | Suffix | . | [bool](bool) | boolean | 1 bit | false | true | n/a | X | | | | | . | [uint2](uint2) | unsigned integer | 2 bits | 0 | 3 | n/a | X | | | | u2 | . | [uint4](uint4) | unsigned integer | 4 bits | 0 | 15 | n/a | X | | | | u4 | . | [uint8](uint8) | unsigned integer | 1 byte | 0 | 0xFE (254) | 0xFF (255) | X | X | | | b | . | [uint16](uint16) | unsigned integer | 2 bytes | 0 | 0xFFFE (65534) | 0xFFFF (65535) | X | X | | | w | . | [uint32](uint32) | unsigned integer | 4 bytes | 0 | 0xFFFFFFFE (4294967294) | 0xFFFFFFFF (4294967295) | X | X | | | u | . | [uint64](uint64) | unsigned long integer | 8 bytes | 0x0000000000000000 | 0xFFFFFFFFFFFFFFFE | 0xFFFFFFFFFFFFFFFF | X | X | X | | u64 | . | [int8](int8) | signed integer | 1 byte | 0x81 (-127) | 0x7F (127) | 0x80 (-128) | X | X | X | | c | . | [int16](int16) | signed integer | 2 bytes | 0x8001 (-32767) | 0x7FFF (32767) | 0x8000 (-32768) | X | X | X | | s | . | [int32](int32) | signed integer | 4 bytes | -2147483647 (0x80000001) | 2147483647 (0x7FFFFFFF) | -2147483648 (0x80000000) (-9999 before version 7.126) | X | X | X | | i | . | [int64](int64) | signed long integer | 8 bytes | 0x8000000000000001 | 0x7FFFFFFFFFFFFFFF | 0x8000000000000000 | X | X | X | | i64 | . | [float32](float32) | floating point | 4 bytes | -3.4E+38 (7 digits) | 3.4E+38 (7 digits) | QNaN (-9999.0f before version 7.126) | | X | X | | f | . | [float64](float64) | floating point | 8 bytes | -1.7E+308 (15 digits) | 1.7E+308 (15 digits) | QNaN (-9999.0 before version 7.126) | | X | X | | d | . | [spoint](spoint) | two int16 coördinates (row, col) | 4 bytes | (MinValue of int16)^2 | (MaxValue of int16)^2 | (MissingValue of int16)^2 | X | | | X | | . | [wpoint](wpoint) | two uint16 coördinates (row, col) | 8 bytes | (MinValue of uint16)^2 | (MaxValue of uint16)^2 | (MissingValue of uint16)^2 | X | | | X | | . | [ipoint](ipoint) | two int32 coördinates (row, col) | 8 bytes | (MinValue of int32)^2 | (MaxValue of int32)^2 | (MissingValue of int32)^2 | X | | | X | | . | [upoint](upoint) | two uint32 coördinates (row, col) | 8 bytes | (MinValue of uint32)^2 | (MaxValue of uint32)^2 | (MissingValue of uint32)^2 | X | | | X | | . | [fpoint](fpoint) | two float32 coördinates (x, y) | 8 bytes | (MinValue of Float32)^2 | (MaxValue of Float32)^2 | (MissingValue of Float32)^2 | | | | X | | . | [dpoint](dpoint) | two float64 coördinates (x, y) | 16 bytes | (MinValue of Float64)^2 | (MaxValue of Float64)^2 | (MissingValue of Float64)^2 | | | | X | | . | [string](string) | sequence of chars | 2*sizeof(UInt32)+n*sizeof(uint8) | | 0x255 0x255 0x255 0x255 | 'null' | | | | | | . &lt;/span&gt; . ",
    "url": "/docs/value-type.html#examples-of-the-usage-of-the-value-type-float32",
    
    "relUrl": "/docs/value-type.html#examples-of-the-usage-of-the-value-type-float32"
  },"3331": {
    "doc": "value-type",
    "title": "value-type",
    "content": "A Value Type indicates the kind of values that can be stored in parameters and attributes. | A unit determines a set of comparable values (= domain in the terminology of C.J. Date) and must be related to a specific Value Type. | A parameter stores one element value, for which the value type is determined by the values-unit of the parameter. | An attribute is implemented as an array of elements of a specific value type. The value type of these elements is determined by the values unit of the attribute. The location of these elements is implicitly determined by their position in the array. The set of valid locations and the type of these location elements is determined by it’s domain-unit. | . ",
    "url": "/docs/value-type.html",
    
    "relUrl": "/docs/value-type.html"
  },"3332": {
    "doc": "value",
    "title": "syntax",
    "content": ". | value(a, values unit) | a[values unit] | . ",
    "url": "/docs/value.html#syntax",
    
    "relUrl": "/docs/value.html#syntax"
  },"3333": {
    "doc": "value",
    "title": "definition",
    "content": "The value(a, values unit) function configures or converts the values unit of data item or literal a. ",
    "url": "/docs/value.html#definition",
    
    "relUrl": "/docs/value.html#definition"
  },"3334": {
    "doc": "value",
    "title": "description",
    "content": "The value function is a synonym for the convert function. The value function is usually used to define values-unit for new data-item, the convert function to convert data items to other values units. Since GeoDMS version 7.015 the value function can be used for coordinate-conversions to convert the values of related geography domains, for example to make a relation from a vector-data to a grid domain. ",
    "url": "/docs/value.html#description",
    
    "relUrl": "/docs/value.html#description"
  },"3335": {
    "doc": "value",
    "title": "applies to",
    "content": ". | data item with Numeric, Point, uint2, uint4 or bool value-type | . ",
    "url": "/docs/value.html#applies-to",
    
    "relUrl": "/docs/value.html#applies-to"
  },"3336": {
    "doc": "value",
    "title": "conditions",
    "content": ". | The value function is not (yet) implemented to cast integer values units to strings (use the string function instead). | The number of dimensions of the resulting value type should match with the source value type (e.g. a one-dimensional data item can not be converted with the value function to a two-dimensional data type). | . ",
    "url": "/docs/value.html#conditions",
    
    "relUrl": "/docs/value.html#conditions"
  },"3337": {
    "doc": "value",
    "title": "since version",
    "content": ". | 5.15 | syntax: a[values unit]: since 5.97 | . ",
    "url": "/docs/value.html#since-version",
    
    "relUrl": "/docs/value.html#since-version"
  },"3338": {
    "doc": "value",
    "title": "example",
    "content": "1. parameter&lt;euro&gt; amount := value(7, euro); 2. parameter&lt;euro&gt; amount := 7[euro]; . With these expressions, the GeoDMS becomes aware that the values of these data items are expressed in euros (with the value type and metric as configured for the euro values unit). The data item can now be e.g. be summed with other data items expressed in euros, but not with other data items expressed e.g. in dollars or kg. ",
    "url": "/docs/value.html#example",
    
    "relUrl": "/docs/value.html#example"
  },"3339": {
    "doc": "value",
    "title": "see also",
    "content": ". | convert | . ",
    "url": "/docs/value.html#see-also",
    
    "relUrl": "/docs/value.html#see-also"
  },"3340": {
    "doc": "value",
    "title": "value",
    "content": "conversion-functions value . ",
    "url": "/docs/value.html",
    
    "relUrl": "/docs/value.html"
  },"3341": {
    "doc": "valueinfo",
    "title": "tracing the calculation path",
    "content": ". The value info dialog presents the trace on how individual cells in a table-view or elements in a map-view are calculated. The example shows the value info dialog for a cell in the table, presenting parameter c with as value: 12. This value is calculated by multiplying two other parameters, A with a value of 3 and B with a value of 4. The value info dialog presents these parameters and their values. For attribute it would also present the relevant values needed to calculate the requested value. If for instance the value 4 of parameter B is also the result of a calculation, click on the value 4 to get the value info for this value. Step by step, you can trace the whole calculation path, until the final sources (data read from source files) are reached. Backward and Forward buttons are available, to assist the user in tracing backward and forward in the calculation path. ",
    "url": "/docs/valueinfo.html#tracing-the-calculation-path",
    
    "relUrl": "/docs/valueinfo.html#tracing-the-calculation-path"
  },"3342": {
    "doc": "valueinfo",
    "title": "valueinfo",
    "content": "user-guide-geodms-gui - value info . ",
    "url": "/docs/valueinfo.html",
    
    "relUrl": "/docs/valueinfo.html"
  },"3343": {
    "doc": "values-unit",
    "title": "types",
    "content": "Values units can be split up into: . | base-unit : units for which the metric is explicitly configured with the baseunit function, | derived-unit : units configured with expression, combining other unit, parameter and literals. The metric results from the configured expression. | value-type: value types can also be used als values unit. For numerical data, this is not advised as the metric of values units is useful in interpreting your data and in preventing illogical calculations. | . ",
    "url": "/docs/values-unit.html#types",
    
    "relUrl": "/docs/values-unit.html#types"
  },"3344": {
    "doc": "values-unit",
    "title": "values-unit",
    "content": "A values units describes how values of a data item need to be interpreted. A values unit consists of: . | a value type (required) which need to correspond to the type of data values configured with this values unit. The value type of the values unit defines the data type, dimension and allowed range of values, see the value-type table. | a metric (optional, advised for units describing quantities) defining how the values need to be interpreted semantically (in meters, seconds, etc.). | . Values units describe data-item with a similar range of values. This makes these units suitable for the configuration of a default-classification-scheme (cdf property). ",
    "url": "/docs/values-unit.html",
    
    "relUrl": "/docs/values-unit.html"
  },"3345": {
    "doc": "valuesunit",
    "title": "concept",
    "content": ". | values-unit is a unit with as role to define the value-type and metric of the values of a data-item. | ValuesUnit() is a function to get the Values Unit of an attribute. | . This page describes the ValuesUnit() function. ",
    "url": "/docs/valuesunit.html#concept",
    
    "relUrl": "/docs/valuesunit.html#concept"
  },"3346": {
    "doc": "valuesunit",
    "title": "syntax",
    "content": ". | ValuesUnit(a) | . ",
    "url": "/docs/valuesunit.html#syntax",
    
    "relUrl": "/docs/valuesunit.html#syntax"
  },"3347": {
    "doc": "valuesunit",
    "title": "definition",
    "content": "ValuesUnit(a) results in a unit with a reference to the values-unit of attribute a. ",
    "url": "/docs/valuesunit.html#definition",
    
    "relUrl": "/docs/valuesunit.html#definition"
  },"3348": {
    "doc": "valuesunit",
    "title": "example",
    "content": "unit&lt;uint32&gt; RefADomain := ValuesUnit(A); . ",
    "url": "/docs/valuesunit.html#example",
    
    "relUrl": "/docs/valuesunit.html#example"
  },"3349": {
    "doc": "valuesunit",
    "title": "see also",
    "content": ". | domainunit | propvalue | . ",
    "url": "/docs/valuesunit.html#see-also",
    
    "relUrl": "/docs/valuesunit.html#see-also"
  },"3350": {
    "doc": "valuesunit",
    "title": "valuesunit",
    "content": "unit-functions ValuesUnit . ",
    "url": "/docs/valuesunit.html",
    
    "relUrl": "/docs/valuesunit.html"
  },"3351": {
    "doc": "variance",
    "title": "syntax",
    "content": ". | var(a) | var(a, relation) | . ",
    "url": "/docs/variance.html#syntax",
    
    "relUrl": "/docs/variance.html#syntax"
  },"3352": {
    "doc": "variance",
    "title": "definition",
    "content": ". | var(a) results in a parameter with the variance of the non null values of attribute a. | var(a, relation) results in an attribute with the variance of the non null values of attribute a, grouped by relation. The domain-unit of the resulting attribute is the values-unit of the relation]. | . ",
    "url": "/docs/variance.html#definition",
    
    "relUrl": "/docs/variance.html#definition"
  },"3353": {
    "doc": "variance",
    "title": "description",
    "content": "The variance is calculated as the square of the sum of the differences of each value and the mean value of the distribution. This square is divided by the number of values (n). This way of calculating the variance is different from e.g. the ms Excel VAR function, which divides the sum of the differences by n-1. ",
    "url": "/docs/variance.html#description",
    
    "relUrl": "/docs/variance.html#description"
  },"3354": {
    "doc": "variance",
    "title": "applies to",
    "content": ". | attribute a with Numeric value-type | relation with value type of the group CanBeDomainUnit | . ",
    "url": "/docs/variance.html#applies-to",
    
    "relUrl": "/docs/variance.html#applies-to"
  },"3355": {
    "doc": "variance",
    "title": "conditions",
    "content": ". | The value-type of argument a and the resulting data-item must match. | The domain of arguments a and relation must match. | . ",
    "url": "/docs/variance.html#conditions",
    
    "relUrl": "/docs/variance.html#conditions"
  },"3356": {
    "doc": "variance",
    "title": "example",
    "content": "1. parameter&lt;float32&gt; varNrInh                := var(float32(City/NrInhabitants)); result = 24166.67 2. attribute&lt;float32&gt; varNrInhRegion (Region) := var(float32(City/NrInhabitants), City/Region_rel); . | City/NrInhabitants | City/Region_rel | . | 550 | 0 | . | 525 | 1 | . | 300 | 2 | . | 500 | 1 | . | 200 | 3 | . | 175 | null | . | null | 3 | . domain City, nr of rows = 7 . | varNrInhRegion | . | 0 | . | 156.25 | . | 0 | . | 0 | . | null | . domain Region, nr of rows = 5 . ",
    "url": "/docs/variance.html#example",
    
    "relUrl": "/docs/variance.html#example"
  },"3357": {
    "doc": "variance",
    "title": "see also",
    "content": "standard-deviance(sd) . ",
    "url": "/docs/variance.html#see-also",
    
    "relUrl": "/docs/variance.html#see-also"
  },"3358": {
    "doc": "variance",
    "title": "variance",
    "content": "aggregation-functions variance . ",
    "url": "/docs/variance.html",
    
    "relUrl": "/docs/variance.html"
  },"3359": {
    "doc": "vcruntime140-1-dll-missing",
    "title": "solution",
    "content": "See section Visual Studio 2015, 2017, 2019, and 2022 at https://support.microsoft.com/en-us/topic/the-latest-supported-visual-c-downloads-2647da03-1eea-4433-9aff-95f26a218cc0 for installing the redistributable for x64 . ",
    "url": "/docs/vcruntime140-1-dll-missing.html#solution",
    
    "relUrl": "/docs/vcruntime140-1-dll-missing.html#solution"
  },"3360": {
    "doc": "vcruntime140-1-dll-missing",
    "title": "vcruntime140-1-dll-missing",
    "content": "If a dll from the Microsoft Runtime libraries is missing on your system, an error such as these may occur: . ",
    "url": "/docs/vcruntime140-1-dll-missing.html",
    
    "relUrl": "/docs/vcruntime140-1-dll-missing.html"
  },"3361": {
    "doc": "vector-data",
    "title": "vector sources",
    "content": "Vector data in GeoDMS applications is read from (and can also be written to some of) the following formats: . | esri-shapefile (point, arc, polygon) | geopackage (point, arc, polygon) | ascii-files : csv (point) and xml (point, arc, polygon) | filegeodatabase (point, arc, polygon) | postgis (point, arc, polygon) | xml(point, arc, polygon) | fss files (point, arc, polygon) | . ",
    "url": "/docs/vector-data.html#vector-sources",
    
    "relUrl": "/docs/vector-data.html#vector-sources"
  },"3362": {
    "doc": "vector-data",
    "title": "vector calculations",
    "content": "The GeoDMS contains multiple functions to calculate with the vector coordinates, see mainly the geometric-functions . ",
    "url": "/docs/vector-data.html#vector-calculations",
    
    "relUrl": "/docs/vector-data.html#vector-calculations"
  },"3363": {
    "doc": "vector-data",
    "title": "vector-data",
    "content": "Vector data is data with a one-dimensional domain-unit, with at least one feature-attribute and optionally other attribute for the same domain unit. The feature attribute refers to the coordinates of the vectors. The GeoDMS supports the following vector types: . | point: point data, the feature attribute refers to one coordinate per entry. | arc: arc data, the feature attribute refers to at least two coordinates per entry. | polygon: polygon data, the feature attribute refers to at least three coordinates per entry. | . It is important to know the coordinate-system of your vector data, as they may effect the results of functions like arc_length and connect_info. ",
    "url": "/docs/vector-data.html",
    
    "relUrl": "/docs/vector-data.html"
  },"3364": {
    "doc": "vector-to-grid-processing-example",
    "title": "download",
    "content": ". | configuration/data | . ",
    "url": "/docs/vector-to-grid-processing-example.html#download",
    
    "relUrl": "/docs/vector-to-grid-processing-example.html#download"
  },"3365": {
    "doc": "vector-to-grid-processing-example",
    "title": "concepts",
    "content": ". | grid/raster analysis | . ",
    "url": "/docs/vector-to-grid-processing-example.html#concepts",
    
    "relUrl": "/docs/vector-to-grid-processing-example.html#concepts"
  },"3366": {
    "doc": "vector-to-grid-processing-example",
    "title": "functions",
    "content": ". | poly2grid | modus | arc2segm | dyna_point | invert | . ",
    "url": "/docs/vector-to-grid-processing-example.html#functions",
    
    "relUrl": "/docs/vector-to-grid-processing-example.html#functions"
  },"3367": {
    "doc": "vector-to-grid-processing-example",
    "title": "vector-to-grid-processing-example",
    "content": "configuration-examples Vector to Grid processing . This script explores different options for making grid versions of vector-data. The following examples are part of this script . | Configuring grids for different grid sizes. | Configuring a grid at a small sizes and aggregate this to a larger cells is included. This can be used to make a grid based on maximum area (see also https://www.geodms.nl/mantis/view.php?id=58) | Configuring an arc data source, making a grid version of these arcs and combine these with a landuse grid. | . ",
    "url": "/docs/vector-to-grid-processing-example.html",
    
    "relUrl": "/docs/vector-to-grid-processing-example.html"
  },"3368": {
    "doc": "verschillen-cbs-woningregister-met-bag",
    "title": "definitie verschillen",
    "content": ". | Tijdelijke bouwwerken werden in het Woningregister niet als woonruimte aangemerkt. Tijdelijke bouwwerken c.q. objecten zoals containerwoningen voor studenten en asielzoekers behoren volgens de definities van de BAG wel tot de reguliere woningvoorraad. Amsterdam 2: 15 duizend woningen hoger uit dan voorgaande jaren bij overstap naar BAG doordat studentenwoningen nu wel meegenomen worden. | . | Recreatiewoningen krijgen in de BAG soms als gebruikstypering een woonfunctie en worden dan tot de woningvoorraad gerekend. | . | Daar tegenover worden bijzondere woongebouwen in de BAG niet altijd aangeduid met een woonfunctie. Dergelijke objecten kunnen ook onder logiesfunctie of verzorgingsfunctie (verpleegtehuizen, gezinsvervangende tehuizen en kazernes) vallen. | . | Wooneenheden (onzelfstandige woningen), zoals studentenflats, werden in het Woningregister aangemerkt als aparte categorie woonruimten. In de BAG worden ze samen als één VBO gezien. Wanneer de eenheden een eigen adres hebben worden alle eenheden als afzonderlijke VBO gezien. | . | Woningen die wel zijn bewoond maar officieel nog niet zijn opgeleverd of soms al zijn onttrokken, worden bij de BAG niet en bij het Woningregister soms wel tot de woningvoorraad gerekend. | . | De gebruiksfuncties kunnen in beide registers verschillend zijn. | . ",
    "url": "/docs/verschillen-cbs-woningregister-met-bag.html#definitie-verschillen",
    
    "relUrl": "/docs/verschillen-cbs-woningregister-met-bag.html#definitie-verschillen"
  },"3369": {
    "doc": "verschillen-cbs-woningregister-met-bag",
    "title": "fouten in registratie",
    "content": "112 duizend woningen konden niet gekoppeld worden door schrijfwijze adressen en onvolkomenheden in beide registers. Daarnaast is de BAG in de beginperiode minder betrouwbaar volgens pagina 13 3. Dubbeltellingen kunnen hier een rol in spelen, nieuwbouw of sloop kan bij de overgang zowel tijdens de woningregister enquête als bij de BAG opgave geteld zijn, dit is later gecorrigeerd. 4 . ",
    "url": "/docs/verschillen-cbs-woningregister-met-bag.html#fouten-in-registratie",
    
    "relUrl": "/docs/verschillen-cbs-woningregister-met-bag.html#fouten-in-registratie"
  },"3370": {
    "doc": "verschillen-cbs-woningregister-met-bag",
    "title": "verschillen-cbs-woningregister-met-bag",
    "content": "Volgens het CBS is volgens het Woningregister de woningvoorraad op 1 januari 2012 7,266 miljoen woningen, volgens de BAG is dit op 1 januari 2012 7,387 miljoen woningen. Een verschil van 121 duizend woningen. In totaal komen 7,065 miljoen woningen voor in beide datasets. Er is een overlap van 7,065 woningen en ten opzichte hiervan heeft de BAG 322 duizend woningen meer. Deze verschillen komen voornamelijk tot stand door definitie verschillen en in mindere mate door fouten in registratie door bijvoorbeeld dubbeltellingen. 1 . ",
    "url": "/docs/verschillen-cbs-woningregister-met-bag.html",
    
    "relUrl": "/docs/verschillen-cbs-woningregister-met-bag.html"
  },"3371": {
    "doc": "vesta-download-mondaine",
    "title": "Voorbereiding",
    "content": "Installeer GeoDMS . | Download de meest recente versie van GeoDMS hier | Installeer de software | Vink in Tools &gt; Options alles aan zoals hier: | . [](File:Website_InstallatieManual_Settings.png \"wikilink\") . | Wil je niet dat GeoDMS de source data op C:/SourceData of local data op C:/LocalData zet/zoekt, open dan GeoDMS en ga naar Tools &gt; Options en verander de paden onderaan: | . [](File:Website_InstallatieManual_Paths.png \"wikilink\") . Vesta configuratie . | Download de Vesta configuratie hier of doe een git-clone van die repository MONDAINE2 branch | Pak de zip uit en plaats het in je ProjDir-folder, bijvoorbeeld “C:/GeoDMS/ProjDir/VestaDV-MONDAINE” | . Vesta source data . | Download de Vesta source data hier | Pak de zip uit en plaats het in je SourceData-folder, bijvoorbeeld “C:/GeoDMS/SourceData/Vesta_SD41” | . ",
    "url": "/docs/vesta-download-mondaine.html#voorbereiding",
    
    "relUrl": "/docs/vesta-download-mondaine.html#voorbereiding"
  },"3372": {
    "doc": "vesta-download-mondaine",
    "title": "Model run",
    "content": ". | in GeoDMS GUI open een strategie, bijvoorbeeld: “C:/GeoDMS/ProjDir/VestaDV-MONDAINE/Runs/S0_Referentie.dms” | Wil je de resultaten van een tijdstap zien? Navigeer dan naar: /LeidraadResultaten/Exports/ESDL/PerRekenstap/Res2030/PerStudyArea/Regio_selectie om de container met alle resultaten te zien | Hier kun je dubbelklikken op een item om het te laten uitrekenen, bijvoorbeeld: “H02_Vraag_Ruimteverwarming” | Wil je dit scenario voor alle tijdstappen voor het studiegebied per buurt naar csv wegschrijven? Dubbelklik dan op: /LeidraadResultaten/Exports/ESDL/Generate_PerPlanRegio_All | . ",
    "url": "/docs/vesta-download-mondaine.html#model-run",
    
    "relUrl": "/docs/vesta-download-mondaine.html#model-run"
  },"3373": {
    "doc": "vesta-download-mondaine",
    "title": "Batch Model run",
    "content": ". | Wil je de resultaten van alle strategieën in één keer naar csv wegschrijven? Open dan “batch_leidraad_ESDL.bat” in de map “C:/GeoDMS/ProjDir/VestaDV-MONDAINE/Runs” met een tekst editor. | Hierin staan een parameters die je kunt instellen: studiegebied, flipstatus, en scenario. Tenzij je bepaalde buurten een strategie wilt opleggen en daar een invoertabel voor hebt opgegeven, zet dit op FALSE. Wil je een speciek vooraf bepaald scenario uitrekenen? Kies dan die, of selectieer ‘LosseStrategieen’. | Vervolgens zet je in de lijst met beschikbare strategieën, de strategieën aan die je wilt meenemen. Je zet een strategie aan, wanneer er geen ‘REM’ voorstaat. | Gebeurt er niks? Wellicht heb je GeoDMS ergens anders geïnstalleerd of kloppen andere padverwijzingen niet. Pad dan het bestand “set.bat” aan in “C:/GeoDMS/ProjDir/VestaDV-MONDAINE/Runs/path”. Als je de GeoDMS GUI al open hebt, werkt het ook niet. Sluit dan de GUI af en run de batch opnieuw. | . ",
    "url": "/docs/vesta-download-mondaine.html#batch-model-run",
    
    "relUrl": "/docs/vesta-download-mondaine.html#batch-model-run"
  },"3374": {
    "doc": "vesta-download-mondaine",
    "title": "vesta-download-mondaine",
    "content": "Deze manual is specifiek bedoeld voor het kunnen draaien van Vesta ten behoeve van MONDAINE voor de Havenstad use case. ",
    "url": "/docs/vesta-download-mondaine.html",
    
    "relUrl": "/docs/vesta-download-mondaine.html"
  },"3375": {
    "doc": "vesta-model",
    "title": "introduction",
    "content": "Vesta is a spatially explicit model that matches future projected demand for energy in the built environment to options for local &amp; zonal energy supply. The primary focus for building this model was to assess impacts of different policies for local and regional energy production on non-renewable resource consumption, wealth (re)distribution, CO2 emission, compliance and public finance at the national level. The demand for energy is modelled geographically specific for: residential objects, business locations and greenhouses. Changes in the built environment are taken into account by using the results of the Land Use Scanner. Not included are: industrial usage and roofless agriculture. ",
    "url": "/docs/vesta-model.html#introduction",
    
    "relUrl": "/docs/vesta-model.html#introduction"
  },"3376": {
    "doc": "vesta-model",
    "title": "data",
    "content": "Vesta uses only open data.The BAG (Basisregister Adressen en Gebouwen) is used to calculate the energy usage for each residential and business building. ",
    "url": "/docs/vesta-model.html#data",
    
    "relUrl": "/docs/vesta-model.html#data"
  },"3377": {
    "doc": "vesta-model",
    "title": "downloads",
    "content": "Different versions of the model can be downloaded from the VestaDV github: . ",
    "url": "/docs/vesta-model.html#downloads",
    
    "relUrl": "/docs/vesta-model.html#downloads"
  },"3378": {
    "doc": "vesta-model",
    "title": "applications",
    "content": "The model is used for the: Startanalyse van de Leidraad, to calculate at the neighbourhood level the results of alternative strategies. ",
    "url": "/docs/vesta-model.html#applications",
    
    "relUrl": "/docs/vesta-model.html#applications"
  },"3379": {
    "doc": "vesta-model",
    "title": "partners",
    "content": ". | PBL | CE Delft | . ",
    "url": "/docs/vesta-model.html#partners",
    
    "relUrl": "/docs/vesta-model.html#partners"
  },"3380": {
    "doc": "vesta-model",
    "title": "links",
    "content": ". | PBL page (in Dutch) | https://www.tweedekamer.nl/downloads/document?id=675ea4bc-f48e-4b11-9d78-c39014ccf606&amp;title=Publicatie%20van%20de%20Leidraad%20aardgasvrije%20wijken%20.docx | Jeremy Rifkin on global issues and the future of our planet - YouTube | . ",
    "url": "/docs/vesta-model.html#links",
    
    "relUrl": "/docs/vesta-model.html#links"
  },"3381": {
    "doc": "vesta-model",
    "title": "vesta-model",
    "content": "[](File:Vestafull.jpg \"wikilink\") . ",
    "url": "/docs/vesta-model.html",
    
    "relUrl": "/docs/vesta-model.html"
  },"3382": {
    "doc": "vesta-mondaine",
    "title": "benodigdheden",
    "content": ". | Installeer GeoDMS | Download Vesta configuratie | Download Vesta source data | . installeer GeoDMS . | Download de meest recente versie van GeoDMS hier | Installeer de software | In Tools &gt; Options vink alles aan zoals hier: | . [ InstallatieManual Settings.png](File:Website_InstallatieManual_Settings.png \"wikilink\") . | Wil je niet dat GeoDMS de source data op C:/SourceData of local data op C:/LocalData zet/zoekt, open dan GeoDMS en ga naar Tools &gt; Options en verander de paden onderaan: | . [](File:Website_InstallatieManual_Paths.png \"wikilink\") . Vesta configuratie . | Download de Vesta configuratie hier | Pak de zip uit en plaats het in je ProjDir-folder, bijvoorbeeld C:/GeoDMS/ProjDir/VestaDV-GeneralisatieConversie | . Vesta source data . | Download de Vesta source data hier | Pak de zip uit en plaats het in je SourceData-folder, bijvoorbeeld C:/GeoDMS/SourceData/Vesta_SD41 | . ",
    "url": "/docs/vesta-mondaine.html#benodigdheden",
    
    "relUrl": "/docs/vesta-mondaine.html#benodigdheden"
  },"3383": {
    "doc": "vesta-mondaine",
    "title": "vesta model run",
    "content": ". | Open GeoDMS GUI | File &gt; Open configuration file &gt; C:\\GeoDMS\\ProjDir\\VestaDV-GeneralisatieConversie\\Runs\\Havenstad.dms | In (dit nog nader te bepalen pad) staan resultaten | . | dit item exporteert de resultaten die in python ingelezen kunnen worden om ESDL van te maken. | . ",
    "url": "/docs/vesta-mondaine.html#vesta-model-run",
    
    "relUrl": "/docs/vesta-mondaine.html#vesta-model-run"
  },"3384": {
    "doc": "vesta-mondaine",
    "title": "vesta-mondaine",
    "content": "Deze manual is specifiek bedoeld voor het kunnen draaien van Vesta ten behoeve van MONDAINE voor de Havenstad use case. ",
    "url": "/docs/vesta-mondaine.html",
    
    "relUrl": "/docs/vesta-mondaine.html"
  },"3385": {
    "doc": "vesta",
    "title": "indices",
    "content": ". | Vraag categorie c := {Ruimteverwarming, Tapwater, Elektrische Apparatuur}. | Zichtjaar t := {2010, 2020, 2030, 2040, 2050} | Planregio r: inidiceert de verschillende planregio’s. Dit kunnen PC4 gebieden zijn, of een raster van 500m, 1km, of 2km. | . ",
    "url": "/docs/vesta.html#indices",
    
    "relUrl": "/docs/vesta.html#indices"
  },"3386": {
    "doc": "vesta",
    "title": "bebouwingscomponenten",
    "content": "Bebouwingscomponenten zijn verzamelingen bebouwingsobjecten die als een soort tabel verwerkt worden. Beschikbare bebouwingscomponenten zijn: . | Woningen obv GMP (2004..2006) met 1 record per PC6 | Woningen obv de BAG (2015) met 1 record per verblijfsobject met woonfunctie | Woningen worden gesloopt obv Wlo2Energy resultaten. | Nieuwbouw woningen obv Wlo2Energy resultaten. | Utiliteiten obv LISA. | Utiliteiten obv de BAG (2015) met 1 record per verblijfsobject met gebruiksfuncties niet zijnde woonfunctie en niet alleen industrie. | Utiliteiten worden gesloopt obv Wlo2Energy resultaten. | Nieuwbouw utiliteiten obv Wlo2Energy resultaten (nu alleen in uitleg lokaties, positieve delta’s binnen bestaand bebouwd gebied worden niet verwerkt). | Glastuinbouw | Af/Bij kaarten voor glastuinbouw | . Een bebouwingscomponent moet een vast aantal kenmerken hebben om verwerkt te worden, zie onder. ",
    "url": "/docs/vesta.html#bebouwingscomponenten",
    
    "relUrl": "/docs/vesta.html#bebouwingscomponenten"
  },"3387": {
    "doc": "vesta",
    "title": "ruimtelijke vraag",
    "content": "Naast opgaven van KengetalTypeDomein, BouwjaarDomein, SubtypeDomein moeten ook values eenheden worden gedefinieerd: . | JoinedUnit, de quantity waarmee de grootte van eenbebouwingsobject wordt gedefinieerd. Dit is bijvoorbeeld voor Lisa Utiliteiten het aantal medewerkers. | ModelUnit | . In de modelobjecten wordt het aantal c gegeven per model-object. Voor Lisa Utiliteiten is dit het vloergebruik per medewerker, Voor de overige Bebouwingscomponenten is deze factor 1 aangezien daar Modelunit en JoinedUnit samenvallen (per m2 of per woning). ",
    "url": "/docs/vesta.html#ruimtelijke-vraag",
    
    "relUrl": "/docs/vesta.html#ruimtelijke-vraag"
  },"3388": {
    "doc": "vesta",
    "title": "modelobjecten",
    "content": "Per modelobject wordt een energielabel aangenomen en daarbij passende functionele vraagkenmerken gegeven. Tevens wordt per modeloject aangegeven wat de mogelijke gebouwverbeteringen (labelsprongen) kosten en opleveren (gebouwefficiency coefficient tov het aangenomen label). ",
    "url": "/docs/vesta.html#modelobjecten",
    
    "relUrl": "/docs/vesta.html#modelobjecten"
  },"3389": {
    "doc": "vesta",
    "title": "ruimtelijke vraag",
    "content": "Ruimtelijke vraag ontstaat door Bebouwingsobjecten te relateren aan modelobjecten. Voor de functionele vraag wordt eerst gekeken of uit de energielabel registratie al een label voor het object bekend is en op basis daarvan wordt er eventueel aangenomen dat er al een labelsprong heeft plaatsgevonden, waarvan de kosten irrelevant zijn en het reeds behaalde efficiencyvoordeel de functionele vraag beperkt. Tevens wordt een correctiefactor toegepast obv het klimatogische koude kaarten. ",
    "url": "/docs/vesta.html#ruimtelijke-vraag-1",
    
    "relUrl": "/docs/vesta.html#ruimtelijke-vraag-1"
  },"3390": {
    "doc": "vesta",
    "title": "gebouwopties",
    "content": "Gebouwopties zijn mogelijke verbeteringen van qua isolatie of opwekking per bebouwingsobject . ",
    "url": "/docs/vesta.html#gebouwopties",
    
    "relUrl": "/docs/vesta.html#gebouwopties"
  },"3391": {
    "doc": "vesta",
    "title": "gebiedsopties",
    "content": ". | Restwarmte: kentens van planregio’s | Geothermie: 1 planregio | WijkWKK / BMC: 1 planregio | WKO: clusteres van individuele bebouwingsobjecten, | . ",
    "url": "/docs/vesta.html#gebiedsopties",
    
    "relUrl": "/docs/vesta.html#gebiedsopties"
  },"3392": {
    "doc": "vesta",
    "title": "BuildingComponent",
    "content": "A Building Component is a unit that has the following sub-items (attrbutes without specified domain have the BuildingComponent as domain): . unit&lt;uint8&gt; KengetalTypeDomein:= Classifications/WoningtypeGeoHoogte; unit&lt;uint8&gt; BouwjaarDomein := Classifications/ unit&lt;uint8&gt; SubTypeDomein := combine(KengetalTypeDomein, BouwjaarDomein); // TODO: rename to ModelObject_rel unit&lt;uint32&gt; BebouwingsObject:= .. // selfref. TODO: should be removed { attribute&lt;string&gt; code; // used to link building objects of subsequent years; TODO: should be removed as an object should only have one history attribute&lt;string&gt; Label; // used in TableViews of these building objects attribute&lt;String&gt; PC6code; // OBSOLETE ? // the following attributes are only used if the related PlanRegio has been selected. attribute&lt;RegioIndelingen/PC4&gt; PC4_rel; attribute&lt;RegioIndelingen/grid500m&gt; grid500m_rel; attribute&lt;RegioIndelingen/grid1km&gt; grid1km_rel; attribute&lt;RegioIndelingen/grid2km&gt; grid2km_rel; attribute&lt;RegioIndelingen/Socrates&gt; Socrates_nr; // ??? OBSOLETE ? Or available as RapRegion partitioning // attributes used by VestaRunData to calculate demand characteristics attribute&lt;nrAansl&gt; nrAansluitingen; attribute&lt;nrWoningen&gt; nrJoinedUnits; // could be number of residences or labour positions, a unit for demand attribute&lt;Float64&gt; AandeelWarmteVraag; // between 0 and 1. attribute&lt;Classifications/GeenOnderverdeling&gt; GeenOnderverdeling := const(0,.,Classifications/GeenOnderverdeling); attribute&lt;KengetalTypeDomein&gt; KengetalType := Impl/WoningType; attribute&lt;UInt8&gt; SubType := value(KengetalType * UInt8(#(Classifications/BouwJaarBAG)) + Impl/BouwjaarBag_rel, classifications/WoningTypeBouwjaarBAG); attribute&lt;BJ&gt; BouwJaar; // location, required for some area options attribute&lt;rdc_meter&gt; point // additional geographic extent characteristics, required by the WKO clustering container Gebied { attribute&lt;Float64&gt; n := const(1.0, ..); attribute&lt;Float64&gt; MEAN_x := Float64(PointCol(point)); attribute&lt;Float64&gt; MEAN_y := Float64(PointRow(point)); attribute&lt;Float64&gt; SSD_xx := const(0.0, ..); attribute&lt;Float64&gt; SSD_xy := const(0.0, ..); attribute&lt;Float64&gt; SSD_yy := const(0.0, ..); } // attributes that relate to observed energy labels that can overrule the label that is otherwise assumed for each model type. attribute&lt;Classifications/energielabel&gt; EnergieLabelData_rel; { attribute&lt;uint32&gt; totaal (BagWoning):= uint32(isDefined(EnergieLabelData_rel)); attribute&lt;uint32&gt; TotWeight (BagWoning):= const(0,BagWoning);//\"1 * aantal_ap + 2 * aantal_a + 3 * aantal_b + 4 * aantal_c + 5 * aantal_d + 6 * aantal_e + 7 * aantal_f + 8 * aantal_g\"; attribute&lt;Classifications/energielabel&gt; AvgLabel (BagWoning):= EnergieLabelData_rel; } // optional parameters, used only for certain BestaandeWoningRapGroep options attribute&lt;Classifications/eigendom_woning &gt; Eigendom; // wordt gebruikt bij BestaandeWoningRapGroep [ 4 ] attribute&lt;Classifications/InkomensKlasse&gt; Inkomen; // wordt gebruikt bij BestaandeWoningRapGroep [ 8 ] } . ",
    "url": "/docs/vesta.html#buildingcomponent",
    
    "relUrl": "/docs/vesta.html#buildingcomponent"
  },"3393": {
    "doc": "vesta",
    "title": "links",
    "content": ". | Planbureau voor de leefomgeving . | Vesta ruimtelijk energiemodel voor de gebouwde omgeving, PBL 2012 | Naar een duurzamere warmtevoorziening van de gebouwe omgeving in 2015, PBL 2012 . | Rapport | Interactieve kaart | . | Functioneel Ontwerp, CE Delft zomer 2014 | . | Object Vision product page | . | Vesta_download_Mondaine | . ",
    "url": "/docs/vesta.html#links",
    
    "relUrl": "/docs/vesta.html#links"
  },"3394": {
    "doc": "vesta",
    "title": "vesta",
    "content": "Vesta Begrippen . Het ruimtelijk energiemodel Vesta berekent het energiegebruik en de CO2-uitstoot van de gebouwde omgeving (onder andere woningen, kantoren, winkels en ziekenhuizen) en de glastuinbouw voor de periode van 2010 tot . | Daarnaast kan het model de effecten berekenen van gebouwmaatregelen en gebiedsmaatregelen voor warmtelevering in termen van vermeden CO2-uitstoot, energiegebruik, investeringskosten en financiële opbrengsten. | . Deze pagina beschrijft begrippen die centraal staan in de model structuur van Vesta, het conceptuele model . ",
    "url": "/docs/vesta.html",
    
    "relUrl": "/docs/vesta.html"
  },"3395": {
    "doc": "virtual-memory",
    "title": "virtual-memory",
    "content": "Virtual memory in the Windows OS can be defined as the amount of physical RAM plus space allocated on hard drives to which memory in physical RAM can be temporarily moved to, sometimes known as swapfile, in order to avoid running out of memory. This can be very useful if you are for instance running a model that encompasses the the whole world. The virtual memory on Windows OS can be expanded in Windows 10 or 11 as follows: . | go to the Windows taskbar search area, type SystemPropertiesAdvanced.exe and click the executable. | In the left System properties window click the settings button in the performance tab. This navigates the user to the right Performance Options window. Click in this window the Virtual memory Change button. | This opens the Virtual Memory window. Here click on custom size and change this setting appropriately. The example below for instance adds 700GB to the total virtual memory using the D:\\ drive. | . ",
    "url": "/docs/virtual-memory.html",
    
    "relUrl": "/docs/virtual-memory.html"
  },"3396": {
    "doc": "virtual-perturbation",
    "title": "virtual perturbations of suitability maps",
    "content": "In order to make exact allocation possible, equal suitabilities are virtually perturbated. It should never be the case that for any two cells i,l and types j,k, the distance from points S_i and S_l to the facet (j,k) is equal . or formally: .  (R1):  (S_ij + C_j ) - (S_ik + C_k) &lt;&gt; (S_lj + C_j ) - (S_lk + C_k) unless i==l OR j==k which is equivalent to  (S_ij - S_ik) + (C_j  - C_k) &lt;&gt; (S_lj - S_lk) + ( C_j - C_k) unless i==l OR j==k which is equivalent to  (S_ij - S_ik)                &lt;&gt; (S_lj - S_lk) unless i==l OR j==k. This is achieved by applying symbolic pertubations to the cost values and require some administration which points are compared. S_ij(epsilon) := S_ij + epsilon*i*j . Thus S_ij(epsilon) &lt;&gt; S_kl(epsilon) for i&lt;&gt;k XOR j&lt;&gt;l since S_ij == S+kl implies S_ij(epsilon) - S_kl(epsilon) == epsilon*(ij - kl) . and (S_ij(epsilon) - S_ik(epsilon)) - (S_lj(epsilon) - S_lk(epsilon)) . ",
    "url": "/docs/virtual-perturbation.html#virtual-perturbations-of-suitability-maps",
    
    "relUrl": "/docs/virtual-perturbation.html#virtual-perturbations-of-suitability-maps"
  },"3397": {
    "doc": "virtual-perturbation",
    "title": "epsilon * [(ij - ik) - (lj - lk)]",
    "content": "epsilon * [(i-l)(j-k)], which fullfills requirement (R1). The sufficiency of (R1) and thus the fact that degeneracies such as S_ij == S_lk for i&lt;&gt;l AND j&lt;&gt;k doesn’t matter follow from close analysis of the used operators: . | We take and count maxima per cell i of (S_ij + C_j) over j. | We keep a queue of cells i for each communicating (j,k) facet, strictly ordered by (S_ij(epsilon) - S_ik(epsilon)), small values have priority | We update C_j(epsilon) := C_k(epsilon) - (S_ij(epsilon) - S_ik(epsilon)) using facet (j,k) | . thus: .  C_j.first  := C_k.first    - heap(j,k).top.first // reduce coordinate-j of the splitter to enable the reallocation of one unit from j to k  C_j.second := C_k.second   - i*(j-k)             // update the epsilon component of the shadow price . Note that the C_j on this page is aka lambda_j. ",
    "url": "/docs/virtual-perturbation.html#epsilon--ij---ik---lj---lk",
    
    "relUrl": "/docs/virtual-perturbation.html#epsilon--ij---ik---lj---lk"
  },"3398": {
    "doc": "virtual-perturbation",
    "title": "links",
    "content": ". | Edelsbrunner, H. And Mcke, E. Simulation of simplicity: a technique to cope with degenerate cases in geometric algorithms, 4th Annual ACM Symposium on Computational Geometry (1988) 118-133. | . ",
    "url": "/docs/virtual-perturbation.html#links",
    
    "relUrl": "/docs/virtual-perturbation.html#links"
  },"3399": {
    "doc": "virtual-perturbation",
    "title": "virtual-perturbation",
    "content": " ",
    "url": "/docs/virtual-perturbation.html",
    
    "relUrl": "/docs/virtual-perturbation.html"
  },"3400": {
    "doc": "visualisation-style",
    "title": "configuration of visualisation styles",
    "content": "Visualisation styles are configured for data items with the dialogtype property. This property indicates which aspect is configured. For parameter it is advised to configure visualisation styles values as expression (than they can be edited with the expression dialog in the GeoDMS GUI). Visualisation styles items are configured in two ways: . As subitem of the values-unit of the item to be visualised . By configuring visualisation styles items as subitem of the values_unit of the items to be visualised, these visualisation styles apply as default style for all data items with these values units. This is a generic way of configuring visualisation styles. Example: . unit&lt;string&gt; vrz_lbl: DialogType = \"LabelText\"` { parameter&lt;float32&gt; LabelSize := 8[fontsize], DialogType = \"LabelSize\"; } . In this example a values unit for text labels is configured with as subitem a parameter for the fontsize. The DialogType for the values unit is set to “LabelText” to indicate the values unit is used for labels in the map. The subitem parameter has a DialogType = “LabelSize” configured to inform the GeoDMS that data items with this values unit need to be visualised with a font size of 8 pixels. The name (LabelSize) of the subitem parameter has no functional meaning, but for transparency reasons it is advised to use a clear name like the name of the DialogType, see also naming-conventions. The visualisation style item is often a part of a classification. This item can be an attribute with the number of entries of the class unit, or a parameter with one value for all classes. As subitem of the data item or it’s domain unit to be visualised . For each data_item or it’s domain unit visualisation styles can be configured, overruling an optional visualisation style item configured to it’s values unit. If a visualisation style is configured as subitem of a Geographic domain unit, the style will be applied for the all data items of the same domain unit. Example: . attribute&lt;point_rd&gt; locatie := point(PresYCoord, PresXCoord, point_rd) { parameter&lt;uint32&gt;  SymbolColor := rgb(255,0,0), DialogType = \"SymbolColor\" parameter&lt;float32&gt; SymbolSize  := float32(8),   DialogType = \"SymbolSize\"; } . In this example, two subitems are configured to set the color and size for symbols. In the next paragraphs different style items are described for point, arc, polygon layers and for labels in the map. For grid data only the visualisation style for color, called BrushColor (see also polygon) item is relevant. ",
    "url": "/docs/visualisation-style.html#configuration-of-visualisation-styles",
    
    "relUrl": "/docs/visualisation-style.html#configuration-of-visualisation-styles"
  },"3401": {
    "doc": "visualisation-style",
    "title": "styles for",
    "content": ". | point-visualisation | arc-visualisation | polygon-visualisation | label-visualisation | scale-dependent-visualisation | background-layer | . ",
    "url": "/docs/visualisation-style.html#styles-for",
    
    "relUrl": "/docs/visualisation-style.html#styles-for"
  },"3402": {
    "doc": "visualisation-style",
    "title": "visualisation-style",
    "content": "The geodms-gui contains an interactive map view component for visualising both grid-data and vector-data (point, arc and polygon features). To visualise data-item in a map view, they must have a geography domain-unit. Various configurable aspects can be used to configure how data tems are visualised: . | size/width: size of symbols or width of arcs / polygon outlines | color: color of grid cells, point symbols, arc, polygon outlines and the fill color of polygons. | hedging: for the interior of polygons | symbolfont: the font used for the point symbols and labels | font character: the font character used for the point symbols and labels. | . Each aspect has a default style, which can be overruled by configuring these styles in the configuration. Colors can also be edited with the GeoDMS GUI. ",
    "url": "/docs/visualisation-style.html",
    
    "relUrl": "/docs/visualisation-style.html"
  },"3403": {
    "doc": "void",
    "title": "void",
    "content": "The keyword void is used to name the domain-unit of a parameter. Parameters do not have a domain unit. If is is still needed to name a domain unit, e.g. in a for_each function, the keyword void is used. ",
    "url": "/docs/void.html",
    
    "relUrl": "/docs/void.html"
  },"3404": {
    "doc": "webmapping",
    "title": "MapGallery",
    "content": "left . We do not develop Webmapping products ourselves, but work together with Baasgeo.com, developer of the MapGallery. MapGallery is a powerful and intuitive WebGIS solution, supporting monitoring and projections by using animations.   . We believe open Webmapping applications are useful tools in many policy areas, as sharing information is a key success factor in effective cooperation. ",
    "url": "/docs/webmapping.html#mapgallery",
    
    "relUrl": "/docs/webmapping.html#mapgallery"
  },"3405": {
    "doc": "webmapping",
    "title": "examples",
    "content": "1)     On demo.wzwkaart.nl you can find examples of information products made with the GeoDMS and presented with MapGallery . 2)     The WoonZorgwijzer uses MapGallery as viewer. The WoonZorgwijzer portal presents also plus applications of the WoonZorgwijzer with additional layers on demography/real estate/service distribution and care consumption. ",
    "url": "/docs/webmapping.html#examples",
    
    "relUrl": "/docs/webmapping.html#examples"
  },"3406": {
    "doc": "webmapping",
    "title": "Mapifaction",
    "content": "left . We also support Mapifaction, GeoDMS scripts are to generate the information products in their viewers. ",
    "url": "/docs/webmapping.html#mapifaction",
    
    "relUrl": "/docs/webmapping.html#mapifaction"
  },"3407": {
    "doc": "webmapping",
    "title": "webmapping",
    "content": "The GeoDMS is used to calculate information products. To make these products available for a larger audience, we use Webmapping products, mainly in the social-domain. ",
    "url": "/docs/webmapping.html",
    
    "relUrl": "/docs/webmapping.html"
  },"3408": {
    "doc": "windowssystem-error-createfilehandleforrwview-errorcode-32...",
    "title": "solution",
    "content": "Do not run the same project twice, wait for the first instance is finished before rerunning. ",
    "url": "/docs/windowssystem-error-createfilehandleforrwview-errorcode-32.html#solution",
    
    "relUrl": "/docs/windowssystem-error-createfilehandleforrwview-errorcode-32.html#solution"
  },"3409": {
    "doc": "windowssystem-error-createfilehandleforrwview-errorcode-32...",
    "title": "windowssystem-error-createfilehandleforrwview-errorcode-32...",
    "content": "If another instance of the GeoDMS (GUI or batch) for the same project is already running, an error like the following is generated: . The running instance locks the CalcCache, this locking results in the presented error. ",
    "url": "/docs/windowssystem-error-createfilehandleforrwview-errorcode-32.html",
    
    "relUrl": "/docs/windowssystem-error-createfilehandleforrwview-errorcode-32.html"
  },"3410": {
    "doc": "wms-support",
    "title": "related issues",
    "content": ". | issue 819 | . ",
    "url": "/docs/wms-support.html#related-issues",
    
    "relUrl": "/docs/wms-support.html#related-issues"
  },"3411": {
    "doc": "wms-support",
    "title": "wms-support",
    "content": "recent-developments: WMS Support . Since version 7.163 the GeoDMS supports web mapping services (WMS) as an alternative background-layer. In more recent GeoDMS versions some issues are solved. With a WMS scale dependent and fast background layers can be presented in the map view, without having to add/update data for a project. See background-layer for examples on how to configure. WMS services work with fixed scale levels, in the GeoDMS the user is free to choose the area of interest (and derived scale). With the pop-up menu option Zoom 1 Grid to 1 Pixel it’s easy to select a scale level with an optimal rendering quality. The GeoDMS supports at the moment the WMTS protocol and images in png and since 7.198 also in jpeg format. We have experience with multiple layers from the host server: geodata.nationaalgeoregister.nl. ",
    "url": "/docs/wms-support.html",
    
    "relUrl": "/docs/wms-support.html"
  },"3412": {
    "doc": "wms_lea",
    "title": "script",
    "content": "container ngr_layer_lea { parameter&lt;uint32&gt; nr_att := 8; parameter&lt;uint32&gt; nr_row := 13; unit&lt;uint32&gt; TileMatrixElems := range(uint32, 0, nr_att * nr_row) { attribute&lt;string&gt; values: //name , ScaleDen , Left , Top ,Width ,Height, MatrixWidth,MatrixHeight [ 'EU:3035:0' , '62779017','2000000.0','5500000.0', '256' ,'256' , '1' , '1' ,'EU:3035:1' , '31389508','2000000.0','5500000.0', '256' ,'256' , '2' , '2' ,'EU:3035:2' , '15694754','2000000.0', '5500000.0', '256' ,'256' , '4' , '4' ,'EU:3035:3' , '7847377','2000000.0', '5500000.0', '256' ,'256' , '8' , '8' ,'EU:3035:4' , '3923688','2000000.0', '5500000.0', '256' ,'256' , '16' , '16' ,'EU:3035:5' , '1961844','2000000.0', '5500000.0', '256' ,'256' , '32' , '32' ,'EU:3035:6' , '980922','2000000.0', '5500000.0', '256' ,'256' , '64' , '64' ,'EU:3035:7' , '490461', '2000000.0','5500000.0', '256' ,'256' , '128' , '128' ,'EU:3035:8' , '245230', '2000000.0','5500000.0', '256' ,'256' , '256' , '256' ,'EU:3035:9' , '122615', '2000000.0','5500000.0', '256' ,'256' , '512' , '512' ,'EU:3035:10', '61307.6', '2000000.0','5500000.0', '256' ,'256' , '1024' , '1024' ,'EU:3035:11', '30653.8', '2000000.0','5500000.0', '256' ,'256' , '2048' , '2048' ,'EU:3035:12', '15326.9', '2000000.0','5500000.0', '256' ,'256' , '4096' , '4096' ]; } unit&lt;uint32&gt; TileMatrix := range(uint32, 0, nr_row) { attribute&lt;.&gt; id := id(.); attribute&lt;string&gt; name := TileMatrixElems/values[value(id * nr_att + 0, TileMatrixElems)]; attribute&lt;float64&gt; ScaleDenominator := float64(TileMatrixElems/values[value(id * nr_att + 1, TileMatrixElems)]); attribute&lt;float64&gt; LeftCoord := float64(TileMatrixElems/values[value(id * nr_att + 2, TileMatrixElems)]); attribute&lt;float64&gt; TopCoord := float64(TileMatrixElems/values[value(id * nr_att + 3, TileMatrixElems)]); attribute&lt;uint16&gt; TileWidth := uint16(TileMatrixElems/values[value(id * nr_att + 4, TileMatrixElems)]); attribute&lt;uint16&gt; TileHeight := uint16(TileMatrixElems/values[value(id * nr_att + 5, TileMatrixElems)]); attribute&lt;uint32&gt; MatrixWidth := uint32(TileMatrixElems/values[value(id * nr_att + 6, TileMatrixElems)]); attribute&lt;uint32&gt; MatrixHeight := uint32(TileMatrixElems/values[value(id * nr_att + 7, TileMatrixElems)]); } // wmts request params parameter&lt;string&gt; layer := 'eoc:basemap'; parameter&lt;string&gt; TileMatrixSet := 'EU:3035'; parameter&lt;string&gt; VERSION := '1.0.0'; parameter&lt;string&gt; REQUEST := 'GetTile'; parameter&lt;string&gt; STYLE := '_empty'; parameter&lt;string&gt; FORMAT := 'image/png'; parameter&lt;string&gt; host := 'tiles.geoservice.dlr.de'; parameter&lt;string&gt; url := 'https://' + host; parameter&lt;string&gt; unit := \"metre\"; parameter&lt;string&gt; target := '/service/wmts?SERVICE=WMTS&amp;VERSION=' + VERSION + '&amp;REQUEST=' + REQUEST + '&amp;LAYER=' + layer + '&amp;STYLE=' + STYLE + '&amp;TileMatrixSet=' + TileMatrixSet + '&amp;TILEMATRIX=' + TileMatrixSet + ':@TM@'+ '&amp;TILEROW=@TR@&amp;TILECOL=@TC@&amp;FORMAT=' + FORMAT; } . ",
    "url": "/docs/wms_lea.html#script",
    
    "relUrl": "/docs/wms_lea.html#script"
  },"3413": {
    "doc": "wms_lea",
    "title": "wms_lea",
    "content": "background-layer . ",
    "url": "/docs/wms_lea.html",
    
    "relUrl": "/docs/wms_lea.html"
  },"3414": {
    "doc": "wms_ll",
    "title": "script",
    "content": "unit&lt;dpoint&gt; LatLong : SpatialReference = \"EPSG:4326\", DialogData = \"wms_layer_llh\" { parameter&lt;float32&gt; ViewPortMinSize := 100f / 3600f; parameter&lt;float32&gt; PenWorldWidth := 10f / 3600f, DialogType = \"PenWorldWidth\"; parameter&lt;float32&gt; LabelWorldSize := 10f / 3600f, DialogType = \"LabelWorldSize\"; parameter&lt;float32&gt; SymbolWorldSize := 10f / 3600f, DialogType = \"SymbolWorldSize\"; } container wms_layer_llh { parameter&lt;uint32&gt; nr_att := 8; parameter&lt;uint32&gt; nr_row := 16; unit&lt;uint32&gt; TileMatrixElems := range(uint32, 0, nr_att * nr_row) { attribute&lt;string&gt; values: //name , ScaleDen , Left , Top ,Width ,Height, MatrixWidth,MatrixHeight [ 'EPSG:4326:0' , '279541132.0143589', '-180.0', '90.0', '256' ,'256' , '2' , '1' ,'EPSG:4326:1' , '139770566.00717944', '-180.0', '90.0', '256' ,'256' , '4' , '2' ,'EPSG:4326:2' , '69885283.00358972', '-180.0', '90.0', '256' ,'256' , '8' , '4' ,'EPSG:4326:3' , '34942641.50179486', '-180.0', '90.0', '256' ,'256' , '16' , '8' ,'EPSG:4326:4' , '17471320.75089743', '-180.0', '90.0', '256' ,'256' , '32' , '16' ,'EPSG:4326:5' , '8735660.375448715', '-180.0', '90.0', '256' ,'256' , '64' , '32' ,'EPSG:4326:6' , '4367830.1877243575', '-180.0', '90.0', '256' ,'256' , '128' , '64' ,'EPSG:4326:7' , '2183915.0938621787', '-180.0', '90.0', '256' ,'256' , '256' , '128' ,'EPSG:4326:8' , '1091957.5469310894', '-180.0', '90.0', '256' ,'256' , '512' , '256' ,'EPSG:4326:9' , '545978.7734655447', '-180.0', '90.0', '256' ,'256' , '1024' , '512' ,'EPSG:4326:10', '272989.38673277234', '-180.0', '90.0', '256' ,'256' , '2048' , '1024' ,'EPSG:4326:11', '136494.69336638617', '-180.0', '90.0', '256' ,'256' , '4096' , '2048' ,'EPSG:4326:12', '68247.34668319309', '-180.0', '90.0', '256' ,'256' , '8192' , '4096' ,'EPSG:4326:13', '34123.67334159654', '-180.0', '90.0', '256' ,'256' , '16384' , '8192' ,'EPSG:4326:14', '17061.83667079827', '-180.0', '90.0', '256' ,'256' , '32768' , '16384' ,'EPSG:4326:15', '8530.918335399136', '-180.0', '90.0', '256' ,'256' , '65536' , '32768' ]; } unit&lt;uint32&gt; TileMatrix := range(uint32, 0, nr_row) { attribute&lt;.&gt; id := id(.); attribute&lt;string&gt; name := TileMatrixElems/values[value(id * nr_att + 0, TileMatrixElems)]; attribute&lt;float64&gt; ScaleDenominator := float64(TileMatrixElems/values[value(id * nr_att + 1, TileMatrixElems)]); attribute&lt;float64&gt; LeftCoord := float64(TileMatrixElems/values[value(id * nr_att + 2, TileMatrixElems)]); attribute&lt;float64&gt; TopCoord := float64(TileMatrixElems/values[value(id * nr_att + 3, TileMatrixElems)]); attribute&lt;uint16&gt; TileWidth := uint16(TileMatrixElems/values[value(id * nr_att + 4, TileMatrixElems)]); attribute&lt;uint16&gt; TileHeight := uint16(TileMatrixElems/values[value(id * nr_att + 5, TileMatrixElems)]); attribute&lt;uint32&gt; MatrixWidth := uint32(TileMatrixElems/values[value(id * nr_att + 6, TileMatrixElems)]); attribute&lt;uint32&gt; MatrixHeight := uint32(TileMatrixElems/values[value(id * nr_att + 7, TileMatrixElems)]); } parameter&lt;string&gt; host := 'tiles.geoservice.dlr.de'; parameter&lt;string&gt; layer := 'eoc:basemap'; parameter&lt;string&gt; url := 'https://' + host; parameter&lt;string&gt; unit := \"degree\"; parameter&lt;string&gt; target := '/service/wmts/?SERVICE=WMTS&amp;VERSION=1.0.0&amp;REQUEST=GetTile&amp;LAYER=' + layer + '&amp;STYLE=_empty&amp;TileMatrixSet=EPSG%3A4326&amp;TILEMATRIX=EPSG%3A4326%3A@TM@'+ '&amp;TILEROW=@TR@&amp;TILECOL=@TC@&amp;FORMAT=image%2Fpng'; } . ",
    "url": "/docs/wms_ll.html#script",
    
    "relUrl": "/docs/wms_ll.html#script"
  },"3415": {
    "doc": "wms_ll",
    "title": "wms_ll",
    "content": "background-layer . ",
    "url": "/docs/wms_ll.html",
    
    "relUrl": "/docs/wms_ll.html"
  },"3416": {
    "doc": "wms_rdc",
    "title": "description",
    "content": "The configuration below describes examples for WMTS layers from the PDOK. Often the container wmts_layer and it’s subitem are configured in a separate dms file and included in a Geography container. The example presents how a how-to-configure-a-coordinate-system, with as base unit: point_rd_base. The dialogdata for this unit need to refer to the container in which a WMS layer is configured. This container need to contain a target parameter, used to make the relevant requests to the WMTS server. ",
    "url": "/docs/wms_rdc.html#description",
    
    "relUrl": "/docs/wms_rdc.html#description"
  },"3417": {
    "doc": "wms_rdc",
    "title": "script",
    "content": "unit&lt;fpoint&gt; point_rd_base      : DialogData = \"wmts_layer\"     , Format    = \"EPSG:28992\"; unit&lt;fpoint&gt; point_rd := range(point_rd_base, point(300000[m],0[m]), point(625000[m],280000[m])); container wmts_layer  {   parameter &lt;uint32&gt; nr_att :=  8;   parameter &lt;uint32&gt; nr_row := 15;   unit&lt;uint32&gt; TileMatrixEl := range(uint32, 0, nr_att * nr_row)    {       attribute&lt;string&gt; values:               //name         , ScaleDen    , Top        , Left      ,Width ,Height , MatrixWidth, MatrixHeight&lt;/span&gt;       [         'EPSG:28992:0' ,'12288000'   ,'-285401.92', '903402.0', '256' ,'256' ,    '1'  ,    '1'        ,'EPSG:28992:1' , '6144000'   ,'-285401.92', '903402.0', '256' ,'256' ,    '2'  ,    '2'        ,'EPSG:28992:2' , '3072000'   ,'-285401.92', '903402.0', '256' ,'256' ,    '4'  ,    '4'        ,'EPSG:28992:3' , '1536000'   ,'-285401.92', '903402.0', '256' ,'256' ,    '8'  ,    '8'        ,'EPSG:28992:4' ,  '768000'   ,'-285401.92', '903402.0', '256' ,'256' ,   '16'  ,   '16'        ,'EPSG:28992:5' ,  '384000'   ,'-285401.92', '903402.0', '256' ,'256' ,   '32'  ,   '32'        ,'EPSG:28992:6' ,  '192000'   ,'-285401.92', '903402.0', '256' ,'256' ,   '64'  ,   '64'        ,'EPSG:28992:7' ,   '96000'   ,'-285401.92', '903402.0', '256' ,'256' ,  '128'  ,  '128'        ,'EPSG:28992:8' ,   '48000'   ,'-285401.92', '903402.0', '256' ,'256' ,  '256'  ,  '256'        ,'EPSG:28992:9' ,   '24000'   ,'-285401.92', '903402.0', '256' ,'256' ,  '512'  ,  '512'        ,'EPSG:28992:10',   '12000'   ,'-285401.92', '903402.0', '256' ,'256' , '1024'  , '1024'        ,'EPSG:28992:11',    '6000'   ,'-285401.92', '903402.0', '256' ,'256' , '2048'  , '2048'        ,'EPSG:28992:12',    '3000'   ,'-285401.92', '903402.0', '256' ,'256' , '4096'  , '4096'        ,'EPSG:28992:13',    '1500'   ,'-285401.92', '903402.0', '256' ,'256' , '8192'  , '8192'        ,'EPSG:28992:14',     '750'   ,'-285401.92', '903402.0', '256' ,'256' ,'16384'  ,'16384'      ] ;    }     unit&lt;uint32&gt; TileMatrix := range(uint32, 0, nr_row)    {       attribute&lt;.&gt;       id               := id(.);       attribute&lt;string&gt;  name             := TileMatrixEl/values[value(id * nr_att + 0, TileMatrixEl)];       attribute&lt;float64&gt; ScaleDenominator := float64(TileMatrixEl/values[value(id * nr_att + 1, TileMatrixEl)]);       attribute&lt;float64&gt; LeftCoord        := float64(TileMatrixEl/values[value(id * nr_att + 2, TileMatrixEl)]);       attribute&lt;float64&gt; TopCoord         := float64(TileMatrixEl/values[value(id * nr_att + 3, TileMatrixEl)]);       attribute&lt;uint16&gt;  TileWidth        :=  uint16(TileMatrixEl/values[value(id * nr_att + 4, TileMatrixEl)]);       attribute&lt;uint16&gt;  TileHeight       :=  uint16(TileMatrixEl/values[value(id * nr_att + 5, TileMatrixEl)]);       attribute&lt;uint32&gt;  MatrixWidth      :=  uint32(TileMatrixEl/values[value(id * nr_att + 6, TileMatrixEl)]);       attribute&lt;uint32&gt;  MatrixHeight     :=  uint32(TileMatrixEl/values[value(id * nr_att + 7, TileMatrixEl)]);    }     // Different examples of tested layers &lt;/span&gt;     parameter&lt;string&gt; layer  := 'grijs';     // parameter&lt;string&gt; layer  := 'pastel'; &lt;/span&gt;     // parameter&lt;string&gt; layer  := 'standaard'; &lt;/span&gt;     // parameter&lt;string&gt; layer  := 'water'; &lt;/span&gt;        // parameter&lt;string&gt; layer  := 'Actueel_ortho25'; &lt;/span&gt;      // parameter&lt;string&gt; image_format := 'jpeg'; &lt;/span&gt;     parameter&lt;string&gt; image_format := 'png8';     parameter&lt;string&gt; host := 'service.pdok.nl';     parameter&lt;string&gt; target := '/brt/achtergrondkaart/wmts/v2_0'        '?SERVICE=WMTS'        '&amp;REQUEST=GetTile'        '&amp;VERSION=1.0.0'        '&amp;LAYER=' + layer +        '&amp;TILEMATRIXSET=EPSG:28992'        '&amp;TILEMATRIX=@TM@'        '&amp;TILEROW=@TR@'        '&amp;TILECOL=@TC@'        '&amp;FORMAT=image/'+image_format   ; } . ",
    "url": "/docs/wms_rdc.html#script",
    
    "relUrl": "/docs/wms_rdc.html#script"
  },"3418": {
    "doc": "wms_rdc",
    "title": "explanation",
    "content": "In this example the brtachtergrondkaart layer: grijs is used as background layer, but other layers can be selected by (un)commenting other layer lines. If the layer serves .png files, no image_format needs to be configured. If the layer serves .jpeg files (often used for photo’s), such as Actueel_ortho25, uncomment also the image_format = ‘jpeg’ configuration rule. ",
    "url": "/docs/wms_rdc.html#explanation",
    
    "relUrl": "/docs/wms_rdc.html#explanation"
  },"3419": {
    "doc": "wms_rdc",
    "title": "wms_rdc",
    "content": "background-layer . ",
    "url": "/docs/wms_rdc.html",
    
    "relUrl": "/docs/wms_rdc.html"
  },"3420": {
    "doc": "wms_wm",
    "title": "script",
    "content": "container tms_layer_osm_webmercator { parameter&lt;uint32&gt; nr_att := 8; parameter&lt;uint32&gt; nr_row := 20; unit&lt;uint32&gt; TileMatrixElems := range(uint32, 0, nr_att * nr_row) { attribute&lt;string&gt; values: //name , ScaleDen , Left , Top ,Width ,Height, MatrixWidth,MatrixHeight [ 'GLOBAL_WEBMERCATOR:0' , '559082264.0287176' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '1' , '1' ,'GLOBAL_WEBMERCATOR:1' , '279541132.0143588' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '2' , '2' ,'GLOBAL_WEBMERCATOR:2' , '139770566.0071794' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '4' , '4' ,'GLOBAL_WEBMERCATOR:3' , '69885283.0035897' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '8' , '8' ,'GLOBAL_WEBMERCATOR:4' , '34942641.50179485' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '16' , '16' ,'GLOBAL_WEBMERCATOR:5' , '17471320.750897426' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '32' , '32' ,'GLOBAL_WEBMERCATOR:6' , '8735660.375448713' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '64' , '64' ,'GLOBAL_WEBMERCATOR:7' , '4367830.187724357' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '128' , '128' ,'GLOBAL_WEBMERCATOR:8' , '2183915.0938621783' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '256' , '256' ,'GLOBAL_WEBMERCATOR:9' , '1091957.5469310891' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '512' , '512' ,'GLOBAL_WEBMERCATOR:10' , '545978.7734655446' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '1024' , '1024' ,'GLOBAL_WEBMERCATOR:11' , '272989.3867327723' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '2048' , '2048' ,'GLOBAL_WEBMERCATOR:12' , '136494.69336638614' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '4096' , '4096' ,'GLOBAL_WEBMERCATOR:13' , '68247.34668319307' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '8192' , '8192' ,'GLOBAL_WEBMERCATOR:14' , '34123.673341596535' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '16384' , '16384' ,'GLOBAL_WEBMERCATOR:15' , '17061.836670798268' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '32768' , '32768' ,'GLOBAL_WEBMERCATOR:16' , '8530.918335399134' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '65536' , '65536' ,'GLOBAL_WEBMERCATOR:17' , '4265.459167699567' ,'-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '131072' , '131072' ,'GLOBAL_WEBMERCATOR:18' , '2132.7295838497835','-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '262144' , '262144' ,'GLOBAL_WEBMERCATOR:19' , '1066.3647919248917','-20037508.342789244 .0','20037508.342789244.0', '256' ,'256' , '524288' , '524288' ]; } unit&lt;uint32&gt; TileMatrix := range(uint32, 0, nr_row) { attribute&lt;.&gt; id := id(.); attribute&lt;string&gt; name := TileMatrixElems/values[value(id * nr_att + 0, TileMatrixElems)]; attribute&lt;float64&gt; ScaleDenominator := float64(TileMatrixElems/values[value(id * nr_att + 1, TileMatrixElems)]); attribute&lt;float64&gt; LeftCoord := float64(TileMatrixElems/values[value(id * nr_att + 2, TileMatrixElems)]); attribute&lt;float64&gt; TopCoord := float64(TileMatrixElems/values[value(id * nr_att + 3, TileMatrixElems)]); attribute&lt;uint16&gt; TileWidth := uint16(TileMatrixElems/values[value(id * nr_att + 4, TileMatrixElems)]); attribute&lt;uint16&gt; TileHeight := uint16(TileMatrixElems/values[value(id * nr_att + 5, TileMatrixElems)]); attribute&lt;uint32&gt; MatrixWidth := uint32(TileMatrixElems/values[value(id * nr_att + 6, TileMatrixElems)]); attribute&lt;uint32&gt; MatrixHeight := uint32(TileMatrixElems/values[value(id * nr_att + 7, TileMatrixElems)]); } // wmts request params parameter&lt;string&gt; layer := 'osm-default'; parameter&lt;string&gt; STYLE := 'default'; parameter&lt;string&gt; FORMAT := 'png'; parameter&lt;string&gt; host := 'tile.openstreetmap.org'; parameter&lt;string&gt; url := 'https://' + host; parameter&lt;string&gt; unit := \"metre\"; parameter&lt;string&gt; target := '/@TM@/@TC@/@TR@.' + format ; } . ",
    "url": "/docs/wms_wm.html#script",
    
    "relUrl": "/docs/wms_wm.html#script"
  },"3421": {
    "doc": "wms_wm",
    "title": "wms_wm",
    "content": "background-layer . ",
    "url": "/docs/wms_wm.html",
    
    "relUrl": "/docs/wms_wm.html"
  },"3422": {
    "doc": "wmts-background-layer",
    "title": "description",
    "content": "In the GeoDMS you can configure a background layer. This layer is always visible when you open a grid or vector layer in the map view. The layer is attached to a coordinate system. ",
    "url": "/docs/wmts-background-layer.html#description",
    
    "relUrl": "/docs/wmts-background-layer.html#description"
  },"3423": {
    "doc": "wmts-background-layer",
    "title": "background layer scripts for different coordinate systems",
    "content": ". | wms_rdc | wms_ll | wms_lea | wms_wm | . ",
    "url": "/docs/wmts-background-layer.html#background-layer-scripts-for-different-coordinate-systems",
    
    "relUrl": "/docs/wmts-background-layer.html#background-layer-scripts-for-different-coordinate-systems"
  },"3424": {
    "doc": "wmts-background-layer",
    "title": "since version",
    "content": "Since version 7.163 the GeoDMS supports web mapping services (https://en.wikipedia.org/wiki/Web_Map_Tile_Service)[WMTS] as alternative background-layer. Since version 7.326 the GeoDMS supports only the WMTS and TMS https protocols, using openssl. ",
    "url": "/docs/wmts-background-layer.html#since-version",
    
    "relUrl": "/docs/wmts-background-layer.html#since-version"
  },"3425": {
    "doc": "wmts-background-layer",
    "title": "wmts-background-layer",
    "content": "configuration-examples . ",
    "url": "/docs/wmts-background-layer.html",
    
    "relUrl": "/docs/wmts-background-layer.html"
  },"3426": {
    "doc": "wpoint",
    "title": "concept",
    "content": ". | wpoint is a Point(Group) value-type with two coordinates of the 16 bits (2 bytes) unsigned integer value type: uint16. | wpoint() is a function converting other point data-item or unit to the wpoint value type. | . This page describes the wpoint() function. ",
    "url": "/docs/wpoint.html#concept",
    
    "relUrl": "/docs/wpoint.html#concept"
  },"3427": {
    "doc": "wpoint",
    "title": "syntax",
    "content": ". | wpoint(a) | . ",
    "url": "/docs/wpoint.html#syntax",
    
    "relUrl": "/docs/wpoint.html#syntax"
  },"3428": {
    "doc": "wpoint",
    "title": "definition",
    "content": "wpoint(a) converts the coordinates of a point tree-item a to the wpoint (uint16 coordinates) value type. ",
    "url": "/docs/wpoint.html#definition",
    
    "relUrl": "/docs/wpoint.html#definition"
  },"3429": {
    "doc": "wpoint",
    "title": "applies to",
    "content": ". | data item or unit with PointGroup value type | . ",
    "url": "/docs/wpoint.html#applies-to",
    
    "relUrl": "/docs/wpoint.html#applies-to"
  },"3430": {
    "doc": "wpoint",
    "title": "example",
    "content": "attribute&lt;wpoint&gt; wpointA (ADomain) := wpoint(A); . | A(fpoint) | wpointA | . | {0,0} | {0,0} | . | {1,1} | {1,1} | . | {1000000,10000000} | null | . | {-2.5, 2.5} | null | . | {99.9, 99.9} | {99,99} | . ADomain, nr of rows = 5 . ",
    "url": "/docs/wpoint.html#example",
    
    "relUrl": "/docs/wpoint.html#example"
  },"3431": {
    "doc": "wpoint",
    "title": "wpoint",
    "content": "conversion-functions wpoint . ",
    "url": "/docs/wpoint.html",
    
    "relUrl": "/docs/wpoint.html"
  },"3432": {
    "doc": "wpolygon",
    "title": "syntax",
    "content": ". | wpolygon(a) | . ",
    "url": "/docs/wpolygon.html#syntax",
    
    "relUrl": "/docs/wpolygon.html#syntax"
  },"3433": {
    "doc": "wpolygon",
    "title": "definition",
    "content": "wpolygon(a) converts the coordinates of a point tree-item a with a sequence of points (arc or polygon) to the wpoint (uint16 coordinates) value-type. ",
    "url": "/docs/wpolygon.html#definition",
    
    "relUrl": "/docs/wpolygon.html#definition"
  },"3434": {
    "doc": "wpolygon",
    "title": "applies to",
    "content": ". | data-item with Point value type and composition arc or polygon | . ",
    "url": "/docs/wpolygon.html#applies-to",
    
    "relUrl": "/docs/wpolygon.html#applies-to"
  },"3435": {
    "doc": "wpolygon",
    "title": "example",
    "content": "attribute&lt;spoint&gt; wpolygonA (SDomain, polygon) := wpolygon(A); . | A(fpolygon) | wpolygonA | . | {2:{0,0},{1,1}} | {2:{0,0},{1,1}} | . | {3: {1E+007,1E+007},{-2.5,-2.5},{99.9,99.9}} | {3: {null,null},{null,null},{99,99}} | . ",
    "url": "/docs/wpolygon.html#example",
    
    "relUrl": "/docs/wpolygon.html#example"
  },"3436": {
    "doc": "wpolygon",
    "title": "wpolygon",
    "content": "conversion-functions wpolygon . ",
    "url": "/docs/wpolygon.html",
    
    "relUrl": "/docs/wpolygon.html"
  },"3437": {
    "doc": "write-data",
    "title": "example",
    "content": "container WithContext {    template export    {       // begin case parameters       parameter&lt;uint32&gt; n;       // end case parameters       unit&lt;uint32&gt; i := range(uint32, 0, n)       ,  StorageName = \"= '%LocalDataProjDir%' + PropValue(., 'FullName') + '/i.dbf'\"       {          attribute&lt;uint32&gt;  sqr  := id(i) * id(i);          attribute&lt;float64&gt; sqrt := sqrt(float64(sqr));       }    }    container exports    {       container a := export(30);       container b := export(40);    } } . ",
    "url": "/docs/write-data.html#example",
    
    "relUrl": "/docs/write-data.html#example"
  },"3438": {
    "doc": "write-data",
    "title": "file and folder",
    "content": "The StorageName property configures both folder as well as file name for the export. If the item for which the StorageName is configured is updated, the resulting storage will be made. In the example a file i.dbf is written when item i is updated. The folder consists of two components: . | %LocalDataProjDir%, a folders-and-placeholders referring to the LocalDataProjDir on your local machine | propvalue (., ‘FullName’), a context string referring to the full path of the parent of the item with the StorageName. By using this context string, the resulting folder for the two case instantions will differ. | . We advice to always configure both folder and file name. If no folder is configured, the storage will be written to your %ConfigDir%. If no file is configured, an error is generated. Since GeoDMSVersion 7.140, it is also possible to add the %configname% placeholder to your foldername. This is useful if you project consists of multiple configurations (e.g. Vesta). ",
    "url": "/docs/write-data.html#file-and-folder",
    
    "relUrl": "/docs/write-data.html#file-and-folder"
  },"3439": {
    "doc": "write-data",
    "title": "write-data",
    "content": "Data is written to a storage with a storagemanager if: . | At least the StorageName property is configured to a data-item or it’s parent-item. Often other StorageManager properties are also needed/useful. | The StorageManager supports writing data. | An expression is configured for the data item, or derived from it’s parent item. | The property disablestorage is not configured or set or set to false (default value). | The property storagereadonly is not configured or set to false (default value). | . The last two properties work hierarchical, if configured to a parent item they also apply to each of their subitem. They can be overruled for specific subitems. ",
    "url": "/docs/write-data.html",
    
    "relUrl": "/docs/write-data.html"
  },"3440": {
    "doc": "xdb-storagemanager",
    "title": "non-delimited fixed-length files",
    "content": "Non-delimited fixed-length ASCII files can be read with the XDB storagemanager. This StorageManager reads data from two different files, with the same file name but with different extensions: . | An .xdb file: a meta file describing the contents of the primary data .txt file. | The .txt file: a file with the actual values (primary data). | . Example: . unit&lt;uint32&gt; Table: StorageName = \"%SourceDataDir%/ASCII/XDB.xdb\" {    attribute&lt;int32&gt;   IntegerAtt;    attribute&lt;float32&gt; FloatAtt; } . Only a reference need to be configured to the .xdb file. The accompanying .txt file needs to be located in the same folder. Writing data to non-delimited fixed length ASCII files with the XDB storage manager is not supported. Use the gdal.vect to read data from and write data to delimited ASCII files. Example: XDB.xdb: . 5 0 IntegerAtt 5 1 FloatAtt 7 9 . The first row always contains two values separated by a space: . | The first value determines the number of rows with primary data in the .txt file and is used to determine the NrOfRows of the domain-unit used for these data values. In the example, this number is 5. | The second value indicates the number of header lines in the .txt file. In the example, no header lines occur so this number is 0. | . In the following lines all occurring attribute need to be described, each with the format: name, offset and type, separated by spaces: . | The name is the same name as used for the attribute in the GeoDMS configuration. In the example the general names IntegerAtt and FloatAtt are used. | The offset indicates the number of positions that are used for the attribute. The start position in each line is always the first position. In the example 5 positions are used for the IntegerAtt and after that 7 positions for the FloatAtt. | The type is used to determine the value-type of the resulting attribute. The following codes can be configured: . | 0: uint32 | 1: int32 | 8: float64 | 9: float32 | . | . In the example the codes 1 (int32) are used for the IntegerAtt and 9 (Float32) for the FloatAtt. ",
    "url": "/docs/xdb-storagemanager.html#non-delimited-fixed-length-files",
    
    "relUrl": "/docs/xdb-storagemanager.html#non-delimited-fixed-length-files"
  },"3441": {
    "doc": "xdb-storagemanager",
    "title": "the .txt file",
    "content": "The .txt file accompanying the .xdb file looks as follows: XDB.txt: . 0     0 1     1 256  9999999 -100  -2.5 9999  99.9 . ",
    "url": "/docs/xdb-storagemanager.html#the-txt-file",
    
    "relUrl": "/docs/xdb-storagemanager.html#the-txt-file"
  },"3442": {
    "doc": "xdb-storagemanager",
    "title": "xdb-storagemanager",
    "content": "Note !!! : The Xdb StorageManager is not supported at the moment, as .txt files in Unix format are not correctly interpreted. ",
    "url": "/docs/xdb-storagemanager.html",
    
    "relUrl": "/docs/xdb-storagemanager.html"
  },"3443": {
    "doc": "xml",
    "title": "Gml",
    "content": "Geographic vector data can also be stored in XML files, often embedded in GML. GML is the XML grammar defined by the Open Geospatial Consortium (OGC) to express geographical features. The GeoDMS can read this type of data from XML/GML files, but it requires some processing (especially for polygon data). The following examples show how to read and process this type of data to use it in GeoDMS projects: . | polygon-features-from-xml-gml-files (BAG panden) | point-features-from-xml-gml-files (BAG verblijfsobjecten) | . Data can be read from a gml file, but it is important to configure the composition explicitly. An example like: . unit&lt;uint32&gt; poly_gml : StorageName = \"%projDir%/data/inspire-pv-ps.nlps-nnn.gml\" , StorageType = \"gdal.vect\" , StorageReadOnly = \"True\" { } . will result in a geometry as well know text, but not as polygon data. Configure such a file as follows: . unit&lt;uint32&gt; poly_gml : StorageName = \"%projDir%/data/inspire-pv-ps.nlps-nnn.gml\" , StorageType = \"gdal.vect\" , StorageReadOnly = \"True\" { attribute&lt;fpoint&gt; geometry (poly); } . where you can replace fpoint by the how-to-configure-a-coordinate-system used. ",
    "url": "/docs/xml.html#gml",
    
    "relUrl": "/docs/xml.html#gml"
  },"3444": {
    "doc": "xml",
    "title": "xml",
    "content": "XML (Extensible Markup Language) is a markup language often used as exchange format for primary data. With the GeoDMS data can be read from xml files in two steps: . | Use the str-storagemanager to read the xml data in a string data-item. | Use the parse_xml function to convert the xml data with an xml scheme into a set of configured data-item. | . ",
    "url": "/docs/xml.html",
    
    "relUrl": "/docs/xml.html"
  },"3445": {
    "doc": "xy-order",
    "title": "default",
    "content": "By default the orientation of point items in the GeoDMS geometric-functions is Y, X (column/row). This originates from the fact that the GeoDMS was developed to calculate mainly with grid-data, in which the orientation is usually colum / row. ",
    "url": "/docs/xy-order.html#default",
    
    "relUrl": "/docs/xy-order.html#default"
  },"3446": {
    "doc": "xy-order",
    "title": "setting",
    "content": "Later on, when the GeoDMS was used more and more for projects using also (and mainly) vector-data, a setting was introduced in the config.ini to set the orientation (Y,X) or (X,Y). YX : For projects with mainly grid-data we advice to keep the default orientation Y, X. No settings has to be added to the config.ini or the following setting can be added: . ConfigPointColRow=0 . XY : For projects with mainly vector-data we advice to overrule the order to X, Y by the following setting in the config.ini file: . ConfigPointColRow=1 . ",
    "url": "/docs/xy-order.html#setting",
    
    "relUrl": "/docs/xy-order.html#setting"
  },"3447": {
    "doc": "xy-order",
    "title": "examples",
    "content": "The following two examples show how to configure a geographic grid-domain, based on the setting for the X,Y order: . I (default order of Y, X): . unit&lt;fpoint&gt; rdc_meter: Range = \"[{300000, 0}, {625000, 280000})\"; parameter&lt;rdc_meter&gt; TopLeftCoord := point(float32(625000), float32(10000), rdc_meter); parameter&lt;int16&gt; nrofrows := int16(3250); parameter&lt;int16&gt; nrofcols := int16(2700); unit&lt;spoint&gt; rdc_100m :=  range(       gridset(          rdc_meter         ,point(float32(-100), float32(100), rdc_meter)         ,TopLeftCoord         ,spoint       )       ,point(int16(0), int16(0))       ,point(nrofrows, nrofcols)    ) ,  Descr = \"rdCoords/100m van NW naar SE (3250 rows, 2700 cols)\"; . II (order overruled to X, Y): . unit&lt;fpoint&gt; rdc_meter: Range = \"[{0, 300000}, {280000, 625000})\"; parameter&lt;rdc_meter&gt; TopLeftCoord := point(float32(10000), float32(625000), rdc_meter); parameter&lt;int16&gt; nrofrows := int16(3250); parameter&lt;int16&gt; nrofcols := int16(2700); unit&lt;spoint&gt; rdc_100m  :=  range(        gridset(           rdc_meter          ,point(float32(100), float32(-100), rdc_meter)          ,TopLeftCoord          ,spoint        )        ,point(int16(0), int16(0))        ,point(nrofcols, nrofrows)    ) ,  Descr = \"rdCoords/100m van NW naar SE (3250 rows, 2700 cols)\"; . ",
    "url": "/docs/xy-order.html#examples",
    
    "relUrl": "/docs/xy-order.html#examples"
  },"3448": {
    "doc": "xy-order",
    "title": "xy-order",
    "content": " ",
    "url": "/docs/xy-order.html",
    
    "relUrl": "/docs/xy-order.html"
  }
}
